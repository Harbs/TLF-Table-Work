<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.charts"><apiName>mx.charts</apiName><apiDetail/><apiClassifier id="mx.charts:ColumnChart"><apiName>ColumnChart</apiName><shortdesc>
  Das ColumnChart-Steuerelement stellt die Daten als eine Serie vertikaler Säulen dar, deren Höhe durch Datenwerte bestimmt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="labelClass" owner="mx.charts:ColumnChart" playerVersion="Flash10.2" type="Class">
<description>
  Die Klasse, die von dieser Komponente für die Darstellung von Beschriftungen verwendet wird.
   <p>Es kann entweder die mx.controls.Label-Klasse oder die spark.components.Label-Klasse festgelegt werden.</p>
   </description>
<default>spark.components.Label
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="maxColumnWidth" owner="mx.charts:ColumnChart" playerVersion="Flash9" type="Number">
<description>
  Gibt die Breite der Spalten in Pixeln an. Als eigentliche Säulenbreite wird entweder der Wert dieser Eigenschaft oder der Eigenschaft <codeph>columnWidthRatio</codeph> verwendet, abhängig davon, welcher Wert kleiner ist. Bei gruppierten Säulen wird dieser Raum anteilsmäßig zwischen den Säulen in jeder Gruppe aufgeteilt. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnWidthRatio" owner="mx.charts:ColumnChart" playerVersion="Flash9" type="Number">
<description>
  Gibt durch einen Wert zwischen 0 und 1 die Breite der zu zeichnenden Säulen im Verhältnis zur Kategoriebreite an. Beim Wert 1 wird der gesamte Raum verwendet, beim Wert 0,6 dagegen 60 % des verfügbaren Raums der Säule. Als eigentliche Säulenbreite wird entweder der Wert der Eigenschaft <codeph>columnWidthRatio</codeph> oder der Eigenschaft <codeph>maxColumnWidth</codeph> verwendet, abhängig davon, welcher Wert kleiner ist. Bei gruppierten Säulen wird dieser Raum anteilsmäßig zwischen den Säulen in jeder Gruppe aufgeteilt. Der Standardwert ist 0,65.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:ColumnChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:ColumnChart
    <strong>Properties</strong>
    extendLabelToEnd="false|true"
    maxLabelWidth="<i>50</i>"
    showLabelVertically="false|true"
    type="<i>clustered|overlaid|stacked|100%</i>"
 
    <strong>Styles</strong>
    columnWidthRatio=".65"
    maxColumnWidth="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  Das ColumnChart-Steuerelement stellt die Daten als eine Serie vertikaler Säulen dar, deren Höhe durch Datenwerte bestimmt wird. Mit ColumnChart können viele verschiedene Diagramme erstellt werden, beispielsweise einfache, gruppierte oder gestapelte Säulen, gestapelte Säulen, die zusammen 100 % ergeben, und Diagramme mit Höchst- und Tiefstwerten. 
  
  <p>Das ColumnChart-Steuerelement erwartet, dass die Eigenschaft <codeph>series</codeph> ein Array von ColumnSeries-Objekten enthält.</p>
   <p>Säulendiagramme von Typ Gestapelt und 100% überschreiben die Eigenschaft <codeph>minField</codeph> ihrer ColumnSeries-Objekte.</p>
   </apiDesc><example conref="Column_BarChartExample.mxml"><swfblock conref="examples/Column_BarChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#ColumnSeries"><linktext>mx.charts.series.ColumnSeries</linktext></link></related-links><apiConstructor id="mx.charts:ColumnChart:ColumnChart"><apiName>ColumnChart</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:ColumnChart:extendLabelToEnd:get"><apiName>extendLabelToEnd</apiName><shortdesc>
     Bestimmt, ob Datenbeschriftungen bis zum Ende des Diagramms erweitert werden können.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
     Bestimmt, ob Datenbeschriftungen bis zum Ende des Diagramms erweitert werden können. Wenn Sie diesen Wert auf „true“ setzen, können Beschriftungen den gesamten Raum zwischen dem Element und der Diagrammgrenze einnehmen. Andernfalls sind Datenbeschriftungen auf den Raum beschränkt, der ihrem Diagrammelement entspricht.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ColumnChart:maxLabelWidth:get"><apiName>maxLabelWidth</apiName><shortdesc>
     Bestimmt die maximale Breite von Beschriftungen in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>50
      
      </apiDefaultValue></apiValueDef><apiDesc>
     Bestimmt die maximale Breite von Beschriftungen in Pixeln.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ColumnChart:showLabelVertically:get"><apiName>showLabelVertically</apiName><shortdesc>
     Bestimmt, ob die Datenbeschriftungen vertikal angezeigt werden können.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
     Bestimmt, ob die Datenbeschriftungen vertikal angezeigt werden können. Wenn Sie dies auf „true“ setzen und eingebettete Schriftarten verwendet werden, werden Beschriftungen vertikal angezeigt, wenn sie horizontal länger als die Säulenbreite sind.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ColumnChart:type:get"><apiName>type</apiName><shortdesc>
      Der Typ des Säulendiagramms.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Der Typ des Säulendiagramms.
           <p>Folgende Werte sind möglich:</p>
      <ul>
        <li><codeph>"clustered"</codeph>: Werte von verschiedenen Serien werden nach Kategorie gruppiert. Dies ist der Standardtyp.</li>
        <li><codeph>"overlaid"</codeph>: Mehrere Werte werden nach Kategorie übereinander angezeigt, wobei die letzte Serie oben liegt. </li>
        <li><codeph>"stacked"</codeph>: Säulen werden übereinander gestapelt und nach Kategorie gruppiert. Jede Säule stellt den kumulativen Wert der Säulen darunter dar. </li>
        <li><codeph>"100%"</codeph>: Säulen werden übereinander gestapelt und ergeben 100%. Jede Säule stellt den prozentualen Anteil dar, den sie zur Summe der Werte für diese Kategorie beiträgt.</li>
      </ul>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ColumnChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       Eine Modul-Factory wird als Kontext für die Verwendung eingebetteter Schriftarten und für die Suche nach dem Stilmanager, der die Stile dieser Komponente steuert, verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       Eine Modul-Factory wird als Kontext für die Verwendung eingebetteter Schriftarten und für die Suche nach dem Stilmanager, der die Stile dieser Komponente steuert, verwendet.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:LinearAxis"><apiName>LinearAxis</apiName><shortdesc>
  Die LinearAxis-Klasse ordnet numerische Werte gleichmäßig zwischen einem Mindest- und einem Höchstwert entlang einer Diagrammachse zu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:LinearAxis&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:LinearAxis
    <strong>Properties</strong>
    interval="null"
    maximum="null"
    maximumLabelPrecision="null"
    minimum="null"
    minorInterval="null"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:NumericAxis</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die LinearAxis-Klasse ordnet numerische Werte gleichmäßig zwischen einem Mindest- und einem Höchstwert entlang einer Diagrammachse zu. Standardmäßig werden die Werte für <codeph>minimum</codeph>, <codeph>maximum</codeph> und <codeph>interval</codeph> anhand der Diagrammdaten bestimmt, um alle Diagrammelemente anzeigen zu können. Sie können auch explizit bestimmte Werte für diese Eigenschaften festlegen.
  
  <p>Die Bereichswerte werden wie folgt automatisch festgelegt:
 
  <ol>
    <li> Flex bestimmt einen Mindest- und einen Höchstwert, der alle im Diagramm angezeigten Daten umfasst.</li>
    <li> Wenn Sie die Eigenschaften <codeph>autoAdjust</codeph> und <codeph>baseAtZero</codeph> auf <codeph>true</codeph> setzen, nimmt Flex die folgenden Anpassungen vor:
      <ul>
        <li>Wenn alle Werte positiv sind, setzt Flex die Eigenschaft <codeph>minimum</codeph> auf null.</li>
  	  <li>Wenn alle Werte negativ sind, setzt Flex die Eigenschaft <codeph>maximum</codeph> auf null.</li>
  	</ul>
    </li>
    <li> Wenn Sie die Eigenschaft <codeph>autoAdjust</codeph> auf <codeph>true</codeph> setzen, passt Flex die Werte der Eigenschaften <codeph>minimum</codeph> und <codeph>maximum</codeph> durch Auf- oder Abrunden an.</li>
    <li> Flex überprüft, ob das Diagramm Elemente enthält, die zusätzlichen Abstand benötigen, um richtig angezeigt zu werden (beispielsweise bei Beschriftungen). Das Programm passt die Werte der Eigenschaften <codeph>minimum</codeph> und <codeph>maximum</codeph> entsprechend an.</li>
    <li> Flex bestimmt, ob Sie eine zusätzlichen Abstand um die Werte <codeph>minimum</codeph> und <codeph>maximum</codeph> angegeben haben, und passt die Werte entsprechend an.</li>
  </ol>
  </p>
  
  </apiDesc><example conref="HLOCChartExample.mxml"><swfblock conref="examples/HLOCChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.chartClasses.xml#IAxis"><linktext>mx.charts.chartClasses.IAxis</linktext></link></related-links><apiConstructor id="mx.charts:LinearAxis:LinearAxis"><apiName>LinearAxis</apiName><shortdesc>
	 Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	 Konstruktor.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:LinearAxis:interval:get"><apiName>interval</apiName><shortdesc>
	  Gibt den Abstand zwischen den Beschriftungswerten entlang der Achse an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Gibt den Abstand zwischen den Beschriftungswerten entlang der Achse an. Flex berechnet den Abstand, wenn diese Eigenschaft auf <codeph>NaN</codeph> gesetzt ist. Der Standardwert ist <codeph>NaN</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LinearAxis:maximum:get"><apiName>maximum</apiName><shortdesc>
	  Gibt den Höchstwert für eine Achsenbeschriftung an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Gibt den Höchstwert für eine Achsenbeschriftung an. Wenn Sie die Eigenschaft <codeph>autoAdjust</codeph> auf <codeph>true</codeph> setzen, berechnet Flex diesen Wert. Bei <codeph>NaN</codeph> bestimmt Flex den Höchstwert anhand der Daten im Diagramm. Der Standardwert ist <codeph>NaN</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LinearAxis:minimum:get"><apiName>minimum</apiName><shortdesc>
	  Gibt den Mindestwert für eine Achsenbeschriftung an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Gibt den Mindestwert für eine Achsenbeschriftung an. Bei <codeph>NaN</codeph> bestimmt Flex den Mindestwert anhand der Daten im Diagramm. Der Standardwert ist <codeph>NaN</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LinearAxis:minorInterval:get"><apiName>minorInterval</apiName><shortdesc>
	  Gibt den Wert für den Abstand zwischen den kleineren Markierungen entlang der Achse an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Gibt den Wert für den Abstand zwischen den kleineren Markierungen entlang der Achse an. Flex berechnet den Abstand, wenn diese Eigenschaft auf <codeph>NaN</codeph> gesetzt ist.  
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LinearAxis:maximumLabelPrecision:set"><apiName>maximumLabelPrecision</apiName><shortdesc>
	  Gibt die maximale Anzahl von Dezimalstellen zur Darstellung von Teilwerten in den Beschriftungen an, die von der Achse generiert werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Gibt die maximale Anzahl von Dezimalstellen zur Darstellung von Teilwerten in den Beschriftungen an, die von der Achse generiert werden. Standardmäßig generiert die Achse diesen Wert aus den Beschriftungen selbst. Beim Wert 0 wird auf die nächste Ganzzahl gerundet. Beim Wert 2 wird auf das nächste Hundertstel eines Werts gerundet.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:AreaChart"><apiName>AreaChart</apiName><shortdesc>
  Das AreaChart-Steuerelement stellt die Daten als Fläche dar, die durch eine Linie begrenzt wird, welche die Datenwerte verbindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:AreaChart&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:</p>
  
  <pre>
  &lt;mx:AreaChart
    <strong>Properties</strong>
    type="<i>overlaid|stacked|100%</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  Das AreaChart-Steuerelement stellt die Daten als Fläche dar, die durch eine Linie begrenzt wird, welche die Datenwerte verbindet. Mit dem AreaChart-Steuerelement können verschiedene Diagrammvariationen erstellt werden, beispielsweise einfache oder gestapelte Flächen, gestapelte Flächen, die zusammen 100 % ergeben, und Diagramme mit Höchst- und Tiefstwerten.
  
  <p>Das AreaChart-Steuerelement erwartet, dass die Eigenschaft <codeph>series</codeph> ein Array von AreaSeries-Objekten enthält.</p>
  
  <p>Flächendiagramme von Typ Gestapelt und 100% überschreiben die Eigenschaft <codeph>minField</codeph> ihrer AreaSeries-Objekte.</p>
   </apiDesc><example conref="Line_AreaChartExample.mxml"><swfblock conref="examples/Line_AreaChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#AreaSeries"><linktext>mx.charts.series.AreaSeries</linktext></link></related-links><apiConstructor id="mx.charts:AreaChart:AreaChart"><apiName>AreaChart</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:AreaChart:type:get"><apiName>type</apiName><shortdesc>
      Typ des zu rendernden Flächendiagramms.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Typ des zu rendernden Flächendiagramms.
           <p>Folgende Werte sind möglich:</p>
      <ul>
        <li><codeph>"overlaid"</codeph>: Mehrere Flächen werden übereinander angezeigt, wobei die zuletzt angegebene Serie oben liegt. Dies ist der Standardwert.</li>
        <li><codeph>"stacked"</codeph>: Flächen werden übereinander gestapelt und nach Kategorie gruppiert. Jede Fläche stellt den kumulativen Wert der Flächen darunter dar.</li>
        <li><codeph>"100%"</codeph>: Flächen werden übereinander gestapelt und ergeben 100%. Jede Fläche stellt den prozentualen Anteil dar, den die Serie zur Gesamtsumme beiträgt.</li>
      </ul>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AreaChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       Eine Modul-Factory wird als Kontext für die Verwendung eingebetteter Schriftarten und für die Suche nach dem Stilmanager, der die Stile dieser Komponente steuert, verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       Eine Modul-Factory wird als Kontext für die Verwendung eingebetteter Schriftarten und für die Suche nach dem Stilmanager, der die Stile dieser Komponente steuert, verwendet.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:PieChart"><apiName>PieChart</apiName><shortdesc>
  Das PieChart-Steuerelement stellt eine Serie als Standardkreisdiagramm dar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="innerRadius" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  Bestimmt die Größe der Öffnung in der Mitte des Kreisdiagramms. Diese Eigenschaft ist ein prozentualer Anteil des Radius in der Kreismitte im Vergleich zum gesamten Kreisradius. Der Standardwert lautet 0 Prozent. Verwenden Sie diese Eigenschaft zum Erstellen eines ringförmigen Diagramms. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  Offset der ersten Textzeile von der linken Seite des Containers in Pixeln.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird. Mögliche Werte sind <codeph>"none"</codeph> und <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  Ausrichtung von Text in einem Container. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"right"</codeph> oder <codeph>"center"</codeph>.
 
  <p>Der Standardwert für die meisten Steuerelemente lautet <codeph>left</codeph>. Für die Button-, LinkButton- und AccordionHeader-Komponenten lautet der Standardwert <codeph>"center"</codeph>. Für diese Komponenten wird diese Eigenschaft nur erkannt, wenn die Eigenschaft <codeph>labelPlacement</codeph> auf <codeph>"left"</codeph> oder <codeph>"right"</codeph> gesetzt wurde. Wenn <codeph>labelPlacement</codeph> auf <codeph>"top"</codeph> oder <codeph>"bottom"</codeph> gesetzt wird, werden der Text und eventuell vorhandene Symbole zentriert.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  Die Anzahl der zusätzlichen Pixel, die zwischen den Zeichen angezeigt werden. Durch einen positiven Wert wird der Zeichenabstand über den normalen Abstand hinaus vergrößert und durch einen negativen Wert verkleinert.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts:PieChart" playerVersion="Flash9" type="Boolean">
<description>
  Ein boolescher Wert, der angibt, ob Kerning aktiviert (<codeph>true</codeph>) oder deaktiviert (<codeph>false</codeph>) ist. Der Begriff „Kerning“ bezeichnet die Anpassung des Zwischenraums zwischen bestimmten Zeichenpaaren zur Verbesserung der Lesbarkeit. Diese Funktion sollte nur verwendet werden, wenn sie unbedingt erforderlich ist, beispielsweise bei Überschriften in großen Schriftarten. Kerning wird nur für eingebettete FlashType-Schriftarten unterstützt. Bestimmte Schriftarten wie Verdana und Schriftarten mit fester Breite wie Courier New unterstützen Kerning nicht.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird. Gültige Werte sind <codeph>"normal"</codeph> und <codeph>"bold"</codeph>. Für LegendItem lautet der Standardwert <codeph>"bold"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  Legt die Eigenschaft <codeph>thickness</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelemente darstellen. Diese Eigenschaft gibt die Stärke der Glyphenkanten an. Mögliche Werte sind Zahlen von -200 bis 200. 
  
  <p>Diese Eigenschaft wird nur angewendet, wenn Sie eine eingebettete FlashType-Schriftart verwenden und die Eigenschaft <codeph>fontAntiAliasType</codeph> auf <codeph>"advanced"</codeph> gesetzt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird. Gültige Werte sind <codeph>"normal"</codeph> und <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  Die Höhe des Texts in Pixeln. Der Standardwert ist 10 für alle Steuerelemente mit Ausnahme des ColorPicker-Steuerelements. Für das ColorPicker-Steuerelement lautet der Standardwert 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  Legt die Eigenschaft <codeph>sharpness</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelementen darstellen. Diese Eigenschaft gibt die Schärfe der Glyphenkanten an. Mögliche Werte sind Zahlen von -400 bis 400. 
  
  <p>Diese Eigenschaft wird nur angewendet, wenn Sie eine eingebettete FlashType-Schriftart verwenden und die Eigenschaft <codeph>fontAntiAliasType</codeph> auf <codeph>"advanced"</codeph> gesetzt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  Legt die Eigenschaft <codeph>gridFitType</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelementen darstellen. Mögliche Werte sind <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) und <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Diese Eigenschaft wird nur angewendet, wenn Sie eine eingebettete FlashType-Schriftart verwenden und die Eigenschaft <codeph>fontAntiAliasType</codeph> auf <codeph>"advanced"</codeph> gesetzt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  Der Name der zu verwendenden Schriftart. Anders als in einer vollständigen CSS-Implementierung werden durch Kommas getrennte Listen nicht unterstützt. Sie können den Namen einer beliebigen Schriftartfamilie verwenden. Wenn Sie eine generische Schriftartbezeichnung wählen, wird diese in die entsprechende Geräteschriftart konvertiert.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  Legt die Eigenschaft <codeph>antiAliasType</codeph> von internen Textfeldern fest. Mögliche Werte sind <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) und <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>Der Standardwert lautet <codeph>"advanced"</codeph>, wodurch der FlashType-Renderer aktiviert wird, wenn Sie eine eingebettete FlashType-Schriftart verwenden. Wählen Sie <codeph>"normal"</codeph>, um den FlashType-Renderer zu deaktivieren.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
  
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts:PieChart" playerVersion="Flash9" type="uint">
<description>
  Farbe des Texts in der Komponente, wenn deaktiviert.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts:PieChart" playerVersion="Flash9" type="uint">
<description>
  Farbe des Texts in der Komponente einschließlich der Komponentenbeschriftung.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:PieChart&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:
  
  <pre>
  &lt;mx:PieChart
    <strong>Styles</strong>
    innerRadius="0"
    textAlign="left"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:PolarChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  Das PieChart-Steuerelement stellt eine Serie als Standardkreisdiagramm dar. Die Daten des Datenproviders bestimmen die Größe der Segmente im Kreisdiagramm in Relation zu anderen Segmenten. Mit der PieSeries-Klasse können Sie Standardkreisdiagramme, Ringdiagramme oder gestapelte Kreisdiagramme erstellen.
  
  <p>Das PieChart-Steuerelement erwartet, dass die Eigenschaft <codeph>series</codeph> ein Array von PieSeries-Objekten enthält.</p>
   </apiDesc><example conref="PieChartExample.mxml"><swfblock conref="examples/PieChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#PieSeries"><linktext>mx.charts.series.PieSeries</linktext></link></related-links><apiConstructor id="mx.charts:PieChart:PieChart"><apiName>PieChart</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:PieChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       Eine Modul-Factory wird als Kontext für die Verwendung eingebetteter Schriftarten und für die Suche nach dem Stilmanager, der die Stile dieser Komponente steuert, verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       Eine Modul-Factory wird als Kontext für die Verwendung eingebetteter Schriftarten und für die Suche nach dem Stilmanager, der die Stile dieser Komponente steuert, verwendet.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:GridLines"><apiName>GridLines</apiName><shortdesc> 
  Die GridLines-Klasse zeichnet Rasterlinien in den Datenbereich des Diagramms.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="verticalTickAligned" owner="mx.charts:GridLines" playerVersion="Flash9" type="Boolean">
<description>
  Bestimmt, ob vertikale Rasterlinien an Markierungen ausgerichtet werden. Bei <codeph>true</codeph> zeichnet Flex vertikale Rasterlinien, die an den Markierungen ausgerichtet sind. Bei <codeph>false</codeph> zeichnet Flex Rasterlinien zwischen Markierungen. Der Standardwert ist <codeph>true</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalStroke" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Gibt die Linienart für vertikale Rasterlinien an. Verwenden Sie die Stroke-Klasse, um die Eigenschaften als untergeordnetes Tag in MXML zu definieren, oder erstellen Sie ein Stroke-Objekt in ActionScript.  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalShowOrigin" owner="mx.charts:GridLines" playerVersion="Flash9" type="Boolean">
<description>
  Bestimmt, ob der vertikale Ursprung gezeichnet wird. Bei <codeph>true</codeph> und wenn der Ursprung innerhalb des Diagramms liegt, wird er von Flex mit dem Stil <codeph>verticalOriginStroke</codeph> gezeichnet. Für die ColumnChart-, LineChart- und AreaChart-Steuerelemente ist der Standardwert <codeph>false</codeph>. Für PlotChart-, BubbleChart- und BarChart-Steuerelemente ist der Standardwert <codeph>true</codeph>. Diese Eigenschaft wird nicht auf PieChart-Steuerelemente angewendet.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalOriginStroke" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Gibt die Linienart für den vertikalen Ursprung an. Verwenden Sie die Stroke-Klasse, um die Eigenschaften als untergeordnetes Tag in MXML zu definieren, oder erstellen Sie ein Stroke-Objekt in ActionScript.  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalFill" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Gibt das Füllungsmuster für wechselnde vertikale Bänder an, die von Rasterlinien gebildet werden. Mit der IFill-Klasse können Sie die Eigenschaften der Füllung als untergeordnetes Tag in MXML definieren oder ein IFill-Objekt in ActionScript erstellen. Mit der Einstellung <codeph>null</codeph> weisen die Bänder keine Füllung auf. Der Standardwert lautet <codeph>null</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalChangeCount" owner="mx.charts:GridLines" playerVersion="Flash9" type="int">
<description>
  Gibt die Anzahl der Markierungen zwischen vertikalen Rasterlinien an. Wenn Sie <codeph>verticalChangeCount</codeph> auf <codeph>3</codeph> setzen, wird eine Rasterlinie bei jeder dritten Markierung auf der Achse gezeichnet. Der Füllstil ändert sich bei jeder Rasterlinie, sodass ein höherer <codeph>verticalChangeCount</codeph>-Wert zu breiten wechselnden Bändern führt. Der Standardwert ist <codeph>1</codeph>. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalAlternateFill" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Gibt das Füllungsmuster für wechselnde vertikale Bänder an, die nicht durch die Eigenschaft „Fill“ definiert werden. Mit der IFill-Klasse können Sie die Eigenschaften der Füllung als untergeordnetes Tag in MXML definieren oder ein IFill-Objekt in ActionScript erstellen. Mit der Einstellung <codeph>null</codeph> weisen die Bänder keine Füllung auf. Der Standardwert lautet <codeph>null</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalTickAligned" owner="mx.charts:GridLines" playerVersion="Flash9" type="Boolean">
<description>
  Bestimmt, ob horizontale Rasterlinien an Markierungen ausgerichtet werden. Bei <codeph>true</codeph> werden horizontale Rasterlinien an den Markierungen ausgerichtet. Bei <codeph>false</codeph> zeichnet Flex Rasterlinien zwischen Markierungen. Der Standardwert ist <codeph>true</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalStroke" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Gibt die Linienart für horizontale Rasterlinien an. Verwenden Sie die Stroke-Klasse, um die Eigenschaften als untergeordnetes Tag in MXML zu definieren, oder erstellen Sie ein Stroke-Objekt in ActionScript.  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalShowOrigin" owner="mx.charts:GridLines" playerVersion="Flash9" type="Boolean">
<description>
  Bestimmt, ob der horizontale Ursprung gezeichnet wird. Bei <codeph>true</codeph> und wenn der Ursprung innerhalb des Diagramms liegt, wird er von den Rasterlinien mit dem Stil <codeph>horizontalOriginStroke</codeph> gezeichnet. Für ColumnChart-, LineChart-, PlotChart-, BubbleChart- und AreaChart-Steuerelemente ist der Standardwert <codeph>true</codeph>. Für BarChart-Steuerelemente ist der Standardwert <codeph>false</codeph>. Diese Eigenschaft wird nicht auf PieChart-Steuerelemente angewendet.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalOriginStroke" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Gibt die Linienart für den horizontalen Ursprung an. Verwenden Sie die Stroke-Klasse, um die Eigenschaften als untergeordnetes Tag in MXML zu definieren, oder erstellen Sie ein Stroke-Objekt in ActionScript.  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalFill" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Gibt das Füllungsmuster für Bänder an, die von den Rasterlinien gebildet werden. Mit der IFill-Klasse können Sie die Eigenschaften der Füllung als untergeordnetes Tag in MXML definieren oder ein IFill-Objekt in ActionScript erstellen. Mit der Einstellung <codeph>null</codeph> weisen die Bänder keine Füllung auf. Der Standardwert lautet <codeph>null</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalChangeCount" owner="mx.charts:GridLines" playerVersion="Flash9" type="int">
<description>
  Gibt die Anzahl der Markierungen zwischen horizontalen Rasterlinien an. Wenn Sie <codeph>horizontalChangeCount</codeph> auf 3 setzen, wird eine Rasterlinie bei jeder dritten Markierung entlang der Achse gezeichnet. Der Füllstil ändert sich bei jeder Rasterlinie, sodass ein höherer <codeph>horizontalChangeCount</codeph>-Wert zu breiten wechselnden Bändern führt. Der Standardwert lautet<codeph>1</codeph>. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalAlternateFill" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Gibt das Füllungsmuster für wechselnde horizontale Bänder an, die nicht durch die Eigenschaft <codeph>Fill</codeph> definiert werden. Mit der IFill-Klasse können Sie die Eigenschaften der Füllung als untergeordnetes Tag in MXML definieren oder ein IFill-Objekt in ActionScript erstellen. Mit der Einstellung <codeph>null</codeph> weisen die Bänder keine Füllung auf. Der Standardwert lautet <codeph>null</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="horizontal,vertical,both" inherit="no" name="gridDirection" owner="mx.charts:GridLines" playerVersion="Flash9" type="String">
<description>
  Gibt die Richtung der Rasterlinien an. Verfügbare Werte sind <codeph>horizontal</codeph>, <codeph>vertical</codeph> oder <codeph>both</codeph>. Der Standardwert ist <codeph>horizontal</codeph>.  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:GridLines&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:GridLines
    <strong>Styles</strong>
     gridDirection="horizontal|vertical|both"
     horizontalAlternateFill="null"
     horizontalChangeCount="1"
     horizontalFill="null"
     horizontalOriginStroke="<i>IStroke; No default</i>"
     horizontalShowOrigin="<i>Default depends on type of chart</i>"
     horizontalStroke="<i>IStroke; No default</i>"
     horizontalTickAligned="true|false"
     verticalAlternateFill="null"
     verticalChangeCount="1"
     verticalFill="null"
     verticalOriginStroke="<i>IStroke; No default</i>"
     verticalShowOrigin="<i>Default depends on type of chart</i>"
     verticalStroke="<i>IStroke; No default</i>"
     verticalTickAligned="true|false"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:ChartElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
  Die GridLines-Klasse zeichnet Rasterlinien in den Datenbereich des Diagramms. Flex kann horizontale oder vertikale Linien oder beides zeichnen. 
  
  <p>Flex zeichnet Rasterlinien, die an den Markierungen des übergeordneten Diagramms ausgerichtet sind. Standardmäßig zeichnet Flex eine Linie pro Markierung entlang der entsprechenden Achse.</p>
  
  <p>Normalerweise verwenden Sie die GridLines-Klasse als untergeordnetes Tag der Eigenschaft <codeph>backgroundElements</codeph> oder <codeph>annotationElements</codeph> eines Diagrammsteuerelements.</p>
  
  </apiDesc><example conref="GridLinesExample.mxml"><swfblock conref="examples/GridLinesExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.charts:GridLines:GridLines"><apiName>GridLines</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Konstruktor.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:GridLines:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts:HLOCChart"><apiName>HLOCChart</apiName><shortdesc>
  Das HLOCChart-Steuerelement (High Low Open Close) stellt finanzielle Daten durch Elemente dar, die Höchst-, Tiefst-, Schluss- und optional die Anfangswerte einer Serie darstellen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="maxColumnWidth" owner="mx.charts:HLOCChart" playerVersion="Flash9" type="Number">
<description>
  Gibt die Breite der HLOC-Linien in Pixeln an. Als eigentliche Breite wird entweder der Wert dieser Eigenschaft oder der Eigenschaft <codeph>columnWidthRatio</codeph> verwendet, abhängig davon, welcher Wert kleiner ist. Bei mehreren HLOC-Serien wird dieser Raum anteilsmäßig aufgeteilt.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnWidthRatio" owner="mx.charts:HLOCChart" playerVersion="Flash9" type="Number">
<description>
  Gibt durch einen Wert zwischen 0 und 1 die Breite der zu zeichnenden HLOC-Linien im Verhältnis zu den Kategoriebreiten der horizontalen Achse an. Beim Wert 1 wird der gesamte Raum verwendet, beim Wert 0,6 dagegen 60 % des verfügbaren Raums der Kategorie. Als eigentliche Elementbreite wird entweder der Wert der Eigenschaft <codeph>columnWidthRatio</codeph> oder der Eigenschaft <codeph>maxColumnWidth</codeph> verwendet, abhängig davon, welcher Wert kleiner ist. Bei mehreren Elementserien wird dieser Raum anteilsmäßig aufgeteilt. Der Standardwert ist 0,65.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  The <code>&lt;mx:HLOCChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:HLOCChart
    <strong>Styles</strong>
    columnWidthRatio=".65"
    maxColumnWidth="<i>No default</i>"
  /&gt;
  </pre> 
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  Das HLOCChart-Steuerelement (High Low Open Close) stellt finanzielle Daten durch Elemente dar, die Höchst-, Tiefst-, Schluss- und optional die Anfangswerte einer Serie darstellen. Der oberste und der unterste Punkt der vertikalen Linie jedes Elements stellen den Höchst- und Tiefstwert des Datenpunkts dar. Die Markierung auf der rechten Seite stellt den Schlusswert und die Markierung auf der linken Seite den Anfangswert dar, wenn dieser angegeben wurde. 
   
  <p>Ein HLOCChart-Steuerelement erwartet, dass die Eigenschaft <codeph>series</codeph> ein Array von HLOCSeries-Objekten enthält.</p>
 
  </apiDesc><example conref="HLOCChartExample.mxml"><swfblock conref="examples/HLOCChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#HLOCSeries"><linktext>mx.charts.series.HLOCSeries</linktext></link></related-links><apiConstructor id="mx.charts:HLOCChart:HLOCChart"><apiName>HLOCChart</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:HLOCChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       Eine Modul-Factory wird als Kontext für die Verwendung eingebetteter Schriftarten und für die Suche nach dem Stilmanager, der die Stile dieser Komponente steuert, verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       Eine Modul-Factory wird als Kontext für die Verwendung eingebetteter Schriftarten und für die Suche nach dem Stilmanager, der die Stile dieser Komponente steuert, verwendet.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:BarChart"><apiName>BarChart</apiName><shortdesc>
  Das BarChart-Steuerelement stellt die Daten als Serie horizontaler Balken dar, deren Länge durch Datenwerte bestimmt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="labelClass" owner="mx.charts:BarChart" playerVersion="Flash10.2" type="Class">
<description>
  Die Klasse, die von dieser Komponente für die Darstellung von Beschriftungen verwendet wird.
   <p>Es kann entweder die mx.controls.Label-Klasse oder die spark.components.Label-Klasse festgelegt werden.</p>
   </description>
<default>spark.components.Label
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="maxBarWidth" owner="mx.charts:BarChart" playerVersion="Flash9" type="Number">
<description>
  Gibt die Breite der Balken in Pixeln an. Als eigentliche Balkenbreite wird entweder der Wert dieser Eigenschaft oder der Eigenschaft <codeph>barWidthRatio</codeph> verwendet, abhängig davon, welcher Wert kleiner ist. Bei gruppierten Balken wird dieser Raum anteilsmäßig zwischen den Balken in jeder Gruppe aufgeteilt. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="barWidthRatio" owner="mx.charts:BarChart" playerVersion="Flash9" type="Number">
<description>
  Gibt durch einen Wert zwischen 0 und 1 die Breite der zu zeichnenden Balken im Verhältnis zur Kategoriebreite an. Beim Wert 1 wird der gesamte Raum verwendet, Beim Wert 0,6 dagegen 60 % des verfügbaren Raums des Balkens. Als eigentliche Balkenbreite wird entweder der Wert der Eigenschaft <codeph>barWidthRatio</codeph> oder der Eigenschaft <codeph>maxbarWidth</codeph> verwendet, abhängig davon, welcher Wert kleiner ist. Bei gruppierten Balken wird dieser Raum anteilsmäßig zwischen den Balken in jeder Gruppe aufgeteilt. Der Standardwert ist 0,65.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:BarChart&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:</p>
  
  <pre>
  &lt;mx:BarChart
    <strong>Properties</strong>
    type="clustered|overlaid|stacked|100%"
    
    <strong>Styles</strong>
    barWidthRatio=".65"
    maxBarWidth="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  Das BarChart-Steuerelement stellt die Daten als Serie horizontaler Balken dar, deren Länge durch Datenwerte bestimmt wird. Mit dem BarChart-Steuerelement können verschiedene Diagrammvariationen erstellt werden, beispielsweise einfache oder gestapelte Balkendiagramme, gestapelte Balken, die zusammen 100 % ergeben, und Diagramme mit Höchst- und Tiefstwerten.
  
  <p>Das BarChart-Steuerelement erwartet, dass die Eigenschaft <codeph>series</codeph> ein Array von BarSeries-Objekten enthält.</p>
  
  <p>Balkendiagramme der Typen „stacked“ (gestapelt) und „100 %“ überschreiben die Eigenschaft <codeph>minField</codeph> ihrer BarSeries-Objekte.</p>
   </apiDesc><example conref="Column_BarChartExample.mxml"><swfblock conref="examples/Column_BarChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#BarSeries"><linktext>mx.charts.series.BarSeries</linktext></link></related-links><apiConstructor id="mx.charts:BarChart:BarChart"><apiName>BarChart</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:BarChart:type:get"><apiName>type</apiName><shortdesc>
      Der Typ des zu rendernden Balkendiagramms.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Der Typ des zu rendernden Balkendiagramms. Folgende Werte sind möglich:    
      <ul>
        <li><codeph>"clustered"</codeph>: Balken werden nach Kategorie gruppiert. Dies ist der Standardwert.</li>
      
        <li><codeph>"overlaid"</codeph>: Mehrere Balken werden nach Kategorie übereinander angezeigt, wobei die zuletzt angegebene Serie oben liegt.</li>
      
        <li><codeph>"stacked"</codeph>: Balken werden von einem Ende bis zum anderen gestapelt und sind nach Kategorie gruppiert. Jeder Balken stellt den kumulativen Wert der Balken darunter dar.</li>
      
        <li><codeph>"100%"</codeph>: Balken werden von einem Ende bis zum anderen gestapelt und ergeben 100%. Jeder Balken stellt den prozentualen Anteil dar, den er zur Summe der Werte für diese Kategorie beiträgt.</li>
      </ul>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:BarChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       Eine Modul-Factory wird als Kontext für die Verwendung eingebetteter Schriftarten und für die Suche nach dem Stilmanager, der die Stile dieser Komponente steuert, verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       Eine Modul-Factory wird als Kontext für die Verwendung eingebetteter Schriftarten und für die Suche nach dem Stilmanager, der die Stile dieser Komponente steuert, verwendet.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:LegendItem"><apiName>LegendItem</apiName><shortdesc>
  Steuert die einzelnen Legendenelemente in einer Diagrammlegende.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="stroke" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Object">
<description>
  Gibt den Linienstrich für die Legendenelemente an.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="markerWidth" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  Gibt die Breite des Legendenelements an.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="markerHeight" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description> 
  Gibt die Höhe des Legendenelements an.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts:LegendItem" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Gibt die Klasse zum Rendern des Markierungsteils des Legendenelements an. Normalerweise wird die Markierung durch das Diagrammelement bereitgestellt, von dem das Legendenelement generiert wird. Wenn Sie die Legende manuell erstellen, gibt dieser Stil die Klasse zum Rendern der Markierung an. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="top,bottom,right,left" inherit="yes" name="labelPlacement" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  Gibt die Beschriftungsplatzierung des Legendenelements an. Gültige Werte sind <codeph>"top"</codeph>, <codeph>"bottom"</codeph>, <codeph>"left"</codeph> und <codeph>"right"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Object">
<description>
  Gibt ein IFill-Objekt an, das die Füllung für das Legendenelement definiert.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  Offset der ersten Textzeile von der linken Seite des Containers in Pixeln.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird. Mögliche Werte sind <codeph>"none"</codeph> und <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  Ausrichtung von Text in einem Container. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"right"</codeph> oder <codeph>"center"</codeph>.
 
  <p>Der Standardwert für die meisten Steuerelemente lautet <codeph>left</codeph>. Für die Button-, LinkButton- und AccordionHeader-Komponenten lautet der Standardwert <codeph>"center"</codeph>. Für diese Komponenten wird diese Eigenschaft nur erkannt, wenn die Eigenschaft <codeph>labelPlacement</codeph> auf <codeph>"left"</codeph> oder <codeph>"right"</codeph> gesetzt wurde. Wenn <codeph>labelPlacement</codeph> auf <codeph>"top"</codeph> oder <codeph>"bottom"</codeph> gesetzt wird, werden der Text und eventuell vorhandene Symbole zentriert.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  Die Anzahl der zusätzlichen Pixel, die zwischen den Zeichen angezeigt werden. Durch einen positiven Wert wird der Zeichenabstand über den normalen Abstand hinaus vergrößert und durch einen negativen Wert verkleinert.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Boolean">
<description>
  Ein boolescher Wert, der angibt, ob Kerning aktiviert (<codeph>true</codeph>) oder deaktiviert (<codeph>false</codeph>) ist. Der Begriff „Kerning“ bezeichnet die Anpassung des Zwischenraums zwischen bestimmten Zeichenpaaren zur Verbesserung der Lesbarkeit. Diese Funktion sollte nur verwendet werden, wenn sie unbedingt erforderlich ist, beispielsweise bei Überschriften in großen Schriftarten. Kerning wird nur für eingebettete FlashType-Schriftarten unterstützt. Bestimmte Schriftarten wie Verdana und Schriftarten mit fester Breite wie Courier New unterstützen Kerning nicht.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird. Gültige Werte sind <codeph>"normal"</codeph> und <codeph>"bold"</codeph>. Für LegendItem lautet der Standardwert <codeph>"bold"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  Legt die Eigenschaft <codeph>thickness</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelemente darstellen. Diese Eigenschaft gibt die Stärke der Glyphenkanten an. Mögliche Werte sind Zahlen von -200 bis 200. 
  
  <p>Diese Eigenschaft wird nur angewendet, wenn Sie eine eingebettete FlashType-Schriftart verwenden und die Eigenschaft <codeph>fontAntiAliasType</codeph> auf <codeph>"advanced"</codeph> gesetzt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird. Gültige Werte sind <codeph>"normal"</codeph> und <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  Die Höhe des Texts in Pixeln. Der Standardwert ist 10 für alle Steuerelemente mit Ausnahme des ColorPicker-Steuerelements. Für das ColorPicker-Steuerelement lautet der Standardwert 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  Legt die Eigenschaft <codeph>sharpness</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelementen darstellen. Diese Eigenschaft gibt die Schärfe der Glyphenkanten an. Mögliche Werte sind Zahlen von -400 bis 400. 
  
  <p>Diese Eigenschaft wird nur angewendet, wenn Sie eine eingebettete FlashType-Schriftart verwenden und die Eigenschaft <codeph>fontAntiAliasType</codeph> auf <codeph>"advanced"</codeph> gesetzt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  Legt die Eigenschaft <codeph>gridFitType</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelementen darstellen. Mögliche Werte sind <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) und <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Diese Eigenschaft wird nur angewendet, wenn Sie eine eingebettete FlashType-Schriftart verwenden und die Eigenschaft <codeph>fontAntiAliasType</codeph> auf <codeph>"advanced"</codeph> gesetzt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  Der Name der zu verwendenden Schriftart. Anders als in einer vollständigen CSS-Implementierung werden durch Kommas getrennte Listen nicht unterstützt. Sie können den Namen einer beliebigen Schriftartfamilie verwenden. Wenn Sie eine generische Schriftartbezeichnung wählen, wird diese in die entsprechende Geräteschriftart konvertiert.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  Legt die Eigenschaft <codeph>antiAliasType</codeph> von internen Textfeldern fest. Mögliche Werte sind <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) und <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>Der Standardwert lautet <codeph>"advanced"</codeph>, wodurch der FlashType-Renderer aktiviert wird, wenn Sie eine eingebettete FlashType-Schriftart verwenden. Wählen Sie <codeph>"normal"</codeph>, um den FlashType-Renderer zu deaktivieren.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
  
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts:LegendItem" playerVersion="Flash9" type="uint">
<description>
  Farbe des Texts in der Komponente, wenn deaktiviert.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts:LegendItem" playerVersion="Flash9" type="uint">
<description>
  Farbe des Texts in der Komponente einschließlich der Komponentenbeschriftung.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der rechten Rahmenlinie des Steuerelements und der rechten Kante des Inhaltsbereichs.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der linken Rahmenlinie des Steuerelements und der linken Kante des Inhaltsbereichs.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen den untergeordneten Elementen in vertikaler Richtung. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für die Klasse nicht überschrieben wird, ist der Standardwert 6.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen den untergeordneten Elementen in horizontaler Richtung. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für die Klasse nicht überschrieben wird, ist der Standardwert 8.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:LegendItem&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:LegendItem
    <strong>Properties</strong>
    element="<i>No default</i>"    
    label="<i>No default</i>"
    source="<i>No default</i>"
    legendData="<i>No default</i>"
    marker="<i>No default</i>"
    markerAspectRatio="<i>No default</i>"
 
    <strong>Styles</strong>
    fill="<i>IFill; no default.</i>"
    fontWeight="normal|bold"
    fontSize="10"
    horizontalGap="8"
    labelPlacement="right|left|top|bottom"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    markerHeight="15"
    markerWidth="10"
    paddingLeft="0"
    paddingRight="0"
    stroke="<i>IStroke; no default</i>"
 	  textDecoration="underline|none"
    verticalGap="6"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Steuert die einzelnen Legendenelemente in einer Diagrammlegende.
  
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#Legend"><linktext>mx.charts.Legend</linktext></link><link href="mx.charts.chartClasses.xml#LegendData"><linktext>mx.charts.chartClasses.LegendData</linktext></link></related-links><apiConstructor id="mx.charts:LegendItem:LegendItem"><apiName>LegendItem</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Konstruktor.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:LegendItem:element"><apiName>element</apiName><shortdesc>
	  Das Diagrammelement, das für das Generieren dieses Legendenelements zuständig ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.charts.chartClasses:IChartElement</apiValueClassifier></apiValueDef><apiDesc>
	  Das Diagrammelement, das für das Generieren dieses Legendenelements zuständig ist. Wenn die Inhalte eines Legendensteuerelements automatisch durch ein Diagramm erstellt werden, bezieht sich dieses Feld auf das Diagrammelement (normalerweise eine Serie), das dieses Legendenelement darstellt. In einigen Fällen beziehen sich mehrere Legendenelemente auf das gleiche Diagrammelement.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:markerAspectRatio"><apiName>markerAspectRatio</apiName><shortdesc>
	  Das Seitenverhältnis für die Markierung, mit dem dieses Legendenelement verknüpft ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Das Seitenverhältnis für die Markierung, mit dem dieses Legendenelement verknüpft ist. Einige Markierungen von Diagrammserien sind zur Anzeige mit einem bestimmten Seitenverhältnis ausgelegt. Wenn diese Eigenschaft nicht festgelegt ist, stellt das Legendenelement das Seitenverhältnis der Markierung während des Layouts sicher.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:label:get"><apiName>label</apiName><shortdesc>
	  Gibt den Text an, der von Flex neben dem Legendenelement angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  Gibt den Text an, der von Flex neben dem Legendenelement angezeigt wird.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:marker:get"><apiName>marker</apiName><shortdesc>
	  Die von diesem Legendenelement angezeigte Markierung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexDisplayObject"/></apiValueDef><apiDesc>
	  Die von diesem Legendenelement angezeigte Markierung. Markierungen werden typischerweise von dem Diagrammelement zugewiesen, das die LegendData generiert hat, die mit diesem Element verknüpft sind.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:source:get"><apiName>source</apiName><shortdesc>
	  Enthält einen Verweis auf die Datenserie, aus der das LegendItem generiert wurde, wenn Sie die Eigenschaft „dataProvider“ des übergeordneten Legendensteuerelements mit einem Diagrammsteuerelement verbinden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
	  Enthält einen Verweis auf die Datenserie, aus der das LegendItem generiert wurde, wenn Sie die Eigenschaft <codeph>dataProvider</codeph> des übergeordneten Legendensteuerelements mit einem Diagrammsteuerelement verbinden. Andernfalls enthält diese Eigenschaft einen Verweis auf das Objekt, das mit LegendItem verknüpft ist.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:legendData:set"><apiName>legendData</apiName><shortdesc>
	  Die LegendData-Instanz, die von diesem LegendItem-Objekt dargestellt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Object"/></apiValueDef><apiDesc>
	  Die LegendData-Instanz, die von diesem LegendItem-Objekt dargestellt wird. Wenn ein Diagramm die Inhalte eines Legendensteuerelements generiert, generieren die Elemente des Diagramms eine oder mehrere LegendData-Strukturen zur Anzeige in der Legende. Jede LegendData-Struktur generiert ein LegendItem-Objekt.  
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts:HitData"><apiName>HitData</apiName><shortdesc>
  Die HitData-Klasse stellt Informationen zu dem Datenelement an einer bestimmten Position auf dem Bildschirm dar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die HitData-Klasse stellt Informationen zu dem Datenelement an einer bestimmten Position auf dem Bildschirm dar. Flex gibt die HitData-Struktur für Mausereignisse auf Diagramm-Datenpunkten wieder. Das Programm beschreibt, welche Datenpunkte sich an der aktuellen Mausposition befinden. 
 
  <p>Sie können eine HitData-Struktur, die den Datenpunkt an einer bestimmten Position im Diagramm beschreibt, auch abrufen, indem Sie die <codeph>findDataPoints()</codeph>-Methode des Diagrammsteuerelements verwenden.</p>
  
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#ChartItem"><linktext>mx.charts.ChartItem</linktext></link></related-links><apiConstructor id="mx.charts:HitData:HitData"><apiName>HitData</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>id</apiItemName><apiType value="Number"/><apiDesc>Gibt den eindeutigen Bezeichner des Datenpunkts an.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>distance</apiItemName><apiType value="Number"/><apiDesc>Gibt den Abstand zwischen dem Datenelement auf dem Bildschirm und der Position des Mauszeigers in Pixeln an.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Gibt die x-Koordinate des Datenelements auf dem Bildschirm an.
	 
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Gibt die y-Koordinate des Datenelements auf dem Bildschirm an.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>chartItem</apiItemName><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier><apiDesc>Das von den Hitdaten beschriebene Diagrammelement.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Konstruktor.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:HitData:chartItem"><apiName>chartItem</apiName><shortdesc>
	  Das von den Hitdaten beschriebene Diagrammelement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.charts:ChartItem</apiValueClassifier></apiValueDef><apiDesc>
	  Das von den Hitdaten beschriebene Diagrammelement. Ein Diagrammelement stellt die Daten dar, die eine Datenserie verwendet, um ein einzelnes Element aus dem <codeph>dataProvider</codeph> zu beschreiben. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:contextColor"><apiName>contextColor</apiName><shortdesc>
	  Ein RGB-Wert, der verwendet werden kann, um eine Bildschirmdarstellung des entsprechenden chartItem zu verknüpfen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  Ein RGB-Wert, der verwendet werden kann, um eine Bildschirmpräsentation des entsprechenden <codeph>chartItem</codeph> zu verknüpfen. DataTips verwenden dieses Feld zum Rendern ihrer Daten.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:dataTipFunction"><apiName>dataTipFunction</apiName><shortdesc>
	  Eine vom HitData-Ersteller bereitgestellte Funktion, um einen an die Anforderungen des Benutzers angepassten String zur Anzeige auf dem Bildschirm zu generieren, der das referenzierte Element beschreibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
	  Eine vom HitData-Ersteller bereitgestellte Funktion, um einen an die Anforderungen des Benutzers angepassten String zur Anzeige auf dem Bildschirm zu generieren, der das referenzierte Element beschreibt. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:distance"><apiName>distance</apiName><shortdesc>
	  Gibt den Abstand zwischen dem Datenelement auf dem Bildschirm und der Position des Mauszeigers in Pixeln an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Gibt den Abstand zwischen dem Datenelement auf dem Bildschirm und der Position des Mauszeigers in Pixeln an.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:id"><apiName>id</apiName><shortdesc>
	  Gibt den eindeutigen Bezeichner des Datenpunkts an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Gibt den eindeutigen Bezeichner des Datenpunkts an. Sie können mit diesem Bezeichner testen, ob zwei HitData-Objekte gleich sind. Wenn zwei unterschiedliche Diagrammelemente dem gleichen <codeph>dataProvider</codeph>-Eintrag entsprechen, besitzen sie zwei verschiedene Bezeichner.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:item"><apiName>item</apiName><shortdesc>
	  Gibt das Datenelement an, das von der HitData-Struktur beschrieben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
	  Gibt das Datenelement an, das von der HitData-Struktur beschrieben wird.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:x"><apiName>x</apiName><shortdesc>
	  Gibt die x-Koordinate des Datenelements auf dem Bildschirm an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Gibt die x-Koordinate des Datenelements auf dem Bildschirm an.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:y"><apiName>y</apiName><shortdesc>
	  Gibt die y-Koordinate des Datenelements auf dem Bildschirm an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Gibt die y-Koordinate des Datenelements auf dem Bildschirm an.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:displayText:get"><apiName>displayText</apiName><shortdesc>
	  Eine Beschreibung des verknüpften Elements zur Anzeige auf dem Bildschirm.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
	  Eine Beschreibung des verknüpften Elements zur Anzeige auf dem Bildschirm. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:element:get"><apiName>element</apiName><shortdesc>
	  Gibt das Diagrammelement an, von dem dieses Datenelement gerendert wird, das die HitData-Struktur generiert hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.charts.chartClasses:IChartElement</apiValueClassifier></apiValueDef><apiDesc>
	  Gibt das Diagrammelement an, von dem dieses Datenelement gerendert wird, das die HitData-Struktur generiert hat.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:BubbleChart"><apiName>BubbleChart</apiName><shortdesc>
  Das BubbleChart-Steuerelement stellt Daten mit drei Werten für jeden Datenpunkt dar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="minRadius" owner="mx.charts:BubbleChart" playerVersion="Flash9" type="Number">
<description>
  Der minimale Radius des kleinsten Diagrammelements in Pixeln. Flex weist diesen Radius dem Datenpunkt mit dem geringsten Wert zu. Allen anderen Datenpunkten wird ein größerer Radius auf der Basis ihres Werts in Relation zum kleinsten und größten Wert zugewiesen. Der Standartwert ist 0 Pixel.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="maxRadius" owner="mx.charts:BubbleChart" playerVersion="Flash9" type="Number">
<description>
  Der maximale Radius des größten Diagrammelements in Pixeln. Flex weist diesen Radius dem Datenpunkt mit dem größten Wert zu. Allen anderen Datenpunkten wird ein kleinerer Radius auf der Basis ihres Werts in Relation zum kleinsten und größten Wert zugewiesen. Der Standardwert ist 50 Pixel.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  The <code>&lt;mx:BubbleChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:BubbleChart
    <strong>Properties</strong>
    radiusAxis="<i>LinearAxis</i>"
 
    <strong>Styles</strong>
    maxRadius="50"
    minRadius="0"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  Das BubbleChart-Steuerelement stellt Daten mit drei Werten für jeden Datenpunkt dar. Jeder Datenpunkt wird durch einen Wert für seine Position entlang der horizontalen und der vertikalen Achse sowie einen Wert für die Größe des Diagrammelements in Relation zu anderen Datenpunkten im Diagramm definiert.
  
  <p>Das BubbleChart-Steuerelement erwartet, dass die Eigenschaft <codeph>series</codeph> ein Array von BubbleSeries-Objekten enthält.</p>
  
  </apiDesc><example conref="BubbleChartExample.mxml"><swfblock conref="examples/BubbleChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#BubbleSeries"><linktext>mx.charts.series.BubbleSeries</linktext></link></related-links><apiConstructor id="mx.charts:BubbleChart:BubbleChart"><apiName>BubbleChart</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:BubbleChart:radiusAxis:get"><apiName>radiusAxis</apiName><shortdesc>
      Die Achse, der der Blasenradius zugeordnet ist. In Blasendiagrammen wird die Größe der einzelnen Blasen als dritte Dimension verwendet, die ähnlich wie die x- und y-Positionen umgewandelt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Die Achse, der der Blasenradius zugeordnet ist. In Blasendiagrammen wird die Größe der einzelnen Blasen als dritte Dimension verwendet, die ähnlich wie die x- und y-Positionen umgewandelt wird. Standardmäßig entspricht <codeph>radiusAxis</codeph> einer linearen Achse, wobei die Eigenschaft <codeph>autoAdjust</codeph> auf <codeph>false</codeph> gesetzt ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:BubbleChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       Eine Modul-Factory wird als Kontext für die Verwendung eingebetteter Schriftarten und für die Suche nach dem Stilmanager, der die Stile dieser Komponente steuert, verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       Eine Modul-Factory wird als Kontext für die Verwendung eingebetteter Schriftarten und für die Suche nach dem Stilmanager, der die Stile dieser Komponente steuert, verwendet.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:Legend"><apiName>Legend</apiName><shortdesc>
      Das Legendensteuerelement fügt den Diagrammen eine Legende hinzu. Diese zeigt die Beschriftung für jede Datenserie im Diagramm und einen Schlüssel mit dem Diagrammelement für die Datenserie an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="tileWidth"/><Exclude kind="property" name="tileHeight"/><Exclude kind="property" name="label"/><Exclude kind="property" name="icon"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="defaultButton"/><styles><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
      Vertikale Ausrichtung jedes untergeordneten Objekts in seiner Tile-Zelle. Mögliche Werte sind <codeph>"top"</codeph>, <codeph>"middle"</codeph> und <codeph>"bottom"</codeph>. Wenn der Wert <codeph>„top“</codeph> lautet, befindet sich der obere Rand jedes untergeordneten Objekts am oberen Rand seiner Zelle. Wenn der Wert <codeph>„middle“</codeph> lautet, wird jedes untergeordnete Objekt vertikal in der Zelle zentriert. Wenn der Wert <codeph>„bottom“</codeph> lautet, befindet sich der untere Rand jedes untergeordneten Objekts am unteren Rand seiner Zelle.
     
      </description>
<default>"top"
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts:Legend" playerVersion="Flash9" type="Object">
<description>
      Gibt den Linienstrich für die Legendenelemente an.
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="uint">
<description>
      Die Farbe eines beliebigen Symbols einer Komponente. Beispiele sind etwa das Häkchen eines Kontrollkästchens oder der Pfeil auf der Schaltfläche einer Bildlaufleiste.
       
      </description>
<default>0x000000
     
      </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
      Anzahl der Pixel zwischen der oberen Rahmenlinie der Legende und dem oberen Teil ihres Inhaltsbereichs.
     
      </description>
<default>0
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
      Anzahl der Pixel zwischen der unteren Rahmenlinie der Legende und dem unteren Teil ihres Inhaltsbereichs.
     
      </description>
<default>0
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="markerWidth" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
      Gibt die Breite des Legendenelements an.
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="markerHeight" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
      Gibt die Höhe des Legendenelements an.
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style enumeration="top,bottom,right,left" inherit="yes" name="labelPlacement" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
      Gibt die Beschriftungsplatzierung des Legendenelements an. Gültige Werte sind<codeph>"top"</codeph>, <codeph>"bottom"</codeph>, <codeph>"right"</codeph> und <codeph>"left"</codeph>.
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
      Horizontale Ausrichtung jedes untergeordneten Objekts in seiner Tile-Zelle. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"center"</codeph> und <codeph>"right"</codeph>. Wenn der Wert <codeph>„left“</codeph> lautet, befindet sich der linke Rand jedes untergeordneten Objekts am linken Rand seiner Zelle. Wenn der Wert <codeph>„center“</codeph> lautet, wird jedes untergeordnete Objekt horizontal in der Zelle zentriert. Wenn der Wert <codeph>„rechts“</codeph> lautet, befindet sich der rechte Rand jedes untergeordneten Objekts am rechten Rand seiner Zelle.
     
      </description>
<default>"left"
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="uint">
<description>
      Farbe des Fokusrings, wenn sich die Komponente im Fokus befindet
       
      </description>
<default>0x70B2EE
      
      </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style inherit="no" name="disabledOverlayAlpha" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
      Der Alphawert für die Überlagerung, der bei Deaktivierung auf dem Container platziert wird.
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
      Radius von Komponentenecken. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für diese Klasse nicht außer Kraft gesetzt wird, ist er 0. Der Standardwert für ApplicationControlBar ist 5.
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="uint">
<description>
      Farbe des Inhaltsbereichs der Komponente.
       
      </description>
<default>0xFFFFFF
      
      </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="Number">
<description>
      Alpha des Inhaltshintergrunds für diese Komponente.
     
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="barColor" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="uint">
<description>
      Bestimmt die Farbe einer Fortschrittsleiste. Eine Fortschrittsleiste ist mit einem vertikalen Verlauf zwischen dieser und einer aus ihr berechneten helleren Farbe gefüllt. Dieser Stil hat keine Auswirkungen auf andere Komponenten, kann aber für einen Container festgelegt werden, um das Aussehen aller darin enthaltenen Fortschrittsleisten zu steuern. Der Standardwert ist <codeph>undefined</codeph>, das heißt, dass er nicht festgelegt ist. In diesem Fall wird die <codeph>themeColor</codeph>-Stileigenschaft verwendet.
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
      Die Hintergrundfarbe einer Komponente. Sie können <codeph>backgroundColor</codeph> und <codeph>backgroundImage</codeph> oder beides gleichzeitig festlegen. Manche Komponenten haben keinen Hintergrund. Das DataGrid-Steuerelement ignoriert diesen Stil. Der Standardwert ist <codeph>undefined</codeph>. Das heißt, dass er nicht eingestellt ist. Wenn dieser Stil und der <codeph>backgroundImage</codeph>-Stil <codeph>undefined</codeph> sind, hat die Komponente einen transparenten Hintergrund.
     
      <p>Beim Application-Container definiert dieser Stil die Hintergrundfarbe während des Ladens der Anwendung und den Farbverlauf des Hintergrunds bei laufender Anwendung. Flex berechnet das Verlaufsmuster zwischen einer etwas dunkleren und einer etwas helleren als der festgelegten Farbe.</p>
     
      <p>Die Standardskins für die meisten Flex-Steuerelemente sind teilweise transparent. Als Folge davon scheint die Hintergrundfarbe eines Containers teilweise auf die Steuerelemente im Container durch. Das kann vermieden werden, indem die Alphawerte der <codeph>fillAlphas</codeph>-Eigenschaft des Steuerelements auf 1 gesetzt werden, wie es im nachfolgenden Beispiel zu sehen ist:
      <pre>
      &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
          &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
      &lt;/mx:<i>Container</i>></pre>
      </p>
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
      Die Alphaebene der Farbe wird durch die <codeph>backgroundColor</codeph>-Eigenschaft festgelegt, die des Bilds oder der SWF-Datei durch den <codeph>backgroundImage</codeph>-Stil. Gültige Werte sind 0,0 bis 1,0. Bei den meisten Steuerelementen ist der Standardwert 1,0, aber bei den QuickInfo-Steuerelementen beträgt er 0,95 und bei den Alert-Steuerelementen 0,9.
      
      </description>
<default>1.0
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAttachment" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
      Wenn ein Hintergrundbild angegeben ist, gibt dieser Stil an, ob es bezüglich des Viewports fest (<codeph>"fixed"</codeph>) ist, oder sich mit dem Inhalt im Bildlauf bewegt (<codeph>"scroll"</codeph>).
     
      </description>
<default>"scroll"
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="uint">
<description>
      Von Komponentenskins verwendete Akzentfarbe. Die standardmäßige Schaltflächenskin verwendet diese Farbe als Hintergrundfarbton. Hervorhebungsfarben für Schiebereglerleisten verwenden diese Farbe. 
     
      </description>
<default>#0099FF
     
      </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen den untergeordneten Elementen in vertikaler Richtung. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für die Klasse nicht überschrieben wird, ist der Standardwert 6.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen den untergeordneten Elementen in horizontaler Richtung. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für die Klasse nicht überschrieben wird, ist der Standardwert 8.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  Der Offset der ersten Textzeile von der linken Seite des Containers in Pixeln.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.charts:Legend" playerVersion="Flash10" type="Class">
<description>
  Die Klasse, die IUITextField implementiert, das von dieser Komponente für die Darstellung von Text verwendet wird.
 
  <p>Sie kann auf die mx.core.UITextField-Klasse (zur Verwendung der in Flash Player integrierten klassischen TextField-Klasse) oder die mx.core.UIFTETextField-Klasse (zur Verwendung des Text Layout Frameworks, um verbesserte Textdarstellungen, einschließlich bidirektionalem Layout, zu erhalten) eingestellt werden.</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird. Mögliche Werte sind <codeph>"none"</codeph> und <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  Ausrichtung von Text in einem Container. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"right"</codeph> oder <codeph>"center"</codeph>.
 
  <p>Der Standardwert für die meisten Steuerelemente lautet <codeph>left</codeph>. Für die Button-, LinkButton- und AccordionHeader-Komponenten lautet der Standardwert <codeph>"center"</codeph>. Für diese Komponenten wird diese Eigenschaft nur erkannt, wenn die Eigenschaft <codeph>labelPlacement</codeph> auf <codeph>"left"</codeph> oder <codeph>"right"</codeph> gesetzt wurde. Wenn <codeph>labelPlacement</codeph> auf <codeph>"top"</codeph> oder <codeph>"bottom"</codeph> gesetzt wird, werden der Text und eventuell vorhandene Symbole zentriert.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.charts:Legend" playerVersion="Flash10" type="String">
<description>
  Das Gebietsschema des von dieser Komponente angezeigten Texts.
 
  <p>FTE und TLF verwenden dieses Gebietsschema für die Zuordnung von Unicode-Schriftarten zu Schriftartglyphen und für die Suche nach Ausweichschriftarten.</p>
 
  <p>Hinweis: Dieser Stil gilt nur, wenn eine MX-Komponente UIFTETextField als ihre <codeph>textFieldClass</codeph> festlegt.</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  Die Anzahl der zusätzlichen Pixel, die zwischen den Zeichen angezeigt werden. Durch einen positiven Wert wird der Zeichenabstand über den normalen Abstand hinaus vergrößert und durch einen negativen Wert verkleinert.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts:Legend" playerVersion="Flash9" type="Boolean">
<description>
  Ein boolescher Wert, der angibt, ob Kerning aktiviert (<codeph>true</codeph>) oder deaktiviert (<codeph>false</codeph>) ist. Der Begriff „Kerning“ bezeichnet die Anpassung des Zwischenraums zwischen bestimmten Zeichenpaaren zur Verbesserung der Lesbarkeit. Diese Funktion sollte nur verwendet werden, wenn sie unbedingt erforderlich ist, beispielsweise in Überschriften mit großen Schriften. Kerning wird nur für eingebettete erweiterte Anti-Aliasing-Schriftarten unterstützt. Bestimmte Schriftarten wie Verdana und Schriftarten mit fester Breite wie Courier New unterstützen Kerning nicht.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird. Gültige Werte sind <codeph>"normal"</codeph> und <codeph>"bold"</codeph>. Für Schaltflächensteuerelemente ist die Standardeinstellung <codeph>"bold"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  Legt die Eigenschaft <codeph>thickness</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelementen darstellen. Diese Eigenschaft gibt die Stärke der Glyphenkanten an. Mögliche Werte sind Zahlen von -200 bis 200. 
  
  <p>Diese Eigenschaft wird nur auf erweiterte Anti-Aliasing-Schriftarten angewendet, wenn die Eigenschaft <codeph>fontAntiAliasType</codeph> auf <codeph>"advanced"</codeph> eingestellt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird. Gültige Werte sind <codeph>"normal"</codeph> und <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  Die Höhe des Texts in Pixeln. Der Standardwert ist 10 für alle Steuerelemente mit Ausnahme des ColorPicker-Steuerelements. Für das ColorPicker-Steuerelement lautet der Standardwert 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  Legt die Eigenschaft <codeph>sharpness</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelementen darstellen. Diese Eigenschaft gibt die Schärfe der Glyphenkanten an. Mögliche Werte sind Zahlen von -400 bis 400. 
  
  <p>Diese Eigenschaft wird nur auf erweiterte Anti-Aliasing-Schriftarten angewendet, wenn die Eigenschaft <codeph>fontAntiAliasType</codeph> auf <codeph>"advanced"</codeph> eingestellt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  Legt die Eigenschaft <codeph>gridFitType</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelementen darstellen. Mögliche Werte sind <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) und <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Diese Eigenschaft wird nur auf erweiterte Anti-Aliasing-Schriftarten angewendet, wenn die Eigenschaft <codeph>fontAntiAliasType</codeph> auf <codeph>"advanced"</codeph> eingestellt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  Der Name der zu verwendenden Schriftart. Anders als in einer vollständigen CSS-Implementierung werden durch Kommas getrennte Listen nicht unterstützt. Sie können den Namen einer beliebigen Schriftartfamilie verwenden. Wenn Sie eine generische Schriftartbezeichnung wählen, wird diese in die entsprechende Geräteschriftart konvertiert.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  Legt die Eigenschaft <codeph>antiAliasType</codeph> von internen Textfeldern fest. Mögliche Werte sind <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) und <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>Der Standardwert ist <codeph>"advanced"</codeph>. Dies aktiviert das erweiterte Anti-Aliasing, wenn Sie eine eingebettete erweiterte Anti-Aliasing-Schriftart verwenden. Stellen Sie den Wert <codeph>"normal"</codeph> ein, um das erweiterte Anti-Aliasing zu deaktivieren.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
  
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts:Legend" playerVersion="Flash9" type="uint">
<description>
  Farbe des Texts in der Komponente, wenn deaktiviert.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts:Legend" playerVersion="Flash9" type="uint">
<description>
  Farbe des Texts in der Komponente einschließlich der Komponentenbeschriftung.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der rechten Rahmenlinie des Steuerelements und der rechten Kante des Inhaltsbereichs.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der linken Rahmenlinie des Steuerelements und der linken Kante des Inhaltsbereichs.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Abstand des Schlagschattens. Wenn für eine Eigenschaft ein negativer Wert eingestellt ist, erscheint über der Komponente ein Schatten.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="String">
<description>
  Richtung des Schlagschattens. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"center"</codeph> und <codeph>"right"</codeph>.
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropShadowColor" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Farbe des Schlagschattens.
 
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Boolesche Eigenschaft, die festlegt, ob die Komponente über einen sichtbaren Schlagschatten verfügt. Der Standardwert ist <codeph>false</codeph>.
 
  <p><b>Hinweis:</b> Um Schlagschatten für Container anzuzeigen, legen Sie die <codeph>contentBackgroundColor</codeph>-Eigenschaft fest. Andernfalls wird der Schatten hinter dem Container angezeigt, weil der Standardhintergrund eines Containers transparent ist.</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  Boolesche Eigenschaft, die festlegt, ob die Komponente über einen sichtbaren Schlagschatten verfügt. Dieser Stil wird mit <codeph>borderStyle="solid"</codeph> verwendet. Der Standardwert lautet <codeph>false</codeph>.
 
  <p><b>Hinweis:</b> Um Schlagschatten für Container anzuzeigen, legen Sie die Eigenschaften <codeph>backgroundColor</codeph> oder <codeph>backgroundImage</codeph> fest. Andernfalls wird der Schatten hinter dem Container angezeigt, weil der Standardhintergrund eines Containers transparent ist.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Sichtbarkeit des Rahmens.
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Stärke des Begrenzungsrahmens. Wird nur verwendet, wenn <codeph>borderStyle</codeph> auf <codeph>"solid"</codeph> gesetzt ist.
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  Stil des Begrenzungsrahmens. Mögliche Werte sind <codeph>"none"</codeph>, <codeph>"solid"</codeph>, <codeph>"inset"</codeph> und <codeph>"outset"</codeph>. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für diese Klasse nicht außer Kraft gesetzt wird, ist er <codeph>"inset"</codeph>. Der Standardwert für die meisten Container ist <codeph>"none"</codeph>. Die <codeph>"inset"</codeph>- und <codeph>"outset"</codeph>-Werte sind nur beim Halo-Thema gültig.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSkin" owner="mx.charts:Legend" playerVersion="Flash9" type="Class">
<description>
  Klasse für die Rahmenskin einer Komponente. Der Standardwert aller Komponenten, die den Standardwert nicht selbst explizit festlegen, lautet für das Halo-Design <codeph>mx.skins.halo.HaloBorder</codeph> und für das Spark-Design <codeph>mx.skins.spark.BorderSkin</codeph>. Der Panel-Container hat für das Halo-Design einen Standardwert von <codeph>mx.skins.halo.PanelSkin</codeph> und für das Spark-Design von <codeph>mx.skins.spark.BorderSkin</codeph>. Um den Standardwert für eine Komponente festzustellen, sehen Sie in der Standard-CSS-Datei nach.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSides" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="String">
<description>
  Seiten des Begrenzungsrahmens. Ein String mit Leerzeichen als Trennzeichen, der festlegt, welche Seiten des Rahmens angezeigt werden sollen. Der String kann <codeph>"left"</codeph>, <codeph>"top"</codeph>, <codeph>"right"</codeph> und <codeph>"bottom"</codeph> in beliebiger Reihenfolge enthalten. Der Standardwert ist <codeph>"left top right bottom"</codeph>, wodurch alle vier Seiten angezeigt werden. Dieser Stil wird nur verwendet, wenn borderStyle <codeph>"solid"</codeph> ist.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  Farbe des Rahmens. Der Standardwert hängt von der Komponentenklasse ab. Wenn er für diese Klasse nicht überschrieben wird, lautet er für das Halo-Design <codeph>0xB7BABC</codeph> und für das Spark-Design <codeph>0x696969</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Alpha des Rahmens.
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSize" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="String">
<description>
  Skaliert das von <codeph>backgroundImage</codeph> festgelegte Bild auf verschiedene prozentuale Größen. Ein Wert von <codeph>"100%"</codeph> streckt das Bild über die gesamte Komponente. Um einen Prozentwert festzulegen, müssen Sie das Prozentzeichen (%) angeben. Der Standardwert des Application-Containers ist <codeph>100%</codeph>. Der Standardwert für alle anderen Container ist <codeph>auto</codeph>, wodurch die Originalgröße des Bilds beibehalten wird.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="Object">
<description>
  Das Hintergrundbild einer Komponente. Es kann eine absolute oder relative URL oder Klasse sein. Sie können entweder <codeph>backgroundColor</codeph> oder <codeph>backgroundImage</codeph> festlegen. Das Hintergrundbild wird über der Hintergrundfarbe angezeigt. Der Standardwert ist <codeph>undefined</codeph>, also 
„nicht festgesetzt“. Wenn dieser Stil und der <codeph>backgroundColor</codeph>-Stil nicht definiert sind, hat die Komponente einen transparenten Hintergrund.
 
  <p>Die Standardskins für die meisten Flex-Steuerelemente sind teilweise transparent. Als Folge davon scheint das Hintergrundbild eines Containers teilweise auf die Steuerelemente im Container durch. Das kann vermieden werden, indem die Alphawerte der <codeph>fillAlphas</codeph>-Eigenschaft des Steuerelements auf 1 gesetzt werden, wie es im nachfolgenden Beispiel zu sehen ist:
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="backgroundDisabledColor" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Hintergrundfarbe der Komponente, wenn sie deaktiviert ist. Der globale Standardwert ist <codeph>undefined</codeph>. Der Standardwert für List-Steuerelemente ist <codeph>0xDDDDDD</codeph> (hellgrau). Ist ein Container deaktiviert, erscheint der Hintergrund abgeblendet; der Abblendungsgrad wird durch den <codeph>disabledOverlayAlpha</codeph>-Stil bestimmt.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
      
      <p>The <code>&lt;mx:Legend&gt;</code> tag inherits all the properties
      of its parent classes and adds the following properties:</p>
      
      <pre>
      &lt;mx:Legend
        <strong>Properties</strong>
        autoLayout="true|false"
        clipContent="true|false"
        creationIndex="undefined"
        creationPolicy="auto|all|queued|none"
        dataProvider="<i>No default</i>"
        direction="horizontal|vertical"
        horizontalScrollPosition="0"
        legendItemClass="<i>No default</i>"
        verticalScrollPosition="0"   
     
        <strong>Styles</strong>
        backgroundAlpha="1.0"
        backgroundAttachment="scroll"
        backgroundColor="undefined"
        backgroundDisabledColor="undefined"
        backgroundImage="undefined"
        backgroundSize="auto" 
        barColor="undefined"
        borderColor="0xAAB3B3"
        borderSides="left top right bottom"
        borderSkin="mx.skins.halo.HaloBorder"
        borderStyle="inset|none|solid|outset"
        borderThickness="1"
        color="0x0B333C"
        cornerRadius="0"
        disabledColor="0xAAB3B3"
        disbledOverlayAlpha="undefined"
        dropShadowColor="0x000000"
        dropShadowEnabled="false"
        fontAntiAliasType="advanced"
        fontfamily="Verdana"
        fontGridFitType="pixel"
        fontSharpness="0""
        fontSize="10"
        fontStyle="normal"
        fontThickness="0"
        fontWeight="normal"
        horizontalAlign="left|center|right"
        horizontalGap="<i>8</i>"
        labelPlacement="right|left|top|bottom"
        markerHeight="15"
        markerWidth="10"
        paddingBottom="0"
        paddingLeft="0"
        paddingRight="0"
        paddingTop="0"
        shadowDirection="center"
        shadowDistance="2"
        stroke="<i>IStroke; no default</i>"
        textAlign="left"
        textDecoration="none|underline"
        textIndent="0"
        verticalAlign="top|middle|bottom"
        verticalGap="<i>6</i>"
        
        <strong>Events</strong>
        childAdd="<i>No default</i>"
        childIndexChange="<i>No default</i>"
        childRemove="<i>No default</i>"
        dataChange="<i>No default</i>"
        itemClick="<i>Event; no default</i>"
        itemMouseDown="<i>Event; no default</i>"
        itemMouseOut="<i>Event; no default</i>"
        itemMouseOver="<i>Event; no default</i>"
        itemMouseUp="<i>Event; no default</i>"
      /&gt;
      </pre>
     
      ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IContainer</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
      Das Legendensteuerelement fügt den Diagrammen eine Legende hinzu. Diese zeigt die Beschriftung für jede Datenserie im Diagramm und einen Schlüssel mit dem Diagrammelement für die Datenserie an.
      
      <p>Sie können ein Legendensteuerelement initialisieren, indem Sie einen Bezeichner für ein Diagrammsteuerelement in die Eigenschaft <codeph>dataProvider</codeph> des Legendensteuerelements einbinden, oder ein Array von LegendItem-Objekten definieren.</p>
     
      </apiDesc><example conref="PlotChartExample.mxml"><swfblock conref="examples/PlotChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#LegendItem"><linktext>mx.charts.LegendItem</linktext></link></related-links><adobeApiEvent id="mx.charts:Legend_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
      Wird ausgelöst, wenn sich die Dateneigenschaft verändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Wird ausgelöst, wenn sich die <codeph>data</codeph>-Eigenschaft ändert.
     
      <p>Wenn eine Legende in einer Liste oder in anderen Komponenten als Renderer verwendet wird, wird die <codeph>data</codeph>-Eigenschaft verwendet, um die anzuzeigenden Daten an die Legende zu übergeben.</p>
     
      </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.events.ChildExistenceChangedEvent.CHILD_REMOVE_childRemove"><apiName>childRemove</apiName><shortdesc>
      Wird ausgelöst, bevor ein untergeordnetes Element einer Legende entfernt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ChildExistenceChangedEvent.CHILD_REMOVE</apiEventType><adobeApiEventClassifier>mx.events.ChildExistenceChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Wird ausgelöst, bevor ein untergeordnetes Element einer Legende entfernt wird.
     
      <p>Dieses Ereignis wird ausgelöst, wenn eine der folgenden Methoden aufgerufen wird: <codeph>removeChild()</codeph>, <codeph>removeChildAt()</codeph> oder <codeph>removeAllChildren()</codeph>.</p>
     
      </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.events.IndexChangedEvent.CHILD_INDEX_CHANGE_childIndexChange"><apiName>childIndexChange</apiName><shortdesc>
      Wird ausgelöst, nachdem sich die Indexposition eines untergeordneten Elements der Legende (im Index der untergeordneten Elemente der Legende) geändert hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.IndexChangedEvent.CHILD_INDEX_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.IndexChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Wird ausgelöst, nachdem sich die Indexposition eines untergeordneten Elements der Legende (im Index der untergeordneten Elemente der Legende) geändert hat. Dieses Ereignis wird ausschließlich für das als Argument für die <codeph>setChildIndex()</codeph>-Methode angegebene untergeordnete Element ausgelöst. Es wird für kein anderes untergeordnetes Element, dessen Indexposition sich als Nebeneffekt des Aufrufs der <codeph>setChildIndex()</codeph>-Methode ändert, ausgelöst.
     
      <p>Die Indexposition des untergeordneten Elements wird bei Aufruf der <codeph>setChildIndex()</codeph>-Methode geändert.</p>
     
      </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.events.ChildExistenceChangedEvent.CHILD_ADD_childAdd"><apiName>childAdd</apiName><shortdesc>
      Wird ausgelöst, nachdem ein untergeordnetes Element einer Legende hinzugefügt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ChildExistenceChangedEvent.CHILD_ADD</apiEventType><adobeApiEventClassifier>mx.events.ChildExistenceChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Wird ausgelöst, nachdem ein untergeordnetes Element einer Legende hinzugefügt wurde.
     
      <p>Das childAdd-Ereignis wird bei Aufruf der <codeph>addChild()</codeph>- oder der <codeph>addChildAt()</codeph>-Methode ausgelöst. Wenn ein Container zum ersten Mal erstellt wird, wird die <codeph>addChild()</codeph>-Methode automatisch für jede in der MXML-Datei deklarierte untergeordnete Komponente aufgerufen. Die <codeph>addChildAt()</codeph>-Methode wird immer dann automatisch aufgerufen, wenn ein Repeater-Objekt untergeordnete Objekte hinzufügt oder entfernt. Der Anwendungsentwickler kann diese Methoden zum Hinzufügen neuer untergeordneter Objekte auch manuell aufrufen.</p>
     
      <p>Zu dem Zeitpunkt, an dem dieses Ereignis gesendet wird, ist das untergeordnete Objekt bereits initialisiert, aber seine Breite und Höhe wurde noch nicht berechnet, und das untergeordnete Objekt ist noch nicht am Bildschirm zu sehen. Wenn Sie eine Benachrichtigung erhalten möchten, wenn das untergeordnete Objekt vollständig initialisiert und gerendert ist, registrieren Sie sich als Listener für das <codeph>creationComplete</codeph>-Ereignis des untergeordneten Objekts.</p>
     
      </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.charts.events.LegendMouseEvent.ITEM_MOUSE_UP_itemMouseUp"><apiName>itemMouseUp</apiName><shortdesc>
      Wird ausgelöst, wenn der Benutzer die Maustaste über einem LegendItem in der Legende loslässt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.LegendMouseEvent.ITEM_MOUSE_UP</apiEventType><adobeApiEventClassifier>mx.charts.events.LegendMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Wird ausgelöst, wenn der Benutzer die Maustaste über einem LegendItem in der Legende loslässt.
     
      </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.charts.events.LegendMouseEvent.ITEM_MOUSE_OVER_itemMouseOver"><apiName>itemMouseOver</apiName><shortdesc>
      Wird ausgelöst, wenn der Benutzer die Maus über ein LegendItem im Legendensteuerelement führt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.LegendMouseEvent.ITEM_MOUSE_OVER</apiEventType><adobeApiEventClassifier>mx.charts.events.LegendMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Wird ausgelöst, wenn der Benutzer die Maus über ein LegendItem im Legendensteuerelement führt.
     
      </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.charts.events.LegendMouseEvent.ITEM_MOUSE_OUT_itemMouseOut"><apiName>itemMouseOut</apiName><shortdesc>
      Wird ausgelöst, wenn der Benutzer die Maus von einem LegendItem in der Legende entfernt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.LegendMouseEvent.ITEM_MOUSE_OUT</apiEventType><adobeApiEventClassifier>mx.charts.events.LegendMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Wird ausgelöst, wenn der Benutzer die Maus von einem LegendItem in der Legende entfernt.
     
      </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.charts.events.LegendMouseEvent.ITEM_MOUSE_DOWN_itemMouseDown"><apiName>itemMouseDown</apiName><shortdesc>
      Wird ausgelöst, wenn der Benutzer die Maustaste über einem LegendItem im Legendensteuerelement drückt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.LegendMouseEvent.ITEM_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>mx.charts.events.LegendMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Wird ausgelöst, wenn der Benutzer die Maustaste über einem LegendItem im Legendensteuerelement drückt.
     
      </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.charts.events.LegendMouseEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
      Wird ausgelöst, wenn der Benutzer auf ein LegendItem im Legendensteuerelement klickt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.LegendMouseEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.charts.events.LegendMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Wird ausgelöst, wenn der Benutzer auf ein LegendItem im Legendensteuerelement klickt.
     
      </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.charts:Legend:Legend"><apiName>Legend</apiName><shortdesc>
          Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
          Konstruktor.
          
          </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts:Legend:addChildAt"><apiName>addChildAt</apiName><shortdesc>
          Fügt diesem Container ein untergeordnetes DisplayObject hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Das hinzugefügte untergeordnete Objekt als ein Objekt des Typs DisplayObject. Normalerweise wird der Rückgabewert in UIComponent oder in den Typ der hinzugefügten Komponente konvertiert.
         
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Das DisplayObject, das als untergeordnetes Objekt dieses Containers hinzugefügt werden soll. Es muss die IUIComponent-Schnittstelle implementieren.
         
          </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition, an der das untergeordnete Objekt hinzugefügt werden soll.
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Fügt diesem Container ein untergeordnetes DisplayObject hinzu. Das untergeordnete Objekt wird an der angegebenen Indexposition eingefügt.
         
          <p><b>Hinweis: </b>Wenn für das <codeph>child</codeph>-Argument für die Methode der Typ DisplayObject angegeben ist, muss das Argument die IUIComponent-Schnittstelle implementieren, damit es als untergeordnetes Objekt eines Containers hinzugefügt werden kann. Alle Flex-Komponenten implementieren diese Schnittstelle.</p>
         
          <p>Untergeordnete Objekte werden von hinten nach vorne angeordnet. In anderen Worten: Wenn sich untergeordnete Objekte überlagern, wird dasjenige mit der Indexposition 0 als hinterstes und dasjenige mit der Indexposition <codeph>numChildren - 1</codeph> als vorderstes Objekt angezeigt. Dies bedeutet, dass neu hinzugefügte untergeordnete Objekte immer vor den vorhandenen untergeordneten Objekten angeordnet werden.</p>
         
          <p>Wenn Sie ein neues untergeordnetes Objekt an einer bereits von einem vorhandenen untergeordneten Objekt belegten Indexposition einfügen, wird das bereits vorhandene Objekt nicht ersetzt. Stattdessen macht das bereits vorhandene untergeordnete Objekt (und alle Objekte danach) Platz und erhält eine um 1 erhöhte Indexposition. Beispiel: Angenommen, ein Container enthält die untergeordneten Objekte (A, B, C), und Sie fügen D an der Indexposition 1 ein. Der Container enthält danach die untergeordneten Objekte (A, D, B, C). Zum Ersetzen eines bereits vorhandenen untergeordneten Objekts müssen Sie dieses zunächst entfernen, bevor Sie das neue hinzufügen.</p>
         
          </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.IUIComponent.xml"><linktext>mx.core.IUIComponent</linktext></link></related-links></apiOperation><apiOperation id="mx.charts:Legend:addChild"><apiName>addChild</apiName><shortdesc>
          Fügt diesem Container ein untergeordnetes DisplayObject hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Das hinzugefügte untergeordnete Objekt als ein Objekt des Typs DisplayObject. Normalerweise wird der Rückgabewert in UIComponent oder in den Typ der hinzugefügten Komponente konvertiert.
         
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Das DisplayObject, das als untergeordnetes Objekt dieses Containers hinzugefügt werden soll. Es muss die IUIComponent-Schnittstelle implementieren.
         
          </apiDesc></apiParam><apiTipTexts><apiTipText>Fügt diesem Container ein untergeordnetes Objekt hinzu.
          
          </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
          Fügt diesem Container ein untergeordnetes DisplayObject hinzu. Das untergeordnete Objekt wird nach anderen vorhandenen untergeordneten Objekten hinzugefügt, sodass das erste hinzugefügte untergeordnete Objekt die Indexposition 0, das nächste die Indexposition 1 usw. hat.
         
          <p><b>Hinweis: </b>Wenn für das <codeph>child</codeph>-Argument für die Methode der Typ DisplayObject angegeben ist, muss das Argument die IUIComponent-Schnittstelle implementieren, damit es als untergeordnetes Objekt eines Containers hinzugefügt werden kann. Alle Flex-Komponenten implementieren diese Schnittstelle.</p>
         
          <p>Untergeordnete Objekte werden von hinten nach vorne angeordnet. In anderen Worten: Wenn sich untergeordnete Objekte überlagern, wird dasjenige mit der Indexposition 0 als hinterstes und dasjenige mit der Indexposition <codeph>numChildren - 1</codeph> als vorderstes Objekt angezeigt. Dies bedeutet, dass neu hinzugefügte untergeordnete Objekte immer vor den vorhandenen untergeordneten Objekten angeordnet werden.</p>
         
          </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.IUIComponent.xml"><linktext>mx.core.IUIComponent</linktext></link></related-links></apiOperation><apiOperation id="mx.charts:Legend:addElementAt"><apiName>addElementAt</apiName><shortdesc conref="mx.core.IVisualElementContainer#addElementAt()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#addElementAt()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:addElement"><apiName>addElement</apiName><shortdesc conref="mx.core.IVisualElementContainer#addElement()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#addElement()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:protected:attachOverlay"><apiName>attachOverlay</apiName><shortdesc>
          Wird intern durch den Dissolve-Effekt zum Hinzufügen der Überlagerung zum Chrom eines Containers verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          Wird intern durch den Dissolve-Effekt zum Hinzufügen der Überlagerung zum Chrom eines Containers verwendet. 
          
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:contentToGlobal"><apiName>contentToGlobal</apiName><shortdesc conref="mx.core.UIComponent#contentToGlobal()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#contentToGlobal()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:contentToLocal"><apiName>contentToLocal</apiName><shortdesc conref="mx.core.UIComponent#contentToLocal()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#contentToLocal()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:protected:createBorder"><apiName>createBorder</apiName><shortdesc>
          Erstellt die Rahmenskin des Containers, wenn diese benötigt wird und nicht bereits vorhanden ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          Erstellt die Rahmenskin des Containers, wenn diese benötigt wird und nicht bereits vorhanden ist.
          
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:createComponentFromDescriptor"><apiName>createComponentFromDescriptor</apiName><shortdesc>
          Erstellt anhand eines einzelnen UIComponentDescriptor die entsprechende Komponente und fügt die Komponente als untergeordnetes Element dieses Containers hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Komponente, die erstellt wird.
         
          </apiDesc><apiType value="mx.core:IFlexDisplayObject"/></apiReturn><apiParam><apiItemName>descriptor</apiItemName><apiType value="mx.core:ComponentDescriptor"/><apiDesc>Der UIComponentDescriptor für die zu erstellende Komponente. Dieses Argument ist entweder ein UIComponentDescriptor-Objekt oder die Indexposition eines der untergeordneten Elemente des Containers (eine Ganzzahl zwischen 0 und n-1, wobei „n“ für die Gesamtzahl der untergeordneten Objekte dieses Containers steht).
         
          </apiDesc></apiParam><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc>Wenn <codeph>false</codeph>, wird diese Komponente erstellt, jedoch keines ihrer untergeordneten Elemente. Wenn <codeph>true</codeph>, ruft Flex nach Erstellung der Komponente die <codeph>createComponentsFromDescriptors()</codeph>-Methode zum Erstellen aller oder eines Teils ihrer untergeordneten Elemente auf. Dies hängt vom Wert der <codeph>creationPolicy</codeph>-Eigenschaft der Komponente ab.
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Erstellt anhand eines einzelnen UIComponentDescriptor die entsprechende Komponente und fügt die Komponente als untergeordnetes Element dieses Containers hinzu.
          
          <p>Diese Methode instanziiert das neue Objekt, fügt es jedoch nicht der Anzeigeliste hinzu, sodass das Objekt standardmäßig nicht am Bildschirm angezeigt wird. Zum Hinzufügen des neuen Objekts zur Anzeigeliste rufen Sie nach dem Aufruf der <codeph>createComponentFromDescriptor()</codeph>-Methode die <codeph>validateNow()</codeph>-Methode für den Container auf, wie im folgenden Beispiel dargestellt:
          <pre>
          myVBox.createComponentFromDescriptor(myVBox.childDescriptors[0],false);
          myVBox.validateNow();
          </pre>
          </p>
          
          <p>Alternativ dazu können Sie die <codeph>createComponentsFromDescriptors()</codeph>-Methode für den Container aufrufen und damit alle Komponenten in einem Durchgang erstellen. Nach dem Aufruf der <codeph>createComponentsFromDescriptors()</codeph>-Methode brauchen Sie die <codeph>validateNow()</codeph>-Methode nicht aufzurufen.</p>
         
          </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.UIComponentDescriptor.xml"><linktext>mx.core.UIComponentDescriptor</linktext></link></related-links></apiOperation><apiOperation id="mx.charts:Legend:createComponentsFromDescriptors"><apiName>createComponentsFromDescriptors</apiName><shortdesc>
          Durchläuft das Array von childDescriptors und ruft für jeden davon die createComponentFromDescriptor()-Methode auf.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Wenn <codeph>true</codeph>, werden die Komponenten auf rekursive Weise erstellt.
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Durchläuft das Array von <codeph>childDescriptors</codeph> und ruft für jeden davon die <codeph>createComponentFromDescriptor()</codeph>-Methode auf.
          
          <p>Ist der Wert der <codeph>creationPolicy</codeph>-Eigenschaft des Containers <codeph>ContainerCreationPolicy.ALL</codeph>, wird diese Methode während der Initialisierungssequenz automatisch aufgerufen.</p>
          
          <p>Ist der Wert der <codeph>creationPolicy</codeph>-Eigenschaft des Containers <codeph>ContainerCreationPolicy.AUTO</codeph>, wird diese Methode automatisch aufgerufen, wenn die untergeordneten Elemente des Containers in Kürze sichtbar werden.</p>
          
          <p>Wenn der Wert der <codeph>creationPolicy</codeph>-Eigenschaft des Containers <codeph>ContainerCreationPolicy.NONE</codeph> ist, müssen Sie diese Funktion aufrufen, wenn Sie diese untergeordneten Elemente des Containers erstellen möchten.</p>
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:createDeferredContent"><apiName>createDeferredContent</apiName><shortdesc>
          Führt den entsprechenden Aufruf der createComponentsFromDescriptors(true)-Methode für Container aus, die die IDeferredContentOwner-Schnittstelle implementieren, um die verzögerte Instanziierung zu unterstützen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          Führt den entsprechenden Aufruf der <codeph>createComponentsFromDescriptors(true)</codeph>-Methode für Container aus, die die IDeferredContentOwner-Schnittstelle implementieren, um die verzögerte Instanziierung zu unterstützen.
         
          </apiDesc></apiOperationDetail><related-links><link href="mx.charts.xml#Legend/createComponentsFromDescriptors()"><linktext>createComponentsFromDescriptors()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts:Legend:executeBindings"><apiName>executeBindings</apiName><shortdesc>
          Führt alle Datenbindungen an diesem Container aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Wenn <codeph>false</codeph>, werden nur die Bindungen an diesem Container ausgeführt. Wenn <codeph>true</codeph>, werden auch die Bindungen an den untergeordneten Elementen des Containers und den darunter untergeordneten Elementen usw., also sämtlichen „Nachkommen“ des Containers, ausgeführt.
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Führt alle Datenbindungen an diesem Container aus. Flex ruft diese Methode automatisch auf, sobald ein Container erstellt wurde, damit alle Datenbindungen mit Zielen in diesem Container ausgeführt werden. Umgehung des MXML-Container/Bindungsproblems (177074): Container.executeBindings() wird so überschrieben, dass beim Aufruf der BindingManager.executeBindings()-Methode descriptor.document vor parentDocument Vorrang hat. Dies sollte immer zum korrekten Verhalten für durch den Deskriptor erstellte Instanzen führen, und bietet das ursprüngliche Verhalten für prozedurgesteuert erstellte Instanzen. (Im zweiten Fall tritt der Fehler nicht immer auf.) Eine vollständigere Fehlerbehebung, die ein korrektes Verhalten in beiden Fällen (non-DI-Szenarien und Szenarien mit erneut untergeordneten Komponenten) ist für Update 1 geplant.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:executeChildBindings"><apiName>executeChildBindings</apiName><shortdesc>
          Führt die Bindungen in die untergeordneten UIComponent-Objekte dieses Containers aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc>Wenn <codeph>false</codeph>, werden nur die Bindungen an den dem Container unmittelbar untergeordneten Elementen ausgeführt. Wenn <codeph>true</codeph>, werden auch die Bindungen auch an den darunter untergeordneten Elementen usw., also sämtlichen „Nachkommen“ des Containers, ausgeführt.
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Führt die Bindungen in die untergeordneten UIComponent-Objekte dieses Containers aus. Flex ruft diese Methode automatisch auf, sobald ein Container erstellt wurde.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:getChildAt"><apiName>getChildAt</apiName><shortdesc>
          Ruft das n-te untergeordnete Komponentenobjekt ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Verweis auf das untergeordnete Element als ein Objekt des Typs DisplayObject. Normalerweise wird der Rückgabewert in UIComponent oder den Typ eines spezifischen Flex-Steuerelements konvertiert, beispielsweise ComboBox oder TextArea.
          
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Zahl zwischen 0 und (numChildren - 1).
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Ruft das <i>n</i>-te untergeordnete Komponentenobjekt ab.
         
          <p>Die von dieser Methode zurückgegebenen untergeordneten Elemente umfassen untergeordnete Elemente, die in MXML deklariert sind und solche, die mithilfe der <codeph>addChild()</codeph>- oder der <codeph>addChildAt()</codeph>-Methode hinzugefügt werden.</p>
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:getChildByName"><apiName>getChildByName</apiName><shortdesc>
          Gibt das untergeordnete Element zurück, dessen name-Eigenschaft der angegebene String ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Das DisplayObject, das das untergeordnete Element als Objekt des Typs DisplayObject darstellt. Normalerweise wird der Rückgabewert in UIComponent oder den Typ eines spezifischen Flex-Steuerelements konvertiert, beispielsweise ComboBox oder TextArea. Gibt einen Laufzeitfehler aus, wenn das untergeordnete Element mit dem angegebenen Namen nicht vorhanden ist.
          
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>Der Bezeichner des untergeordneten Elements.
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Gibt das untergeordnete Element zurück, dessen <codeph>name</codeph>-Eigenschaft der angegebene String ist.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:getChildIndex"><apiName>getChildIndex</apiName><shortdesc>
          Ruft die nullbasierte Indexposition eines bestimmten untergeordneten Elements ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Zahl zwischen 0 und (numChildren - 1).
          
          </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Verweis auf untergeordnetes Element, dessen Indexposition abgerufen werden soll.
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Ruft die nullbasierte Indexposition eines bestimmten untergeordneten Elements ab.
         
          <p>Das erste untergeordnete Element des Containers (d. h.: das erste Tag für ein untergeordnetes Element, das in einer MXML-Deklaration angezeigt wird) hat die Indexposition 0, das zweite untergeordnete Element die Indexposition 1 usw. Die Indexpositionen der untergeordneten Elemente eines Containers bestimmen die Reihenfolge, in welcher das Layout für sie erfolgt. Beispiel: In einer VBox befindet sich das untergeordnete Element mit der Indexposition 0 auf der obersten Ebene, das untergeordnete Objekt mit der Indexposition 1 befindet sich darunter usw.</p>
         
          <p>Wenn Sie ein untergeordnetes Objekt durch Aufruf der <codeph>addChild()</codeph>-Methode hinzufügen, ist die Indexposition des neuen untergeordneten Objekts gleich der höchsten Indexposition unter den vorhandenen untergeordneten Objekten plus 1. Sie können ein untergeordnetes Element mit der <codeph>addChildAt()</codeph>-Methode an der angegebenen Indexposition einfügen. In diesem Fall werden die Indexpositionen des ursprünglich an dieser Indexposition vorhandenen untergeordneten Elements und aller untergeordneten Elemente mit darüber liegenden Indexpositionen alle um 1 erhöht, sodass alle Indexpositionen in den Bereich zwischen 0 und <codeph>(numChildren - 1)</codeph> fallen.</p>
         
          <p>Wenn Sie ein untergeordnetes Element durch Aufruf der <codeph>removeChild()</codeph>- oder der <codeph>removeChildAt()</codeph>-Methode entfernen, werden die Indexpositionen der verbleibenden untergeordneten Elemente so angepasst, dass alle Indexpositionen in den Bereich zwischen 0 und <codeph>(numChildren - 1)</codeph> fallen.</p>
         
          <p>Gibt <codeph>myView.getChildIndex(myChild)</codeph> den Wert 5 zurück, gibt <codeph>myView.getChildAt(5)</codeph> das Objekt myChild zurück.</p>
         
          <p>Die Indexposition eines untergeordneten Elements kann durch Aufruf der <codeph>setChildIndex()</codeph>-Methode geändert werden.</p>
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:getChildren"><apiName>getChildren</apiName><shortdesc>
          Gibt ein Array von DisplayObject-Objekten zurück, das aus den untergeordneten Inhaltsobjekten des Containers besteht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Array von DisplayObject-Objekten, das aus den untergeordneten Inhaltsobjekten des Containers besteht.
         
          </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
          Gibt ein Array von DisplayObject-Objekten zurück, das aus den untergeordneten Inhaltsobjekten des Containers besteht. Dieses Array enthält <b>nicht</b> die DisplayObjects, die die Anzeigeelemente des Containers implementieren, wie etwa sein Rahmen oder Hintergrundbild.
         
          </apiDesc></apiOperationDetail><related-links><link href="mx.charts.xml#Legend/rawChildren"><linktext>rawChildren</linktext></link></related-links></apiOperation><apiOperation id="mx.charts:Legend:getElementAt"><apiName>getElementAt</apiName><shortdesc conref="mx.core.IVisualElementContainer#getElementAt()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#getElementAt()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:getElementIndex"><apiName>getElementIndex</apiName><shortdesc conref="mx.core.IVisualElementContainer#getElementIndex()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#getElementIndex()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:globalToContent"><apiName>globalToContent</apiName><shortdesc conref="mx.core.UIComponent#globalToContent()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#globalToContent()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:protected:layoutChrome"><apiName>layoutChrome</apiName><shortdesc>
          Reagiert auf Größenänderungen, indem die Positionen und Größen der Rahmenlinien dieses Containers festgelegt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Legt die Breite der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleX</codeph>-Eigenschaft der Komponente.
         
          </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Legt die Höhe der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleY</codeph>-Eigenschaft der Komponente.
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Reagiert auf Größenänderungen, indem die Positionen und Größen der Rahmenlinien dieses Containers festgelegt werden. Dies ist eine erweiterte Methode, die Sie bei der Erstellung einer Container-Unterklasse überschreiben können.
         
          <p>Flex ruft die <codeph>layoutChrome()</codeph>-Methode auf, wenn ein Container einem übergeordneten Container mit der <codeph>addChild()</codeph>-Methode hinzugefügt wird und die <codeph>invalidateDisplayList()</codeph>-Methode des Containers aufgerufen wird.</p>
         
          <p>Die <codeph>Container.layoutChrome()</codeph>-Methode wird unabhängig vom Wert der <codeph>autoLayout</codeph>-Eigenschaft aufgerufen.</p>
         
          <p>Die <codeph>Container.layoutChrome()</codeph>-Methode legt die Position und Größe des Rahmens des Containers fest. In jeder Unterklasse von Container muss die <codeph>layoutChrome()</codeph>-Methode die <codeph>super.layoutChrome()</codeph>-Methode aufrufen, damit der Rahmen korrekt platziert wird.</p>
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:localToContent"><apiName>localToContent</apiName><shortdesc conref="mx.core.UIComponent#localToContent()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#localToContent()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeAllChildren"><apiName>removeAllChildren</apiName><shortdesc>
          Entfernt alle untergeordneten Elemente von der Child-Liste dieses Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          Entfernt alle untergeordneten Elemente von der Child-Liste dieses Containers.
          
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeAllElements"><apiName>removeAllElements</apiName><shortdesc conref="mx.core.IVisualElementContainer#removeAllElements()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#removeAllElements()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeChildAt"><apiName>removeChildAt</apiName><shortdesc>
          Entfernt ein untergeordnetes DisplayObject von der angegebenen Indexposition der Child-Liste dieses Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Das entfernte untergeordnete Objekt als ein Objekt des Typs DisplayObject. Normalerweise wird der Rückgabewert in UIComponent oder in den Typ der entfernten Komponente konvertiert.
          
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Child-Indexposition des zu entfernenden Anzeigeobjekts.
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Entfernt ein untergeordnetes DisplayObject von der angegebenen Indexposition der Child-Liste dieses Containers. Die <codeph>parent</codeph>-Eigenschaft des entfernten untergeordneten Elements wird auf „null“ gesetzt. Das untergeordnete Element ist trotzdem noch vorhanden, es sei denn, es wird explizit gelöscht. Wenn Sie es einem anderen Container hinzufügen, behält es den zuletzt bekannten Status bei.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeChild"><apiName>removeChild</apiName><shortdesc>
          Entfernt ein untergeordnetes DisplayObject von der Child-Liste dieses Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Das entfernte untergeordnete Objekt als ein Objekt des Typs DisplayObject. Normalerweise wird der Rückgabewert in UIComponent oder in den Typ der entfernten Komponente konvertiert.
          
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Das zu entfernende DisplayObject.
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Entfernt ein untergeordnetes DisplayObject von der Child-Liste dieses Containers. Die <codeph>parent</codeph>-Eigenschaft des entfernten untergeordneten Elements wird auf „null“ gesetzt. Das untergeordnete Element ist trotzdem noch vorhanden, es sei denn, es wird explizit gelöscht. Wenn Sie es einem anderen Container hinzufügen, behält es den zuletzt bekannten Status bei.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeElementAt"><apiName>removeElementAt</apiName><shortdesc conref="mx.core.IVisualElementContainer#removeElementAt()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#removeElementAt()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeElement"><apiName>removeElement</apiName><shortdesc conref="mx.core.IVisualElementContainer#removeElement()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#removeElement()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:protected:scrollChildren"><apiName>scrollChildren</apiName><shortdesc>
          Platziert den Inhaltsbereich des Containers relativ zum sichtbaren Bereich, basierend auf den Eigenschaften „horizontalScrollPosition“ und „verticalScrollPosition“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          Platziert den Inhaltsbereich des Containers relativ zum sichtbaren Bereich, basierend auf den Eigenschaften „horizontalScrollPosition“ und „verticalScrollPosition“. Inhalt, der nicht im sichtbaren Bereich angezeigt wird, wird abgeschnitten. Diese Methode sollte durch Unterklassen mit bildlauffähigem Chrom im Inhaltsbereich überschrieben werden.
          
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:setChildIndex"><apiName>setChildIndex</apiName><shortdesc>
          Legt die Indexposition eines bestimmten untergeordneten Elements fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Verweis auf untergeordnetes Element, dessen Indexposition gesetzt werden soll.
         
          </apiDesc></apiParam><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiDesc>Zahl, die die neue Indexposition anzeigt. Dies muss eine Ganzzahl zwischen 0 und (numChildren - 1) sein.
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Legt die Indexposition eines bestimmten untergeordneten Elements fest. Ein Beschreibung der <codeph>getChildIndex()</codeph>-Methode des Index dieses untergeordneten Objekts.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:setElementIndex"><apiName>setElementIndex</apiName><shortdesc conref="mx.core.IVisualElementContainer#setElementIndex()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#setElementIndex()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc conref="mx.core.IVisualElementContainer#swapElementsAt()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#swapElementsAt()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:swapElements"><apiName>swapElements</apiName><shortdesc conref="mx.core.IVisualElementContainer#swapElements()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#swapElements()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
          Reagiert auf Größenänderungen, indem die Positionen und Größen der untergeordneten Elemente dieses Containers festgelegt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Legt die Breite der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleX</codeph>-Eigenschaft der Komponente.
         
          </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Legt die Höhe der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleY</codeph>-Eigenschaft der Komponente.
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Reagiert auf Größenänderungen, indem die Positionen und Größen der untergeordneten Elemente dieses Containers festgelegt werden.
         
          <p>Im Abschnitt über die <codeph>UIComponent.updateDisplayList()</codeph>-Methode finden Sie weitere Hinweise zur <codeph>updateDisplayList()</codeph>-Methode.</p>
         
          <p>Die <codeph>Container.updateDisplayList()</codeph>-Methode legt die Position und Größe des Rahmens des Containers fest. In jeder Unterklasse von Container muss die <codeph>updateDisplayList()</codeph>-Methode die <codeph>super.updateDisplayList()</codeph>-Methode aufrufen, damit der Rahmen korrekt platziert wird.</p>
         
          </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.UIComponent.xml"><linktext>mx.core.UIComponent</linktext></link></related-links></apiOperation><apiValue id="mx.charts:Legend:protected:actualCreationPolicy"><apiName>actualCreationPolicy</apiName><shortdesc>
          Die Erstellungsrichtlinie dieses Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
          Die Erstellungsrichtlinie dieses Containers. 
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:legendItemClass"><apiName>legendItemClass</apiName><shortdesc>
          Die zur Instanziierung von LegendItem-Objekten verwendete Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
          Die zur Instanziierung von LegendItem-Objekten verwendete Klasse. Wenn der Inhalt einer Legende vom Diagramm oder Daten abgeleitet wird, instanziiert sie eine <codeph>legendItemClass</codeph>-Instanz für jedes Element, das vom <codeph>dataProvider</codeph> beschrieben wird. Um das Verhalten von Legendenelementen anzupassen, können Sie dieser Eigenschaft eine LegendItem-Unterklasse zuweisen, damit die Legende stattdessen Instanzen des abgeleiteten Typs erstellt.  
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:autoLayout:get"><apiName>autoLayout</apiName><shortdesc>
          Wenn „true“, werden Messung und Layout durchgeführt, wenn die Position oder die Größe eines untergeordneten Elements geändert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Wenn <codeph>true</codeph>, werden Messung und Layout durchgeführt, wenn die Position oder die Größe eines untergeordneten Elements geändert wird. Wenn <codeph>false</codeph>, werden Messung und Layout nur einmal durchgeführt, wenn untergeordnete Elemente einem Container hinzugefügt oder daraus entfernt werden.
         
          <p>Bei Verwendung des Effekts „Verschieben“ wird das Layout um die verschobene Komponente nicht so angepasst, dass der Verschieben-Effekt animiert wird. Das Einstellen der <codeph>autoLayout</codeph>-Eigenschaft des Containers auf <codeph>true</codeph> wirkt sich auf dieses Verhalten nicht aus.</p>
         
          <p>Der Zoomeffekt funktioniert nicht, wenn die <codeph>autoLayout</codeph>-Eigenschaft auf <codeph>false</codeph> gesetzt ist.</p>
         
          <p>Die <codeph>autoLayout</codeph>-Eigenschaft gilt nicht für Accordion- oder ViewStack-Container.</p>
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
          Gibt ein EdgeMetrics-Objekt zurück, das über vier Eigenschaften verfügt: „left“, „top“, „right“ und „bottom“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
          Gibt ein EdgeMetrics-Objekt zurück, das über vier Eigenschaften verfügt: <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> und <codeph>bottom</codeph>. Der Wert der Eigenschaften entspricht der Rahmenstärke an einer Seite des Rahmens in Pixeln.
         
          <p>Im Gegensatz zu <codeph>viewMetrics</codeph> wird diese Eigenschaft nicht von Container-Unterklassen überschrieben.</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:childDescriptors:get"><apiName>childDescriptors</apiName><shortdesc>
          Array von UIComponentDescriptor-Objekten, die durch den MXML-Compiler erzeugt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
          Array von UIComponentDescriptor-Objekten, die durch den MXML-Compiler erzeugt werden.
         
          <p>Jedes UIComponentDescriptor-Objekt enthält die in einem dem MXML-Tag des Containers untergeordneten MXML-Tag angegebenen Informationen. Die Reihenfolge der UIComponentDescriptor-Objekte im Array ist dieselbe wie die Reihenfolge der untergeordneten Tags. Während der Initialisierung werden die untergeordneten Deskriptoren zum Erstellen der untergeordneten UIComponent-Objekte und der Repeater-Objekte des Containers verwendet. Darüber hinaus versehen sie sie mit den anfänglichen Eigenschaftswerten, Ereignisprozeduren, Effekten usw., die in MXML festgelegt wurden.</p>
         
          </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.UIComponentDescriptor.xml"><linktext>mx.core.UIComponentDescriptor</linktext></link></related-links></apiValue><apiValue id="mx.charts:Legend:clipContent:get"><apiName>clipContent</apiName><shortdesc>
          Legt fest, ob eine Schnittmaske verwendet werden soll, wenn die Positionen und/oder Größen der untergeordneten Elemente des Containers über die Rahmenlinien dieses Containers hinausreichen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Legt fest, ob eine Schnittmaske verwendet werden soll, wenn die Positionen und/oder Größen der untergeordneten Elemente des Containers über die Rahmenlinien dieses Containers hinausreichen. Wenn <codeph>false</codeph>, bleiben die untergeordneten Elemente dieses Containers sichtbar, wenn sie so verschoben werden oder ihre Größe so verändert wird, dass sie über die Rahmenlinien dieses Containers hinausreichen. Wenn <codeph>true</codeph>, werden die untergeordneten Elemente dieses Containers beschnitten.
         
          <p>Ist <codeph>clipContent</codeph> auf <codeph>false</codeph> eingestellt, ist der Bildlauf für diesen Container deaktiviert und es werden keine Bildlaufleisten angezeigt. Ist <codeph>clipContent</codeph> auf „true“ eingestellt, werden normalerweise dann Bildlaufleisten angezeigt, wenn die untergeordneten Elemente des Containers über dessen Rahmenlinien hinausreichen. Informationen zu weiteren Steuerungsmöglichkeiten für die Anzeige von Bildlaufleisten finden Sie unter <codeph>horizontalScrollPolicy</codeph> und <codeph>verticalScrollPolicy</codeph>.</p>
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:contentMouseX:get"><apiName>contentMouseX</apiName><shortdesc conref="mx.core.UIComponent#contentMouseX">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#contentMouseX">
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:contentMouseY:get"><apiName>contentMouseY</apiName><shortdesc conref="mx.core.UIComponent#contentMouseY">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#contentMouseY">
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:creatingContentPane:get"><apiName>creatingContentPane</apiName><shortdesc>
          Container verwenden einen internen Inhaltsbereich zum Steuern des Bildlaufs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          Container verwenden einen internen Inhaltsbereich zum Steuern des Bildlaufs. Der Wert für <codeph>creatingContentPane</codeph> ist <codeph>true</codeph>, während der Container den Inhaltsbereich erstellt, sodass manche Ereignisse ignoriert oder blockiert werden können.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:creationIndex:get"><apiName>creationIndex</apiName><shortdesc>
          Gibt die Reihenfolge zum Instanziieren und Zeichnen der untergeordneten Elemente des Containers an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
          
          </apiDefaultValue><apiDeprecated><apiDesc>Veraltet</apiDesc></apiDeprecated></apiValueDef><apiDesc>
          Gibt die Reihenfolge zum Instanziieren und Zeichnen der untergeordneten Elemente des Containers an.
         
          <p>Diese Eigenschaft kann nur dann verwendet werden, wenn die <codeph>creationPolicy</codeph>-Eigenschaft auf <codeph>ContainerCreationPolicy.QUEUED</codeph> eingestellt ist. Andernfalls wird diese Eigenschaft ignoriert.</p>
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:creationPolicy:get"><apiName>creationPolicy</apiName><shortdesc>
          Die Erstellungsrichtlinie für untergeordnete Elemente dieses MX-Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ContainerCreationPolicy.AUTO
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Die Erstellungsrichtlinie für untergeordnete Elemente dieses MX-Containers. Mögliche ActionScript-Werte sind: <codeph>ContainerCreationPolicy.AUTO</codeph>, <codeph>ContainerCreationPolicy.ALL</codeph> oder <codeph>ContainerCreationPolicy.NONE</codeph>. Mögliche MXML-Werte sind: <codeph>auto</codeph>, <codeph>all</codeph> oder <codeph>none</codeph>.
         
          <p>Wenn für einen Container keine <codeph>creationPolicy</codeph> angegeben ist, erbt dieser Container die <codeph>creationPolicy</codeph> seines übergeordneten Containers. Wenn für die Anwendung keine <codeph>creationPolicy</codeph> angegeben ist, wird standardmäßig die Richtlinie <codeph>ContainerCreationPolicy.AUTO</codeph> verwendet.</p>
         
          <p><codeph>ContainerCreationPolicy.AUTO</codeph> als <codeph>creationPolicy</codeph> bedeutet, dass der Container die Erstellung mancher oder aller untergeordneten Elemente hinauszögert, bis sie benötigt werden, Dieser Prozess wird als <i>zurückgestellte Instanziierung</i> bezeichnet. Diese Richtlinie produziert die beste Startzeit, da zu Beginn weniger UIComponents erstellt werden. Es kommt jedoch dadurch zu Verzögerungen, wenn ein Benutzer erstmalig zu anderen Teilen der Anwendung navigiert. Navigator-Container wie Accordion, TabNavigator und ViewStack implementieren die <codeph>ContainerCreationPolicy.AUTO</codeph>-Richtlinie, indem sie alle ihre direkt untergeordneten Elemente sofort erstellen, die Erstellung von untergeordneten Elemente tieferer Ebenen jedoch aufschieben, bis das jeweilige übergeordnete Element zum ausgewählten untergeordneten Element des Navigatorcontainers wird.</p>
         
          <p><codeph>ContainerCreationPolicy.ALL</codeph> als <codeph>creationPolicy</codeph> bedeutet, dass die Navigatorcontainer die untergeordneten Elemente tieferer Ebenen sofort erstellen, anstatt die Erstellung aufzuschieben, bis das entsprechende untergeordnete Element ausgewählt wird. Für Container mit einer einzelnen Anzeige, wie VBox-Container, gibt es keinen Unterschied zwischen den Richtlinien <codeph>ContainerCreationPolicy.AUTO</codeph> und <codeph>ContainerCreationPolicy.ALL</codeph>.</p>
         
          <p><codeph>ContainerCreationPolicy.NONE</codeph> als <codeph>creationPolicy</codeph> bedeutet, dass der Container keines seiner untergeordneten Elemente erstellt. In diesem Fall liegt es in der Verantwortung des MXML-Autors, die untergeordneten Elemente durch Aufruf der <codeph>createComponentsFromDescriptors()</codeph>-Methode zu erstellen.</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
          Datensatz, der in der Legende verwendet werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="collectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
          Datensatz, der in der Legende verwendet werden soll.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:data:get"><apiName>data</apiName><shortdesc>
          Die data-Eigenschaft erlaubt es Ihnen, einen Wert an die Komponente zu übergeben, wenn Sie diese in einem Elementrenderer oder -editor verwenden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
          </apiDefaultValue></apiValueDef><apiDesc>
          Die <codeph>data</codeph>-Eigenschaft erlaubt es Ihnen, einen Wert an die Komponente zu übergeben, wenn Sie diese in einem Elementrenderer oder -editor verwenden. Normalerweise verwenden Sie Datenbindung, um ein Feld der <codeph>data</codeph>-Eigenschaft an eine Eigenschaft dieser Komponente zu binden.
         
          <p>In MXML wird diese Eigenschaft nicht festgelegt.</p>
         
          </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer.</linktext></link></related-links></apiValue><apiValue id="mx.charts:Legend:deferredContentCreated:get"><apiName>deferredContentCreated</apiName><shortdesc>
          IDeferredContentOwner-Äquivalent von processedDescriptors
         
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          IDeferredContentOwner-Äquivalent von processedDescriptors
         
          </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.charts.xml#UIComponent/processedDescriptors"><linktext>UIComponent.processedDescriptors</linktext></link></related-links></apiValue><apiValue id="mx.charts:Legend:direction:get"><apiName>direction</apiName><shortdesc>
          Bestimmt, wie untergeordnete Objekte in den Container platziert werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="directionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"horizontal"
         
          </apiDefaultValue></apiValueDef><apiDesc>
          Bestimmt, wie untergeordnete Objekte in den Container platziert werden. Mögliche MXML-Werte sind <codeph>„horizontal“</codeph> und <codeph>„vertical“</codeph>. In ActionScript können Sie die Richtung mit den Werten TileDirection.HORIZONTAL oder TileDirection.VERTICAL einrichten. Der Standardwert ist <codeph>„horizontal“</codeph>. (Wenn der Container ein Legend-Container und damit eine Unterklasse von Tile ist, lautet der Standardwert <codeph>„vertical“</codeph>.)
         
          <p>Das erste untergeordnete Objekt wird immer in die linke obere Ecke des Tile-Containers gesetzt. Wenn <codeph>direction</codeph> auf <codeph>„horizontal“</codeph> eingestellt ist, werden die untergeordneten Objekte von links nach rechts in der obersten Zeile angeordnet, dann von links nach rechts in der zweiten Zeile, und so weiter. Wenn <codeph>direction</codeph> auf „vertikal“ eingestellt ist, werden die untergeordneten Objekte von oben nach unten in der äußerst linken Spalte angeordnet, dann von oben nach unten in der zweiten Spalte, und so weiter.</p>
         
          </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.charts.TileDirection.xml"><linktext>TileDirection</linktext></link></related-links></apiValue><apiValue id="mx.charts:Legend:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
          Die aktuelle Position der horizontalen Bildlaufleiste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="viewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Die aktuelle Position der horizontalen Bildlaufleiste. Diese entspricht dem Abstand zwischen dem linken Rand der bildlauffähigen Oberfläche und dem Element, das sich am weitesten links auf der derzeit sichtbaren Fläche befindet.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:maxHorizontalScrollPosition:get"><apiName>maxHorizontalScrollPosition</apiName><shortdesc>
          Der größtmögliche Wert für die horizontalScrollPosition-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
          Der größtmögliche Wert für die <codeph>horizontalScrollPosition</codeph>-Eigenschaft. Die Standardeinstellung ist 0, wenn die horizontale Bildlaufleiste nicht vorhanden ist.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:maxVerticalScrollPosition:get"><apiName>maxVerticalScrollPosition</apiName><shortdesc>
          Der größtmögliche Wert für die verticalScrollPosition-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
          Der größtmögliche Wert für die <codeph>verticalScrollPosition</codeph>-Eigenschaft. Die Standardeinstellung ist 0, wenn die vertikale Bildlaufleiste nicht vorhanden ist.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:numChildren:get"><apiName>numChildren</apiName><shortdesc>
          Anzahl der untergeordneten Komponenten in diesem Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
          Anzahl der untergeordneten Komponenten in diesem Container.
         
          <p>Die Anzahl der untergeordneten Elemente ist zu Beginn gleich der der in MXML deklarierten untergeordneten Elemente. Während der Laufzeit können durch Aufruf von <codeph>addChild()</codeph> oder <codeph>addChildAt()</codeph> neue untergeordnete Elemente hinzugefügt sowie durch Aufruf von <codeph>removeChild()</codeph>, <codeph>removeChildAt()</codeph> oder <codeph>removeAllChildren()</codeph> vorhandene untergeordnete Elemente entfernt werden.</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:numElements:get"><apiName>numElements</apiName><shortdesc conref="mx.core.IVisualElementContainer#numElements">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.IVisualElementContainer#numElements">
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:rawChildren:get"><apiName>rawChildren</apiName><shortdesc>
          Ein Container enthält normalerweise untergeordnete Komponenten, die mit der Container.getChildAt()-Methode und der Container.numChildren-Eigenschaft aufgelistet werden können.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:IChildList"/></apiValueDef><apiDesc>
          Ein Container enthält normalerweise untergeordnete Komponenten, die mit der <codeph>Container.getChildAt()</codeph>-Methode und der <codeph>Container.numChildren</codeph>-Eigenschaft aufgelistet werden können. Darüber hinaus kann dieser Container Stilelemente und Skins enthalten, wie etwa den Rahmen und den Hintergrund. Flash Player und AIR unterscheiden beim Zeichnen nicht zwischen untergeordneten Komponenten und Skins. Mit der <codeph>getChildAt()</codeph>-Methode und der <codeph>numChildren</codeph>-Eigenschaft kann auf alle zugegriffen werden. Die Container-Klasse überschreibt jedoch die <codeph>getChildAt()</codeph>-Methode und die <codeph>numChildren</codeph>-Eigenschaft (und mehrere andere Methoden) und erweckt damit den Anschein, dass die untergeordneten Komponenten des Containers die einzigen untergeordneten Komponenten seien.
         
          <p>Wenn Sie auf alle untergeordneten Elemente des Containers (sowohl die untergeordneten Inhaltselemente als auch die Skins) zugreifen müssen, verwenden Sie die Methoden und Eigenschaften der <codeph>rawChildren</codeph>-Eigenschaft statt der regulären Container-Methoden. Beispiel: Verwenden Sie die <codeph>Container.rawChildren.getChildAt())</codeph>-Methode. Wenn jedoch ein Container ein ContentPane-Sprite-Objekt für seine untergeordneten Elemente erstellt, zählt die <codeph>rawChildren</codeph>-Eigenschaft nur das ContentPane-Objekt und nicht die untergeordneten Elemente des Containers. Es kann nicht immer bestimmt werden, wann ein Container ein ContentPane-Objekt hat.</p>
         
          <p><b>Hinweis:</b>Wenn Sie die <codeph>addChild</codeph>- oder <codeph>addChildAt</codeph>-Methode des <codeph>rawChildren</codeph>-Objekts aufrufen, stellen Sie für die von Ihnen hinzugefügte Komponente Folgendes ein: <codeph>tabFocusEnabled = false</codeph>. Damit verhindern Sie, dass Benutzer mit der Tabulatortaste zwischen von Ihnen hinzugefügten rein visuellen Komponenten wechseln können.</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc>
          Die aktuelle Position der vertikalen Bildlaufleiste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="viewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Die aktuelle Position der vertikalen Bildlaufleiste. Diese entspricht dem Abstand zwischen dem oberen Rand der bildlauffähigen Oberfläche und dem Element, das sich am weitesten oben auf der derzeit sichtbaren Fläche befindet.
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:viewMetricsAndPadding:get"><apiName>viewMetricsAndPadding</apiName><shortdesc>
          Gibt ein Objekt zurück, das über vier Eigenschaften verfügt: „left“, „top“, „right“ und „bottom“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
          Gibt ein Objekt zurück, das über vier Eigenschaften verfügt: <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> und <codeph>bottom</codeph>. Der Wert jeder der Eigenschaften ist gleich der Stärke des Chroms (visuelle Elemente) um den Rand des Containers herum plus der Stärke der Ränder des Objekts.
         
          <p>Dieses Chrom enthält die Rahmenstärke. Wenn der Eigenschaftswert der <codeph>horizontalScrollPolicy</codeph> oder <codeph>verticalScrollPolicy</codeph> auf <codeph>ScrollPolicy.ON</codeph> eingestellt ist, enthält das Chrom auch die Stärke der entsprechenden Bildlaufleiste. Ist eine Bildlaufrichtlinie auf <codeph>ScrollPolicy.AUTO</codeph> eingestellt, umfassen die Abmessungen des Chroms nicht die Stärke der Bildlaufleiste, und zwar auch dann nicht, wenn die Bildlaufleiste angezeigt wird.</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:viewMetrics:get"><apiName>viewMetrics</apiName><shortdesc>
          Gibt ein Objekt zurück, das über vier Eigenschaften verfügt: „left“, „top“, „right“ und „bottom“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
          Gibt ein Objekt zurück, das über vier Eigenschaften verfügt: <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> und <codeph>bottom</codeph>. Der Wert jeder Eigenschaft ist gleich der Stärke des Chroms (visuelle Elemente) um den Rand des Containers herum. 
         
          <p>Dieses Chrom enthält die Rahmenstärke. Wenn der Eigenschaftswert der <codeph>horizontalScrollPolicy</codeph> oder <codeph>verticalScrollPolicy</codeph> auf <codeph>ScrollPolicy.ON</codeph> eingestellt ist, enthält das Chrom auch die Stärke der entsprechenden Bildlaufleiste. Ist eine Bildlaufrichtlinie auf <codeph>ScrollPolicy.AUTO</codeph> eingestellt, umfassen die Abmessungen des Chroms nicht die Stärke der Bildlaufleiste, und zwar auch dann nicht, wenn die Bildlaufleiste angezeigt wird.</p>
         
          <p>Unterklassen von Container sollten diese Methode überschreiben, sodass sie andere, bei der Platzierung der untergeordneten Elemente des Containers zu berücksichtigende Chroms umfassen. Beispiel: Die <codeph>viewMetrics</codeph>-Eigenschaft für die Panel-Klasse sollte ein Objekt zurückgeben, dessen <codeph>top</codeph>-Eigenschaft die Stärke der Titelleiste des Panel-Containers enthält.</p>
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:ChartItem"><apiName>ChartItem</apiName><shortdesc>
  Ein ChartItem stellt ein einzelnes Element in einer ChartSeries dar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Ein ChartItem stellt ein einzelnes Element in einer ChartSeries dar. In den meisten Standardserien wird ein ChartItem für jedes Element in der dataProvider-Sammlung der Serie erstellt. ChartItems werden an die itemRenderer-Instanzen einer Serie zum Rendern übergeben. Die meisten Serientypen fügen ChartItem zusätzliche Informationen zum Diagrammtyp hinzu.  
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts:ChartItem:ChartItem"><apiName>ChartItem</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IChartElement</apiOperationClassifier><apiData>null</apiData><apiDesc>Eine Serie oder ein Element, zu der das ChartItem gehört.
     
      </apiDesc></apiParam><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Das Element aus dem Datenprovider der Serie, die das ChartItem darstellt.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>Die Indexposition der Daten aus dem Datenprovider der Serie, die das ChartItem darstellt.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts:ChartItem:clone"><apiName>clone</apiName><shortdesc>
      Gibt eine Kopie dieses ChartItem zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Eine Kopie dieses ChartItem.
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Gibt eine Kopie dieses ChartItem zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts:ChartItem:DISABLED"><apiName>DISABLED</apiName><shortdesc>
      Wert, der angibt, dass das ChartItem deaktiviert ist und nicht ausgewählt werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>disabled</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Wert, der angibt, dass das ChartItem deaktiviert ist und nicht ausgewählt werden kann.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:FOCUSEDSELECTED"><apiName>FOCUSEDSELECTED</apiName><shortdesc>
      Wert, der angibt, dass das ChartItem den Fokus besitzt und als ausgewählt angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>focusedSelected</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Wert, der angibt, dass das ChartItem den Fokus besitzt und als ausgewählt angezeigt wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:FOCUSED"><apiName>FOCUSED</apiName><shortdesc>
      Wert, der angibt, dass das ChartItem den Fokus besitzt, jedoch nicht als ausgewählt angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>focused</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Wert, der angibt, dass das ChartItem den Fokus besitzt, jedoch nicht als ausgewählt angezeigt wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:NONE"><apiName>NONE</apiName><shortdesc>
      Wert, der angibt, dass das ChartItem nicht als ausgewählt angezeigt wird, nicht den Fokus besitzt und kein Rollover erfolgt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Wert, der angibt, dass das ChartItem nicht als ausgewählt angezeigt wird, nicht den Fokus besitzt und kein Rollover erfolgt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:ROLLOVER"><apiName>ROLLOVER</apiName><shortdesc>
      Wert der angibt, dass das ChartItem wie bei Rollover angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOver</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Wert der angibt, dass das ChartItem wie bei Rollover angezeigt wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:SELECTED"><apiName>SELECTED</apiName><shortdesc>
      Wert, der angibt, dass das ChartItem als ausgewählt angezeigt wird, jedoch nicht den Fokus besitzt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selected</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Wert, der angibt, dass das ChartItem als ausgewählt angezeigt wird, jedoch nicht den Fokus besitzt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:element"><apiName>element</apiName><shortdesc>
      Die Serie oder das Element im Besitz des ChartItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.charts.chartClasses:IChartElement</apiValueClassifier></apiValueDef><apiDesc>
      Die Serie oder das Element im Besitz des ChartItem.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:index"><apiName>index</apiName><shortdesc>
      Die Indexposition der Daten aus dem Datenprovider der Serie, die das ChartItem darstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      Die Indexposition der Daten aus dem Datenprovider der Serie, die das ChartItem darstellt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:itemRenderer"><apiName>itemRenderer</apiName><shortdesc>
      Die Instanz des itemRenderer dieses Diagramms, die das ChartItem darstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:IFlexDisplayObject"/></apiValueDef><apiDesc>
      Die Instanz des itemRenderer dieses Diagramms, die das ChartItem darstellt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:item"><apiName>item</apiName><shortdesc>
      Das Element aus dem Datenprovider der Serie, die das ChartItem darstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      Das Element aus dem Datenprovider der Serie, die das ChartItem darstellt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:currentState:get"><apiName>currentState</apiName><shortdesc>
      Definiert das Aussehen des ChartItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Definiert das Aussehen des ChartItem. Die Eigenschaft <codeph>currentState</codeph> kann auf <codeph>none</codeph>, <codeph>rollOver</codeph>, <codeph>selected</codeph>, <codeph>disabled</codeph>, <codeph>focusSelected</codeph> und <codeph>focused</codeph> gesetzt werden.
     
      <P>Durch Festlegen des Elementstatus wird das Element nicht dem selectedItems-Array hinzugefügt. Es wird nur das Aussehen des Diagrammelements geändert. Durch Einstellen des Werts dieser Eigenschaft wird auch kein <codeph>change</codeph>-Ereignis ausgelöst.</P>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:LineChart"><apiName>LineChart</apiName><shortdesc>
  Das LineChart-Steuerelement stellt eine Datenserie als Punkte dar, die mit einer fortlaufenden Linie verbunden sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  The <code>&lt;mx:LineChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:LineChart
  /&gt;
  </pre> 
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  Das LineChart-Steuerelement stellt eine Datenserie als Punkte dar, die mit einer fortlaufenden Linie verbunden sind. Sie können ein Symbol verwenden, um die einzelnen Datenpunkte entlang der Linie darzustellen, oder eine einfache Linie ohne Symbole anzeigen. 
  
  <p>Das LineChart-Steuerelement erwartet, dass die Eigenschaft <codeph>series</codeph> ein Array von LineSeries-Objekten enthält.</p>
 
  </apiDesc><example conref="Line_AreaChartExample.mxml"><swfblock conref="examples/Line_AreaChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#LineSeries"><linktext>mx.charts.series.LineSeries</linktext></link></related-links><apiConstructor id="mx.charts:LineChart:LineChart"><apiName>LineChart</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:LineChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       Eine Modul-Factory wird als Kontext für die Verwendung eingebetteter Schriftarten und für die Suche nach dem Stilmanager, der die Stile dieser Komponente steuert, verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       Eine Modul-Factory wird als Kontext für die Verwendung eingebetteter Schriftarten und für die Suche nach dem Stilmanager, der die Stile dieser Komponente steuert, verwendet.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:AxisLabel"><apiName>AxisLabel</apiName><shortdesc>
  Ein AxisLabel-Objekt stellt eine einzelne Beschriftung auf der Diagrammachse dar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Ein AxisLabel-Objekt stellt eine einzelne Beschriftung auf der Diagrammachse dar. AxisLabel-Objekte werden durch IAxis-Objekte generiert. AxisLabel-Objekte werden außerdem als Daten an angepasste AxisLabel-Objekte übergeben, die die IDataRenderer-Schnittstelle implementieren.
  	
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#AxisRenderer"><linktext>mx.charts.AxisRenderer</linktext></link><link href="mx.charts.chartClasses.xml#IAxis"><linktext>mx.charts.chartClasses.IAxis</linktext></link></related-links><apiConstructor id="mx.charts:AxisLabel:AxisLabel"><apiName>AxisLabel</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>position</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Die Position der Beschriftung entlang der Achse, die als Wert zwischen 0 und 1 angegeben wird.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Der Wert, den die Beschriftung darstellt.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Die eigentliche Textbeschriftung, die entlang der Achse angezeigt wird.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Konstruktor.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:AxisLabel:position"><apiName>position</apiName><shortdesc>
	  Die Position der Beschriftung entlang der Achse, die als Wert zwischen 0 und 1 angegeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Die Position der Beschriftung entlang der Achse, die als Wert zwischen 0 und 1 angegeben wird. Eine Achsenbeschriftung mit der Position 0 wird am Mindestwert der Achse und eine Achsenbeschriftung mit der Position 1 am Höchstwert der Achse platziert.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisLabel:text"><apiName>text</apiName><shortdesc>
	  Die eigentliche Textbeschriftung, die entlang der Achse angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Die eigentliche Textbeschriftung, die entlang der Achse angezeigt wird.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisLabel:value"><apiName>value</apiName><shortdesc>
	  Der Wert, den die Beschriftung darstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
	  Der Wert, den die Beschriftung darstellt. Der jeweilige Typ der value-Eigenschaft ist von der Achse abhängig, von der die Beschriftung generiert wird. LinearAxis kann beispielsweise numerische Werte generieren, während DateTimeAxis Datumswerte generiert.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:LogAxis"><apiName>LogAxis</apiName><shortdesc>
  Die LogAxis-Klasse ordnet numerische Werte logarithmisch Werten zwischen dem Mindest- und Höchstwert auf einer Diagrammachse zu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:LogAxis&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:LogAxis
    <strong>Properties</strong>
    interval="10"
    maximum="null"
    maximumLabelPrecision="null"
    minimum="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:NumericAxis</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die LogAxis-Klasse ordnet numerische Werte logarithmisch Werten zwischen dem Mindest- und Höchstwert auf einer Diagrammachse zu. Standardmäßig werden die Werte für <codeph>minimum</codeph>, <codeph>maximum</codeph> und <codeph>interval</codeph> anhand der Diagrammdaten bestimmt, um alle Diagrammelemente anzeigen zu können. Sie können auch bestimmte Werte für diese Eigenschaften explizit festlegen. Ein LogAxis-Objekt kann negative Werte nicht richtig rendern, da Log10() einer negativen Zahl <codeph>undefined</codeph> entspricht.
 
  </apiDesc><example conref="LogAxisExample.mxml"><swfblock conref="examples/LogAxisExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.chartClasses.xml#IAxis"><linktext>mx.charts.chartClasses.IAxis</linktext></link></related-links><apiConstructor id="mx.charts:LogAxis:LogAxis"><apiName>LogAxis</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Konstruktor.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:LogAxis:interval:get"><apiName>interval</apiName><shortdesc>
	  Gibt die Multiplikator-Beschriftungswerte entlang der Achse an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Gibt die Multiplikator-Beschriftungswerte entlang der Achse an. Der Wert 10 generiert Beschriftungen bei 1, 10, 100, 1000 usw., während der Wert 100 Beschriftungen bei 1, 100, 10000 usw. generiert. Flex berechnet den Abstand, wenn diese Eigenschaft auf <codeph>NaN</codeph> gesetzt ist. Intervalle müssen gerade Potenzen von 10 und größer oder gleich 10 sein. LogAxis rundet das Intervall ggf. auf eine gerade Potenz von 10 ab.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LogAxis:maximum:get"><apiName>maximum</apiName><shortdesc>
	  Gibt den Höchstwert für eine Achsenbeschriftung an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Gibt den Höchstwert für eine Achsenbeschriftung an. Bei <codeph>NaN</codeph> bestimmt Flex den Höchstwert anhand der Daten im Diagramm. Der Höchstwert muss eine gerade Potenz von 10 sein. LogAxis rundet einen expliziten Höchstwert ggf. auf eine gerade Potenz von 10 auf.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LogAxis:minimum:get"><apiName>minimum</apiName><shortdesc>
	  Gibt den Mindestwert für eine Achsenbeschriftung an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Gibt den Mindestwert für eine Achsenbeschriftung an. Bei <codeph>NaN</codeph> bestimmt Flex den Mindestwert anhand der Daten im Diagramm. Der Mindestwert muss eine gerade Potenz von 10 sein. LogAxis rundet einen expliziten Mindestwert ggf. auf eine gerade Potenz von 10 ab.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LogAxis:maximumLabelPrecision:set"><apiName>maximumLabelPrecision</apiName><shortdesc>
	  Gibt die maximale Anzahl von Dezimalstellen zur Darstellung von Teilwerten in den Beschriftungen an, die von der Achse generiert werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Gibt die maximale Anzahl von Dezimalstellen zur Darstellung von Teilwerten in den Beschriftungen an, die von der Achse generiert werden. Standardmäßig generiert die Achse diesen Wert automatisch aus den Beschriftungen selbst. Beim Wert 0 wird auf die nächste Ganzzahl gerundet, beim Wert 2 wird auf das nächste Hundertstel eines Werts gerundet.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:AxisRenderer"><apiName>AxisRenderer</apiName><shortdesc>
  Sie verwenden die AxisRenderer-Klasse, um die horizontale und vertikale Achse eines Diagramms zu beschreiben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style enumeration="flippedVertical,vertical" inherit="no" name="verticalAxisTitleAlignment" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Gibt an, wie der Titel der vertikalen Achse angezeigt wird. Bei <codeph>flippedVertical</codeph> wird der Titel von oben nach unten und bei <codeph>vertical</codeph> von unten nach oben angezeigt.
 
  </description>
<default>flippedVertical
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="tickStroke" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Gibt die Merkmale der Markierungen auf der Achse an. Dieser Stil muss eine Instanz der Stroke-Klasse sein.  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inside,outside,cross,none" inherit="no" name="tickPlacement" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Gibt an, wo die Markierungen gezeichnet werden sollen. Folgende Optionen stehen zur Verfügung:
  <ul>
    <li><codeph>"inside"</codeph>: Zeichnet Markierungen innerhalb des Datenbereichs.</li>
     <li><codeph>"outside"</codeph>: Zeichnet Markierungen in den Beschriftungsbereich.</li>
     <li><codeph>"cross"</codeph>: Zeichnet die Markierungen auf die Achse.</li>
     <li><codeph>"none"</codeph>: Zeichnet keine Markierungen.</li>
  </ul>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="tickLength" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  Gibt die Länge der Markierungen auf der Achse in Pixeln an. 
  
  </description>
<default>3  
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="showLine" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Boolean">
<description>
  Gibt an, ob die Achse angezeigt wird. 
  
  </description>
<default>true 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="showLabels" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Boolean">
<description>
  Gibt an, ob die Beschriftungen entlang der Achse angezeigt werden. 
  
  </description>
<default>true 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="minorTickStroke" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Gibt die Merkmale der kleineren Markierungen auf der Achse an. Dieser Stil muss eine Instanz der Stroke-Klasse sein.  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inside,outside,cross,none" inherit="no" name="minorTickPlacement" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Gibt an, ob kleinere Markierungen gezeichnet werden. Folgende Optionen stehen zur Verfügung:
  <ul>
    <li><codeph>"inside"</codeph>: Zeichnet kleinere Markierungen innerhalb des Datenbereichs.</li>
     <li><codeph>"outside"</codeph>: Zeichnet kleinere Markierungen in den Beschriftungsbereich.</li>
     <li><codeph>"cross"</codeph>: Zeichnet kleinere Markierungen auf die Achse.</li>
     <li><codeph>"none"</codeph>: Zeichnet keine kleineren Markierungen.</li>
  </ul>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="minorTickLength" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  Gibt die Länge der kleineren Markierungen auf der Achse in Pixeln an. 
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="labelRotation" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description> 
  Gibt die Drehung der Beschriftung an. Wenn die Beschriftung mit Geräteschriftarten gerendert wird, werden die Beschriftungen immer horizontal gezeichnet. Wenn dieser Stil ein negativer Wert ist, bestimmt der AxisRenderer einen optimalen Wert, um die Beschriftungen auf kleinstem Raum ohne Überschneidungen zu rendern.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="labelGap" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description> 
  Gibt den Abstand zwischen dem Ende der Markierungen und der Oberseite der Beschriftungen in Pixeln an. 
  
  </description>
<default>3 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="labelClass" owner="mx.charts:AxisRenderer" playerVersion="Flash10.2" type="Class">
<description>
  Die Klasse, die von dieser Komponente für die Darstellung von Beschriftungen verwendet wird.
   <p>Es kann entweder die mx.controls.Label-Klasse oder die spark.components.Label-Klasse festgelegt werden.</p>
   </description>
<default>spark.components.Label
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="left,top,right,bottom,center" inherit="no" name="labelAlign" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Gibt die Ausrichtung der Beschriftung in Bezug auf die Position des Werts an, auf den sie weist.
 
  </description>
<default>center
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="canStagger" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Boolean">
<description> 
  Gibt an, ob die Beschriftungen auf zwei Beschriftungszeilen gestaffelt werden sollen. Wählen Sie diese Einstellungen, damit die Beschriftungen so wenig Raum wie möglich beanspruchen. Der Standardwert ist <codeph>true</codeph>, wodurch die Beschriftungen gestaffelt werden. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="canDropLabels" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Boolean">
<description>
  Gibt an, ob der AxisRenderer Beschriftungen wie erforderlich auslassen soll, damit das Layout richtig angezeigt wird.
   <p>Wenn Sie für diese Einstellung <codeph>true</codeph> festlegen, lässt der AxisRenderer sich überschneidende Beschriftungen beim Rendern aus. Beschriftungen werden immer in regelmäßigen Intervallen gerendert. Falls nötig, rendert der AxisRenderer nur jede zweite oder dritte Beschriftung, es werden jedoch nie zwei oder mehr Beschriftungen in Folge ausgelassen.</p>
   <p>Legen Sie <codeph>false</codeph> fest, damit der AxisRenderer andere Schemata (Drehung, Skalierung) für das Layout der Beschriftungen verwendet.</p>
   <p>Wenn Sie diesen Stil nicht explizit festlegen, verwendet der AxisRenderer einen Wert, der auf dem Typ der zu rendernden Achse basiert.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="axisTitleStyleName" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Der Name des CSS-Klassenselektors, der beim Formatieren des Achsentitels verwendet wird.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="axisStroke" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Gibt die Merkmale der Linie an, die als Achse verwendet wird. Dieser Stil muss eine Instanz der Stroke-Klasse sein.  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  Offset der ersten Textzeile von der linken Seite des Containers in Pixeln.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird. Mögliche Werte sind <codeph>"none"</codeph> und <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Ausrichtung von Text in einem Container. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"right"</codeph> oder <codeph>"center"</codeph>.
 
  <p>Der Standardwert für die meisten Steuerelemente lautet <codeph>left</codeph>. Für die Button-, LinkButton- und AccordionHeader-Komponenten lautet der Standardwert <codeph>"center"</codeph>. Für diese Komponenten wird diese Eigenschaft nur erkannt, wenn die Eigenschaft <codeph>labelPlacement</codeph> auf <codeph>"left"</codeph> oder <codeph>"right"</codeph> gesetzt wurde. Wenn <codeph>labelPlacement</codeph> auf <codeph>"top"</codeph> oder <codeph>"bottom"</codeph> gesetzt wird, werden der Text und eventuell vorhandene Symbole zentriert.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  Die Anzahl der zusätzlichen Pixel, die zwischen den Zeichen angezeigt werden. Durch einen positiven Wert wird der Zeichenabstand über den normalen Abstand hinaus vergrößert und durch einen negativen Wert verkleinert.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Boolean">
<description>
  Ein boolescher Wert, der angibt, ob Kerning aktiviert (<codeph>true</codeph>) oder deaktiviert (<codeph>false</codeph>) ist. Der Begriff „Kerning“ bezeichnet die Anpassung des Zwischenraums zwischen bestimmten Zeichenpaaren zur Verbesserung der Lesbarkeit. Diese Funktion sollte nur verwendet werden, wenn sie unbedingt erforderlich ist, beispielsweise bei Überschriften in großen Schriftarten. Kerning wird nur für eingebettete FlashType-Schriftarten unterstützt. Bestimmte Schriftarten wie Verdana und Schriftarten mit fester Breite wie Courier New unterstützen Kerning nicht.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird. Gültige Werte sind <codeph>"normal"</codeph> und <codeph>"bold"</codeph>. Für LegendItem lautet der Standardwert <codeph>"bold"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  Legt die Eigenschaft <codeph>thickness</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelemente darstellen. Diese Eigenschaft gibt die Stärke der Glyphenkanten an. Mögliche Werte sind Zahlen von -200 bis 200. 
  
  <p>Diese Eigenschaft wird nur angewendet, wenn Sie eine eingebettete FlashType-Schriftart verwenden und die Eigenschaft <codeph>fontAntiAliasType</codeph> auf <codeph>"advanced"</codeph> gesetzt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird. Gültige Werte sind <codeph>"normal"</codeph> und <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  Die Höhe des Texts in Pixeln. Der Standardwert ist 10 für alle Steuerelemente mit Ausnahme des ColorPicker-Steuerelements. Für das ColorPicker-Steuerelement lautet der Standardwert 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  Legt die Eigenschaft <codeph>sharpness</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelementen darstellen. Diese Eigenschaft gibt die Schärfe der Glyphenkanten an. Mögliche Werte sind Zahlen von -400 bis 400. 
  
  <p>Diese Eigenschaft wird nur angewendet, wenn Sie eine eingebettete FlashType-Schriftart verwenden und die Eigenschaft <codeph>fontAntiAliasType</codeph> auf <codeph>"advanced"</codeph> gesetzt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Legt die Eigenschaft <codeph>gridFitType</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelementen darstellen. Mögliche Werte sind <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) und <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Diese Eigenschaft wird nur angewendet, wenn Sie eine eingebettete FlashType-Schriftart verwenden und die Eigenschaft <codeph>fontAntiAliasType</codeph> auf <codeph>"advanced"</codeph> gesetzt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Der Name der zu verwendenden Schriftart. Anders als in einer vollständigen CSS-Implementierung werden durch Kommas getrennte Listen nicht unterstützt. Sie können den Namen einer beliebigen Schriftartfamilie verwenden. Wenn Sie eine generische Schriftartbezeichnung wählen, wird diese in die entsprechende Geräteschriftart konvertiert.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Legt die Eigenschaft <codeph>antiAliasType</codeph> von internen Textfeldern fest. Mögliche Werte sind <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) und <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>Der Standardwert lautet <codeph>"advanced"</codeph>, wodurch der FlashType-Renderer aktiviert wird, wenn Sie eine eingebettete FlashType-Schriftart verwenden. Wählen Sie <codeph>"normal"</codeph>, um den FlashType-Renderer zu deaktivieren.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
  
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="uint">
<description>
  Farbe des Texts in der Komponente, wenn deaktiviert.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="uint">
<description>
  Farbe des Texts in der Komponente einschließlich der Komponentenbeschriftung.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:AxisRenderer&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:</p>
  
  <pre>
  &lt;mx:AxisRenderer
    <strong>Properties</strong>
    axis="<i>IAxis</i>"
    chart="<i>ChartBase</i>"
    gutters="<i>Rectangle</i>"
    heightLimit="<i>Number</i>"
    labelRenderer="<i>IFactory</i>"
    labelFunction="<i>Function</i>"
    length="<i>Number</i>"
    otherAxes="<i>Array</i>"
    placement="right|left|bottom|top"
    ticks="<i>Array</i>"
    titleRenderer="<i>IFactory</i>"
     
    <strong>Styles</strong>
    axisStroke="<i>No default</i>"
    axisTitleStyleName="<i>No default</i>"
    canDropLabels="true|false"
    canStagger="true|false"
    labelAlign="center|left|right" (horizontal axes) or "center|top|bottom" (vertical axes)
    labelGap="3"
    labelRotation="<i>No default</i>"
    minorTickLength="<i>Default depends on axis</i>"
    minorTickPlacement="none|inside|outside|cross"
    minorTickStroke="<i>No default</i>"
    showLabels="true|false"
    showLine="true|false"
    tickLength="<i>Default depends on axis</i>"
    tickPlacement="inside|outside|cross|none"
    tickStroke="<i>No default</i>"
    verticalAxisTitleAlignment="flippedVertical|vertical"
  /&gt;
  </pre>
    
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IAxisRenderer</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:DualStyleObject</apiBaseClassifier></apiClassifierDef><apiDesc>
  Sie verwenden die AxisRenderer-Klasse, um die horizontale und vertikale Achse eines Diagramms zu beschreiben. Achsen sind für das Rendern ihrer jeweiligen Beschriftungen, Markierungen und Titel zuständig. 
   
  <p>AxisRenderer-Objekte erben einige der visuellen Eigenschaften des umschließenden Diagrammobjekts. Das Textformat der Beschriftungen und Titel wird standardmäßig aus den CSS-Texteigenschaften des Renderers übernommen. Sie können die Formatierung der Achsentitel getrennt steuern, indem Sie einen <codeph>axisTitleStyleName</codeph> für den AxisRenderer oder das umschließende Diagramm angeben.</p> 
  
  <p>Wenn Sie Beschriftungen platzieren und ihre Größe anpassen, sorgt AxisRenderer dafür, dass sie so wenig wie möglich vom Diagramm verdecken. Wenn Beschriftungen zu viel Raum beanspruchen, werden sie vom AxisRenderer skaliert. Der AxisRenderer skaliert die Beschriftungen jedoch nicht auf zu kleine Punktgrößen. Um die Lesbarkeit zu verbessern, wählt der AxisRenderer eine der folgenden Layoutmethoden abhängig davon, bei welcher Methode die geringste Skalierung benötigt wird:</p>
   <ul>
    <li>Rendern der Beschriftungen horizontal von einem Ende zum anderen.</li> 
    <li>Staffeln der Beschriftungen horizontal in zwei Zeilen.</li> 
    <li>Drehen der Beschriftungen, um sie an den vorhandenen Raum anzupassen. Der AxisRenderer dreht die Beschriftungen im mindestens benötigten Winkel, um Überschneidungen zu verhindern. Der maximale Winkel beträgt 90 Grad.</li>
  </ul>
  
  <p>Der AxisRenderer passt die Begrenzungen des Datenbereichs eines Diagramms an, um sicherzustellen, dass die Beschriftungen gezeichnet werden können, ohne die Begrenzungen zu überschneiden.</p>
  
  </apiDesc><example conref="HLOCChartExample.mxml"><swfblock conref="examples/HLOCChartExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.charts:AxisRenderer:AxisRenderer"><apiName>AxisRenderer</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts:AxisRenderer:adjustGutters"><apiName>adjustGutters</apiName><shortdesc>
      
      Passt das Layout so an, dass die übergebenen Abstände Platz haben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein Rechteck, das die Abmessungen der Abstände einschließlich der Anpassungen definiert.
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>workingGutters</apiItemName><apiType value="flash.geom:Rectangle"/><apiDesc>Definiert die anzupassenden Abstände.
     
      </apiDesc></apiParam><apiParam><apiItemName>adjustable</apiItemName><apiType value="Object"/><apiDesc>Besteht aus vier booleschen Eigenschaften (left=true/false, top=true/false, right=true/false und bottom=true/false), die angeben, ob der Achsenrenderer die Abstände weiter anpassen kann.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Passt das Layout so an, dass die übergebenen Abstände Platz haben. Diese Methode wird vom umschließenden Diagramm aufgerufen, um die Größe der Abstände und der entsprechenden Datenbereiche zu ermitteln. Diese Methode stellt den AxisRenderer bereit, der die Möglichkeit bietet, das Layout basierend auf den neuen Abständen zu berechnen und diese erforderlichenfalls anzupassen. Wenn ein gegebener Abstand anpassbar ist, kann ein Achsenrenderer optional die Abstände nach innen (Zwischenraum vergrößern), jedoch nicht nach außen (Zwischenraum verkleinern) anpassen.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:AxisRenderer:chartStateChanged"><apiName>chartStateChanged</apiName><shortdesc>
      Wird vom Diagramm aufgerufen und zeigt an, dass sich der aktuelle Übergangsstatus geändert hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>oldState</apiItemName><apiType value="uint"/><apiDesc>Eine Zahl, die den vorherigen Status darstellt.
           </apiDesc></apiParam><apiParam><apiItemName>newState</apiItemName><apiType value="uint"/><apiDesc>Eine Zahl, die den neuen Status darstellt.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird vom Diagramm aufgerufen und zeigt an, dass sich der aktuelle Übergangsstatus geändert hat.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:AxisRenderer:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts:AxisRenderer:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts:AxisRenderer:protected:measure"><apiName>measure</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts:AxisRenderer:move"><apiName>move</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts:AxisRenderer:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts:AxisRenderer:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="mx.charts:AxisRenderer:axis:get"><apiName>axis</apiName><shortdesc>
      Das mit diesem Renderer verknüpfte Achsenobjekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Das mit diesem Renderer verknüpfte Achsenobjekt. Diese Eigenschaft wird durch das umschließende Diagramm verwaltet und kann explizit eingestellt werden, wenn mehrere Achsenrenderer verwendet werden.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:protected:chart:get"><apiName>chart</apiName><shortdesc>
      Das Basisdiagramm für diesen AxisRenderer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.charts.chartClasses:ChartBase</apiValueClassifier></apiValueDef><apiDesc>
      Das Basisdiagramm für diesen AxisRenderer.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:gutters:get"><apiName>gutters</apiName><shortdesc> 
    
      Der Abstand zwischen dem axisRenderer und den Seiten des umgebenden Diagramms.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc> 
    
      Der Abstand zwischen dem axisRenderer und den Seiten des umgebenden Diagramms. Diese Eigenschaft wird automatisch durch das Diagramm zugewiesen und sollte nicht direkt zugewiesen werden.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:heightLimit:get"><apiName>heightLimit</apiName><shortdesc> 
    
      Der maximal zulässige Raum in Pixel, den ein Achsenrenderer von einem Diagramm in Anspruch nehmen kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
    
      Der maximal zulässige Raum in Pixel, den ein Achsenrenderer von einem Diagramm in Anspruch nehmen kann. Achsenrenderer nehmen standardmäßig den Raum im Diagramm ein, den sie zum Rendern aller ihrer Beschriftungen bei voller Größe benötigen. Ist heightLimit gesetzt, verringert ein AxisRenderer die Größe der Beschriftungen, sodass die Gesamtgröße der Achse geringer als der Wert in heightLimit ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:highlightElements:get"><apiName>highlightElements</apiName><shortdesc>
      Gibt an, ob Diagrammelemente wie Serien bei Rollover hervorgehoben werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Gibt an, ob Diagrammelemente wie Serien bei Rollover hervorgehoben werden.
      
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:horizontal:get"><apiName>horizontal</apiName><shortdesc>
      
      „true“, wenn der Achsenrenderer als horizontale Achse verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      <codeph>true</codeph>, wenn der Achsenrenderer als horizontale Achse verwendet wird. Diese Eigenschaft wird durch das umschließende CartesianChart verwaltet und sollte nicht direkt eingestellt werden.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Wird zum Formatieren der Werte von Achsenrenderern aufgerufen, bevor diese Werte als Beschriftungen angezeigt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Wird zum Formatieren der Werte von Achsenrenderern aufgerufen, bevor diese Werte als Beschriftungen angezeigt werden. Eine <codeph>labelFunction</codeph> weist folgende Signatur auf:
      <pre>
      function labelFunction(<i>axisRenderer</i>:IAxisRenderer, <i>label</i>:String):String { ... }
      </pre>
      
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:labelRenderer:get"><apiName>labelRenderer</apiName><shortdesc> 
      Ein Verweis auf die Factory, die zum Rendern der Achsenbeschriftung verwendet wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/></apiValueDef><apiDesc> 
      Ein Verweis auf die Factory, die zum Rendern der Achsenbeschriftung verwendet wurde. Dieser Typ muss die IDataRenderer- und die IFlexDisplayObject-Schnittstellen implementieren.
      <p>Der AxisRenderer erstellt eine Instanz dieser Klasse für jede Beschriftung auf der Achse. Der data-Eigenschaft des labelRenderer wird ein AxisLabel-Objekt mit dem anzuzeigenden Wert und der zu rendernden Beschriftung zugewiesen.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:length:get"><apiName>length</apiName><shortdesc> 
      Gibt die Länge der Achse in Bildschirmkoordinaten an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
      Gibt die Länge der Achse in Bildschirmkoordinaten an. Die Standardlänge hängt von mehreren Faktoren ab, wie beispielsweise der Größe des Diagramms, der Größe der Beschriftungen, dem Layout der Beschriftungen und Anforderungen, die sich aus anderen Teilen des Diagramms ergeben.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:minorTicks:get"><apiName>minorTicks</apiName><shortdesc>
      
      Enthält ein Array, das festlegt, wo Flex die kleineren Markierungen entlang der Achse zeichnet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Enthält ein Array, das festlegt, wo Flex die kleineren Markierungen entlang der Achse zeichnet. Jedes Arrayelement enthält einen Wert zwischen 0 und 1. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:placement:get"><apiName>placement</apiName><shortdesc>
      
      Die Seite des Diagramms, auf der der axisRenderer angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
      Die Seite des Diagramms, auf der der axisRenderer angezeigt wird. Zulässige Werte sind <codeph>"left"</codeph> und <codeph>"right"</codeph> für vertikale Achsenrenderer und <codeph>"top"</codeph> und <codeph>"bottom"</codeph> für horizontale Achsenrenderer. Standardmäßig werden die primären Achsen links und oben und die sekundären Achsen rechts und unten platziert. CartesianCharts stellen automatisch sicher, dass sekundäre Achsen gegenüber von primären Achsen platziert werden. Wenn Sie beispielsweise eine primäre vertikale Achse explizit rechts platzieren, wird die sekundäre vertikale Achse automatisch links platziert.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:ticks:get"><apiName>ticks</apiName><shortdesc>
      
      Enthält ein Array, das festlegt, wo Flex die Markierungen entlang der Achse zeichnet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Enthält ein Array, das festlegt, wo Flex die Markierungen entlang der Achse zeichnet. Jedes Arrayelement enthält einen Wert zwischen 0 und 1. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:titleRenderer:get"><apiName>titleRenderer</apiName><shortdesc> 
      Ein Verweis auf die Factory, die zum Rendern des Achsentitels verwendet wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/></apiValueDef><apiDesc> 
      Ein Verweis auf die Factory, die zum Rendern des Achsentitels verwendet wurde. Dieser Typ muss UIComponent erweitern und die IDataRenderer- und IFlexDisplayObject-Schnittstellen implementieren.
      <p>Der AxisRenderer erstellt eine Instanz dieser Klasse für den Titel der Achse. Die data-Eigenschaft des titleRenderer wird dem zu rendernden Titel zugewiesen.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.charts:AxisRenderer:otherAxes:set"><apiName>otherAxes</apiName><shortdesc>
      
      Ein Array bestehend aus Achsen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Ein Array bestehend aus Achsen.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:CategoryAxis"><apiName>CategoryAxis</apiName><shortdesc>
  Durch die CategoryAxis-Klasse werden die im Diagramm dargestellten Daten nach bestimmten Werten entlang einer Achse gruppiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:CategoryAxis&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:CategoryAxis
    <strong>Properties</strong>
    categoryField="null"
    dataFunction="<i>No default</i>"
    dataProvider="<i>No default</i>"
    labelFunction="<i>No default</i>"
    padding="<i>Default depends on chart type</i>"
    ticksBetweenLabels="<i>true</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IAxis</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:AxisBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Durch die CategoryAxis-Klasse werden die im Diagramm dargestellten Daten nach bestimmten Werten entlang einer Achse gruppiert. Üblicherweise verwenden Sie die CategoryAxis-Klasse zum Definieren einer Reihe von Beschriftungen, die entlang einer Achse des Diagramms angezeigt werden. Ein Beispiel dafür sind Diagramme, die Daten nach Stadt, Jahr, Geschäftseinheit usw. wiedergeben.
  
  <p>Sie müssen die Eigenschaft <codeph>dataProvider</codeph> auf einer CategoryAxis nicht explizit festlegen. Eine in einem Diagramm verwendete CategoryAxis erbt die Eigenschaft <codeph>dataProvider</codeph> vom enthaltenden Diagramm.</p>
  
  <p>Sie können die gleichen Datenprovider zur Bereitstellung von Daten für das Diagramm und die CategoryAxis-Kategorien verwenden, jedoch kann eine CategoryAxis das Rendern optimieren, wenn der Datenprovider relativ statisch ist. Wenn möglich, sollten Sie sicherstellen, dass die Kategorien relativ statisch sind und die sich ändernden Daten in verschiedenen Datenprovidern gespeichert werden.</p>
  
  <p>Die Eigenschaft <codeph>dataProvider</codeph> akzeptiert entweder ein Array von Strings oder ein Array von Datensätzen (Objekte) bei einer Eigenschaft, die den Kategorienamen angibt. Wenn Sie eine <codeph>categoryField</codeph>-Eigenschaft angeben, geht die CategoryAxis davon aus, dass der Datenprovider ein Array von Objekten ist. Wenn die Eigenschaft <codeph>categoryField</codeph> den Wert <codeph>null</codeph> aufweist, geht die CategoryAxis davon aus, dass der Datenprovider ein Array von Strings ist.</p>
  
  </apiDesc><example conref="HLOCChartExample.mxml"><swfblock conref="examples/HLOCChartExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.charts:CategoryAxis:CategoryAxis"><apiName>CategoryAxis</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts:CategoryAxis:filterCache"><apiName>filterCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#filterCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Ein Array von Objekten zum Auslesen und Speichern von konvertierten Werten.
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>Das Feld der Objekte im Cache-Array, das die vorgefilterten Werte enthält.
     
      </apiDesc></apiParam><apiParam><apiItemName>filteredField</apiItemName><apiType value="String"/><apiDesc>Das Feld der Objekte im Cache-Array, in dem die gefilterten Werte gespeichert werden sollten.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#filterCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:formatForScreen"><apiName>formatForScreen</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#formatForScreen()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>Der Text des DataTip.
      
      </apiDesc></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Der in eine Zeichenfolge zu konvertierende Wert. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#formatForScreen()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:getLabelEstimate"><apiName>getLabelEstimate</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#getLabelEstimate()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier><apiDesc>Ein Array von AxisLabel-Objekten.
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#getLabelEstimate()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:getLabels"><apiName>getLabels</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#getLabels()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier><apiDesc>Ein Array von AxisLabel-Objekten.
      
      </apiDesc></apiReturn><apiParam><apiItemName>minimumAxisLength</apiItemName><apiType value="Number"/><apiDesc>Die Mindestlänge der Achse in Pixeln. Die Achse kann länger als dieser Wert sein, jedoch nicht kürzer.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#getLabels()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:invertTransform"><apiName>invertTransform</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#invertTransform()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>Ein Objekt mit dem umgewandelten Wert.
      
      </apiDesc></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Die Grenze der Achse. Dieser Parameter sollte zwischen 0 und 1 liegen, wobei 0 die Mindestgrenze der Achse und 1 die Höchstgrenze der Achse ist.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#invertTransform()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:mapCache"><apiName>mapCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#mapCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Ein Array von Objekten zum Auslesen und Speichern von konvertierten Werten.
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>Das Feld der Objekte im Cache-Array, das die vorkonvertierten Werte enthält.
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>Das Feld der Objekte im Cache-Array, in dem die konvertierten Werte gespeichert werden sollten.
     
      </apiDesc></apiParam><apiParam><apiItemName>indexValues</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Dieser Parameter ist <codeph>true</codeph>, wenn die zugeordneten Werte Indexpositionswerte sind, und <codeph>false</codeph>, wenn sie natürliche Datenwerte sind.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#mapCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:preferDropLabels"><apiName>preferDropLabels</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#preferDropLabels()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, wenn Beschriftungen ohne Datenverlust ausgelassen werden können, andernfalls <codeph>false</codeph>. 
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#preferDropLabels()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:reduceLabels"><apiName>reduceLabels</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#reduceLabels()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier><apiDesc>Eine neuer Beschriftungssatz, durch den das Problem der Überschneidung behoben wird, indem die Anzahl der Beschriftungen reduziert wird.
      
      </apiDesc></apiReturn><apiParam><apiItemName>intervalStart</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>Der Anfang des Intervalls, in dem sich Beschriftungen überschneiden.
     
      </apiDesc></apiParam><apiParam><apiItemName>intervalEnd</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>Das Ende des Intervalls, in dem sich Beschriftungen überschneiden.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#reduceLabels()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:transformCache"><apiName>transformCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#transformCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Ein Array von Objekten zum Auslesen und Speichern von zugeordneten Werten.
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>Das Feld der Objekte im Cache-Array, das die vorzugeordneten Werte enthält.
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>Das Feld der Objekte im Cache-Array, in dem die zugeordneten Werte gespeichert werden sollten.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#transformCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:update"><apiName>update</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#update()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#update()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts:CategoryAxis:baseline:get"><apiName>baseline</apiName><shortdesc>
      
      Die Grundlinienposition der Achse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      Die Grundlinienposition der Achse. Einige Serien wie ColumnSeries oder AreaSeries verwenden diesen Wert zum Definieren der Basis eines ausgefüllten Bereichs, wenn kein Mindestwert angegeben ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:categoryField:get"><apiName>categoryField</apiName><shortdesc>
      Gibt das Feld des Datenproviders an, das den Text für die Beschriftungen enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt das Feld des Datenproviders an, das den Text für die Beschriftungen enthält. Wenn diese Eigenschaft <codeph>null</codeph> entspricht, geht CategoryAxis davon aus, dass der dataProvider ein Array von Strings enthält.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:dataFunction:get"><apiName>dataFunction</apiName><shortdesc>
     Gibt eine Methode an, die den Wert zurückgibt, der als categoryValue für das aktuelle Element verwendet werden soll. Wenn diese Eigenschaft festgelegt wird, hat der Rückgabewert der angepassten Datenfunktion Vorrang vor categoryField. Die angepasste dataFunction hat die folgende Signatur: function_name (axis:CategoryAxis, item:Object):Object { ...</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Gibt eine Methode an, die den Wert zurückgibt, der als categoryValue für das aktuelle Element verwendet werden soll. Wenn diese Eigenschaft festgelegt wird, hat der Rückgabewert der angepassten Datenfunktion Vorrang vor <codeph>categoryField</codeph>. 
     
     <p>Die angepasste <codeph>dataFunction</codeph> hat die folgende Signatur:
      
     <pre>
     <i>function_name</i> (axis:CategoryAxis, item:Object):Object { ... }
     </pre>
     
     <codeph>Axis</codeph> ist die aktuelle Achse, die diese <codeph>dataFunction</codeph> verwendet. <codeph>Item</codeph> ist das aktuelle Element im dataProvider, das berücksichtigt wird. Diese Funktion gibt ein Objekt zurück.
     </p>
      
     <p>Ein Verwendungsbeispiel für eine angepasste <codeph>dataFunction</codeph> ist die Rückgabe eines Werts aus einem dataProvider mit Elementen in eingebetteten Feldern.</p>
       
     </apiDesc><example>
     <pre>
     public function myFunction(axis:CategoryAxis,item:Object):Object {
          return(item.Country.State);
     }     
     </pre>
     
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      Gibt die Datenquelle mit den Beschriftungsnamen an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Gibt die Datenquelle mit den Beschriftungsnamen an. Der <codeph>dataProvider</codeph> kann ein Array von Strings oder Objekten oder ein beliebiges Objekt sein, das die IList- oder ICollectionView-Schnittstelle implementiert. Wenn der <codeph>dataProvider</codeph> ein Array von Strings ist, vergewissern Sie sich, dass die Eigenschaft <codeph>categoryField</codeph> auf <codeph>null</codeph> gesetzt ist. Wenn der dataProvider ein Array von Objekten ist, setzen Sie die Eigenschaft <codeph>categoryField</codeph> auf den Namen des Felds, das den Beschriftungstext enthält.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Gibt eine Funktion an, die die Beschriftungen definiert, die für die einzelnen Elemente im dataProvider der CategoryAxis generiert werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Gibt eine Funktion an, die die Beschriftungen definiert, die für jedes Element im <codeph>dataProvider</codeph> der CategoryAxis generiert werden. Wenn keine <codeph>labelFunction</codeph> vorhanden ist, verwenden die Achsenbeschriftungen standardmäßig den Wert der Kategorie selbst.
     
      <p>Die <codeph>labelFunction</codeph>-Methode für eine CategoryAxis hat folgende Signatur:</p>
      <pre>
      function <i>function_name</i>(<i>categoryValue</i>:Object, <i>previousCategoryValue</i>:Object, <i>axis</i>:CategoryAxis, <i>categoryItem</i>:Object):String { ... }
      </pre>
      
      <p>Ort:</p>
      <ul>
       <li><codeph><i>categoryValue</i></codeph> ist der Wert der darzustellenden Kategorie.</li>
       <li><codeph><i>previousCategoryValue</i></codeph> ist der Wert der vorhergehenden Kategorie der Achse.</li>
       <li><codeph><i>axis</i></codeph> ist die gerenderte CategoryAxis.</li>
       <li><codeph><i>categoryItem</i></codeph> ist das Element aus dem <codeph>dataProvider</codeph>, das dargestellt wird.</li>
      </ul>
      
      <p>Flex zeigt den zurückgegebenen String als Achsenbeschriftung an.</p>
     
      <p>Wenn die Eigenschaft <codeph>categoryField</codeph> nicht festgelegt ist, entspricht der Wert der Eigenschaft <codeph>categoryValue</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:padding:get"><apiName>padding</apiName><shortdesc>
      Gibt den an beiden Seiten der Achse hinzuzufügenden Abstand an, wenn Daten auf dem Bildschirm gerendert werden. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.5
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt den an beiden Seiten der Achse hinzuzufügenden Abstand an, wenn Daten auf dem Bildschirm gerendert werden. Legen Sie 0 fest, um die erste Kategorie dem Anfang der Achse und die letzte Kategorie dem Ende zuzuweisen. Legen Sie 0,5 fest, um einen Abstand von einer halben Kategoriebreite zwischen dem Beginn der Achse und der ersten Kategorie und der letzten Kategorie und dem Ende der Achse hinzuzufügen.
      
      <p>Dies ist bei Diagrammen nützlich, bei denen über die Grenzen der Kategorie hinaus Werte gerendert werden, wie bei Säulen- und Balkendiagrammen. Bei Verwendung als horizontalAxis in einem LineChart oder AreaChart wird der Wert auf 0 zurückgesetzt.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:ticksBetweenLabels:get"><apiName>ticksBetweenLabels</apiName><shortdesc>
      Gibt die Position der großen Markierungen auf der Achse in Relation zu den Kategoriebeschriftungen an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Gibt die Position der großen Markierungen auf der Achse in Relation zu den Kategoriebeschriftungen an. Bei <codeph>true</codeph> werden Markierungen (und die verknüpften Rastelinien) zwischen den Kategorien angezeigt. Bei <codeph>false</codeph> werden Markierungen in der Mitte der Kategorie angezeigt und sind an der Beschriftung ausgerichtet.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:PlotChart"><apiName>PlotChart</apiName><shortdesc>
  Das PlotChart-Steuerelement stellt die Daten mit zwei Werten für jeden Datenpunkt dar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  The <code>&lt;mx:PlotChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:PlotChart
  /&gt;
  </pre> 
  
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  Das PlotChart-Steuerelement stellt die Daten mit zwei Werten für jeden Datenpunkt dar. Ein Wert bestimmt die Position des Datenpunkts entlang der horizontalen Achse und ein Wert bestimmt seine Position entlang der vertikalen Achse.
  
  <p>Das PlotChart-Steuerelement erwartet, dass die Eigenschaft <codeph>series</codeph> ein Array von PlotSeries-Objekten enthält.</p>
 
  </apiDesc><example conref="PlotChartExample.mxml"><swfblock conref="examples/PlotChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#PlotSeries"><linktext>mx.charts.series.PlotSeries</linktext></link></related-links><apiConstructor id="mx.charts:PlotChart:PlotChart"><apiName>PlotChart</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:PlotChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       Eine Modul-Factory wird als Kontext für die Verwendung eingebetteter Schriftarten und für die Suche nach dem Stilmanager, der die Stile dieser Komponente steuert, verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       Eine Modul-Factory wird als Kontext für die Verwendung eingebetteter Schriftarten und für die Suche nach dem Stilmanager, der die Stile dieser Komponente steuert, verwendet.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:CandlestickChart"><apiName>CandlestickChart</apiName><shortdesc>
  Das CandlestickChart-Steuerelement stellt Finanzdaten als Kerzenserie dar, die Höchst-, Tiefst-, Anfangs- und Schlusswerte einer Datenreihe anzeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="maxColumnWidth" owner="mx.charts:CandlestickChart" playerVersion="Flash9" type="Number">
<description>
  Gibt die Breite der Kerzen in Pixeln an. Als eigentliche Säulenbreite wird entweder der Wert dieser Eigenschaft oder der Eigenschaft <codeph>columnWidthRatio</codeph> verwendet, abhängig davon, welcher Wert kleiner ist. Bei mehreren Kerzenserien wird dieser Raum anteilsmäßig aufgeteilt.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnWidthRatio" owner="mx.charts:CandlestickChart" playerVersion="Flash9" type="Number">
<description>
  Gibt durch einen Wert zwischen 0 und 1 an, wie breit die Kerzen im Verhältnis zu den Kategoriebreiten der horizontalen Achse gezeichnet werden sollen. Beim Wert 1 wird der gesamte Raum verwendet, beim Wert 0,6 dagegen 60 % des verfügbaren Raums der Säule. Die tatsächlich verwendete Kerzenbreite entspricht der Eigenschaft <codeph>columnWidthRatio</codeph> oder <codeph>maxColumnWidth</codeph>, je nachdem, welche Eigenschaft den kleineren Wert besitzt. Bei mehreren Kerzenserien wird dieser Raum anteilsmäßig aufgeteilt. Der Standardwert ist 0,65.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  The <code>&lt;mx:CandlestickChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:CandlestickChart
    <strong>Styles</strong>
    columnWidthRatio=".65"
    maxColumnWidth="<i>No default</i>"
  /&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  Das CandlestickChart-Steuerelement stellt Finanzdaten als Kerzenserie dar, die Höchst-, Tiefst-, Anfangs- und Schlusswerte einer Datenreihe anzeigt. Der oberste und unterste Punkt der vertikalen Linie jeder Kerze stellen den höchsten bzw. niedrigsten Wert für den Datenpunkt dar, während die Ober- und Unterseite des ausgefüllten Felds den Anfangs- bzw. Schlusswert darstellen. Jede Kerze wird anders ausgefüllt, abhängig davon, ob der Schlusswert für den Datenpunkt höher oder niedriger als der Anfangswert ist.
   
  <p>Das CandlestickChart-Steuerelement erwartet, dass die Eigenschaft <codeph>series</codeph> ein Array von CandlestickSeries-Objekten enthält.</p>
   </apiDesc><example conref="CandlestickChartExample.mxml"><swfblock conref="examples/CandlestickChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#CandlestickSeries"><linktext>mx.charts.series.CandlestickSeries</linktext></link></related-links><apiConstructor id="mx.charts:CandlestickChart:CandlestickChart"><apiName>CandlestickChart</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:CandlestickChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       Eine Modul-Factory wird als Kontext für die Verwendung eingebetteter Schriftarten und für die Suche nach dem Stilmanager, der die Stile dieser Komponente steuert, verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       Eine Modul-Factory wird als Kontext für die Verwendung eingebetteter Schriftarten und für die Suche nach dem Stilmanager, der die Stile dieser Komponente steuert, verwendet.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:DateTimeAxis"><apiName>DateTimeAxis</apiName><shortdesc>
  Die DateTimeAxis-Klasse ordnet Zeitwerte gleichmäßig zwischen Mindest- und Höchstwert entlang der Diagrammachse zu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:DateTimeAxis&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:DateTimeAxis
    <strong>Properties</strong>
    alignLabelsToUnits="true|false"
    dataUnits="milliseconds|seconds|minutes|hours|days|weeks|months|years"
    disabledDays="<i>Array; No default</i>"
    disabledRanges="<i>Array; No default</i>"
    displayLocalTime="<i>false</i>"
    interval="<i>Number</i>"
    labelUnits="milliseconds|seconds|minutes|hours|days|weeks|months|years"
    maximum="<i>Date</i>"
    minimum="<i>Date</i>"
    minorTickInterval="<i>Number</i>"
    minorTickUnits="milliseconds|seconds|minutes|hours|days|weeks|months|years"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:NumericAxis</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die DateTimeAxis-Klasse ordnet Zeitwerte gleichmäßig zwischen Mindest- und Höchstwert entlang der Diagrammachse zu. Werte können als Instanzen der Date-Klasse, als Zahlen, die die Anzahl der Millisekunden seit Beginn des Zeitraums (1. Januar 1970, 0:00 Uhr GMT) angeben, oder als Stringwerte dargestellt werden, wenn Sie eine angepasste Parsingfunktion bereitstellen.  
 
  <p>DateTimeAxis untersucht den Bereich zwischen Mindest- und Höchstwerten auf der Achse und bestimmt die Einheiten, die am besten zum Markieren der Achse geeignet sind. Die Achse wählt die höchste Einheit, durch die eine angemessene Anzahl von Beschriftungen für den angegebenen Bereich generiert wird. Sie können die vom Diagramm berücksichtigten Einheiten beschränken oder die zu verwendenden Einheiten genau angeben, indem Sie die Eigenschaft <codeph>labelUnits</codeph> verwenden.</p>
 
  <p>Sie können die Mindest- und Höchstwerte explizit angeben oder automatisch von der Achse durch Untersuchung der gerenderte Werte im Diagramm bestimmen lassen. Standardmäßig wählt DateTimeAxis den kleinstmöglichen Bereich, der alle im Diagramm dargestellten Werte enthält. Optional können Sie festlegen, dass die Mindest- und Höchstwerte auf ganze Einheiten (Millisekunden, Sekunden, Minuten, Stunden, Tage, Wochen, Monate, Jahre) gerundet werden, indem Sie die Eigenschaft <codeph>autoAdjust</codeph> auf <codeph>true</codeph> setzen.</p>
  
  <p>Sie können Wochentage und Datumsbereiche deaktivieren, um nur Arbeitstage auf der Achse und nicht alle Tage zwischen Mindest- und Höchstwert anzuzeigen. Sie können Daten auch filtern und nur die Daten, die Arbeitstagen entsprechen, im Diagramm anzeigen.</p>
  </apiDesc><example conref="DateTimeAxisExample.mxml"><swfblock conref="examples/DateTimeAxisExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.chartClasses.xml#IAxis"><linktext>mx.charts.chartClasses.IAxis</linktext></link></related-links><apiConstructor id="mx.charts:DateTimeAxis:DateTimeAxis"><apiName>DateTimeAxis</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts:DateTimeAxis:protected:buildMinorTickCache"><apiName>buildMinorTickCache</apiName><shortdesc>
      
      Erstellt ein Array von Positionen für die kleineren Markierungen. Das Array wird durch diese Achse generiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Ein Array der Positionen von 0 bis 1, die die Punkte zwischen den Mindest- und Höchstwerten der Achse darstellen, an denen kleinere Markierungen angezeigt werden.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      
      Erstellt ein Array von Positionen für die kleineren Markierungen. Das Array wird durch diese Achse generiert. Unterklassen müssen diese Funktion implementieren. Diese Funktion wird automatisch von NumericAxis aufgerufen. Sie sollten auf die Eigenschaft <codeph>minorTicks</codeph> zugreifen, statt diese Funktion direkt aufzurufen.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:filterCache"><apiName>filterCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#filterCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Ein Array von Objekten zum Auslesen und Speichern von konvertierten Werten.
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>Das Feld der Objekte im Cache-Array, das die vorgefilterten Werte enthält.
     
      </apiDesc></apiParam><apiParam><apiItemName>filteredField</apiItemName><apiType value="String"/><apiDesc>Das Feld der Objekte im Cache-Array, in dem die gefilterten Werte gespeichert werden sollten.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#filterCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatDays"><apiName>formatDays</apiName><shortdesc>
      Die Standardformatierungsfunktion, die verwendet wird, wenn auf der Achse auf Tagen basierende labelUnits angezeigt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Die formatierte Beschriftung.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>Das Date-Objekt, das die zu formatierende Einheit enthält.
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>Das Date-Objekt, das den Datenpunkt vor dem aktuellen Datenpunkt enthält.
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>DateTimeAxis, auf der die Beschriftung angezeigt wird.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Die Standardformatierungsfunktion, die verwendet wird, wenn auf der Achse auf Tagen basierende <codeph>labelUnits</codeph> angezeigt werden. Wenn Sie eine angepasste DateTimeAxis-Klasse schreiben, können Sie diese Methode überschreiben, um eine alternative Standardformatierung bereitzustellen.
      
      <p>Sie können diese Methode nicht direkt aufrufen. Stattdessen ruft Flex diese Methode vor dem Rendern der Beschriftung auf, um den entsprechenden darzustellenden String abzurufen.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatMilliseconds"><apiName>formatMilliseconds</apiName><shortdesc>
      Die Standardformatierungsfunktion, die verwendet wird, wenn auf der Achse auf Millisekunden basierende labelUnits angezeigt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Die formatierte Beschriftung.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>Das Date-Objekt, das die zu formatierende Einheit enthält.
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>Das Date-Objekt, das den Datenpunkt vor dem aktuellen Datenpunkt enthält.
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>DateTimeAxis, auf der die Beschriftung angezeigt wird.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Die Standardformatierungsfunktion, die verwendet wird, wenn auf der Achse auf Millisekunden basierende <codeph>labelUnits</codeph> angezeigt werden. Wenn Sie eine angepasste DateTimeAxis-Klasse schreiben, können Sie diese Methode überschreiben, um eine alternative Standardformatierung bereitzustellen.
      
      <p>Sie können diese Methode nicht direkt aufrufen. Stattdessen ruft Flex diese Methode vor dem Rendern der Beschriftung auf, um den entsprechenden darzustellenden String abzurufen.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatMinutes"><apiName>formatMinutes</apiName><shortdesc>
      Die Standardformatierungsfunktion, die verwendet wird, wenn auf der Achse auf Minuten basierende labelUnits angezeigt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Die formatierte Beschriftung.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>Das Date-Objekt, das die zu formatierende Einheit enthält.
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>Das Date-Objekt, das den Datenpunkt vor dem aktuellen Datenpunkt enthält.
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>DateTimeAxis, auf der die Beschriftung angezeigt wird.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Die Standardformatierungsfunktion, die verwendet wird, wenn auf der Achse auf Minuten basierende <codeph>labelUnits</codeph> angezeigt werden. Wenn Sie eine angepasste DateTimeAxis-Klasse schreiben, können Sie diese Methode überschreiben, um eine alternative Standardformatierung bereitzustellen.
      
      <p>Sie können diese Methode nicht direkt aufrufen. Stattdessen ruft Flex diese Methode vor dem Rendern der Beschriftung auf, um den entsprechenden darzustellenden String abzurufen.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatMonths"><apiName>formatMonths</apiName><shortdesc>
      Die Standardformatierungsfunktion, die verwendet wird, wenn auf der Achse auf Monaten basierende labelUnits angezeigt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Die formatierte Beschriftung.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>Das Date-Objekt, das die zu formatierende Einheit enthält.
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>Das Date-Objekt, das den Datenpunkt vor dem aktuellen Datenpunkt enthält.
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>DateTimeAxis, auf der die Beschriftung angezeigt wird.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Die Standardformatierungsfunktion, die verwendet wird, wenn auf der Achse auf Monaten basierende <codeph>labelUnits</codeph> angezeigt werden. Wenn Sie eine angepasste DateTimeAxis-Klasse schreiben, können Sie diese Methode überschreiben, um eine alternative Standardformatierung bereitzustellen.
      
      <p>Sie können diese Methode nicht direkt aufrufen. Stattdessen ruft Flex diese Methode vor dem Rendern der Beschriftung auf, um den entsprechenden darzustellenden String abzurufen.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatSeconds"><apiName>formatSeconds</apiName><shortdesc>
      Die Standardformatierungsfunktion, die verwendet wird, wenn auf der Achse auf Sekunden basierende labelUnits angezeigt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Die formatierte Beschriftung.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>Das Date-Objekt, das die zu formatierende Einheit enthält.
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>Das Date-Objekt, das den Datenpunkt vor dem aktuellen Datenpunkt enthält.
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>DateTimeAxis, auf der die Beschriftung angezeigt wird.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Die Standardformatierungsfunktion, die verwendet wird, wenn auf der Achse auf Sekunden basierende <codeph>labelUnits</codeph> angezeigt werden. Wenn Sie eine angepasste DateTimeAxis-Klasse schreiben, können Sie diese Methode überschreiben, um eine alternative Standardformatierung bereitzustellen.
      
      <p>Sie können diese Methode nicht direkt aufrufen. Stattdessen ruft Flex diese Methode vor dem Rendern der Beschriftung auf, um den entsprechenden darzustellenden String abzurufen.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatYears"><apiName>formatYears</apiName><shortdesc> 
      Die Standardformatierungsfunktion, die verwendet wird, wenn auf der Achse auf Jahren basierende labelUnits angezeigt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Die formatierte Beschriftung.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>Das Date-Objekt, das die zu formatierende Einheit enthält.
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>Das Date-Objekt, das den Datenpunkt vor dem aktuellen Datenpunkt enthält.
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>DateTimeAxis, auf der die Beschriftung angezeigt wird.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Die Standardformatierungsfunktion, die verwendet wird, wenn auf der Achse auf Jahren basierende <codeph>labelUnits</codeph> angezeigt werden. Wenn Sie eine angepasste DateTimeAxis-Klasse schreiben, können Sie diese Methode überschreiben, um eine alternative Standardformatierung bereitzustellen.
      
      <p>Sie können diese Methode nicht direkt aufrufen. Stattdessen ruft Flex diese Methode vor dem Rendern der Beschriftung auf, um den entsprechenden darzustellenden String abzurufen.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:reduceLabels"><apiName>reduceLabels</apiName><shortdesc> 
      Aufgerufen, wenn ein AxisRenderer die Beschriftungen ohne Überschneidungen nicht sauber rendern kann und eine Reduzierung des Beschriftungssatzes durch das Achsenobjekt benötigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Eine neuer Beschriftungssatz, durch den das Problem der Überschneidung behoben wird, indem die Anzahl der Beschriftungen reduziert wird.
      
      </apiDesc><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier></apiReturn><apiParam><apiItemName>intervalStart</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>Der Anfang des Intervalls, in dem sich Beschriftungen überschneiden.
     
      </apiDesc></apiParam><apiParam><apiItemName>intervalEnd</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>Das Ende des Intervalls, in dem sich Beschriftungen überschneiden.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Aufgerufen, wenn ein AxisRenderer die Beschriftungen ohne Überschneidungen nicht sauber rendern kann und eine Reduzierung des Beschriftungssatzes durch das Achsenobjekt benötigt. An die Methode werden zwei sich überschneidende Beschriftungen übergeben.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:transformCache"><apiName>transformCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#transformCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Ein Array von Objekten zum Auslesen und Speichern von zugeordneten Werten.
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>Das Feld der Objekte im Cache-Array, das die vorzugeordneten Werte enthält.
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>Das Feld der Objekte im Cache-Array, in dem die zugeordneten Werte gespeichert werden sollten.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#transformCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts:DateTimeAxis:alignLabelsToUnits:get"><apiName>alignLabelsToUnits</apiName><shortdesc>
      Bestimmt die Platzierung der Beschriftungen entlang der Achse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Bestimmt die Platzierung der Beschriftungen entlang der Achse.
      <p>Bei <codeph>false</codeph> platziert das Diagramm immer eine Beschriftung an den Anfang der Achse. Beispiel: Wenn bei einer Beschriftung für jeden Monat der erste Datenpunkt der 14. Juli ist, wird die erste Beschriftung beim 14. Juli eingefügt. Bei <codeph>true</codeph> berechnet Flex zuerst die Beschriftungseinheiten, und beschriftet dann das erste ganze Intervall dieser Einheiten. Beispiel: Wenn der erste Datenpunkt der 14. Juli ist und die Beschriftungseinheiten Monate sind (explizit festgelegt oder dynamisch berechnet), wird die erste Beschriftung beim 1. August angezeigt.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:dataUnits:get"><apiName>dataUnits</apiName><shortdesc>
      Gibt die Einheiten an, die im Diagramm dargestellt werden sollen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt die Einheiten an, die im Diagramm dargestellt werden sollen. Folgende Werte sind möglich:
      <ul>
       <li><codeph>milliseconds</codeph></li>
       <li><codeph>seconds</codeph></li>
       <li><codeph>minutes</codeph></li>
       <li><codeph>hours</codeph></li>
       <li><codeph>days</codeph></li>
       <li><codeph>weeks</codeph></li>
       <li><codeph>months</codeph></li>
       <li><codeph>years</codeph></li>
      </ul>
     
      <p>Dieser Wert wird auf zwei Arten verwendet. Erstens wählt DateTimeAxis keine Beschriftungseinheiten aus, die kleiner als die durch die Daten dargestellten Einheiten sind. Wenn die Eigenschaft <codeph>dataUnits</codeph> den Wert <codeph>days</codeph> hat, zeigt das Diagramm keine Beschriftungen für Stunden an, unabhängig vom Bereich der Mindest- und Höchstwerte.</p>
     
      <p>Zweitens beeinflusst die Eigenschaft <codeph>dataUnits</codeph> das Rendern einiger Serien. Insbesondere wenn Säulenserien (wie ColumnSeries, BarSeries, CandlestickSeries und HLOCSeries) dargestellt werden, wird die gerenderte Säulenbreite mithilfe der Eigenschaft <codeph>dataUnits</codeph> bestimmt.</p>
     
      <p>Beispiel: Im ColumnChart-Steuerelement sind die Eigenschaften der horizontalen Achse wie folgt gesetzt: <codeph>labelUnits</codeph> auf <codeph>weeks</codeph> und <codeph>dataUnits</codeph> auf <codeph>days</codeph>. In diesem Fall rendert ColumnCharts jede Säule entsprechend dem siebten Teil des Abstands zwischen den Beschriftungen.</p>
     
      <p>Wenn die Eigenschaft <codeph>dataUnits</codeph> auf <codeph>null</codeph> gesetzt wird, werden die Säulen der Säulenserien als Tage gerendert, DateTimeAxis wählt jedoch beim Generieren der Beschriftungen eine geeignete Einheit aus.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:disabledDays:get"><apiName>disabledDays</apiName><shortdesc>
      Die Tage der Woche, die deaktiviert werden sollen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tage innerhalb einer Woche, die zu deaktivieren sind. Alle Datumswerte eines Monats für den entsprechenden Tag werden deaktiviert. Die Elemente dieses Arrays können Werte zwischen 0 (Sonntag) und 6(Samstag) haben. So deaktiviert beispielsweise ein Wert von <codeph>[ 0, 6 ]</codeph> den Sonntag und Samstag.
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:disabledRanges:get"><apiName>disabledRanges</apiName><shortdesc>
      Deaktiviert einzelne und mehrere Tage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
      
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Deaktiviert einzelne und mehrere Tage.
     
      <p>Diese Eigenschaft akzeptiert ein Array von Objekten als Parameter. Jedes Objekt in diesem Array muss ein Date-Objekt sein, das den zu deaktivierenden einzelnen Tag angibt, oder ein Objekt, das eine oder beide der Eigenschaften <codeph>rangeStart</codeph> oder <codeph>rangeEnd</codeph> enthält. Die Werte dieser beiden Eigenschaften sind Date-Objekte. Der Wert dieser Eigenschaften beschreibt die Grenzen des Datumsbereichs. Wenn eine der beiden Eigenschaften fehlt, setzt sich der Bereich unbegrenzt in die entsprechende Richtung fort. Wenn Sie lediglich <codeph>rangeStart</codeph> festlegen, werden alle Daten nach dem festgelegten Datum deaktiviert inklusive des<codeph>rangeStart</codeph>-Datums. Wenn Sie nur <codeph>rangeEnd</codeph> angeben, werden alle Datumswerte vor dem angegebenen Datum deaktiviert, einschließlich dem <codeph>rangeEnd</codeph>-Datum. Um einen einzelnen Tag zu deaktivieren, verwenden Sie ein einzelnes Date-Objekt, das ein Datum im Array angibt.</p>
     
      <p>Im folgenden Beispiel werden diese Datumswerte deaktiviert: 11. Januar 2006, der Zeitraum vom 23. Januar bis zum 10. Februar 2006 und alle folgenden Datumswerte.</p>
     
      <p><codeph>disabledRanges="{[ new Date(2006,0,11), {rangeStart: new Date(2006,0,23), rangeEnd: new Date(2006,1,10)}, {rangeStart: new Date(2006,2,1)} ]}"</codeph></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:displayLocalTime:get"><apiName>displayLocalTime</apiName><shortdesc> 
      Wenn „true“ festgelegt wird, geht DateTimeAxis davon aus, dass alle Datumswerte in der Zeitzone des Client-Rechners liegen, auf dem die Anwendung ausgeführt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
      Wenn <codeph>true</codeph> festgelegt wird, geht DateTimeAxis davon aus, dass alle Datumswerte in der Zeitzone des Client-Rechners liegen, auf dem die Anwendung ausgeführt wird. Bei <codeph>false</codeph> wird davon ausgegangen, dass alle Werte in Weltzeit (GMT) angegeben sind.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:interval:get"><apiName>interval</apiName><shortdesc>
      Gibt die Anzahl der labelUnits zwischen den Beschriftungswerten entlang der Achse an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt die Anzahl der <codeph>labelUnits</codeph> zwischen den Beschriftungswerten entlang der Achse an. Flex berechnet das Intervall, wenn diese Eigenschaft auf <codeph>null</codeph> gesetzt ist.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:labelUnits:get"><apiName>labelUnits</apiName><shortdesc>
      Die Einheiten, die von der Achse zum Generieren der Beschriftungen verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Die Einheiten, die von der Achse zum Generieren der Beschriftungen verwendet werden. Standardmäßig berücksichtigt DateTimeAxis alle gültigen Einheiten (<codeph>Millisekunden</codeph>, <codeph>Sekunden</codeph>, <codeph>Minuten</codeph>, <codeph>Stunden</codeph>, <codeph>Tage</codeph>, <codeph>Wochen</codeph>, <codeph>Monate</codeph> oder <codeph>Jahre</codeph>).
      
      <p>Wenn die Eigenschaft <codeph>labelUnits</codeph> nicht festgelegt ist, verwendet das Diagramm keine Einheiten, die kleiner als der Wert der Eigenschaft <codeph>dataUnits</codeph> sind, um Beschriftungen zu rendern.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:maximum:get"><apiName>maximum</apiName><shortdesc>
      Gibt den Höchstwert für eine Achsenbeschriftung an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt den Höchstwert für eine Achsenbeschriftung an. Bei <codeph>null</codeph> bestimmt Flex den Mindestwert anhand der Daten im Diagramm.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:minimum:get"><apiName>minimum</apiName><shortdesc>
      Gibt den Mindestwert für eine Achsenbeschriftung an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt den Mindestwert für eine Achsenbeschriftung an. Bei <codeph>null</codeph> bestimmt Flex den Mindestwert anhand der Daten im Diagramm. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:minorTickInterval:get"><apiName>minorTickInterval</apiName><shortdesc> 
      Gibt die Anzahl der minorTickUnits zwischen den kleineren Markierungen entlang der Achse an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
      Gibt die Anzahl der <codeph>minorTickUnits</codeph> zwischen den kleineren Markierungen entlang der Achse an. Wenn dies auf <codeph>NaN</codeph> gesetzt ist, berechnet DateTimeAxis den Wert automatisch.
      
      <p>Normalerweise wird die Eigenschaft <codeph>minorTickInterval</codeph> automatisch auf 1 gesetzt. Wenn die Einheit der Eigenschaft <codeph>minorTickUnits</codeph> jedoch derjenigen der Eigenschaft <codeph>dataUnits</codeph> entspricht (explizit festgelegt oder implizit berechnet), entspricht die Eigenschaft <codeph>minorTickInterval</codeph> dem Höchstwert 1 oder <codeph>dataInterval</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:minorTickUnits:get"><apiName>minorTickUnits</apiName><shortdesc>
      Die Einheiten, die von der Achse beim Generieren kleinerer Markierungen berücksichtigt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Die Einheiten, die von der Achse beim Generieren kleinerer Markierungen berücksichtigt werden. Standardmäßig berücksichtigt DateTimeAxis alle gültigen Einheiten (<codeph>Millisekunden</codeph>, <codeph>Sekunden</codeph>, <codeph>Minuten</codeph>, <codeph>Stunden</codeph>, <codeph>Tage</codeph>, <codeph>Wochen</codeph>, <codeph>Monate</codeph> oder <codeph>Jahre</codeph>).
      
      <p>Wenn diese Eigenschaft nicht festgelegt ist, bestimmt das Diagramm den Wert der Eigenschaft <codeph>minorTickUnits</codeph>. Wenn das Beschriftungsintervall größer als 1 ist, wird die Eigenschaft <codeph>minorTickUnits</codeph> auf den Wert der Eigenschaft <codeph>labelUnits</codeph> gesetzt und die Eigenschaft <codeph>minorTickInterval</codeph> auf 1 gesetzt. Wenn das Beschriftungsintervall 1 entspricht, wird die Eigenschaft <codeph>minorTickUnits</codeph> auf die nächste kleinere Einheit der Eigenschaft <codeph>labelUnits</codeph> gesetzt. Wenn die Eigenschaft <codeph>minorTickUnits</codeph> festgelegt ist, kann sie nicht unter dem Wert der Eigenschaft <codeph>dataUnits</codeph> liegen.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:protected:requiredDescribedFields:get"><apiName>requiredDescribedFields</apiName><shortdesc>
      Die Felder der DescribeData-Struktur, an denen diese Achse interessiert ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
      Die Felder der DescribeData-Struktur, an denen diese Achse interessiert ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:unitSize:get"><apiName>unitSize</apiName><shortdesc>
      Die Breite der einzelnen Dateneinheit in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die Breite der einzelnen Dateneinheit in Pixeln. Der Typ der Dateneinheit wird durch den Wert der Eigenschaft <codeph>dataUnits</codeph> bestimmt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:dataInterval:set"><apiName>dataInterval</apiName><shortdesc>
      Legt das Intervall zwischen den Daten im Diagramm fest, das in dataUnits angegeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
      Legt das Intervall zwischen den Daten im Diagramm fest, das in <codeph>dataUnits</codeph> angegeben wird.
      <p>Wenn die Eigenschaft <codeph>dataUnits</codeph> auf <codeph>"hours"</codeph> und die Eigenschaft <codeph>dataInterval</codeph> auf 4 gesetzt ist, geht das Diagramm davon aus, dass die Daten alle vier Stunden auftreten. Dies wirkt sich bei einigen Serien (wie ColumnSeries und CandlestickSeries) auf das Rendern der Daten aus. Es beeinflusst auch die automatische Auswahl von Beschriftungen.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="mx.charts.xml#DateTimeAxis/dataUnits"><linktext>dataUnits</linktext></link></related-links></apiValue><apiValue id="mx.charts:DateTimeAxis:parseFunction:set"><apiName>parseFunction</apiName><shortdesc> 
      Gibt eine Methode an, die den Wert von Datenpunkten anpasst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> 
      Gibt eine Methode an, die den Wert von Datenpunkten anpasst. Mit dieser Eigenschaft geben Sie eine Methode an, die einen Wert akzeptiert und ein Date-Objekt zurückgibt. Das Date-Objekt wird im DateTimeAxis-Objekt des Diagramms verwendet. Dies ermöglicht Ihnen anpassbare Dateneingabestrings bereitzustellen und in Date-Objekte zu konvertieren, die Flex für die Verwendung in DateTimeAxis interpretieren kann.
      
      <p>Flex übergibt nur einen Parameter an die Parsingmethode. Dieser Parameter ist der Wert des Datenpunkts, den Sie für die Serie angegeben haben. Üblicherweise handelt es sich um einen String, der eine Datumsform darstellt. Sie können diesen Parameter nicht überschreiben und auch keine zusätzlichen Parameter hinzufügen.</p>
      
      <p>Dieses Date-Objekt wird unmittelbar in einen numerischen Wert umgewandelt, sodass angepasste Parsingfunktionen dasselbe Date-Objekt wiederverwenden können. Standardmäßig verwendet DateTimeAxis die String-Parsingfunktion der ECMA-Standardmethode <codeph>Date.parse()</codeph>.</p>
      
      Im folgenden Beispiel wird ein Datenprovider verwendet, der ein Datenobjekt im Format { jjjj, mm, tt } definiert. Die durch die <codeph>parseFunction</codeph> angegebene Methode nutzt diese Werte zum Erstellen eines Date-Objekts, das von der Achse verwendet werden kann.
      
      <pre>
      &lt;mx:Script>
          import mx.collections.ArrayCollection;
          [Bindable] 
          public var aapl:ArrayCollection = new ArrayCollection([ 
              {date: "2005, 8, 1", close: 42.71},
              {date: "2005, 8, 2", close: 42.99},
              {date: "2005, 8, 3", close: 44}
          ]);
          
          public function myParseFunction(s:String):Date { 
              // Get an array of Strings from the comma-separated String passed in.
              var a:Array = s.split(",");
      
              // Create the new Date object. Note that the month argument is 0-based (with 0 being January).
              var newDate:Date = new Date(a[0],a[1]-1,a[2]);
              return newDate;
          }
      &lt;/mx:Script>
      &lt;mx:LineChart id="mychart" dataProvider="{aapl}" showDataTips="true">
          &lt;mx:horizontalAxis>
              &lt;mx:DateTimeAxis dataUnits="days" parseFunction="myParseFunction"/>
          &lt;/mx:horizontalAxis>
          &lt;mx:series>
              &lt;mx:LineSeries yField="close" xField="date" displayName="AAPL"/>
          &lt;/mx:series>
      &lt;/mx:LineChart>
      </pre>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>