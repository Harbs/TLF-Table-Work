<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.charts.series"><apiName>mx.charts.series</apiName><apiDetail/><apiClassifier id="mx.charts.series:BarSet"><apiName>BarSet</apiName><shortdesc>
  Mit einem Gruppierungssatz können BarSeries-Objekte in einem beliebigen Diagramm gestapelt oder gruppiert werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="series"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IBar</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:StackedSeries</apiBaseClassifier></apiClassifierDef><apiDesc>
  Mit einem Gruppierungssatz können BarSeries-Objekte in einem beliebigen Diagramm gestapelt oder gruppiert werden. Ein BarSet weist das gleiche Gruppierungsverhalten wie ein BarChart-Steuerelement auf, kann jedoch zum Zusammenstellen angepasster Diagramme verwendet werden, die auf der CartesianChart-Klasse basieren. Mit BarSets können alle Diagrammelementtypen gruppiert werden, die die IBar-Schnittstelle implementieren. Mit BarSets können alle Diagrammelementtypen gestapelt werden, die die IBar- und IStackable-Schnittstelle implementieren. Da die BarSet-Klasse die IBar-Schnittstelle implementiert, können Sie mit BarSets andere BarSets gruppieren, um erweiterte angepasste Diagramme zu erstellen.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.series:BarSet:BarSet"><apiName>BarSet</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Konstruktor.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:BarSet:stack"><apiName>stack</apiName><shortdesc>
	  Aktualisiert die Seriendaten und verwendet beim Stapeln die Werte aus den jeweils darunter liegenden Stapeln. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  Aktualisiert die Seriendaten und verwendet beim Stapeln die Werte aus den jeweils darunter liegenden Stapeln. 
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:BarSet:barWidthRatio:get"><apiName>barWidthRatio</apiName><shortdesc>
	  Gibt an, wie breit die Balken im Verhältnis zur Kategoriebreite gerendert werden sollen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.65
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Gibt an, wie breit die Balken im Verhältnis zur Kategoriebreite gerendert werden sollen. Beim Wert <codeph>1</codeph> wird der gesamte Raum verwendet, beim Wert <codeph>0,6</codeph> dagegen 60 % des verfügbaren Raums des Balkens. Normalerweise legen Sie diese Eigenschaft nicht direkt fest. Als eigentliche Balkenbreite wird entweder die Eigenschaft <codeph>barWidthRatio</codeph> oder die Eigenschaft <codeph>maxbarWidth</codeph> verwendet, abhängig davon, welcher Wert kleiner ist.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSet:maxBarWidth:get"><apiName>maxBarWidth</apiName><shortdesc>
	  Gibt die Breite der Balken in Pixeln an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Gibt die Breite der Balken in Pixeln an. Als eigentliche Balkenbreite wird entweder dieser Stil oder die Eigenschaft <codeph>barWidthRatio</codeph> verwendet, abhängig davon, welcher Wert kleiner ist. Bei gruppierten Balken wird dieser Raum anteilsmäßig zwischen den Balken in jeder Gruppe aufgeteilt. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSet:offset:get"><apiName>offset</apiName><shortdesc>
	  Gibt an, wie weit die Mitte der Balken von der Mitte des verfügbaren Raums im Bezug zur Kategoriebreite entfernt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Gibt an, wie weit die Mitte der Balken von der Mitte des verfügbaren Raums im Bezug zur Kategoriebreite entfernt ist. Der Wertebereich ist ein Prozentsatz zwischen <codeph>-100</codeph> und <codeph>100</codeph>. Bei der Einstellung <codeph>0</codeph> werden die Balken im Raum zentriert. Bei der Einstellung <codeph>-50</codeph> wird die Säule am Anfang des verfügbaren Raums zentriert. Normalerweise legen Sie diese Eigenschaft nicht direkt fest.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.series:BubbleSeries"><apiName>BubbleSeries</apiName><shortdesc>
  Definiert eine Datenserie für ein BubbleChart-Steuerelement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="Array">
<description>
  Gibt ein Array von Fill-Objekten an, die die Füllung jedes Elements in der Serie definieren. Diese Einstellung hat Vorrang vor der <codeph>fill</codeph>-Stileigenschaft. Wenn eine angepasste Methode von der Eigenschaft <codeph>fillFunction</codeph> angegeben wird, hat diese Vorrang vor diesem Array. Wenn nicht genügend Arrayelemente für jedes Element vorhanden sind, wiederholt Flex die Füllung ab dem Beginn des Arrays.
  
  <p>Festlegen des Werts dieser Eigenschaft mit CSS
   <pre>
    BubbleSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Festlegen des Werts dieser Eigenschaft mit MXML
   <pre>
    &lt;mx:BubbleSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:BubbleSeries>
   </pre>
  </p>
  
  <p>
  Wenn Sie die Eigenschaft <codeph>fills</codeph> angeben und über ein Legendensteuerelement verfügen möchten, müssen Sie das Legendensteuerelement manuell erstellen und LegendItems hinzufügen.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Die Klasse, die von der Serie verwendet wird, um die Markierung der Serie in verknüpften Legenden zu rendern. Hat dieser Stil den Wert <codeph>null</codeph>, verwenden die meisten Serien stattdessen standardmäßig ihren itemRenderer als Legendenmarkierungs-Skin. Als Legendenmarkierungen verwendete Klassen müssen die Schnittstelle IFlexDisplayObject implementieren. Optional können Sie die ISimpleStyleClient- und IDataRenderer-Schnittstellen implementieren. Wenn die als Legendenmarkierung verwendete Klasse die IDataRenderer-Schnittstelle implementiert, wird die Dateneigenschaft einer LegendData-Instanz zugewiesen.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Eine Factory, die die Klasse darstellt, die von der Serie zur Darstellung der einzelnen Elemente in einem Diagramm verwendet wird. Diese Klasse wird für jedes Element im Diagramm einmal instanziiert. Als itemRenderer verwendete Klassen müssen die IFlexDisplayObject-, ISimpleStyleClient- und IDataRenderer-Schnittstellen implementieren. Der Eigenschaft <codeph>data</codeph> wird das von der Skininstanz gerenderte ChartItem zugewiesen.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Legt den Strichstil für diese Datenserie fest. Sie müssen ein Stroke-Objekt angeben, um den Strich zu definieren. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Legt die Füllung für diese Datenserie fest. Sie können entweder ein Objekt angeben, das die IFill-Schnittstelle implementiert, oder eine Zahl, die einen Volltonfarbwert darstellt. Außerdem können Sie eine Volltonfüllung mit CSS angeben. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ <p>
  The <code>&lt;mx:BubbleSeries&gt;</code> tag inherits all the properties of its parent classes, and 
  the following properties:
  </p>
  <pre>
  &lt;mx:BubbleSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    itemType="<i>No default</i>"
    legendData="<i>No default</i>"
    maxRadius="50"
    minRadius="0"
    radiusAxis="<i>No default</i>"
    radiusField="<i>No default</i>"
    renderData="<i>No default</i>"
    renderDataType="<i>No default</i>"
    verticalAxis="<i>No default</i>"
    xField="null"
    yField="null"
    
    <strong>Styles</strong>
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    stroke="<i>IStroke; no default</i>"  
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  Definiert eine Datenserie für ein BubbleChart-Steuerelement. Der Standard-itemRenderer entspricht der CircleRenderer-Klasse. Optional können Sie einen itemRenderer für die Datenserie definieren. Der itemRenderer muss die IDataRenderer-Schnittstelle implementieren.
   </apiDesc><example conref="BubbleChartExample.mxml"><swfblock conref="../examples/BubbleChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#BubbleChart"><linktext>mx.charts.BubbleChart</linktext></link></related-links><apiConstructor id="mx.charts.series:BubbleSeries:BubbleSeries"><apiName>BubbleSeries</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:BubbleSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      Wendet die Stileigenschaften auf das DisplayObject an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Die erstellte Instanz.
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>Ein Verweis auf den Instanzcache selbst.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wendet die Stileigenschaften auf das DisplayObject an. Diese Methode ist der von dem Instanzcache bei der Erstellung eines neuen Renderers verwendete Rückruf.  
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:beginInterpolation"><apiName>beginInterpolation</apiName><shortdesc>
      
      Wird vom SeriesInterpolate-Effekt zum Initiieren eines Interpolationseffekts aufgerufen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Die von der Serie für die Durchführung der Interpolation benötigten Daten.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>sourceRenderData</apiItemName><apiType value="Object"/><apiDesc>Die Quelldaten für die Serie, zwischen deren Gliedern interpoliert werden soll.
     
      </apiDesc></apiParam><apiParam><apiItemName>destRenderData</apiItemName><apiType value="Object"/><apiDesc>Die Zieldaten für die Serie, zwischen deren Gliedern interpoliert werden soll.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Wird vom SeriesInterpolate-Effekt zum Initiieren eines Interpolationseffekts aufgerufen. Der Effekt übergibt die Quell- und Zieldaten für die Serie, zwischen deren Gliedern interpoliert werden soll. Der Effekt übergibt den Rückgabewert dieser Methode immer wieder an die <codeph>interpolate()</codeph>-Methode, um die Animation für die Dauer des Effekts fortzusetzen. Die Serie berechnet die Daten, die sie für die Durchführung der Interpolation benötigt, und gibt sie in dieser Methode zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:describeData"><apiName>describeData</apiName><shortdesc>
      
      
      Wird durch das steuernde DataTransform aufgerufen, um eine Beschreibung der durch dieses IChartElement dargestellten Daten zu erhalten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein Array, das die die angezeigten Daten beschreibenden DataDescription-Instanzen enthält.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>Bestimmt die Achse, von der Datenbeschreibungen abgerufen werden sollen.
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>Ein Bitfeld, das anzeigt, welche Werte des DataDescription-Objekts von der spezifischen Achse berücksichtigt werden. Implementoren können optimiert werden, indem sie nur die erforderlichen Felder berechnen.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      Wird durch das steuernde DataTransform aufgerufen, um eine Beschreibung der durch dieses IChartElement dargestellten Daten zu erhalten. Implementoren füllen ein Array von mx.charts.chartClasses.DataDescription-Objekten aus und geben es zurück, um sicherzustellen, dass ihre Daten von Achsen, die Werte aus den angezeigten Daten (wie „minimum“, „maximum“, „interval“ und „unitSize“) automatisch generieren, korrekt abgerufen werden. Die meisten Elementtypen geben ein Array zurück, das nur eine DataDescription enthält. Kombinierte Elemente, wie BarSet und ColumnSet geben möglicherweise mehrere DataDescription-Instanzen zurück, die die von ihren Unterelementen angezeigten Daten beschreiben. Bei entsprechendem Aufruf beschreibt der Implementor die Daten entlang der durch das Argument <codeph>dimension</codeph> angegebenen Achse. Diese Funktion wird möglicherweise für jede von dem enthaltenden Diagramm unterstützte Achse aufgerufen.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:findDataPoints"><apiName>findDataPoints</apiName><shortdesc>
       
      Sucht den nächsten Datenpunkt, der von dem Element unter den angegebenen Koordinaten dargestellt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein Array von HitData.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Die x-Koordinate.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Die y-Koordinate.
     
      </apiDesc></apiParam><apiParam><apiItemName>sensitivity</apiItemName><apiType value="Number"/><apiDesc>Wie nahe der Mauszeiger den genauen Koordinaten sein muss, damit der Punkt als „unter“ dem Mauszeiger betrachtet wird. Diese Eigenschaft ist der Eigenschaft „mouseSensitivity“ des Diagrammsteuerelements ähnlich.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
       
      Sucht den nächsten Datenpunkt, der von dem Element unter den angegebenen Koordinaten dargestellt wird.
     
      <p>Diese Methode gibt ein Array von HitData-Strukturen zurück, die die Datenpunkte innerhalb des Bereichs beschreiben. Einzelne ChartElements geben möglicherweise nur einen einzigen dataPoint wieder, wenn sichergestellt ist, dass sich die dataPoints nicht überschneiden.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:getElementBounds"><apiName>getElementBounds</apiName><shortdesc>
      
      Füllt die Eigenschaften „elementBounds“, „bounds“ und „visibleBounds“ einer renderData-Struktur aus, die von dieser Serie generiert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderData</apiItemName><apiType value="Object"/><apiDesc>Die Struktur, die durch diese Serie generiert wird.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Füllt die Eigenschaften <codeph>elementBounds</codeph>, <codeph>bounds</codeph> und <codeph>visibleBounds</codeph> einer renderData-Struktur aus, die durch diese Serie generiert wird. Effektklassen rufen diese Methode auf, um diese Felder zur Verwendung bei der Implementierung verschiedener Effekttypen auszufüllen. Abgeleitete Klassen müssen diese Methode implementieren, um die Grenzen der Elemente in der Serie nur auf Anfrage zu generieren.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:getMissingInterpolationValues"><apiName>getMissingInterpolationValues</apiName><shortdesc>
      
      Füllt fehlende Werte in einer Interpolationsstruktur aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sourceProps</apiItemName><apiType value="Object"/><apiDesc>Ein Objekt, das die Quellwerte enthält, die für ein bestimmtes Element interpoliert werden. Ist diese Methode vorhanden, sollten alle Eigenschaften in diesem Objekt einen anderen Wert als <codeph>NaN</codeph> haben.
     
      </apiDesc></apiParam><apiParam><apiItemName>srcCache</apiItemName><apiType value="Array"/><apiDesc>Das Array von Quelldiagrammelementen, die interpoliert werden.
     
      </apiDesc></apiParam><apiParam><apiItemName>destProps</apiItemName><apiType value="Object"/><apiDesc>Ein Objekt, das die Zielwerte enthält, die für ein bestimmtes Element interpoliert werden. Ist diese Methode vorhanden, sollten alle Eigenschaften in diesem Objekt einen anderen Wert als <codeph>NaN</codeph> haben.
     
      </apiDesc></apiParam><apiParam><apiItemName>destCache</apiItemName><apiType value="Array"/><apiDesc>Das Array von Zieldiagrammelementen, die interpoliert werden.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Die Indexposition des Elements, das im Cache gefüllt wird.  
     
      </apiDesc></apiParam><apiParam><apiItemName>customData</apiItemName><apiType value="Object"/><apiDesc>Die Daten, die von der Serie an die <codeph>initializeInterpolationData()</codeph>-Methode übergeben wurden.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Füllt fehlende Werte in einer Interpolationsstruktur aus. Wenn eine Serie die <codeph>initializeInterpolationData()</codeph>-Methode aufruft, übergibt sie Arrays von Quell- und Zielwerten für die Interpolation. Ist einer der beiden Arrays unvollständig, muss die Serie „geeignete“ Platzhalterwerte für die Interpolation bereitstellen. Die Art und Weise, wie diese Platzhalterwerte bestimmt werden, hängt vom jeweiligen Serientyp ab. Serienerweiterungen müssen diese Methode zur Bereitstellung dieser Platzhalterwerte überschreiben.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:styleChanged"><apiName>styleChanged</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateData"><apiName>updateData</apiName><shortdesc>
      
      Wird aufgerufen, wenn die von der Serie dargestellten Daten geändert wurden und erneut aus dem Datenprovider geladen werden müssen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Wird aufgerufen, wenn die von der Serie dargestellten Daten geändert wurden und erneut aus dem Datenprovider geladen werden müssen. Wenn Sie die angepassten Serientypen implementieren, müssen Sie diese Methode überschreiben und alle zum Anzeigen der Serie erforderlichen Daten aus dem zugrunde liegenden Datenprovider laden. Sie müssen auch sicherstellen, dass die <codeph>super.updateData()</codeph>-Methode in Ihrer Unterklasse aufgerufen wird. Im Allgemeinen rufen Sie diese Methode nicht direkt auf. Um sicherzustellen, dass Ihre Daten an einem bestimmten Punkt aktualisiert wurden, rufen Sie stattdessen die <codeph>validateData()</codeph>-Methode der Series-Klasse auf.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateFilter"><apiName>updateFilter</apiName><shortdesc>
      
      Wird aufgerufen, wenn die von der Serie dargestellten Daten anhand der Bereiche gefiltert werden müssen, die auf den Achsen der zugehörigen Datentransformation dargestellt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Wird aufgerufen, wenn die von der Serie dargestellten Daten anhand der Bereiche gefiltert werden müssen, die auf den Achsen der zugehörigen Datentransformation dargestellt werden. Dazu kann es kommen, wenn die zugrunde liegenden Daten geändert wurden oder der Bereich der zugehörigen Achsen geändert wurde. Wenn Sie einen angepassten Serientyp implementieren, müssen Sie diese Methode überschreiben und alle außerhalb liegenden Daten filtern, indem Sie die <codeph>filterCache()</codeph>-Methode der Achsen verwenden, die von der verknüpften Datentransformation gesteuert werden. Die <codeph>filterCache()</codeph>-Methode wandelt alle Werte, die außerhalb des Bereichs liegen, in <codeph>NaN</codeph> um. Sie müssen sicherstellen, dass die <codeph>super.updateFilter()</codeph>-Methode in Ihrer Unterklasse aufgerufen wird. Im Allgemeinen rufen Sie diese Methode nicht direkt auf. Um sicherzustellen, dass Ihre Daten an einem bestimmten Punkt gefiltert wurden, rufen Sie stattdessen die <codeph>validateTransform()</codeph>-Methode der Series-Klasse auf. Sie können im Allgemeinen davon ausgehen, dass Ihre <codeph>updateData()</codeph>- und Ihre <codeph>updateMapping()</codeph>-Methode vor dieser Methode aufgerufen wurden, falls dies erforderlich war.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateMapping"><apiName>updateMapping</apiName><shortdesc>
      
      Wird aufgerufen, wenn die von der Serie dargestellten Daten numerischen Entsprechungen zugeordnet werden müssen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Wird aufgerufen, wenn die von der Serie dargestellten Daten numerischen Entsprechungen zugeordnet werden müssen. Dazu kann es kommen, wenn die zugrunde liegenden Daten oder die zur Darstellung der Serie verwendeten Achsen geändert wurden. Wenn Sie eine angepasste Serie implementieren, müssen Sie diese Methode überschreiben und alle dargestellten Daten in numerische Werte konvertieren, indem Sie die <codeph>mapCache()</codeph>-Methode der Achsen verwenden, die von der verknüpften Datentransformation verwaltet werden. Sie müssen außerdem sicherstellen, dass die <codeph>super.updateMapping()</codeph>-Methode in Ihrer Unterklasse aufgerufen wird. Im Allgemeinen rufen Sie diese Methode nicht direkt auf. Um sicherzustellen, dass Ihre Daten an einem bestimmten Punkt zugeordnet wurden, rufen Sie stattdessen die <codeph>validateData()</codeph>-Methode der Series-Klasse auf. Sie können im Allgemeinen davon ausgehen, dass Ihre <codeph>updateData()</codeph>-Methode vor dieser Methode aufgerufen wurde, falls dies erforderlich war.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateTransform"><apiName>updateTransform</apiName><shortdesc>
      
      Wird aufgerufen, wenn die von der zugrunde liegenden Serie dargestellten Daten von den Achsen der zugehörigen Datentransformation in Bildschirmwerte umgewandelt werden müssen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Wird aufgerufen, wenn die von der zugrunde liegenden Serie dargestellten Daten von den Achsen der zugehörigen Datentransformation in Bildschirmwerte umgewandelt werden müssen. Dazu kann es kommen, wenn die zugrunde liegenden Daten, der Bereich der zugehörigen Achsen oder die Größe des Bereichs auf dem Bildschirm geändert wurde. Wenn Sie einen angepassten Serientyp implementieren, müssen Sie diese Methode überschreiben und die Daten transformieren, indem Sie die <codeph>transformCache()</codeph>-Methode der verknüpften Datentransformation verwenden. Sie müssen sicherstellen, dass die <codeph>super.updateTransform()</codeph>-Methode in Ihrer Unterklasse aufgerufen wird. Im Allgemeinen rufen Sie diese Methode nicht direkt auf. Um sicherzustellen, dass Ihre Daten an einem bestimmten Punkt gefiltert wurden, rufen Sie stattdessen die <codeph>valiateTransform()</codeph>-Methode der Series-Klasse auf. Sie können im Allgemeinen davon ausgehen, dass Ihre <codeph>updateData()</codeph>-, <codeph>updateMapping()</codeph> und <codeph>updateFilter()</codeph>-Methoden vor dieser Methode aufgerufen wurden, falls dies erforderlich war.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:BubbleSeries:RADIUS_AXIS"><apiName>RADIUS_AXIS</apiName><shortdesc>
      Die Art der Radiusachse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bubbleRadius</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Die Art der Radiusachse.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:maxRadius"><apiName>maxRadius</apiName><shortdesc>
      Der Radius des größten gerenderten Elements in dieser Serie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>50</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Der Radius des größten gerenderten Elements in dieser Serie. Bei Verwendung eines BubbleSeries-Objekts in einem BubbleChart weist das Diagramm automatisch seinen <codeph>maxRadius</codeph>-Stilwert dieser Eigenschaft in allen Serien des Diagramms zu. Bei Verwendung eines BubbleSeries-Objekten in CartesianChart-Steuerelementen verwalten Sie diese Eigenschaft manuell.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:minRadius"><apiName>minRadius</apiName><shortdesc>
      Der Radius des kleinsten gerenderten Elements in dieser Serie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Der Radius des kleinsten gerenderten Elements in dieser Serie. Bei Verwendung eines BubbleSeries-Objekts in einem BubbleChart weist das Diagramm automatisch seinen <codeph>minRadius</codeph>-Stilwert dieser Eigenschaft in allen Serien des Diagramms zu. Bei Verwendung eines BubbleSeries-Objekten in CartesianChart-Steuerelementen verwalten Sie diese Eigenschaft manuell.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Gibt eine Methode an, die die Füllung für das aktuelle Diagrammelement in der Serie zurückgibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Gibt eine Methode an, die die Füllung für das aktuelle Diagrammelement in der Serie zurückgibt. Wenn diese Eigenschaft festgelegt ist, hat der Rückgabewert der angepassten Füllfunktion Vorrang vor den Stileigenschaften <codeph>fill</codeph> und <codeph>fills</codeph>. Wenn allerdings null zurückgegeben wird, werden <codeph>fills</codeph> und <codeph>fill</codeph> (in dieser Reihenfolge) bevorzugt.  
     
     <p>Die angepasste <codeph>fillFunction</codeph> hat die folgende Signatur:
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> ist ein Verweis auf das gerenderte Diagrammelement. <codeph>index</codeph> ist die Indexposition des Diagrammobjekts im renderData-Cache. Diese unterscheidet sich von der Indexposition des Datenproviders des Diagramms, da die Sortierung dort anhand der x-, y- und z-Werte erfolgt.
     </p>
      
     <p>Ein Beispiel für die Verwendung einer angepassten <codeph>fillFunction</codeph> ist die Rückgabe einer Füllung auf der Basis eines Schwellenwerts.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:BubbleSeriesItem = BubbleSeriesItem(item);
          if (curItem.zNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
          <p>
      Wenn Sie eine angepasste Füllfunktion für Ihre Diagrammserie angeben und über ein Legendensteuerelement verfügen möchten, müssen Sie das Legendensteuerelement manuell erstellen und LegendItems hinzufügen.
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der x-Achse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der x-Achse. Verwenden Sie die LinearAxis- oder CategoryAxis-Klasse, um die Eigenschaften der horizontalAxis als untergeordnetes Tag in MXML festzulegen, oder erstellen Sie ein LinearAxis- oder CategoryAxis-Objekt in ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      Der untergeordnete ChartItem-Typ, der von dieser Serie zur Darstellung einzelner Elemente verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Der untergeordnete ChartItem-Typ, der von dieser Serie zur Darstellung einzelner Elemente verwendet wird. Unterklassen können eine spezialisiertere Klasse überschreiben und zurückgeben, wenn zusätzliche Informationen in den Elementen gespeichert werden müssen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:items:get"><apiName>items</apiName><shortdesc>
      
      Ruft alle Elemente ab, die in der Serie nach dem Filtern vorhanden sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Ruft alle Elemente ab, die in der Serie nach dem Filtern vorhanden sind.
      <p>Einzelne Serien bestimmen die Liste der Elemente, die zurückgegeben werden sollen.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:legendData:get"><apiName>legendData</apiName><shortdesc>
      
      Ein Array von LegendData-Instanzen, die die Elemente beschreiben, die in einer Legende für diese Serie angezeigt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Ein Array von LegendData-Instanzen, die die Elemente beschreiben, die in einer Legende für diese Serie angezeigt werden. Abgeleitete Serienklassen überschreiben diese Abruffunktion und geben die Legendendaten zurück, die sich auf die Stile und die Datendarstellungsmethode beziehen. Die meisten Serientypen geben nur eine einzelne LegendData-Instanz zurück, einige (wie die PieSeries und StackedSeries) jedoch mehrere Instanzen, die einzelne Elemente im Array oder mehrere Möglichkeiten zum Rendern von Daten darstellen.   
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:radiusAxis:get"><apiName>radiusAxis</apiName><shortdesc>
      Die Achse, der der Blasenradius der zugeordnet ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Die Achse, der der Blasenradius der zugeordnet ist. In Blasendiagrammen wird die Größe der einzelnen Blasen als dritte Dimension verwendet, die ähnlich wie die x- und y-Positionen umgewandelt wird. Standardmäßig entspricht <codeph>radiusAxis</codeph> einer linearen Achse, wobei die Eigenschaft <codeph>autoAdjust</codeph> auf <codeph>false</codeph> gesetzt ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:radiusField:get"><apiName>radiusField</apiName><shortdesc>
      Das Feld des Datenproviders, das den Radius jedes Symbols relativ zu den anderen Datenpunkten im Diagramm bestimmt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Das Feld des Datenproviders, das den Radius jedes Symbols relativ zu den anderen Datenpunkten im Diagramm bestimmt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      Der untergeordnete ChartRenderData-Typ, der von dieser Serie zum Speichern der zum Rendern benötigten Daten verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Der untergeordnete ChartRenderData-Typ, der von dieser Serie zum Speichern der zum Rendern benötigten Daten verwendet wird. Unterklassen können eine spezialisiertere Klasse überschreiben und zurückgeben, wenn zusätzliche Informationen zum Rendern gespeichert werden müssen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:protected:renderData:get"><apiName>renderData</apiName><shortdesc>
      
      Speichert die Informationen, die zum Rendern dieser Serie erforderlich sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      Speichert die Informationen, die zum Rendern dieser Serie erforderlich sind.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der y-Achse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der y-Achse. Verwenden Sie die LinearAxis- oder CategoryAxis-Klasse, um die Eigenschaften der verticalAxis als untergeordnetes Tag in MXML festzulegen, oder erstellen Sie ein LinearAxis- oder CategoryAxis-Objekt in ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:xField:get"><apiName>xField</apiName><shortdesc>
      Gibt das Feld des Datenproviders an, das die x-Achsenposition jedes Datenpunkts bestimmt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt das Feld des Datenproviders an, das die x-Achsenposition jedes Datenpunkts bestimmt. Bei <codeph>null</codeph> rendert Flex die Datenpunkte in der Reihenfolge, in der sie im Datenprovider enthalten sind. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:yField:get"><apiName>yField</apiName><shortdesc>
      Gibt das Feld des Datenproviders an, das die y-Achsenposition jedes Datenpunkts bestimmt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt das Feld des Datenproviders an, das die y-Achsenposition jedes Datenpunkts bestimmt. Bei <codeph>null</codeph> geht die BubbleSeries davon aus, dass der Datenprovider ein Array von Zahlen ist und verwendet die Zahlen als Werte für die Datenpunkte. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:CandlestickSeries"><apiName>CandlestickSeries</apiName><shortdesc>
  Stellt Finanzdaten als Kerzenserie dar, die Höchst-, Tiefst-, Anfangs- und Schlusswerte einer Datenreihe anzeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="Array">
<description>
  Gibt ein Array von Fill-Objekten an, die die Füllung jedes Elements in der Serie definieren. Diese Einstellung hat Vorrang vor der <codeph>fill</codeph>-Stileigenschaft. Wenn eine angepasste Methode von der Eigenschaft <codeph>fillFunction</codeph> angegeben wird, hat diese Vorrang vor diesem Array. Wenn nicht genügend Arrayelemente für jedes Element vorhanden sind, wiederholt Flex die Füllung ab dem Beginn des Arrays.
  
  <p>Festlegen des Werts dieser Eigenschaft mit CSS
   <pre>
    CandlestickSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Festlegen des Werts dieser Eigenschaft mit MXML
   <pre>
    &lt;mx:CandlestickSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:CandlestickSeries>
   </pre>
  </p>
  
  <p>
  Wenn Sie die Eigenschaft <codeph>fills</codeph> angeben und über ein Legendensteuerelement verfügen möchten, müssen Sie das Legendensteuerelement manuell erstellen und LegendItems hinzufügen.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="declineFill" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Legt die abnehmende Füllung für diese Serie fest, die verwendet wird, wenn der Schlusswert eines Elements unter dem Anfangswert liegt. Sie können entweder ein Objekt angeben, das die IFill-Schnittstelle implementiert, oder eine Zahl, die einen Volltonfarbwert darstellt. Außerdem können Sie eine Volltonfüllung mit CSS angeben. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="boxStroke" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Legt den Strichstil des Felds fest, das den Anfangs- und Schlussbereich der Serie angibt.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Legt den Strichstil für diese Datenserie fest. Sie müssen ein Stroke-Objekt angeben, um den Strich zu definieren. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Legt die Füllung für diese Datenserie fest. Sie können entweder ein Objekt angeben, das die IFill-Schnittstelle implementiert, oder eine Zahl, die einen Volltonfarbwert darstellt. Außerdem können Sie eine Volltonfüllung mit CSS angeben. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ <p>
  The <code>&lt;mx:CandlestickSeries&gt;</code> tag inherits all the properties of its parent classes, and 
  the following properties:
  </p>
  <pre>
  &lt;mx:CandlestickSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
 
    <strong>Styles</strong>
    boxStroke="<i>IStroke; no default</i>"
    declineFill="<i>IFill; no default</i>"
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    stroke="<i>IStroke; no default</i>"  
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:HLOCSeriesBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Stellt Finanzdaten als Kerzenserie dar, die Höchst-, Tiefst-, Anfangs- und Schlusswerte einer Datenreihe anzeigt. Der oberste und unterste Punkt der vertikalen Linie jeder Kerze stellen den höchsten bzw. niedrigsten Wert für den Datenpunkt dar, während die Ober- und Unterseite des ausgefüllten Felds den Anfangs- bzw. Schlusswert darstellen. Jede Kerze wird anders ausgefüllt, abhängig davon, ob der Schlusswert für den Datenpunkt höher oder niedriger als der Anfangswert ist.
   </apiDesc><example conref="CandlestickChartExample.mxml"><swfblock conref="../examples/CandlestickChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#CandlestickChart"><linktext>mx.charts.CandlestickChart</linktext></link></related-links><apiConstructor id="mx.charts.series:CandlestickSeries:CandlestickSeries"><apiName>CandlestickSeries</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:CandlestickSeries:findDataPoints"><apiName>findDataPoints</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Array"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>sensitivity</apiItemName><apiType value="Number"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:CandlestickSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Gibt eine Methode an, die die Füllung für das aktuelle Diagrammelement in der Serie zurückgibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Gibt eine Methode an, die die Füllung für das aktuelle Diagrammelement in der Serie zurückgibt. Wenn diese Eigenschaft festgelegt ist, hat der Rückgabewert der angepassten Füllfunktion Vorrang vor den Stileigenschaften <codeph>fill</codeph> und <codeph>fills</codeph>. Wenn allerdings null zurückgegeben wird, werden <codeph>fills</codeph> und <codeph>fill</codeph> (in dieser Reihenfolge) bevorzugt.  
     
     <p>Die angepasste <codeph>fillFunction</codeph> hat die folgende Signatur:
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> ist ein Verweis auf das gerenderte Diagrammelement. <codeph>index</codeph> ist die Indexposition des Diagrammobjekts im renderData-Cache. Diese unterscheidet sich von der Indexposition des Datenproviders des Diagramms, da die Sortierung dort anhand der x-, y- und z-Werte erfolgt. Diese Funktion gibt ein Objekt zurück, dass die <codeph>IFill</codeph>-Schnittstelle implementiert.
     </p>
      
     <p>Ein Beispiel für die Verwendung einer angepassten <codeph>fillFunction</codeph> ist die Rückgabe einer Füllung auf der Basis eines Schwellenwerts.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:HLOCSeriesItem = HLOCSeriesItem(item);
          if (curItem.closeNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
       
     <p>
      Wenn Sie eine angepasste Füllfunktion für Ihre Diagrammserie angeben und über ein Legendensteuerelement verfügen möchten, müssen Sie das Legendensteuerelement manuell erstellen und LegendItems hinzufügen.
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:CandlestickSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:AreaSet"><apiName>AreaSet</apiName><shortdesc>
  Mit einem Gruppierungssatz können AreaSeries-Objekte in einem beliebigen Diagramm gestapelt oder gruppiert werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="series"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:StackedSeries</apiBaseClassifier></apiClassifierDef><apiDesc>
  Mit einem Gruppierungssatz können AreaSeries-Objekte in einem beliebigen Diagramm gestapelt oder gruppiert werden. Ein AreaSet weist das gleiche Gruppierungsverhalten wie ein AreaSet-Steuerelement auf, kann jedoch zum Zusammenstellen angepasster Diagramme verwendet werden, die auf der CartesianChart-Klasse basieren.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.series:AreaSet:AreaSet"><apiName>AreaSet</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Konstruktor.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.charts.series:PlotSeries"><apiName>PlotSeries</apiName><shortdesc>
  Definiert eine Datenserie für ein PlotChart-Steuerelement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="radius" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="Number">
<description> 
  Gibt den Radius des Diagrammelements an jedem Datenpunkt in Pixeln an. Standardmäßig zeichnet das PlotChart-Steuerelement einen Kreis an jedem Datenpunkt. Sie können diese Eigenschaft in MXML oder durch Stile festlegen. Der Standardwert ist <codeph>5</codeph> Pixel. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="Array">
<description>
  Gibt ein Array von Fill-Objekten an, die die Füllung jedes Elements in der Serie definieren. Diese Einstellung hat Vorrang vor der <codeph>fill</codeph>-Stileigenschaft. Wenn eine angepasste Methode von der Eigenschaft <codeph>fillFunction</codeph> angegeben wird, hat diese Vorrang vor diesem Array. Wenn nicht genügend Arrayelemente für jedes Element vorhanden sind, wiederholt Flex die Füllung ab dem Beginn des Arrays.
  
  <p>Festlegen des Werts dieser Eigenschaft mit CSS
   <pre>
    PlotSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Festlegen des Werts dieser Eigenschaft mit MXML
   <pre>
    &lt;mx:PlotSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:PlotSeries>
   </pre>
  </p>
  
  <p>
  Wenn Sie die Eigenschaft <codeph>fills</codeph> angeben und über ein Legendensteuerelement verfügen möchten, müssen Sie das Legendensteuerelement manuell erstellen und LegendItems hinzufügen.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="adjustedRadius" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="Number">
<description>
  Gibt die Anzahl der Pixel an, um die der Radius des Diagrammobjekts erhöht wird, wenn es hervorgehoben oder ausgewählt wird.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Die Klasse, die von der Serie verwendet wird, um die Markierung der Serie in verknüpften Legenden zu rendern. Hat dieser Stil den Wert <codeph>null</codeph>, verwenden die meisten Serien stattdessen standardmäßig ihren itemRenderer als Legendenmarkierungs-Skin. Als Legendenmarkierungen verwendete Klassen müssen die Schnittstelle IFlexDisplayObject implementieren. Optional können Sie die ISimpleStyleClient- und IDataRenderer-Schnittstellen implementieren. Wenn die als Legendenmarkierung verwendete Klasse die IDataRenderer-Schnittstelle implementiert, wird die Dateneigenschaft einer LegendData-Instanz zugewiesen.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Eine Factory, die die Klasse darstellt, die von der Serie zur Darstellung der einzelnen Elemente in einem Diagramm verwendet wird. Diese Klasse wird für jedes Element im Diagramm einmal instanziiert. Als itemRenderer verwendete Klassen müssen die IFlexDisplayObject-, ISimpleStyleClient- und IDataRenderer-Schnittstellen implementieren. Der Eigenschaft <codeph>data</codeph> wird das von der Skininstanz gerenderte ChartItem zugewiesen.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Legt den Strichstil für diese Datenserie fest. Sie müssen ein Stroke-Objekt angeben, um den Strich zu definieren. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Legt die Füllung für diese Datenserie fest. Sie können entweder ein Objekt angeben, das die IFill-Schnittstelle implementiert, oder eine Zahl, die einen Volltonfarbwert darstellt. Außerdem können Sie eine Volltonfüllung mit CSS angeben. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;mx:PlotSeries&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:</p>
  
  <pre>
  &lt;mx:PlotSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    verticalAxis="<i>No default</i>"
    xField="null"
    yField="null"
 
    <strong>Styles</strong>
    adjustedRadius="2"
    fill="0xFFFFFF"
    fills="<i>IFill; no default</i>"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    radius="5"
    stroke="<i>IStroke; no default</i>" 
  /&gt;
  </pre>
  </p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  Definiert eine Datenserie für ein PlotChart-Steuerelement. Der Standard-Elementrenderer für ein PlotChart-Steuerelement ist die DiamondItemRenderer-Klasse. Optional können Sie einen Elementrenderer für die Datenserie definieren. Der Elementrenderer muss die IDataRenderer-Schnittstelle implementieren. 
   </apiDesc><example conref="PlotChartExample.mxml"><swfblock conref="../examples/PlotChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#PlotChart"><linktext>mx.charts.PlotChart</linktext></link><link href="mx.charts.renderers.xml#DiamondItemRenderer"><linktext>mx.charts.renderers.DiamondItemRenderer</linktext></link></related-links><apiConstructor id="mx.charts.series:PlotSeries:PlotSeries"><apiName>PlotSeries</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:PlotSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      Passt die Elementrenderer-Instanzen an, die zur Darstellung des Diagramms verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Die neue Elementrenderer-Instanz.
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>InstanceCache zur Verwaltung der Elementrenderer-Instanzen.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Passt die Elementrenderer-Instanzen an, die zur Darstellung des Diagramms verwendet werden. Diese Methode wird automatisch aufgerufen, wenn ein neuer Elementrenderer benötigt wird, während das Diagramm gerendert wird. Sie können diese Methode überschreiben, um bei Bedarf Ihre eigene Anpassung hinzuzufügen.
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PlotSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:PlotSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Gibt eine Methode an, die die Füllung für das aktuelle Diagrammelement in der Serie zurückgibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Gibt eine Methode an, die die Füllung für das aktuelle Diagrammelement in der Serie zurückgibt. Wenn diese Eigenschaft festgelegt ist, hat der Rückgabewert der angepassten Füllfunktion Vorrang vor den Stileigenschaften <codeph>fill</codeph> und <codeph>fills</codeph>. Wenn allerdings null zurückgegeben wird, werden <codeph>fills</codeph> und <codeph>fill</codeph> (in dieser Reihenfolge) bevorzugt.  
     
     <p>Die angepasste <codeph>fillFunction</codeph> hat die folgende Signatur:
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> ist ein Verweis auf das gerenderte Diagrammelement. <codeph>index</codeph> ist die Indexposition des Diagrammobjekts im renderData-Cache. Diese unterscheidet sich von der Indexposition des Datenproviders des Diagramms, da die Sortierung dort anhand der x-, y- und z-Werte erfolgt. Diese Funktion gibt ein Objekt zurück, dass die <codeph>IFill</codeph>-Schnittstelle implementiert.
     </p>
      
     <p>Ein Beispiel für die Verwendung einer angepassten <codeph>fillFunction</codeph> ist die Rückgabe einer Füllung auf der Basis eines Schwellenwerts.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:PlotSeriesItem = PlotSeriesItem(item);
          if (curItem.yNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
       
     <p>
      Wenn Sie eine angepasste Füllfunktion für Ihre Diagrammserie angeben und über ein Legendensteuerelement verfügen möchten, müssen Sie das Legendensteuerelement manuell erstellen und LegendItems hinzufügen.
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der x-Achse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der x-Achse. Verwenden Sie die LinearAxis- oder CategoryAxis-Klasse, um die Eigenschaften der horizontalAxis als untergeordnetes Tag in MXML festzulegen, oder erstellen Sie ein LinearAxis- oder CategoryAxis-Objekt in ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      Der untergeordnete ChartItem-Typ, der von dieser Serie zur Darstellung einzelner Elemente verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Der untergeordnete ChartItem-Typ, der von dieser Serie zur Darstellung einzelner Elemente verwendet wird. Unterklassen können eine spezialisiertere Klasse überschreiben und zurückgeben, wenn zusätzliche Informationen in den Elementen gespeichert werden müssen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:items:get"><apiName>items</apiName><shortdesc>
      
      Ruft alle Elemente ab, die in der Serie nach dem Filtern vorhanden sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Ruft alle Elemente ab, die in der Serie nach dem Filtern vorhanden sind.
      <p>Einzelne Serien bestimmen die Liste der Elemente, die zurückgegeben werden sollen.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      Der untergeordnete ChartRenderData-Typ, der von dieser Serie zum Speichern der zum Rendern benötigten Daten verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Der untergeordnete ChartRenderData-Typ, der von dieser Serie zum Speichern der zum Rendern benötigten Daten verwendet wird. Unterklassen können eine spezialisiertere Klasse überschreiben und zurückgeben, wenn zusätzliche Informationen zum Rendern gespeichert werden müssen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:protected:renderData:get"><apiName>renderData</apiName><shortdesc>
      Der untergeordnete ChartRenderData-Typ, der von dieser Serie zum Speichern der zum Rendern benötigten Daten verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Der untergeordnete ChartRenderData-Typ, der von dieser Serie zum Speichern der zum Rendern benötigten Daten verwendet wird. Unterklassen können eine spezialisiertere Klasse überschreiben und zurückgeben, wenn zusätzliche Informationen zum Rendern gespeichert werden müssen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der y-Achse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der y-Achse. Verwenden Sie die LinearAxis- oder CategoryAxis-Klasse, um die Eigenschaften der verticalAxis als untergeordnetes Tag in MXML festzulegen, oder erstellen Sie ein LinearAxis- oder CategoryAxis-Objekt in ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:xField:get"><apiName>xField</apiName><shortdesc>
      Gibt das Feld des Datenproviders an, das die x-Achsenposition jedes Datenpunkts bestimmt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt das Feld des Datenproviders an, das die x-Achsenposition jedes Datenpunkts bestimmt. Bei <codeph>null</codeph> rendert Flex die Datenpunkte in der Reihenfolge, in der sie im Datenprovider enthalten sind. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:yField:get"><apiName>yField</apiName><shortdesc>
      Gibt das Feld des Datenproviders an, das die y-Achsenposition jedes Datenpunkts bestimmt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt das Feld des Datenproviders an, das die y-Achsenposition jedes Datenpunkts bestimmt. Bei <codeph>null</codeph> geht die PlotSeries davon aus, dass der Datenprovider ein Array von Zahlen ist und verwendet die Zahlen als Werte. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:ColumnSeries"><apiName>ColumnSeries</apiName><shortdesc>
  Definiert eine Datenserie für ein ColumnChart-Steuerelement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="labelSizeLimit" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  Gibt den Schwellenwert für die Schriftart in Punkten an, ab dem Beschriftungen als unleserlich betrachtet werden. Unter diesem Schwellenwert schneidet Flex die Beschriftung ab.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,outside,inside" inherit="no" name="labelPosition" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
 Bestimmt die Position von Beschriftungen. Mögliche Werte sind <codeph>none</codeph>, <codeph>outside</codeph> und <codeph>inside</codeph>.
 
 </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="labelClass" owner="mx.charts.series:ColumnSeries" playerVersion="Flash10.2" type="Class">
<description>
  Die Klasse, die von dieser Komponente für die Darstellung von Beschriftungen verwendet wird.
   <p>Es kann entweder die mx.controls.Label-Klasse oder die spark.components.Label-Klasse festgelegt werden.</p>
   </description>
<default>spark.components.Label
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,center,bottom" inherit="no" name="labelAlign" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
 Bestimmt die Ausrichtung der Beschriftung. Wird nur bei labelPosition <codeph>inside</codeph> berücksichtigt, wenn die Beschriftung vertikal dargestellt wird. Mögliche Werte sind <codeph>center</codeph>, <codeph>top</codeph> und <codeph>bottom</codeph>.
 
 </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Array">
<description>
  Gibt ein Array von Fill-Objekten an, die die Füllung jedes Elements in der Serie definieren. Diese Einstellung hat Vorrang vor der <codeph>fill</codeph>-Stileigenschaft. Wenn eine angepasste Methode von der Eigenschaft <codeph>fillFunction</codeph> angegeben wird, hat diese Vorrang vor diesem Array. Wenn nicht genügend Arrayelemente für jedes Element vorhanden sind, wiederholt Flex die Füllung ab dem Beginn des Arrays.
  
  <p>Festlegen des Werts dieser Eigenschaft mit CSS
   <pre>
    ColumnSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Festlegen des Werts dieser Eigenschaft mit MXML
   <pre>
    &lt;mx:ColumnSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:ColumnSeries>
   </pre>
  </p>
  
  <p>
  Wenn Sie die Eigenschaft <codeph>fills</codeph> angeben und über ein Legendensteuerelement verfügen möchten, müssen Sie das Legendensteuerelement manuell erstellen und LegendItems hinzufügen.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  Offset der ersten Textzeile von der linken Seite des Containers in Pixeln.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird. Mögliche Werte sind <codeph>"none"</codeph> und <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  Ausrichtung von Text in einem Container. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"right"</codeph> oder <codeph>"center"</codeph>.
 
  <p>Der Standardwert für die meisten Steuerelemente lautet <codeph>left</codeph>. Für die Button-, LinkButton- und AccordionHeader-Komponenten lautet der Standardwert <codeph>"center"</codeph>. Für diese Komponenten wird diese Eigenschaft nur erkannt, wenn die Eigenschaft <codeph>labelPlacement</codeph> auf <codeph>"left"</codeph> oder <codeph>"right"</codeph> gesetzt wurde. Wenn <codeph>labelPlacement</codeph> auf <codeph>"top"</codeph> oder <codeph>"bottom"</codeph> gesetzt wird, werden der Text und eventuell vorhandene Symbole zentriert.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  Die Anzahl der zusätzlichen Pixel, die zwischen den Zeichen angezeigt werden. Durch einen positiven Wert wird der Zeichenabstand über den normalen Abstand hinaus vergrößert und durch einen negativen Wert verkleinert.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Boolean">
<description>
  Ein boolescher Wert, der angibt, ob Kerning aktiviert (<codeph>true</codeph>) oder deaktiviert (<codeph>false</codeph>) ist. Der Begriff „Kerning“ bezeichnet die Anpassung des Zwischenraums zwischen bestimmten Zeichenpaaren zur Verbesserung der Lesbarkeit. Diese Funktion sollte nur verwendet werden, wenn sie unbedingt erforderlich ist, beispielsweise bei Überschriften in großen Schriftarten. Kerning wird nur für eingebettete FlashType-Schriftarten unterstützt. Bestimmte Schriftarten wie Verdana und Schriftarten mit fester Breite wie Courier New unterstützen Kerning nicht.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird. Gültige Werte sind <codeph>"normal"</codeph> und <codeph>"bold"</codeph>. Für LegendItem lautet der Standardwert <codeph>"bold"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  Legt die Eigenschaft <codeph>thickness</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelemente darstellen. Diese Eigenschaft gibt die Stärke der Glyphenkanten an. Mögliche Werte sind Zahlen von -200 bis 200. 
  
  <p>Diese Eigenschaft wird nur angewendet, wenn Sie eine eingebettete FlashType-Schriftart verwenden und die Eigenschaft <codeph>fontAntiAliasType</codeph> auf <codeph>"advanced"</codeph> gesetzt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird. Gültige Werte sind <codeph>"normal"</codeph> und <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  Die Höhe des Texts in Pixeln. Der Standardwert ist 10 für alle Steuerelemente mit Ausnahme des ColorPicker-Steuerelements. Für das ColorPicker-Steuerelement lautet der Standardwert 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  Legt die Eigenschaft <codeph>sharpness</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelementen darstellen. Diese Eigenschaft gibt die Schärfe der Glyphenkanten an. Mögliche Werte sind Zahlen von -400 bis 400. 
  
  <p>Diese Eigenschaft wird nur angewendet, wenn Sie eine eingebettete FlashType-Schriftart verwenden und die Eigenschaft <codeph>fontAntiAliasType</codeph> auf <codeph>"advanced"</codeph> gesetzt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  Legt die Eigenschaft <codeph>gridFitType</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelementen darstellen. Mögliche Werte sind <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) und <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Diese Eigenschaft wird nur angewendet, wenn Sie eine eingebettete FlashType-Schriftart verwenden und die Eigenschaft <codeph>fontAntiAliasType</codeph> auf <codeph>"advanced"</codeph> gesetzt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  Der Name der zu verwendenden Schriftart. Anders als in einer vollständigen CSS-Implementierung werden durch Kommas getrennte Listen nicht unterstützt. Sie können den Namen einer beliebigen Schriftartfamilie verwenden. Wenn Sie eine generische Schriftartbezeichnung wählen, wird diese in die entsprechende Geräteschriftart konvertiert.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  Legt die Eigenschaft <codeph>antiAliasType</codeph> von internen Textfeldern fest. Mögliche Werte sind <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) und <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>Der Standardwert lautet <codeph>"advanced"</codeph>, wodurch der FlashType-Renderer aktiviert wird, wenn Sie eine eingebettete FlashType-Schriftart verwenden. Wählen Sie <codeph>"normal"</codeph>, um den FlashType-Renderer zu deaktivieren.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
  
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="uint">
<description>
  Farbe des Texts in der Komponente, wenn deaktiviert.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="uint">
<description>
  Farbe des Texts in der Komponente einschließlich der Komponentenbeschriftung.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Die Klasse, die von der Serie verwendet wird, um die Markierung der Serie in verknüpften Legenden zu rendern. Hat dieser Stil den Wert <codeph>null</codeph>, verwenden die meisten Serien stattdessen standardmäßig ihren itemRenderer als Legendenmarkierungs-Skin. Als Legendenmarkierungen verwendete Klassen müssen die Schnittstelle IFlexDisplayObject implementieren. Optional können Sie die ISimpleStyleClient- und IDataRenderer-Schnittstellen implementieren. Wenn die als Legendenmarkierung verwendete Klasse die IDataRenderer-Schnittstelle implementiert, wird die Dateneigenschaft einer LegendData-Instanz zugewiesen.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Eine Factory, die die Klasse darstellt, die von der Serie zur Darstellung der einzelnen Elemente in einem Diagramm verwendet wird. Diese Klasse wird für jedes Element im Diagramm einmal instanziiert. Als itemRenderer verwendete Klassen müssen die IFlexDisplayObject-, ISimpleStyleClient- und IDataRenderer-Schnittstellen implementieren. Der Eigenschaft <codeph>data</codeph> wird das von der Skininstanz gerenderte ChartItem zugewiesen.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Legt den Strichstil für diese Datenserie fest. Sie müssen ein Stroke-Objekt angeben, um den Strich zu definieren. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Legt die Füllung für diese Datenserie fest. Sie können entweder ein Objekt angeben, das die IFill-Schnittstelle implementiert, oder eine Zahl, die einen Volltonfarbwert darstellt. Außerdem können Sie eine Volltonfüllung mit CSS angeben. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ <p>
  The <code>&lt;mx:ColumnSeries&gt;</code> tag inherits all the properties of its parent classes, and 
  the following properties:
  </p>
  <pre>
  &lt;mx:ColumnSeries
    <strong>Properties</strong>
    columnWidthRatio=".65"
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    labelField="<i>No default</i>"
    labelFunction="<i>No default</i>"
    legendData="<i>No default</i>"
    maxColumnWidth="<i>No default</i>"
    minField="null"
    offset="<i>No default</i>"
    sortOnXField="false|true"
    stacker="<i>No default</i>"
    stackTotals="<i>No default</i>"
    verticalAxis="<i>No default</i>"
    xField="null"
    yField="null"
 
    
    <strong>Styles</strong>
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    fontFamily="Verdana"
    fontSize="10"
    fontStyle="italic|normal"
    fontWeight="bold|normal"
    labelAlign="center|left|right"
    labelPosition="none|inside|outside"
    labelSizeLimit="9"
    itemRenderer="<i>BoxItemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    stroke="<i>Stroke; no default</i>"
    textDecoration="underline|none"
  /&gt;
  </pre>
  </p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IColumn</apiBaseInterface><apiBaseInterface>mx.charts.chartClasses:IStackable2</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  Definiert eine Datenserie für ein ColumnChart-Steuerelement. Standardmäßig verwendet diese Klasse die BoxItemRenderer-Klasse. Optional können Sie einen angepassten itemRenderer für die Serie definieren. Der angepasste itemRenderer muss die IDataRenderer-Schnittstelle implementieren. 
   </apiDesc><example conref="Column_BarChartExample.mxml"><swfblock conref="../examples/Column_BarChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#ColumnChart"><linktext>mx.charts.ColumnChart</linktext></link></related-links><apiConstructor id="mx.charts.series:ColumnSeries:ColumnSeries"><apiName>ColumnSeries</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:ColumnSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      Passt die Elementrenderer-Instanzen an, die zur Darstellung des Diagramms verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Die neue Elementrenderer-Instanz.
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>InstanceCache zur Verwaltung der Elementrenderer-Instanzen.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Passt die Elementrenderer-Instanzen an, die zur Darstellung des Diagramms verwendet werden. Diese Methode wird automatisch aufgerufen, wenn ein neuer Elementrenderer benötigt wird, während das Diagramm gerendert wird. Sie können diese Methode überschreiben, um bei Bedarf Ihre eigene Anpassung hinzuzufügen.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      
      Informiert die Serie, dass die zugrunde liegenden Daten im Datenprovider geändert wurden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Bei <codeph>true</codeph> löst diese Methode Aufrufe der Aktualisierungsmethoden aus.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Informiert die Serie, dass die zugrunde liegenden Daten im Datenprovider geändert wurden. Diese Funktion ruft die <codeph>updateData()</codeph>-, <codeph>updateMapping()</codeph>-, <codeph>updateFilter()</codeph>- und <codeph>updateTransform()</codeph>-Methode beim nächsten Aufruf der <codeph>commitProperties()</codeph>-Methode auf. Wenn Datenelementen im Diagramm Dateneffekte zugewiesen sind, werden sie durch diese Methode angezeigt oder ausgeblendet.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:protected:invalidateMapping"><apiName>invalidateMapping</apiName><shortdesc>
      
      Informiert die Serie, dass sich die Zuordnung von Daten zu numerischen Werten geändert hat und neu berechnet werden muss.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Bei <codeph>true</codeph> löst diese Methode Aufrufe der Aktualisierungsmethoden aus.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Informiert die Serie, dass sich die Zuordnung von Daten zu numerischen Werten geändert hat und neu berechnet werden muss. Diese Funktion ruft die <codeph>updateMapping()</codeph>-, <codeph>updateFilter()</codeph>- und <codeph>updateTransform()</codeph>-Methode beim nächsten Aufruf der <codeph>commitProperties()</codeph>-Methode auf. Wenn Datenelementen im Diagramm Dateneffekte zugewiesen sind, werden sie durch diese Methode angezeigt oder ausgeblendet.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:stackAll"><apiName>stackAll</apiName><shortdesc>
      
  Stapelt die Serie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein Objekt, das die Höchst- und Mindestwerte in der neu gestapelten Serie darstellt.	 
  
  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>stackedPosXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Enthält die Basiswerte, auf denen gestapelt wird. Die Schlüssel im Wörterbuch sind die x-Werte und die Werte entsprechen positiven x-Werten.
 
  </apiDesc></apiParam><apiParam><apiItemName>stackedNegXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Enthält die Basiswerte, auf denen gestapelt wird. Die Schlüssel im Wörterbuch sind die x-Werte und die Werte entsprechen den negativen y-Werten.
  
  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable2</apiOperationClassifier><apiDesc>Das vorherige Element im Stapel. Wenn das Element beispielsweise den gleichen Typ aufweist, können Sie mit dieser Eigenschaft Arbeit beim Rendern sparen.
  
  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
  Stapelt die Serie. Normalerweise implementiert eine Serie die <codeph>updateData()</codeph>-Methode, um die Daten aus dem Datenprovider zu laden. Eine Stapelserie führt jedoch spezielle Vorgänge durch, da ihre Werte nicht unbedingt im Datenprovider gespeichert sind. Ihre Werte entsprechen den im Datenprovider gespeicherten Werten, zu denen die Werte addiert werden, die von dem darunter befindlichen Stapelobjekt geladen wurden.
  <p>Eine angepasste Stapelserie muss die <codeph>stack()</codeph>-Methode implementieren, indem sie die Daten aus dem Datenprovider lädt und zu den Basisdaten im Wörterbuch addiert, um die tatsächlich gerenderten Werte abzurufen und die Werte im Wörterbuch durch die neuen, addierten Werte zu ersetzen.</p>
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:stack"><apiName>stack</apiName><shortdesc>
     
	  Stapelt die Serie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Höchstwert in der neu gestapelten Serie.	 
	  
	  </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>stackedXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Enthält die Basiswerte, auf denen gestapelt wird. Die Schlüssel im Wörterbuch sind die y-Werte und die Werte entsprechen den x-Werten.
	  
	  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable</apiOperationClassifier><apiDesc>Das vorherige Element im Stapel. Wenn das Element beispielsweise den gleichen Typ aufweist, können Sie mit dieser Eigenschaft Arbeit beim Rendern sparen.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
     
	  Stapelt die Serie. Normalerweise implementiert eine Serie die <codeph>updateData()</codeph>-Methode, um die Daten aus dem Datenprovider zu laden. Eine Stapelserie führt jedoch spezielle Vorgänge durch, da ihre Werte nicht unbedingt im Datenprovider gespeichert sind. Ihre Werte entsprechen den im Datenprovider gespeicherten Werten, zu denen die Werte addiert werden, die von dem darunter befindlichen Stapelobjekt geladen wurden.
	  <p>Eine angepasste Stapelserie muss die <codeph>stack()</codeph>-Methode implementieren, indem sie die Daten aus dem Datenprovider lädt und zu den Basisdaten im Wörterbuch addiert, um die tatsächlich gerenderten Werte abzurufen und die Werte im Wörterbuch durch die neuen, addierten Werte zu ersetzen.</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:ColumnSeries:columnWidthRatio:get"><apiName>columnWidthRatio</apiName><shortdesc>
      Gibt die Breite der Spalten im Verhältnis zur Kategoriebreite an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.65
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt die Breite der Spalten im Verhältnis zur Kategoriebreite an. Beim Wert 1 wird der gesamte Raum verwendet, beim Wert 0,6 dagegen 60 % des verfügbaren Raums der Säule. Normalerweise legen Sie diese Eigenschaft nicht direkt fest. Als eigentliche Säulenbreite wird entweder die Eigenschaft <codeph>columnWidthRatio</codeph> oder die Eigenschaft <codeph>maxColumnWidth</codeph> verwendet, abhängig davon, welcher Wert kleiner ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Gibt eine Methode an, die die Füllung für das aktuelle Diagrammelement in der Serie zurückgibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Gibt eine Methode an, die die Füllung für das aktuelle Diagrammelement in der Serie zurückgibt. Wenn diese Eigenschaft festgelegt ist, hat der Rückgabewert der angepassten Füllfunktion Vorrang vor den Stileigenschaften <codeph>fill</codeph> und <codeph>fills</codeph>. Wenn allerdings null zurückgegeben wird, werden <codeph>fills</codeph> und <codeph>fill</codeph> (in dieser Reihenfolge) bevorzugt.  
     
     <p>Die angepasste <codeph>fillFunction</codeph> hat die folgende Signatur:
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> ist ein Verweis auf das gerenderte Diagrammelement. <codeph>index</codeph> ist die Indexposition des Diagrammobjekts im renderData-Cache. Diese unterscheidet sich von der Indexposition des Datenproviders des Diagramms, da die Sortierung dort anhand der x-, y- und z-Werte erfolgt. Diese Funktion gibt ein Objekt zurück, dass die <codeph>IFill</codeph>-Schnittstelle implementiert.
     </p>
      
     <p>Ein Beispiel für die Verwendung einer angepassten <codeph>fillFunction</codeph> ist die Rückgabe einer Füllung auf der Basis eines Schwellenwerts.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:ColumnSeriesItem = ColumnSeriesItem(item);
          if (curItem.yNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
          <p>
      Wenn Sie eine angepasste Füllfunktion für Ihre Diagrammserie angeben und über ein Legendensteuerelement verfügen möchten, müssen Sie das Legendensteuerelement manuell erstellen und LegendItems hinzufügen.
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der x-Achse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der x-Achse. Verwenden Sie die LinearAxis- oder CategoryAxis-Klasse, um die Eigenschaften der horizontalAxis als untergeordnetes Tag in MXML festzulegen, oder erstellen Sie ein LinearAxis- oder CategoryAxis-Objekt in ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      Der untergeordnete ChartItem-Typ, der von dieser Serie zur Darstellung einzelner Elemente verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Der untergeordnete ChartItem-Typ, der von dieser Serie zur Darstellung einzelner Elemente verwendet wird. Unterklassen können eine spezialisiertere Klasse überschreiben und zurückgeben, wenn zusätzliche Informationen in den Elementen gespeichert werden müssen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:items:get"><apiName>items</apiName><shortdesc>
      
      Ruft alle Elemente ab, die in der Serie nach dem Filtern vorhanden sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Ruft alle Elemente ab, die in der Serie nach dem Filtern vorhanden sind.
      <p>Einzelne Serien bestimmen die Liste der Elemente, die zurückgegeben werden sollen.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:labelField:get"><apiName>labelField</apiName><shortdesc>
     Name eines Felds im Datenprovider, dessen Wert als Beschriftung angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
     Name eines Felds im Datenprovider, dessen Wert als Beschriftung angezeigt wird. Diese Eigenschaft wird ignoriert, wenn die Eigenschaft <codeph>labelFunction</codeph> angegeben ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Gibt eine Rückruffunktion zum Rendern jeder Beschriftung der Serie an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Gibt eine Rückruffunktion zum Rendern jeder Beschriftung der Serie an. Eine labelFunction muss folgende Signatur aufweisen:
          <pre>
     function <i>function_name</i>(<i>element</i>:ChartItem, <i>series</i>:Series):String { ... }
     </pre>
     
     <codeph><i>element</i></codeph> entspricht dem gerenderten Diagrammelement. <codeph><i>series</i></codeph> entspricht der Serie, zu der das Diagrammelement gehört. Der zurückgegebene String stellt die Beschriftung des aktuellen Elements dar.
          <p>Beispiel für die Verwendung einer angepassten labelFunction:</p>
     <pre>
     private function myLabelFunction(element:ChartItem, series:Series):String {
          var item:ColumnSeriesItem = ColumnSeriesItem(element);
          var ser:ColumnSeries = ColumnSeries(series);
          return(item.item.Country + ":" +"" + ser.yField.toString() +":"+ item.yNumber);
     }
     </pre>
           
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:maxColumnWidth:get"><apiName>maxColumnWidth</apiName><shortdesc>
      Gibt die Breite der Säulen in Pixeln an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Gibt die Breite der Säulen in Pixeln an. Als eigentliche Säulenbreite wird entweder dieser Stil oder die Eigenschaft <codeph>columnWidthRatio</codeph> verwendet, abhängig davon, welcher Wert kleiner ist. Bei gruppierten Säulen wird dieser Raum anteilsmäßig zwischen den Säulen in jeder Gruppe aufgeteilt. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:minField:get"><apiName>minField</apiName><shortdesc>
      Gibt das Feld des Datenproviders an, das die y-Achsenposition der Säulenunterseite bestimmt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Gibt das Feld des Datenproviders an, das die y-Achsenposition der Säulenunterseite bestimmt. Bei <codeph>null</codeph> basieren die Säulen auf dem Mindestwert des Bereichs (oder auf dem Höchstwert, wenn der Feldwert negativ ist). Der Standardwert lautet <codeph>null</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:offset:get"><apiName>offset</apiName><shortdesc>
      Gibt an, wie weit die Mitte der Säulen von der Mitte des verfügbaren Raums im Bezug zur Kategoriebreite entfernt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Gibt an, wie weit die Mitte der Säulen von der Mitte des verfügbaren Raums im Bezug zur Kategoriebreite entfernt ist. Mit der Standardeinstellung 0 werden die Säulen im Raum zentriert. Mit der Einstellung -50 wird die Säule am Anfang des verfügbaren Raums zentriert. Normalerweise legen Sie diese Eigenschaft nicht direkt fest. Das ColumnChart-Steuerelement verwaltet diesen Wert mithilfe der Eigenschaft <codeph>columnWidthRatio</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      Der untergeordnete ChartRenderData-Typ, der von dieser Serie zum Speichern der zum Rendern benötigten Daten verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Der untergeordnete ChartRenderData-Typ, der von dieser Serie zum Speichern der zum Rendern benötigten Daten verwendet wird. Unterklassen können eine spezialisiertere Klasse überschreiben und zurückgeben, wenn zusätzliche Informationen zum Rendern gespeichert werden müssen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:sortOnXField:get"><apiName>sortOnXField</apiName><shortdesc> 
      Fordert an, dass die Säulen vor dem Rendern von rechts nach links sortiert werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Fordert an, dass die Säulen vor dem Rendern von rechts nach links sortiert werden. Standardmäßig rendert die ColumnSeries Säulen in der Reihenfolge, in der sie im Datenprovider enthalten sind. 
      
      <p>Wenn Sie die Eigenschaft <codeph>xField</codeph> verwenden, um die Position der einzelnen Säulen zu bestimmen, können die Säulen in einer anderen Reihenfolge auf dem Bildschirm angezeigt werden. Säulen können in einer beliebigen Reihenfolge gerendert werden. Einige angepasste Säulen setzen jedoch möglicherweise eine Sortierung von links nach rechts voraus.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:stacker:get"><apiName>stacker</apiName><shortdesc>
      Die StackedSeries, die mit dieser BarSeries verknüpft ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:StackedSeries</apiValueClassifier></apiValueDef><apiDesc>
      Die StackedSeries, die mit dieser BarSeries verknüpft ist. Der Stacker verwaltet das Stapelverhalten der Serie.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der y-Achse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der y-Achse. Verwenden Sie die LinearAxis- oder CategoryAxis-Klasse, um die Eigenschaften der verticalAxis als untergeordnetes Tag in MXML festzulegen, oder erstellen Sie ein LinearAxis- oder CategoryAxis-Objekt in ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:xField:get"><apiName>xField</apiName><shortdesc>
      Gibt das Feld des Datenproviders an, das die x-Achsenposition der Säule bestimmt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Gibt das Feld des Datenproviders an, das die x-Achsenposition der Säule bestimmt. Bei <codeph>null</codeph> rendert Flex die Säulen in der Reihenfolge, in der sie im Datenprovider enthalten sind. Der Standardwert lautet <codeph>null</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:yField:get"><apiName>yField</apiName><shortdesc>
      Gibt das Feld des Datenproviders an, das die y-Achsenposition der Oberseite einer Säule bestimmt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Gibt das Feld des Datenproviders an, das die y-Achsenposition der Oberseite einer Säule bestimmt. Bei <codeph>null</codeph> geht die ColumnSeries davon aus, dass der Datenprovider ein Array von Zahlen ist und verwendet die Zahlen als Werte. Der Standardwert lautet <codeph>null</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.charts.series:ColumnSeries:stackTotals:set"><apiName>stackTotals</apiName><shortdesc>
      Die Gesamtsummen des Stapels für die Serie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      Die Gesamtsummen des Stapels für die Serie.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.series:ColumnSet"><apiName>ColumnSet</apiName><shortdesc>
  Mit dem Gruppierungssatz ColumnSet können Säulenserien in einem beliebigen Diagramm gestapelt oder gruppiert werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="series"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IColumn</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:StackedSeries</apiBaseClassifier></apiClassifierDef><apiDesc>
  Mit dem Gruppierungssatz ColumnSet können Säulenserien in einem beliebigen Diagramm gestapelt oder gruppiert werden. Ein ColumnSet weist das gleiche Gruppierungsverhalten wie ein ColumnChart auf, kann jedoch zum Zusammenstellen angepasster CartesianChart-Diagramme verwendet werden. Mit ColumnSets können alle Diagrammelementtypen gruppiert werden, die die IColumn-Schnittstelle implementieren. Mit ColumnSets können alle Diagrammelementtypen gestapelt werden, die die IColumn- und IStackable-Schnittstellen implementieren. Da ColumnSet die IColumn-Schnittstelle selbst implementiert, können Sie mit ColumnSets andere ColumnSets gruppieren, um erweiterte angepasste Diagramme zu erstellen.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.series:ColumnSet:ColumnSet"><apiName>ColumnSet</apiName><shortdesc>
	 Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	 Konstruktor.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:ColumnSet:protected:buildSubSeries"><apiName>buildSubSeries</apiName><shortdesc> 
	  
      Verarbeitet ggf. das Array der untergeordneten Serie zur Anzeige.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
	  
      Verarbeitet ggf. das Array der untergeordneten Serie zur Anzeige. Diese Methode stellt sicher, dass alle untergeordneten Serien als untergeordnete Objekte dieses Stapelsatzes hinzugefügt werden, und wendet alle erforderlichen Serienanpassungen an (beispielsweise Zuweisen vererbter Datenprovider oder Gruppierungseigenschaften).
      <p>Diese Methode informiert das Diagramm auch, wenn Serien geändert wurden und daher implizite Serienstile neu zugewiesen werden müssen. Diese Methode wird ggf. automatisch vom Stapelsatz aufgerufen. Statt diese Methode direkt aufzurufen, sollten Sie einen Aufruf der <codeph>invalidateSeries()</codeph>-Methode in Betracht ziehen.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSet:protected:customizeSeries"><apiName>customizeSeries</apiName><shortdesc>
	   
      Wendet Anpassungen auf eine untergeordnete Serie an, um das Stapelverhalten zu bestimmen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>glyph</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IChartElement</apiOperationClassifier><apiDesc>Das anzupassende Diagrammelement.
      
      </apiDesc></apiParam><apiParam><apiItemName>i</apiItemName><apiType value="uint"/><apiDesc>Die Position der untergeordneten Serie im Serien-Array.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	   
      Wendet Anpassungen auf eine untergeordnete Serie an, um das Stapelverhalten zu bestimmen. Standardmäßig weist diese Methode die vererbten Datenprovider den untergeordneten Serien zu. Abgeleitete Klassen können diese Methode überschreiben, um sie weiter anzupassen.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSet:describeData"><apiName>describeData</apiName><shortdesc>
	  
      
      Wird durch das steuernde DataTransform aufgerufen, um eine Beschreibung der durch dieses IChartElement repräsentierten Daten zu erhalten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein Array, das die die angezeigten Daten beschreibenden DataDescription-Instanzen enthält.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>Bestimmt die Achse, von der Datenbeschreibungen abgerufen werden sollen.
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>Ein Bitfeld, das anzeigt, welche Werte des DataDescription-Objekts von der spezifischen Achse berücksichtigt werden. Implementoren können optimiert werden, indem sie nur die erforderlichen Felder berechnen.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      
      Wird durch das steuernde DataTransform aufgerufen, um eine Beschreibung der durch dieses IChartElement dargestellten Daten zu erhalten. Implementoren füllen ein Array von mx.charts.chartClasses.DataDescription-Objekten aus und geben es zurück, um sicherzustellen, dass ihre Daten von Achsen, die Werte aus den angezeigten Daten (wie „minimum“, „maximum“, „interval“ und „unitSize“) automatisch generieren, korrekt abgerufen werden. Die meisten Elementtypen geben ein Array zurück, das nur eine DataDescription enthält. Kombinierte Elemente, wie BarSet und ColumnSet geben möglicherweise mehrere DataDescription-Instanzen zurück, die die von ihren Unterelementen angezeigten Daten beschreiben. Bei entsprechendem Aufruf beschreibt der Implementor die Daten entlang der durch das Argument <codeph>dimension</codeph> angegebenen Achse. Diese Funktion wird möglicherweise für jede von dem übergeordneten Diagramm unterstützte Achse aufgerufen.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSet:protected:formatDataTip"><apiName>formatDataTip</apiName><shortdesc>
	  
      Stellt den angepassten Text für DataTip-Objekte bereit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Der angepasste Text für den DataTip. Die Standardeinstellung ist "" (leerer String). Sie müssen diese Methode überschreiben, um einen angepassten DataTip bereitzustellen.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>hd</apiItemName><apiOperationClassifier>mx.charts:HitData</apiOperationClassifier><apiDesc>Das hitData-Objekt im Stapel.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      Stellt den angepassten Text für DataTip-Objekte bereit. Stapelsätze überschreiben den DataTip-Text der untergeordneten Serien, die sie enthalten, um zusätzliche Informationen zum Stapelverhalten anzuzeigen. Abgeleitete Klassen müssen diese Methode überschreiben, um angepassten DataTip-Text zu definieren.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:ColumnSet:columnWidthRatio:get"><apiName>columnWidthRatio</apiName><shortdesc>
	  Gibt die Breite der Spalten im Verhältnis zur Kategoriebreite an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.65
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Gibt die Breite der Spalten im Verhältnis zur Kategoriebreite an. Beim Wert <codeph>1</codeph> wird der gesamte Raum verwendet, bei dem Wert <codeph>0,6</codeph> dagegen 60 % des verfügbaren Raums des Balkens. Normalerweise legen Sie diese Eigenschaft nicht direkt fest. Als eigentliche Säulenbreite wird entweder die Eigenschaft <codeph>columnWidthRatio</codeph> oder die Eigenschaft <codeph>maxColumnWidth</codeph> verwendet, abhängig davon, welcher Wert kleiner ist.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSet:maxColumnWidth:get"><apiName>maxColumnWidth</apiName><shortdesc>
	  Gibt die Breite der Säulen in Pixeln an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Gibt die Breite der Säulen in Pixeln an. Als eigentliche Säulenbreite wird entweder dieser Stil oder die Eigenschaft <codeph>columnWidthRatio</codeph> verwendet, abhängig davon, welcher Wert kleiner ist. Bei gruppierten Säulen wird dieser Raum anteilsmäßig zwischen den Säulen in jeder Gruppe aufgeteilt. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSet:offset:get"><apiName>offset</apiName><shortdesc>
	  Gibt an, wie weit die Mitte der Säulen von der Mitte des verfügbaren Raums im Bezug zur Kategoriebreite entfernt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Gibt an, wie weit die Mitte der Säulen von der Mitte des verfügbaren Raums im Bezug zur Kategoriebreite entfernt ist. Mit der Standardeinstellung <codeph>0</codeph> werden die Säulen im Raum zentriert. Bei der Einstellung <codeph>-50</codeph> wird die Säule am Anfang des verfügbaren Raums zentriert. Normalerweise legen Sie diese Eigenschaft nicht direkt fest. Das ColumnChart-Steuerelement verwaltet diesen Wert mithilfe der Eigenschaft <codeph>columnWidthRatio</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.series:HLOCSeries"><apiName>HLOCSeries</apiName><shortdesc>
  Stellt Finanzdaten als Elemente dar, die Höchst-, Tiefst-, Schlusswerte und optional Anfangswerte einer Serie wiedergeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="style" name="hlocColor"/><styles><style inherit="no" name="stroke" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Legt den Strichstil für diese Datenserie fest. Sie müssen ein Stroke-Objekt angeben, um den Strich zu definieren. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="openTickStroke" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Legt den Strichtyp für eine Anfangsmarkierung fest, wenn ein Anfangswert angegeben ist.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="openTickLength" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="Number">
<description>
  Legt die Länge der Anfangsmarkierung in Pixeln fest, wenn ein Anfangswert angegeben ist. Unabhängig von diesem Wert rendert die HLOCSeries keine Anfangsmarkierung außerhalb des Bereichs, die dem einzelnen Element zugewiesen ist.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="closeTickStroke" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Legt den Strichtyp für die Schlussmarkierung fest, wenn ein Anfangswert angegeben ist.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="closeTickLength" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="Number">
<description>
  Legt die Länge der Schlussmarkierung in Pixeln fest. Unabhängig von diesem Wert rendert die HLOCSeries keine Schlussmarkierung außerhalb des Bereichs, die dem einzelnen Element zugewiesen ist.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:HLOCSeries&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:</p>
  
  <pre>
  &lt;mx:HLOCSeries
    <strong>Styles</strong>
    closeTickLength="<i>No default</i>"
    closeTickStroke="<i>No default</i>"
    openTickLength="<i>No default</i>"
    openTickStroke="<i>No default</i>"
    stroke="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:HLOCSeriesBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Stellt Finanzdaten als Elemente dar, die Höchst-, Tiefst-, Schlusswerte und optional Anfangswerte einer Serie wiedergeben. Der oberste und der unterste Punkt der vertikalen Linie jedes Elements stellen den Höchst- und Tiefstwert des Datenpunkts dar. Die Markierung auf der rechten Seite stellt den Schlusswert und die Markierung auf der linken Seite den Anfangswert dar, wenn dieser angegeben wurde. 
 
  </apiDesc><example conref="HLOCChartExample.mxml"><swfblock conref="../examples/HLOCChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#HLOCChart"><linktext>mx.charts.HLOCChart</linktext></link></related-links><apiConstructor id="mx.charts.series:HLOCSeries:HLOCSeries"><apiName>HLOCSeries</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Konstruktor.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts.series:HLOCSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:LineSeries"><apiName>LineSeries</apiName><shortdesc>
  Definiert eine Datenserie für ein LineChart-Steuerelement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="radius" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="Number">
<description> 
  Gibt den Radius der Diagrammelemente für die Datenpunkte in Pixeln an. Diese Eigenschaft wird nur angewendet, wenn Sie einen Elementrenderer mit der Eigenschaft <codeph>itemRenderer</codeph> angeben. Sie können den <codeph>itemRenderer</codeph> in MXML oder durch Stile festlegen.  
  
  </description>
<default>4 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="lineStroke" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description> 
   Legt den Strichstil für die Liniensegmente fest. Der Standardwert für ein LineChart-Steuerelement ist orange (<codeph>0xE48701</codeph>). Der Standardwert für eine LineSeries in einem CartesianChart-Steuerelement ist schwarz (<codeph>0x000000</codeph>). Der Standardwert für die Breite beträgt 3.
   
   </description>

<playerversion>AIR 1.1
   </playerversion>
	<prolog><asCustoms><langversion>3.0
   </langversion><productversion>Flex 3
  </productversion></asCustoms></prolog></style><style inherit="no" name="lineSegmentRenderer" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Eine Factory, die die Klasse darstellt, die von der Serie zur Darstellung der einzelnen Liniensegmente verwendet wird. Diese Klasse wird für jedes einzelne Segment der Serie einmal instanziiert. Als lineSegmentRenderers verwendete Klassen müssen die IFlexDisplayObject-, ISimpleStyleClient- und IDataRenderer-Schnittstellen implementieren. Der Eigenschaft <codeph>data</codeph> wird einer Instanz von mx.charts.series.items.LineSeriesSegment zugewiesen, die das zu rendernde Segment beschreibt.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="segment,step,reverseStep,vertical,horizontal,curve" inherit="no" name="form" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="String">
<description>
  Gibt die Linienart für das Diagramm an. Folgende Werte sind möglich:
  <ul>
    <li><codeph>"curve"</codeph>: Zeichnet Kurven zwischen Datenpunkten.</li>
    
    <li><codeph>"horizontal"</codeph>: Zeichnet nur eine vertikale Linie von der x-Koordinate des ersten Punkts zur x-Koordinate des zweiten Punks an der y-Koordinate des zweiten Punkts. Wiederholt dies für jeden Datenpunkt.</li>
    
    <li><codeph>"vertical"</codeph>: Zeichnet nur eine vertikale Linie von der y-Koordinate des ersten Punkts zur y-Koordinate des zweiten Punks an der x-Koordinate des zweiten Punkts. Wiederholt dies für jeden Datenpunkt.</li>
    
    <li><codeph>"segment"</codeph>: Zeichnet Linien als Segmente mit Winkeln, um alle Datenpunkte einer Serie zu verbinden.</li>
    
    <li><codeph>"step"</codeph>: Zeichnet Linien als horizontale Segmente. Am ersten Datenpunkt wird eine horizontale Linie und dann eine vertikale Linie zum zweiten Datenpunkt gezeichnet. Dies wird für jeden Datenpunkt wiederholt.</li>
    
    <li><codeph>"reverseStep"</codeph>: Zeichnet Linien als horizontale Segmente. Am ersten Datenpunkt wird eine vertikale Linie und dann eine horizontale Linie zum zweiten Datenpunkt gezeichnet. Dies wird für jeden Datenpunkt wiederholt.</li>
  </ul>
  Der Standardwert lautet <codeph>"segment"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="Array">
<description>
  Gibt ein Array von Fill-Objekten an, die die Füllung jedes Elements in der Serie definieren. Diese Einstellung hat Vorrang vor der <codeph>fill</codeph>-Stileigenschaft. Wenn eine angepasste Methode von der Eigenschaft <codeph>fillFunction</codeph> angegeben wird, hat diese Vorrang vor diesem Array. Wenn nicht genügend Arrayelemente für jedes Element vorhanden sind, wiederholt Flex die Füllung ab dem Beginn des Arrays.
  
  <p>Festlegen des Werts dieser Eigenschaft mit CSS
   <pre>
    LineSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Festlegen des Werts dieser Eigenschaft mit MXML
   <pre>
    &lt;mx:LineSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:LineSeries>
   </pre>
  </p>
  
  <p>
  Wenn Sie die Eigenschaft <codeph>fills</codeph> angeben und über ein Legendensteuerelement verfügen möchten, müssen Sie das Legendensteuerelement manuell erstellen und LegendItems hinzufügen.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="adjustedRadius" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="Number">
<description>
  Gibt die Anzahl der Pixel an, um die der Radius des Diagrammobjekts erhöht wird, wenn es hervorgehoben oder ausgewählt wird.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Die Klasse, die von der Serie verwendet wird, um die Markierung der Serie in verknüpften Legenden zu rendern. Hat dieser Stil den Wert <codeph>null</codeph>, verwenden die meisten Serien stattdessen standardmäßig ihren itemRenderer als Legendenmarkierungs-Skin. Als Legendenmarkierungen verwendete Klassen müssen die Schnittstelle IFlexDisplayObject implementieren. Optional können Sie die ISimpleStyleClient- und IDataRenderer-Schnittstellen implementieren. Wenn die als Legendenmarkierung verwendete Klasse die IDataRenderer-Schnittstelle implementiert, wird die Dateneigenschaft einer LegendData-Instanz zugewiesen.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Eine Factory, die die Klasse darstellt, die von der Serie zur Darstellung der einzelnen Elemente in einem Diagramm verwendet wird. Diese Klasse wird für jedes Element im Diagramm einmal instanziiert. Als itemRenderer verwendete Klassen müssen die IFlexDisplayObject-, ISimpleStyleClient- und IDataRenderer-Schnittstellen implementieren. Der Eigenschaft <codeph>data</codeph> wird das von der Skininstanz gerenderte ChartItem zugewiesen.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Legt den Strichstil für diese Datenserie fest. Sie müssen ein Stroke-Objekt angeben, um den Strich zu definieren. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Legt die Füllung für diese Datenserie fest. Sie können entweder ein Objekt angeben, das die IFill-Schnittstelle implementiert, oder eine Zahl, die einen Volltonfarbwert darstellt. Außerdem können Sie eine Volltonfüllung mit CSS angeben. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:LineSeries&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:LineSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    interpolateValues="false|true"
    sortOnXField="false|true"
    verticalAxis="<i>No default</i>"
    xField="null"
    yField="null"
 
    <strong>Styles</strong>
    adjustedRadius="2"
    fill="0xFFFFFF"
    fills="<i>IFill; no default</i>"
    form="segment|curve|horizontal|reverseStep|step|vertical"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    lineSegmentRenderer="<i>ShadowLineRenderer</i>"
    lineStroke="Stroke(0xE47801,3)"
    radius="4"
    stroke="<i>IStroke; no default</i>" 
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  Definiert eine Datenserie für ein LineChart-Steuerelement. Standardmäßig verwendet diese Klasse die ShadowLineRenderer-Klasse. Optional können Sie einen itemRenderer für die Datenserie definieren. Der itemRenderer muss die IDataRenderer-Schnittstelle implementieren. 
   </apiDesc><example conref="Line_AreaChartExample.mxml"><swfblock conref="../examples/Line_AreaChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#LineChart"><linktext>mx.charts.LineChart</linktext></link><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links><apiConstructor id="mx.charts.series:LineSeries:LineSeries"><apiName>LineSeries</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:LineSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      Passt die Elementrenderer-Instanzen an, die zur Darstellung des Diagramms verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Die neue Elementrenderer-Instanz.
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>InstanceCache zur Verwaltung der Elementrenderer-Instanzen.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Passt die Elementrenderer-Instanzen an, die zur Darstellung des Diagramms verwendet werden. Diese Methode wird automatisch aufgerufen, wenn ein neuer Elementrenderer benötigt wird, während das Diagramm gerendert wird. Sie können diese Methode überschreiben, um bei Bedarf Ihre eigene Anpassung hinzuzufügen.
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:LineSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:LineSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Gibt eine Methode an, die die Füllung für das aktuelle Diagrammelement in der Serie zurückgibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Gibt eine Methode an, die die Füllung für das aktuelle Diagrammelement in der Serie zurückgibt. Wenn diese Eigenschaft festgelegt ist, hat der Rückgabewert der angepassten Füllfunktion Vorrang vor den Stileigenschaften <codeph>fill</codeph> und <codeph>fills</codeph>. Wenn allerdings null zurückgegeben wird, werden <codeph>fills</codeph> und <codeph>fill</codeph> (in dieser Reihenfolge) bevorzugt.  
     
     <p>Die angepasste <codeph>fillFunction</codeph> hat die folgende Signatur:
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> ist ein Verweis auf das gerenderte Diagrammelement. <codeph>index</codeph> ist die Indexposition des Diagrammobjekts im renderData-Cache. Diese unterscheidet sich von der Indexposition des Datenproviders des Diagramms, da die Sortierung dort anhand der x-, y- und z-Werte erfolgt. Diese Funktion gibt ein Objekt zurück, dass die <codeph>IFill</codeph>-Schnittstelle implementiert.
     </p>
      
     <p>Ein Beispiel für die Verwendung einer angepassten <codeph>fillFunction</codeph> ist die Rückgabe einer Füllung auf der Basis eines Schwellenwerts.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:LineSeriesItem = LineSeriesItem(item);
          if (curItem.yNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
       
     <p>
      Wenn Sie eine angepasste Füllfunktion für Ihre Diagrammserie angeben und über ein Legendensteuerelement verfügen möchten, müssen Sie das Legendensteuerelement manuell erstellen und LegendItems hinzufügen.
      </p>
           
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der x-Achse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der x-Achse. Verwenden Sie die LinearAxis- oder CategoryAxis-Klasse, um die Eigenschaften der horizontalAxis als untergeordnetes Tag in MXML festzulegen, oder erstellen Sie ein LinearAxis- oder CategoryAxis-Objekt in ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:interpolateValues:get"><apiName>interpolateValues</apiName><shortdesc> 
      Gibt an, wie fehlende Daten dargestellt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
     </apiDefaultValue></apiValueDef><apiDesc> 
      Gibt an, wie fehlende Daten dargestellt werden.
           <p>Bei <codeph>false</codeph> wird die Linie bei fehlenden Werten unterbrochen. Bei <codeph>true</codeph> wird eine fortlaufende Linie durch Interpolieren des fehlenden Werts gezeichnet.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      Der untergeordnete ChartItem-Typ, der von dieser Serie zur Darstellung einzelner Elemente verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Der untergeordnete ChartItem-Typ, der von dieser Serie zur Darstellung einzelner Elemente verwendet wird. Unterklassen können eine spezialisiertere Klasse überschreiben und zurückgeben, wenn zusätzliche Informationen in den Elementen gespeichert werden müssen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:items:get"><apiName>items</apiName><shortdesc>
      
      Ruft alle Elemente ab, die in der Serie nach dem Filtern vorhanden sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Ruft alle Elemente ab, die in der Serie nach dem Filtern vorhanden sind.
      <p>Einzelne Serien bestimmen die Liste der Elemente, die zurückgegeben werden sollen.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:protected:lineSegmentType:get"><apiName>lineSegmentType</apiName><shortdesc>
      Die Klasse wird von dieser Serie verwendet, um alle benötigten Daten zum Darstellen eines Liniensegments zu speichern.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Die Klasse wird von dieser Serie verwendet, um alle benötigten Daten zum Darstellen eines Liniensegments zu speichern. Unterklassen können eine spezialisiertere Klasse überschreiben und zurückgeben, wenn zusätzliche Informationen zum Rendern gespeichert werden müssen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:radius:get"><apiName>radius</apiName><shortdesc> 
      Gibt den Radius der Diagrammelemente für die Datenpunkte in Pixeln an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Gibt den Radius der Diagrammelemente für die Datenpunkte in Pixeln an. Diese Eigenschaft wird nur angewendet, wenn Sie einen Elementrenderer mit der Eigenschaft <codeph>itemRenderer</codeph> angeben. Sie können den <codeph>itemRenderer</codeph> in MXML oder durch Stile festlegen.  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      Der untergeordnete ChartRenderData-Typ, der von dieser Serie zum Speichern der zum Rendern benötigten Daten verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Der untergeordnete ChartRenderData-Typ, der von dieser Serie zum Speichern der zum Rendern benötigten Daten verwendet wird. Unterklassen können eine spezialisiertere Klasse überschreiben und zurückgeben, wenn zusätzliche Informationen zum Rendern gespeichert werden müssen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:sortOnXField:get"><apiName>sortOnXField</apiName><shortdesc> 
      Fordert an, dass die Liniendatenpunkte vor dem Rendern von rechts nach links sortiert werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Fordert an, dass die Liniendatenpunkte vor dem Rendern von rechts nach links sortiert werden.
           <p>Standardmäßig rendert LineSeries Punkte von links nach rechts. Setzen Sie diese Eigenschaft auf <codeph>false</codeph>, um Elemente in der Reihenfolge zu rendern, in der sie im Datenprovider enthalten sind.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der y-Achse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der y-Achse. Verwenden Sie die LinearAxis- oder CategoryAxis-Klasse, um die Eigenschaften der verticalAxis als untergeordnetes Tag in MXML festzulegen, oder erstellen Sie ein LinearAxis- oder CategoryAxis-Objekt in ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:xField:get"><apiName>xField</apiName><shortdesc>
      Gibt das Feld des Datenproviders an, das die x-Achsenposition jedes Datenpunkts bestimmt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt das Feld des Datenproviders an, das die x-Achsenposition jedes Datenpunkts bestimmt. Bei <codeph>null</codeph> werden Datenpunkte in der Reihenfolge gerendert, in der sie im Datenprovider enthalten sind.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:yField:get"><apiName>yField</apiName><shortdesc>
      Gibt das Feld des Datenproviders an, das die y-Achsenposition jedes Datenpunkts bestimmt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt das Feld des Datenproviders an, das die y-Achsenposition jedes Datenpunkts bestimmt. Bei <codeph>null</codeph> geht die LineSeries davon aus, dass der Datenprovider ein Array von Zahlen ist und verwendet die Zahlen als Werte. 
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:AreaSeries"><apiName>AreaSeries</apiName><shortdesc>
  Definiert eine Serie für ein AreaChart-Steuerelement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="radius" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="Number">
<description> 
  Gibt den Radius der Diagrammelemente für die Datenpunkte in Prixeln an. Diese Eigenschaft wird nur angewendet, wenn Sie eine <codeph>itemRenderer</codeph>-Eigenschaft angeben. Sie können den itemRenderer in MXML oder durch Stile festlegen.  
  
  </description>
<default>4 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="segment,step,reverseStep,vertical,horizontal,curve" inherit="no" name="form" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="String">
<description>
  Gibt den Grenzentyp für die Fläche an. Folgende Werte sind möglich:
  
  <ul>
   <li><codeph>"curve"</codeph>: Zeichnet Kurven als Grenzen zwischen Datenpunkten.</li>
  
   <li><codeph>"horizontal"</codeph>: Zeichnet nur die Grenze von der x-Koordinate des ersten Punkts zur x-Koordinate des zweiten Punks an der y-Koordinate des zweiten Punkts. Wiederholt dies für jeden Datenpunkt.</li>
  
   <li><codeph>"reverseStep"</codeph>: Zeichnet Flächengrenzen als horizontale Segmente. Am ersten Datenpunkt wird eine vertikale Grenzlinie und dann eine horizontale Grenzlinie zum zweiten Datenpunkt gezeichnet. Dies wird für jeden Datenpunkt wiederholt.</li>
  
   <li><codeph>"segment"</codeph>: Zeichnet die Grenzen der Fläche als verbundene Segmente mit Winkeln, um alle Datenpunkte einer Serie zu verbinden.</li>
  
   <li><codeph>"step"</codeph>: Zeichnet die Grenzen der Fläche als horizontale Segmente. Am ersten Datenpunkt wird eine horizontale Grenzlinie und dann eine vertikale Grenzlinie zum zweiten Datenpunkt gezeichnet. Dies wird für jeden Datenpunkt wiederholt.</li>
  
   <li><codeph>"vertical"</codeph>: Zeichnet nur die Grenze von der y-Koordinate des ersten Punkts zur y-Koordinate des zweiten Punks an der x-Koordinate des zweiten Punkts. Wiederholt dies für jeden Datenpunkt.</li>
  </ul>
  
  </description>
<default>segment
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="Array">
<description>
  Gibt ein Array von Fill-Objekten an, die die Füllung jedes Elements in der Serie definieren. Diese Einstellung hat Vorrang vor der <codeph>fill</codeph>-Stileigenschaft. Wenn eine angepasste Methode von der Eigenschaft <codeph>fillFunction</codeph> angegeben wird, hat diese Vorrang vor diesem Array. Wenn nicht genügend Arrayelemente für jedes Element vorhanden sind, wiederholt Flex die Füllung ab dem Beginn des Arrays.
  
  <p>Festlegen des Werts dieser Eigenschaft mit CSS
   <pre>
    AreaSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Festlegen des Werts dieser Eigenschaft mit MXML
   <pre>
    &lt;mx:AreaSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:AreaSeries>
   </pre>
  </p>
  
  <p>
  Wenn Sie die Eigenschaft <codeph>fills</codeph> angeben und über ein Legendensteuerelement verfügen möchten, müssen Sie das Legendensteuerelement manuell erstellen und LegendItems hinzufügen.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="areaStroke" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description> 
  Gibt die Linienart für die Fläche an. Sie verwenden ein Stroke-Objekt, um den Strich zu definieren. Sie können den itemRenderer in MXML oder durch Stile festlegen.  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="areaRenderer" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Die Klasse, die von der Serie verwendet wird, um die gefüllte Fläche auf dem Diagramm darzustellen. Diese Klasse wird einmal für jede Serie instanziiert. Als areaRenderers verwendete Klassen müssen die IFlexDisplayObject-, ISimpleStyleClient- und IDataRenderer-Schnittstellen implementieren. Der Eigenschaft „data“ wird AreaSeriesRenderData zugewiesen, um die Flächendaten zu beschreiben.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="areaFill" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description> 
  Gibt die Füllung der Fläche an. Sie können entweder ein Objekt angeben, das die IFill-Schnittstelle implementiert, oder eine Zahl, die einen Volltonfarbwert darstellt. Außerdem können Sie eine Volltonfüllung mit CSS angeben.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="adjustedRadius" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="Number">
<description>
  Gibt die Anzahl der Pixel an, um die der Radius des Diagrammobjekts erhöht wird, wenn es hervorgehoben oder ausgewählt wird.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Die Klasse, die von der Serie verwendet wird, um die Markierung der Serie in verknüpften Legenden zu rendern. Hat dieser Stil den Wert <codeph>null</codeph>, verwenden die meisten Serien stattdessen standardmäßig ihren itemRenderer als Legendenmarkierungs-Skin. Als Legendenmarkierungen verwendete Klassen müssen die Schnittstelle IFlexDisplayObject implementieren. Optional können Sie die ISimpleStyleClient- und IDataRenderer-Schnittstellen implementieren. Wenn die als Legendenmarkierung verwendete Klasse die IDataRenderer-Schnittstelle implementiert, wird die Dateneigenschaft einer LegendData-Instanz zugewiesen.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Eine Factory, die die Klasse darstellt, die von der Serie zur Darstellung der einzelnen Elemente in einem Diagramm verwendet wird. Diese Klasse wird für jedes Element im Diagramm einmal instanziiert. Als itemRenderer verwendete Klassen müssen die IFlexDisplayObject-, ISimpleStyleClient- und IDataRenderer-Schnittstellen implementieren. Der Eigenschaft <codeph>data</codeph> wird das von der Skininstanz gerenderte ChartItem zugewiesen.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Legt den Strichstil für diese Datenserie fest. Sie müssen ein Stroke-Objekt angeben, um den Strich zu definieren. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Legt die Füllung für diese Datenserie fest. Sie können entweder ein Objekt angeben, das die IFill-Schnittstelle implementiert, oder eine Zahl, die einen Volltonfarbwert darstellt. Außerdem können Sie eine Volltonfüllung mit CSS angeben. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:AreaSeries&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:AreaSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    minField="null"
    sortOnXField="<i>true</i>"
    stacker="<i>No default</i>"
    stackTotals="<i>No default</i>"
    xField="null"
    verticalAxis="<i>No default</i>"
    yField="null"
 
    <strong>Styles</strong>
    adjustedRadius="2"
    areaFill="<i>IFill</i>"
    areaRenderer="<i>areaRenderer</i>"
    areaStroke="<i>Stroke</i>"
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    form="<i>segment|curve|horizontal|reverseStep|step|vertical</i>"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    radius="4"
    stroke="<i>IStroke; no default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IStackable2</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  Definiert eine Serie für ein AreaChart-Steuerelement. Standardmäßig verwendet diese Klasse den AreaRenderer zum Rendern von Elementen. Optional können Sie einen anderen itemRenderer für die Serie definieren. Der itemRenderer muss die IDataRenderer-Schnittstelle implementieren. 
  
  </apiDesc><example conref="Line_AreaChartExample.mxml"><swfblock conref="../examples/Line_AreaChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#AreaChart"><linktext>mx.charts.AreaChart</linktext></link></related-links><apiConstructor id="mx.charts.series:AreaSeries:AreaSeries"><apiName>AreaSeries</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:AreaSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      Passt die Elementrenderer-Instanzen an, die zum Darstellen des Diagramms verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Die neue Elementrenderer-Instanz.
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>InstanceCache zur Verwaltung der Elementrenderer-Instanzen.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Passt die Elementrenderer-Instanzen an, die zum Darstellen des Diagramms verwendet werden. Diese Methode wird automatisch aufgerufen, wenn ein neuer Elementrenderer benötigt wird, während das Diagramm gerendert wird. Sie können diese Methode überschreiben, um bei Bedarf Ihre eigene Anpassung hinzuzufügen.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      
      Informiert die Serie, dass die zugrunde liegenden Daten im Datenprovider geändert wurden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Bei <codeph>true</codeph> löst diese Methode Aufrufe der Aktualisierungsmethoden aus.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Informiert die Serie, dass die zugrunde liegenden Daten im Datenprovider geändert wurden. Diese Funktion ruft die <codeph>updateData()</codeph>-, <codeph>updateMapping()</codeph>-, <codeph>updateFilter()</codeph>- und <codeph>updateTransform()</codeph>-Methode beim nächsten Aufruf der <codeph>commitProperties()</codeph>-Methode auf. Wenn Datenelementen im Diagramm Dateneffekte zugewiesen sind, werden sie durch diese Methode angezeigt oder ausgeblendet.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:protected:invalidateMapping"><apiName>invalidateMapping</apiName><shortdesc>
      
      Informiert die Serie, dass sich die Zuordnung von Daten zu numerischen Werten geändert hat und neu berechnet werden muss.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Bei <codeph>true</codeph> löst diese Methode Aufrufe der Aktualisierungsmethoden aus.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Informiert die Serie, dass sich die Zuordnung von Daten zu numerischen Werten geändert hat und neu berechnet werden muss. Diese Funktion ruft die <codeph>updateMapping()</codeph>-, <codeph>updateFilter()</codeph>- und <codeph>updateTransform()</codeph>-Methode beim nächsten Aufruf der <codeph>commitProperties()</codeph>-Methode auf. Wenn Datenelementen im Diagramm Dateneffekte zugewiesen sind, werden sie durch diese Methode angezeigt oder ausgeblendet.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:stackAll"><apiName>stackAll</apiName><shortdesc>
      
  Stapelt die Serie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein Objekt, das die Höchst- und Mindestwerte in der neu gestapelten Serie darstellt.	 
  
  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>stackedPosXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Enthält die Basiswerte, auf denen gestapelt wird. Die Schlüssel im Wörterbuch sind die x-Werte und die Werte entsprechen positiven x-Werten.
 
  </apiDesc></apiParam><apiParam><apiItemName>stackedNegXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Enthält die Basiswerte, auf denen gestapelt wird. Die Schlüssel im Wörterbuch sind die x-Werte und die Werte entsprechen den negativen y-Werten.
  
  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable2</apiOperationClassifier><apiDesc>Das vorherige Element im Stapel. Wenn das Element beispielsweise den gleichen Typ aufweist, können Sie mit dieser Eigenschaft Arbeit beim Rendern sparen.
  
  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
  Stapelt die Serie. Normalerweise implementiert eine Serie die <codeph>updateData()</codeph>-Methode, um die Daten aus dem Datenprovider zu laden. Eine Stapelserie führt jedoch spezielle Vorgänge durch, da ihre Werte nicht unbedingt im Datenprovider gespeichert sind. Ihre Werte entsprechen den im Datenprovider gespeicherten Werten, zu denen die Werte addiert werden, die von dem darunter befindlichen Stapelobjekt geladen wurden.
  <p>Eine angepasste Stapelserie muss die <codeph>stack()</codeph>-Methode implementieren, indem sie die Daten aus dem Datenprovider lädt und zu den Basisdaten im Wörterbuch addiert, um die tatsächlich gerenderten Werte abzurufen und die Werte im Wörterbuch durch die neuen, addierten Werte zu ersetzen.</p>
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:stack"><apiName>stack</apiName><shortdesc>
      
	  Stapelt die Serie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Höchstwert in der neu gestapelten Serie.	 
	  
	  </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>stackedXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Enthält die Basiswerte, auf denen gestapelt wird. Die Schlüssel im Wörterbuch sind die y-Werte und die Werte entsprechen den x-Werten.
	  
	  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable</apiOperationClassifier><apiDesc>Das vorherige Element im Stapel. Wenn das Element beispielsweise den gleichen Typ aufweist, können Sie mit dieser Eigenschaft Arbeit beim Rendern sparen.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Stapelt die Serie. Normalerweise implementiert eine Serie die <codeph>updateData()</codeph>-Methode, um die Daten aus dem Datenprovider zu laden. Eine Stapelserie führt jedoch spezielle Vorgänge durch, da ihre Werte nicht unbedingt im Datenprovider gespeichert sind. Ihre Werte entsprechen den im Datenprovider gespeicherten Werten, zu denen die Werte addiert werden, die von dem darunter befindlichen Stapelobjekt geladen wurden.
	  <p>Eine angepasste Stapelserie muss die <codeph>stack()</codeph>-Methode implementieren, indem sie die Daten aus dem Datenprovider lädt und zu den Basisdaten im Wörterbuch addiert, um die tatsächlich gerenderten Werte abzurufen und die Werte im Wörterbuch durch die neuen, addierten Werte zu ersetzen.</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:AreaSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Gibt eine Methode an, die die Füllung für das aktuelle Diagrammelement in der Serie zurückgibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Gibt eine Methode an, die die Füllung für das aktuelle Diagrammelement in der Serie zurückgibt. Wenn diese Eigenschaft festgelegt ist, hat der Rückgabewert der angepassten Füllfunktion Vorrang vor den Stileigenschaften <codeph>fill</codeph> und <codeph>fills</codeph>. Wenn allerdings null zurückgegeben wird, werden <codeph>fills</codeph> und <codeph>fill</codeph> (in dieser Reihenfolge) bevorzugt.
       
     <p>Die angepasste <codeph>fillFunction</codeph> hat die folgende Signatur:
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> ist ein Verweis auf das gerenderte Diagrammelement. <codeph>index</codeph> ist die Indexposition des Diagrammobjekts im renderData-Cache. Diese unterscheidet sich von der Indexposition des Datenproviders des Diagramms, da die Sortierung dort anhand der x-, y- und z-Werte erfolgt. Diese Funktion gibt ein Objekt zurück, dass die <codeph>IFill</codeph>-Schnittstelle implementiert.
     </p>
      
     <p>Ein Beispiel für die Verwendung einer angepassten <codeph>fillFunction</codeph> ist die Rückgabe einer Füllung auf der Basis eines Schwellenwerts.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill 
     {
          var curItem:AreaSeriesItem = AreaSeriesItem(item);
          if (curItem.yNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
          <p>
      Wenn Sie eine angepasste Füllfunktion für Ihre Diagrammserie angeben und über ein Legendensteuerelement verfügen möchten, müssen Sie das Legendensteuerelement manuell erstellen und LegendItems hinzufügen.
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der x-Achse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der x-Achse. Verwenden Sie die LinearAxis- oder CategoryAxis-Klasse, um die Eigenschaften der horizontalAxis als untergeordnetes Tag in MXML festzulegen, oder erstellen Sie ein LinearAxis- oder CategoryAxis-Objekt in ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      Der untergeordnete ChartItem-Typ, der von dieser Serie zur Darstellung einzelner Elemente verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Der untergeordnete ChartItem-Typ, der von dieser Serie zur Darstellung einzelner Elemente verwendet wird. Unterklassen können eine spezialisiertere Klasse überschreiben und zurückgeben, wenn zusätzliche Informationen in den Elementen gespeichert werden müssen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:items:get"><apiName>items</apiName><shortdesc>
      
      Ruft alle Elemente ab, die in der Serie nach dem Filtern vorhanden sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Ruft alle Elemente ab, die in der Serie nach dem Filtern vorhanden sind.
      <p>Einzelne Serien bestimmen die Liste der Elemente, die zurückgegeben werden sollen.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:minField:get"><apiName>minField</apiName><shortdesc>
      Gibt das Feld des Datenproviders an, das die untere Grenze der Fläche bestimmt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt das Feld des Datenproviders an, das die untere Grenze der Fläche bestimmt. Bei <codeph>null</codeph> basiert die Fläche auf dem Mindestwert des Bereichs (oder auf dem Höchstwert, wenn der Feldwert negativ ist). 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      Der untergeordnete ChartRenderData-Typ, der von dieser Serie zum Speichern der zum Rendern benötigten Daten verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Der untergeordnete ChartRenderData-Typ, der von dieser Serie zum Speichern der zum Rendern benötigten Daten verwendet wird. Unterklassen können eine spezialisiertere Klasse überschreiben und zurückgeben, wenn zusätzliche Informationen zum Rendern gespeichert werden müssen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:sortOnXField:get"><apiName>sortOnXField</apiName><shortdesc> 
      Fordert an, dass die Liniendatenpunkte vor dem Rendern von rechts nach links sortiert werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Fordert an, dass die Liniendatenpunkte vor dem Rendern von rechts nach links sortiert werden.
           <p>Standardmäßig rendert LineSeries Punkte von links nach rechts. Setzen Sie diese Eigenschaft auf <codeph>false</codeph>, um Elemente in der Reihenfolge zu rendern, in der sie im Datenprovider enthalten sind.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:stacker:get"><apiName>stacker</apiName><shortdesc>
      Die StackedSeries, die mit dieser AreaSeries verknüpft ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:StackedSeries</apiValueClassifier></apiValueDef><apiDesc>
      Die StackedSeries, die mit dieser AreaSeries verknüpft ist. Der Stacker verwaltet das Stapelverhalten der Serie.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der y-Achse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der y-Achse. Verwenden Sie die LinearAxis- oder CategoryAxis-Klasse, um die Eigenschaften der verticalAxis als untergeordnetes Tag in MXML festzulegen, oder erstellen Sie ein LinearAxis- oder CategoryAxis-Objekt in ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:xField:get"><apiName>xField</apiName><shortdesc>
      Gibt das Feld des Datenproviders an, das die Position der Datenpunkte auf der horizontalen Achse bestimmt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt das Feld des Datenproviders an, das die Position der Datenpunkte auf der horizontalen Achse bestimmt. Bei <codeph>null</codeph> werden Datenpunkte in der Reihenfolge gerendert, in der sie im Datenprovider enthalten sind.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:yField:get"><apiName>yField</apiName><shortdesc>
      Gibt das Feld des Datenproviders an, das die Position des Datenpunkts auf der vertikalen Achse bestimmt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt das Feld des Datenproviders an, das die Position des Datenpunkts auf der vertikalen Achse bestimmt. Bei <codeph>null</codeph> geht die AreaSeries davon aus, dass der Datenprovider ein Array von Zahlen ist und verwendet die Zahlen als Werte für die Datenpunkte. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.charts.series:AreaSeries:stackTotals:set"><apiName>stackTotals</apiName><shortdesc>
      Die Gesamtsummen des Stapels für die Serie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      Die Gesamtsummen des Stapels für die Serie.
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.series:PieSeries"><apiName>PieSeries</apiName><shortdesc>
  Die PieSeries-Klasse definiert die Serie für ein PieChart-Steuerelement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="stroke" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Legt den Strichstil für diese Datenserie fest. Sie müssen ein Stroke-Objekt angeben, um den Strich zu definieren. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="clockwise,counterClockwise" inherit="no" name="renderDirection" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Legt die Richtung fest, in die die Serie gerendert wird. Die zulässigen Werte sind:
  <ul>
    <li><codeph>"clockwise"</codeph> - Zeichnet die Segmente mit Rechtsdrehung.</li>
  
    <li><codeph>"counterClockwise"</codeph> - Zeichnet die Segmente mit Linksdrehung.</li>
  </ul>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="radialStroke" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Gibt die Linienart an, die zum Zeichnen des Rahmens zwischen den Segmenten des Kreises verwendet wird.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,outside,callout,inside,insideWithCallout" inherit="no" name="labelPosition" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description> 
  Gibt an, wie Wertbeschriftungen gerendert werden. Sie können diese Eigenschaft in MXML oder durch Stile festlegen. Die zulässigen Werte sind:
  <ul>
    <li><codeph>"none"</codeph>: Die Werte werden nicht gezeichnet.</li>
  
    <li><codeph>"outside"</codeph>: Zeichnet Beschriftungen um die Begrenzung des Kreises.</li>
  
    <li><codeph>"callout"</codeph>: Zeichnet Beschriftungen in zwei vertikalen Stapeln auf beiden Seiten des Kreises. Der Kreis wird bei Bedarf verkleinert, damit für die Beschriftungen ausreichend Platz vorhanden ist (siehe <codeph>maxLabelRadius</codeph>). Zeichnet Linien von jeder Beschriftung zum entsprechenden Segment. Verkleinert die Beschriftungen bei Bedarf, um sie an den vorhandenen Platz anzupassen. </li>
  
    <li><codeph>"inside"</codeph>: Zeichnet Beschriftungen innerhalb des Diagramms, deren Mittelpunkt etwa bei sieben Zehntel der Länge der einzelnen Segmente liegt. Verkleinert Beschriftungen, damit sie einander nicht überschneiden. Wenn Beschriftungen unter den Wert der Eigenschaft <codeph>insideLabelSizeLimitSize</codeph> verkleinert werden, werden sie entfernt. Wenn zwei Beschriftungen einander überschneiden, haben die Beschriftungen der größeren Segmente Priorität.</li>
  
    <li><codeph>"insideWithCallout"</codeph>: Zeichnet Beschriftungen innerhalb des Kreises. Wenn diese jedoch so weit verkleinert werden müssen, dass sie nicht mehr leserlich sind, werden sie als Legenden neben dem Kreis angezeigt.</li>
  </ul>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="insideLabelSizeLimit" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Gibt den Schwellenwert für die Schriftgröße in Punkten an, ab dem Beschriftungen als unleserlich betrachtet werden. Unter diesem Schwellenwert entfernt Flex die Beschriftungen oder rendert sie als Legenden, je nach Einstellung der Eigenschaft <codeph>labelPosition</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="innerRadius" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Eine Zahl zwischen 0 und 1, die den Abstand zwischen der Mitte der Serie und der inneren Kante der gerenderten Segmente als Prozentsatz des der gesamten Serie zugewiesenen Radius angibt. Diese Eigenschaft wird der Serie direkt zugewiesen.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Array">
<description>
  Gibt ein Array von Fill-Objekten an, die die zum Rendern der einzelnen Segmente des PieChart-Steuerelement verwendet werden. Wenn nicht genügend Arrayelemente für jedes Segment vorhanden sind, wiederholt Flex die Füllung ab dem Beginn des Arrays. Wenn Sie eine Methode mithilfe der Eigenschaft <codeph>fillFunction</codeph> angeben, haben die von dieser Methode festgelegten Werte Priorität vor diesem Array.
  
  <p>Festlegen des Werts dieser Eigenschaft mit CSS
   <pre>
    PieSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Festlegen des Werts dieser Eigenschaft mit MXML
   <pre>
    &lt;mx:PieSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:PieSeries>
   </pre>
  </p>
  
  <p>
  Wenn Sie die Eigenschaft <codeph>fills</codeph> angeben und über ein Legendensteuerelement verfügen möchten, müssen Sie das Legendensteuerelement manuell erstellen und LegendItems hinzufügen.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="calloutStroke" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Gibt die Linienart an, die zum Zeichnen der Linien zwischen Segmenten und Legenden verwendet wird.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="calloutGap" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Gibt den Abstand in Pixeln an, der zwischen der Kante des Kreises und den Beschriftungen beim Rendern von Legenden eingefügt werden soll.
  
  </description>
<default>10
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Offset der ersten Textzeile von der linken Seite des Containers in Pixeln.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird. Mögliche Werte sind <codeph>"none"</codeph> und <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Ausrichtung von Text in einem Container. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"right"</codeph> oder <codeph>"center"</codeph>.
 
  <p>Der Standardwert für die meisten Steuerelemente lautet <codeph>left</codeph>. Für die Button-, LinkButton- und AccordionHeader-Komponenten lautet der Standardwert <codeph>"center"</codeph>. Für diese Komponenten wird diese Eigenschaft nur erkannt, wenn die Eigenschaft <codeph>labelPlacement</codeph> auf <codeph>"left"</codeph> oder <codeph>"right"</codeph> gesetzt wurde. Wenn <codeph>labelPlacement</codeph> auf <codeph>"top"</codeph> oder <codeph>"bottom"</codeph> gesetzt wird, werden der Text und eventuell vorhandene Symbole zentriert.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Die Anzahl der zusätzlichen Pixel, die zwischen den Zeichen angezeigt werden. Durch einen positiven Wert wird der Zeichenabstand über den normalen Abstand hinaus vergrößert und durch einen negativen Wert verkleinert.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Boolean">
<description>
  Ein boolescher Wert, der angibt, ob Kerning aktiviert (<codeph>true</codeph>) oder deaktiviert (<codeph>false</codeph>) ist. Der Begriff „Kerning“ bezeichnet die Anpassung des Zwischenraums zwischen bestimmten Zeichenpaaren zur Verbesserung der Lesbarkeit. Diese Funktion sollte nur verwendet werden, wenn sie unbedingt erforderlich ist, beispielsweise bei Überschriften in großen Schriftarten. Kerning wird nur für eingebettete FlashType-Schriftarten unterstützt. Bestimmte Schriftarten wie Verdana und Schriftarten mit fester Breite wie Courier New unterstützen Kerning nicht.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird. Gültige Werte sind <codeph>"normal"</codeph> und <codeph>"bold"</codeph>. Für LegendItem lautet der Standardwert <codeph>"bold"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Legt die Eigenschaft <codeph>thickness</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelemente darstellen. Diese Eigenschaft gibt die Stärke der Glyphenkanten an. Mögliche Werte sind Zahlen von -200 bis 200. 
  
  <p>Diese Eigenschaft wird nur angewendet, wenn Sie eine eingebettete FlashType-Schriftart verwenden und die Eigenschaft <codeph>fontAntiAliasType</codeph> auf <codeph>"advanced"</codeph> gesetzt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird. Gültige Werte sind <codeph>"normal"</codeph> und <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Die Höhe des Texts in Pixeln. Der Standardwert ist 10 für alle Steuerelemente mit Ausnahme des ColorPicker-Steuerelements. Für das ColorPicker-Steuerelement lautet der Standardwert 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Legt die Eigenschaft <codeph>sharpness</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelementen darstellen. Diese Eigenschaft gibt die Schärfe der Glyphenkanten an. Mögliche Werte sind Zahlen von -400 bis 400. 
  
  <p>Diese Eigenschaft wird nur angewendet, wenn Sie eine eingebettete FlashType-Schriftart verwenden und die Eigenschaft <codeph>fontAntiAliasType</codeph> auf <codeph>"advanced"</codeph> gesetzt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Legt die Eigenschaft <codeph>gridFitType</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelementen darstellen. Mögliche Werte sind <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) und <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Diese Eigenschaft wird nur angewendet, wenn Sie eine eingebettete FlashType-Schriftart verwenden und die Eigenschaft <codeph>fontAntiAliasType</codeph> auf <codeph>"advanced"</codeph> gesetzt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Der Name der zu verwendenden Schriftart. Anders als in einer vollständigen CSS-Implementierung werden durch Kommas getrennte Listen nicht unterstützt. Sie können den Namen einer beliebigen Schriftartfamilie verwenden. Wenn Sie eine generische Schriftartbezeichnung wählen, wird diese in die entsprechende Geräteschriftart konvertiert.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Legt die Eigenschaft <codeph>antiAliasType</codeph> von internen Textfeldern fest. Mögliche Werte sind <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) und <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>Der Standardwert lautet <codeph>"advanced"</codeph>, wodurch der FlashType-Renderer aktiviert wird, wenn Sie eine eingebettete FlashType-Schriftart verwenden. Wählen Sie <codeph>"normal"</codeph>, um den FlashType-Renderer zu deaktivieren.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
  
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="uint">
<description>
  Farbe des Texts in der Komponente, wenn deaktiviert.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="uint">
<description>
  Farbe des Texts in der Komponente einschließlich der Komponentenbeschriftung.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Die Klasse, die von der Serie verwendet wird, um die Markierung der Serie in verknüpften Legenden zu rendern. Hat dieser Stil den Wert <codeph>null</codeph>, verwenden die meisten Serien stattdessen standardmäßig ihren itemRenderer als Legendenmarkierungs-Skin. Als Legendenmarkierungen verwendete Klassen müssen die Schnittstelle IFlexDisplayObject implementieren. Optional können Sie die ISimpleStyleClient- und IDataRenderer-Schnittstellen implementieren. Wenn die als Legendenmarkierung verwendete Klasse die IDataRenderer-Schnittstelle implementiert, wird die Dateneigenschaft einer LegendData-Instanz zugewiesen.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Eine Factory, die die Klasse darstellt, die von der Serie zur Darstellung der einzelnen Elemente in einem Diagramm verwendet wird. Diese Klasse wird für jedes Element im Diagramm einmal instanziiert. Als itemRenderer verwendete Klassen müssen die IFlexDisplayObject-, ISimpleStyleClient- und IDataRenderer-Schnittstellen implementieren. Der Eigenschaft <codeph>data</codeph> wird das von der Skininstanz gerenderte chartItem zugewiesen.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:PieSeries&gt;</code> tag inherits all the properties
  of its parent classes, and the following properties:</p>
  
  <pre>
  &lt;mx:PieSeries
    <strong>Properties</strong>
    angularAxis=""
    explodeRadius="0"
    field="null"
    fillFunction="<i>Internal fill function</i>"
    itemType="<i>No default</i>"
    labelFunction="<i>No default</i>"
    labelField="<i>No default</i>"
    maxLabelRadius="0.6" 
    nameField="null"
    outerRadius="1"
    perWedgeExplodeRadius="<i>Array, no default</i>"
    renderDataType="<i>No default</i>"
    reserveExplodeRadius="0"
    startAngle="0"
 
    <strong>Styles</strong>
    calloutGap="10"
    calloutStroke="<i>IStroke; no default</i>"
    fills="<i>IFill; no default</i>"
    fontSize="10"
    innerRadius="0"
    insideLabelSizeLimit="9"
    itemRenderer="<i>No default</i>"
    labelPosition="none|callout|inside|insideWithCallout|outside"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    radialStroke="<i>IStroke; no default</i>"
    renderDirection="clockwise|counterClockwise"
    stroke="<i>IStroke; no default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die PieSeries-Klasse definiert die Serie für ein PieChart-Steuerelement. Als Standard-Elementrenderer wird die WedgeItemRenderer-Klasse verwendet. Optional können Sie einen itemRenderer für die Datenserie definieren. Der itemRenderer muss die IDataRenderer-Schnittstelle implementieren.
   </apiDesc><example conref="PieChartExample.mxml"><swfblock conref="../examples/PieChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#PieChart"><linktext>mx.charts.PieChart</linktext></link></related-links><apiConstructor id="mx.charts.series:PieSeries:PieSeries"><apiName>PieSeries</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:PieSeries:beginInterpolation"><apiName>beginInterpolation</apiName><shortdesc>
      
      Wird vom SeriesInterpolate-Effekt zum Initiieren eines Interpolationseffekts aufgerufen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Die von der Serie für die Durchführung der Interpolation benötigten Daten.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>sourceRenderData</apiItemName><apiType value="Object"/><apiDesc>Die Quelldaten für die Serie, zwischen deren Gliedern interpoliert werden soll.
     
      </apiDesc></apiParam><apiParam><apiItemName>destRenderData</apiItemName><apiType value="Object"/><apiDesc>Die Zieldaten für die Serie, zwischen deren Gliedern interpoliert werden soll.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Wird vom SeriesInterpolate-Effekt zum Initiieren eines Interpolationseffekts aufgerufen. Der Effekt übergibt die Quell- und Zieldaten für die Serie, zwischen deren Gliedern interpoliert werden soll. Der Effekt übergibt den Rückgabewert dieser Methode immer wieder an die <codeph>interpolate()</codeph>-Methode, um die Animation für die Dauer des Effekts fortzusetzen. Die Serie berechnet die Daten, die sie für die Durchführung der Interpolation benötigt, und gibt sie in dieser Methode zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
	  
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.series:PieSeries:dataToLocal"><apiName>dataToLocal</apiName><shortdesc>
      
      
      Konvertiert ein Tupel von Datenwerten in eine x-y-Koordinate auf dem Bildschirm.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Koordinaten relativ zum Diagramm.
      
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>dataValues</apiItemName><apiType value="restParam"/><apiDesc>Die in Koordinaten zu konvertierenden Datenwerte.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      Konvertiert ein Tupel von Datenwerten in eine x-y-Koordinate auf dem Bildschirm. Rufen Sie diese Funktion auf, um Daten zu transformieren und auf den Bildschirm zu bringen, indem Sie die Transformation verwenden, die die einzelnen Elemente durchlaufen. Um beispielsweise eine benutzerdefinierte Hervorhebung für einen Datenbereich eines Diagramms zu erstellen, können Sie diese Funktion verwenden, um die Bildschirmkoordinaten des relevanten Bereichs zu bestimmen.
      
      <p>Bei kartesischen Diagrammelementen werden normalerweise zwei Werte übergeben. Der erste Wert wird der horizontalen und der zweite Wert der vertikalen Achse zugeordnet.</p>
      
      <p>Bei Polardiagrammen wird der erste Wert der Winkelachse und der zweite Wert der Radialachse zugeordnet.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:getElementBounds"><apiName>getElementBounds</apiName><shortdesc>
      
      Füllt die Eigenschaften „elementBounds“, „bounds“ und „visibleBounds“ einer renderData-Struktur aus, die durch diese Serie generiert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderData</apiItemName><apiType value="Object"/><apiDesc>Die Struktur, die durch diese Serie generiert wird.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Füllt die Eigenschaften <codeph>elementBounds</codeph>, <codeph>bounds</codeph> und <codeph>visibleBounds</codeph> einer renderData-Struktur aus, die durch diese Serie generiert wird. Effektklassen rufen diese Methode auf, um diese Felder zur Verwendung bei der Implementierung verschiedener Effekttypen auszufüllen. Abgeleitete Klassen müssen diese Methode implementieren, um die Grenzen der Elemente in der Serie nur auf Anfrage zu generieren.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:protected:getMissingInterpolationValues"><apiName>getMissingInterpolationValues</apiName><shortdesc> 
      
      Füllt fehlende Werte in einer Interpolationsstruktur aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sourceProps</apiItemName><apiType value="Object"/><apiDesc>Ein Objekt, das die Quellwerte enthält, die für ein bestimmtes Element interpoliert werden. Ist diese Methode vorhanden, sollten alle Eigenschaften in diesem Objekt einen anderen Wert als <codeph>NaN</codeph> haben.
     
      </apiDesc></apiParam><apiParam><apiItemName>srcCache</apiItemName><apiType value="Array"/><apiDesc>Das Array von Quelldiagrammelementen, die interpoliert werden.
     
      </apiDesc></apiParam><apiParam><apiItemName>destProps</apiItemName><apiType value="Object"/><apiDesc>Ein Objekt, das die Zielwerte enthält, die für ein bestimmtes Element interpoliert werden. Ist diese Methode vorhanden, sollten alle Eigenschaften in diesem Objekt einen anderen Wert als <codeph>NaN</codeph> haben.
     
      </apiDesc></apiParam><apiParam><apiItemName>destCache</apiItemName><apiType value="Array"/><apiDesc>Das Array von Zieldiagrammelementen, die interpoliert werden.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Die Indexposition des Elements, das im Cache gefüllt wird.  
     
      </apiDesc></apiParam><apiParam><apiItemName>customData</apiItemName><apiType value="Object"/><apiDesc>Die Daten, die von der Serie an die <codeph>initializeInterpolationData()</codeph>-Methode übergeben wurden.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      
      Füllt fehlende Werte in einer Interpolationsstruktur aus. Wenn eine Serie die <codeph>initializeInterpolationData()</codeph>-Methode aufruft, übergibt sie Arrays von Quell- und Zielwerten für die Interpolation. Ist einer der beiden Arrays unvollständig, muss die Serie „geeignete“ Platzhalterwerte für die Interpolation bereitstellen. Die Art und Weise, wie diese Platzhalterwerte bestimmt werden, hängt vom jeweiligen Serientyp ab. Serienerweiterungen müssen diese Methode zur Bereitstellung dieser Platzhalterwerte überschreiben.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:interpolate"><apiName>interpolate</apiName><shortdesc>
      
      Wird vom SeriesInterpolate-Effekt zum Fortschreiten in einer Interpolation aufgerufen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>interpolationValues</apiItemName><apiType value="Array"/><apiDesc>Ein Array von Zahlen, die im Bereich zwischen 0 und 1 liegen, wobei die <i>n</i>-te Nummer den Prozentsatz der Art und Weise anzeigt, in der der <i>n</i>-te Wert in der Datenserie zwischen dem Start- und dem Endwert interpoliert werden sollte.
     
      </apiDesc></apiParam><apiParam><apiItemName>interpolationData</apiItemName><apiType value="Object"/><apiDesc>Die von der <codeph>beginInterpolation()</codeph>-Methode zurückgegebenen Daten.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Wird vom SeriesInterpolate-Effekt zum Fortschreiten in einer Interpolation aufgerufen. Der Effekt ruft diese Methode bis zum Abschluss der Interpolation einmal pro Frame auf. Die Serie ist zuständig für die Verwendung der Parameter zum Rendern der interpolierten Werte. Standardmäßig geht diese Serie davon aus, dass es sich bei den <codeph>interpolationData</codeph> um eine von der <codeph>initializeInterpolationData()</codeph>-Methode zurückgegebene Datenstruktur handelt, und übergibt sie an die <codeph>applyInterpolation()</codeph>-Methode.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:localToData"><apiName>localToData</apiName><shortdesc>
      
      
      Konvertiert eine Koordinate auf dem Bildschirm in ein Tupel von Datenwerten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Das Tupel von Datenwerten.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>v</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Der zu konvertierende Punkt.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      Konvertiert eine Koordinate auf dem Bildschirm in ein Tupel von Datenwerten. Rufen Sie diese Funktion auf, um festzustellen, welche Datenwerte ein bestimmter Punkt auf dem Bildschirm repräsentiert.
      <p>Einzelne Diagrammtypen bestimmen, wie diese Transformation stattfindet. Der Punkt sollte relativ zum Koordinatenraum des Diagramms sein.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:PieSeries:maxLabelRadius"><apiName>maxLabelRadius</apiName><shortdesc>
      Der Höchstwert des PieSeries-Radius, der Beschriftungen zugewiesen werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0.6</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Der Höchstwert des PieSeries-Radius, der Beschriftungen zugewiesen werden kann. Dieser Wert wird nur verwendet, wenn die Serie Legendenbeschriftungen rendert.
      
      <p>Wenn Legendenbeschriftungen gerendert werden, verringert PieSeries den Radius der Segmente, damit die Beschriftungen an den Seiten genügend Platz haben. Sobald der den Beschriftungen zugewiesene Bereich diese Grenze erreicht, reduziert die Serie die Größe der Beschriftungen.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:angularAxis:get"><apiName>angularAxis</apiName><shortdesc>
      Das Achsenobjekt, das verwendet wird, um Datenwerte einem Winkel zwischen 0 und 2 PI zuzuordnen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Das Achsenobjekt, das verwendet wird, um Datenwerte einem Winkel zwischen 0 und 2 PI zuzuordnen. Standardmäßig ist dies eine lineare Achse, für die die Eigenschaft <codeph>autoAdjust</codeph> auf <codeph>false</codeph> gesetzt ist. Auf diese Art werden Datenwerte dem Diagramm einheitlich zugeordnet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:explodeRadius:get"><apiName>explodeRadius</apiName><shortdesc>
      Eine Zahl zwischen 0 und 1, die als Prozentsatz des Gesamtradius angibt, wie weit die Segmente der Kreisserie von der Mitte des Diagramms entfernt sein sollen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Eine Zahl zwischen 0 und 1, die als Prozentsatz des Gesamtradius angibt, wie weit die Segmente der Kreisserie von der Mitte des Diagramms entfernt sein sollen. 
      
      <p>Durch diesen Wert werden alle Segmente der Kreisserie gleichmäßig weit von der Mitte entfernt. Sie können den Wert für einzelne Segmente mithilfe der Eigenschaft <codeph>perWedgeExplodeRadius</codeph> festlegen.</p>
      
      <p>Der Explode-Radius für einzelne Segmente entspricht dem Wert der Eigenschaft <codeph>explodeRadius</codeph> zuzüglich des Werts im Array <codeph>perWedgeExplodeRadius</codeph>.</p>
      
      <p>Damit die Kreisserie innerhalb der Diagrammgrenzen bleibt, während die Segmente nach außen gezogen werden, kann die Kreisserie den Gesamtradius des Kreises verkleinern. Wenn Sie die Segmente dynamisch in Echtzeit nach außen ziehen, verkleinert sich der Gesamtradius des Kreises. Um diesen Effekt zu verhindern, können Sie den Platz „reservieren“ und den Gesamtradius anfänglich reduzieren, indem Sie die Eigenschaft <codeph>reserveExplodeRadius</codeph> auf den maximalen Explode-Radius setzen, den Sie in Echtzeit einstellen möchten.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:field:get"><apiName>field</apiName><shortdesc>
      Gibt das Feld des Datenproviders an, das die Daten für die einzelnen Segmente des PieChart-Steuerelements bestimmt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt das Feld des Datenproviders an, das die Daten für die einzelnen Segmente des PieChart-Steuerelements bestimmt.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Gibt eine Methode an, die die Füllung für das aktuelle Diagrammelement in der Serie zurückgibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Gibt eine Methode an, die die Füllung für das aktuelle Diagrammelement in der Serie zurückgibt. Wenn diese Eigenschaft festgelegt ist, hat der Rückgabewert der angepassten Füllfunktion Vorrang vor der Stileigenschaft <codeph>fills</codeph>. Wenn allerdings null zurückgegeben wird, wird <codeph>fills</codeph> bevorzugt.
     
     <p>Die angepasste <codeph>fillFunction</codeph> hat die folgende Signatur:
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> ist ein Verweis auf das gerenderte Diagrammelement. <codeph>index</codeph> ist die Indexposition des Diagrammobjekts im renderData-Cache. Diese unterscheidet sich von der Indexposition des Datenproviders des Diagramms, da die Sortierung dort anhand der x-, y- und z-Werte erfolgt. Diese Funktion gibt ein Objekt zurück, dass die <codeph>IFill</codeph>-Schnittstelle implementiert.
     </p>
      
     <p>Ein Beispiel für die Verwendung einer angepassten <codeph>fillFunction</codeph> ist die Rückgabe einer Füllung auf der Basis eines Schwellenwerts.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:PieSeriesItem = PieSeriesItem(item);
          if (curItem.number > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
       
     <p>
      Wenn Sie eine angepasste Füllfunktion für Ihre Diagrammserie angeben und über ein Legendensteuerelement verfügen möchten, müssen Sie das Legendensteuerelement manuell erstellen und LegendItems hinzufügen.
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      Der untergeordnete ChartItem-Typ, der von dieser Serie zur Darstellung einzelner Elemente verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Der untergeordnete ChartItem-Typ, der von dieser Serie zur Darstellung einzelner Elemente verwendet wird. Unterklassen können eine spezialisiertere Klasse überschreiben und zurückgeben, wenn zusätzliche Informationen in den Elementen gespeichert werden müssen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:items:get"><apiName>items</apiName><shortdesc>
      
      Ruft alle Elemente ab, die in der Serie nach dem Filtern vorhanden sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Ruft alle Elemente ab, die in der Serie nach dem Filtern vorhanden sind.
      <p>Einzelne Serien bestimmen die Liste der Elemente, die zurückgegeben werden sollen.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:labelField:get"><apiName>labelField</apiName><shortdesc>
     Name eines Felds im Datenprovider, dessen Wert als Beschriftung „Ignored“ angezeigt wird, wenn labelFunction angegeben ist.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
     Name eines Felds im Datenprovider, dessen Wert als Beschriftung „Ignored“ angezeigt wird, wenn labelFunction angegeben ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Gibt eine Rückruffunktion zum Rendern jeder Beschriftung der PieSeries an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Gibt eine Rückruffunktion zum Rendern jeder Beschriftung der PieSeries an. Diese Rückruffunktion hat folgendes Format:
      <pre>
      <i>function_name</i>(<i>data</i>:Object, <i>field</i>:String, <i>index</i>:Number, <i>percentValue</i>:Number):String { ... }
      </pre>
     
      Das <codeph>data</codeph>-Objekt entspricht dem gerenderten dataProvider-Element. Der <codeph>field</codeph>-String ist der Name des Felds in den Daten, die gerendert werden. Die <codeph>index</codeph>-Zahl entspricht der Indexposition im ursprünglichen Datenprovider des gerenderten Elements. Die <codeph>percent</codeph>-Zahl entspricht dem Prozentsatz des Gesamtwerts, den dieses Element darstellt. Diese Funktion gibt einen String zurück, der die Beschriftung dieses Elements darstellt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:nameField:get"><apiName>nameField</apiName><shortdesc>
      Gibt das Feld des Datenproviders an, das den Namen jedes Segments des PieChart-Steuerelements bestimmt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt das Feld des Datenproviders an, das den Namen jedes Segments des PieChart-Steuerelements bestimmt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:outerRadius:get"><apiName>outerRadius</apiName><shortdesc>
      Der Prozentsatz des gesamten Raums, auf dem die PieSeries die Inhalte der Serie rendern kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Der Prozentsatz des gesamten Raums, auf dem die PieSeries die Inhalte der Serie rendern kann. Diese Eigenschaft wird von dem übergeordneten Diagramm verwaltet und sollte nicht direkt zugewiesen werden.
      <p>Der Wert liegt zwischen 0 und 1.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:perWedgeExplodeRadius:get"><apiName>perWedgeExplodeRadius</apiName><shortdesc>
      Ein Array von Zahlen zwischen 0 und 1, die als Prozentsatz des Gesamtradius angibt, wie weit jedes Segment der Kreisserie von der Mitte des Diagramms entfernt sein soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Ein Array von Zahlen zwischen 0 und 1, die als Prozentsatz des Gesamtradius angibt, wie weit jedes Segment der Kreisserie von der Mitte des Diagramms entfernt sein soll. 
      
      <p>Der <i>n</i>-te Wert in diesem Array entspricht dem <i>n</i>-ten Segment des Kreises. Um beispielsweise das dritte Segment zur Hälfte nach außen zu ziehen, weisen Sie <codeph>perWedgeExplodeRadius = [ 0, 0, 50];</codeph> zu.</p>
      
      <p><codeph>null</codeph> oder fehlende Werte werden im Array als 0 behandelt.</p>
      
      <p>Damit die Kreisserie innerhalb der Diagrammgrenzen bleibt, während die Segmente nach außen gezogen werden, kann die Kreisserie den Gesamtradius des Kreises verkleinern.</p>
           
      <p>Wenn Sie die Segmente dynamisch in Echtzeit nach außen ziehen, verkleinert sich der Gesamtradius des Kreises. Um diesen Effekt zu verhindern, können Sie den Platz „reservieren“ und den Gesamtradius anfänglich reduzieren, indem Sie die Eigenschaft <codeph>reserveExplodeRadius</codeph> auf den maximalen Explode-Radius setzen, den Sie in Echtzeit einstellen möchten.</p>
      
      <p>Der Wert eines einzelnen Segments im <codeph>perWedgeExplodeRadius</codeph>-Array wird zum Wert der Eigenschaft <codeph>explodeRadius</codeph> addiert, um den gesamten Explode-Radius für ein Segment zu berechnen.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      Der untergeordnete ChartRenderData-Typ, der von dieser Serie zum Speichern der zum Rendern benötigten Daten verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Der untergeordnete ChartRenderData-Typ, der von dieser Serie zum Speichern der zum Rendern benötigten Daten verwendet wird. Unterklassen können eine spezialisiertere Klasse überschreiben und zurückgeben, wenn zusätzliche Informationen zum Rendern gespeichert werden müssen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:reserveExplodeRadius:get"><apiName>reserveExplodeRadius</apiName><shortdesc>
      Eine Zahl zwischen 0 und 1, die angibt, welcher Teil des Gesamtradius der Kreisserie reserviert werden soll, um Segmente in Echtzeit nach außen zu ziehen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Eine Zahl zwischen 0 und 1, die angibt, welcher Teil des Gesamtradius der Kreisserie reserviert werden soll, um Segmente in Echtzeit nach außen zu ziehen. Wenn ein Kreissegment nach außen gezogen wird, muss die Serie den Gesamtradius des Kreises reduzieren, damit der Kreis nicht über die Grenzen des übergeordneten Diagramms hinaus geht. Wenn ein Entwickler also den Explode-Wert eines Segments in Echtzeit ändert, wird daher möglicherweise kein einzelnes Segment herausgezogen, sondern es werden stattdessen alle Segmente verkleinert. Um dies zu vermeiden, setzen Sie <codeph>reserveExplodeRadius</codeph> auf den Höchstwert, den Sie beim Herausziehen eines beliebigen Segments in Echtzeit verwenden möchten.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:startAngle:get"><apiName>startAngle</apiName><shortdesc>
      Gibt den Anfangswinkel für das erste Segment des PieChart-Steuerelements an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Gibt den Anfangswinkel für das erste Segment des PieChart-Steuerelements an. Der Standardwert ist 0, also horizontal auf der rechten Seite des PieChart-Steuerelements. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:BarSeries"><apiName>BarSeries</apiName><shortdesc>
  Definiert die Datenserie für ein BarChart-Steuerelement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="labelSizeLimit" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  Gibt den Schwellenwert für die Schriftart in Punkten an, ab dem Beschriftungen als unleserlich betrachtet werden. Unter diesem Schwellenwert schneidet Flex die Beschriftung ab.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,outside,inside" inherit="no" name="labelPosition" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
 Bestimmt die Position von Beschriftungen. Mögliche Werte sind <codeph>"none"</codeph>, <codeph>"outside"</codeph> und <codeph>"inside"</codeph>.
 
 </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="labelClass" owner="mx.charts.series:BarSeries" playerVersion="Flash10.2" type="Class">
<description>
  Die Klasse, die von dieser Komponente für die Darstellung von Beschriftungen verwendet wird.
   <p>Es kann entweder die mx.controls.Label-Klasse oder die spark.components.Label-Klasse festgelegt werden.</p>
   </description>
<default>spark.components.Label
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="labelAlign" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
 Bestimmt die Ausrichtung der Beschriftung. Wird nur berücksichtigt, wenn <codeph>labelPostion</codeph> auf <codeph>inside</codeph> gesetzt ist. Mögliche Werte sind <codeph>center</codeph>, <codeph>left</codeph> und <codeph>right</codeph>.
 
 </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Array">
<description>
  Gibt ein Array von Fill-Objekten an, die die Füllung jedes Elements in der Serie definieren. Diese Einstellung hat Vorrang vor der <codeph>fill</codeph>-Stileigenschaft. Wenn eine angepasste Methode von der Eigenschaft <codeph>fillFunction</codeph> angegeben wird, hat diese Vorrang vor diesem Array. Wenn nicht genügend Arrayelemente für jedes Element vorhanden sind, wiederholt Flex die Füllung ab dem Beginn des Arrays.
  
  <p>Festlegen des Werts dieser Eigenschaft mit CSS
   <pre>
    BarSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Festlegen des Werts dieser Eigenschaft mit MXML
   <pre>
    &lt;mx:BarSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:BarSeries>
   </pre>
  </p>
  
  <p>
  Wenn Sie die Eigenschaft <codeph>fills</codeph> angeben und über ein Legendensteuerelement verfügen möchten, müssen Sie das Legendensteuerelement manuell erstellen und LegendItems hinzufügen.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  Offset der ersten Textzeile von der linken Seite des Containers in Pixeln.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird. Mögliche Werte sind <codeph>"none"</codeph> und <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  Ausrichtung von Text in einem Container. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"right"</codeph> oder <codeph>"center"</codeph>.
 
  <p>Der Standardwert für die meisten Steuerelemente lautet <codeph>left</codeph>. Für die Button-, LinkButton- und AccordionHeader-Komponenten lautet der Standardwert <codeph>"center"</codeph>. Für diese Komponenten wird diese Eigenschaft nur erkannt, wenn die Eigenschaft <codeph>labelPlacement</codeph> auf <codeph>"left"</codeph> oder <codeph>"right"</codeph> gesetzt wurde. Wenn <codeph>labelPlacement</codeph> auf <codeph>"top"</codeph> oder <codeph>"bottom"</codeph> gesetzt wird, werden der Text und eventuell vorhandene Symbole zentriert.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  Die Anzahl der zusätzlichen Pixel, die zwischen den Zeichen angezeigt werden. Durch einen positiven Wert wird der Zeichenabstand über den normalen Abstand hinaus vergrößert und durch einen negativen Wert verkleinert.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Boolean">
<description>
  Ein boolescher Wert, der angibt, ob Kerning aktiviert (<codeph>true</codeph>) oder deaktiviert (<codeph>false</codeph>) ist. Der Begriff „Kerning“ bezeichnet die Anpassung des Zwischenraums zwischen bestimmten Zeichenpaaren zur Verbesserung der Lesbarkeit. Diese Funktion sollte nur verwendet werden, wenn sie unbedingt erforderlich ist, beispielsweise bei Überschriften in großen Schriftarten. Kerning wird nur für eingebettete FlashType-Schriftarten unterstützt. Bestimmte Schriftarten wie Verdana und Schriftarten mit fester Breite wie Courier New unterstützen Kerning nicht.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird. Gültige Werte sind <codeph>"normal"</codeph> und <codeph>"bold"</codeph>. Für LegendItem lautet der Standardwert <codeph>"bold"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  Legt die Eigenschaft <codeph>thickness</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelemente darstellen. Diese Eigenschaft gibt die Stärke der Glyphenkanten an. Mögliche Werte sind Zahlen von -200 bis 200. 
  
  <p>Diese Eigenschaft wird nur angewendet, wenn Sie eine eingebettete FlashType-Schriftart verwenden und die Eigenschaft <codeph>fontAntiAliasType</codeph> auf <codeph>"advanced"</codeph> gesetzt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird. Gültige Werte sind <codeph>"normal"</codeph> und <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  Die Höhe des Texts in Pixeln. Der Standardwert ist 10 für alle Steuerelemente mit Ausnahme des ColorPicker-Steuerelements. Für das ColorPicker-Steuerelement lautet der Standardwert 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  Legt die Eigenschaft <codeph>sharpness</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelementen darstellen. Diese Eigenschaft gibt die Schärfe der Glyphenkanten an. Mögliche Werte sind Zahlen von -400 bis 400. 
  
  <p>Diese Eigenschaft wird nur angewendet, wenn Sie eine eingebettete FlashType-Schriftart verwenden und die Eigenschaft <codeph>fontAntiAliasType</codeph> auf <codeph>"advanced"</codeph> gesetzt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  Legt die Eigenschaft <codeph>gridFitType</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelementen darstellen. Mögliche Werte sind <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) und <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Diese Eigenschaft wird nur angewendet, wenn Sie eine eingebettete FlashType-Schriftart verwenden und die Eigenschaft <codeph>fontAntiAliasType</codeph> auf <codeph>"advanced"</codeph> gesetzt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  Der Name der zu verwendenden Schriftart. Anders als in einer vollständigen CSS-Implementierung werden durch Kommas getrennte Listen nicht unterstützt. Sie können den Namen einer beliebigen Schriftartfamilie verwenden. Wenn Sie eine generische Schriftartbezeichnung wählen, wird diese in die entsprechende Geräteschriftart konvertiert.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  Legt die Eigenschaft <codeph>antiAliasType</codeph> von internen Textfeldern fest. Mögliche Werte sind <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) und <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>Der Standardwert lautet <codeph>"advanced"</codeph>, wodurch der FlashType-Renderer aktiviert wird, wenn Sie eine eingebettete FlashType-Schriftart verwenden. Wählen Sie <codeph>"normal"</codeph>, um den FlashType-Renderer zu deaktivieren.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
  
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="uint">
<description>
  Farbe des Texts in der Komponente, wenn deaktiviert.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="uint">
<description>
  Farbe des Texts in der Komponente einschließlich der Komponentenbeschriftung.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Die Klasse, die von der Serie verwendet wird, um die Markierung der Serie in verknüpften Legenden zu rendern. Hat dieser Stil den Wert <codeph>null</codeph>, verwenden die meisten Serien stattdessen standardmäßig ihren itemRenderer als Legendenmarkierungs-Skin. Als Legendenmarkierungen verwendete Klassen müssen die Schnittstelle IFlexDisplayObject implementieren. Optional können Sie die ISimpleStyleClient- und IDataRenderer-Schnittstellen implementieren. Wenn die als Legendenmarkierung verwendete Klasse die IDataRenderer-Schnittstelle implementiert, wird die Dateneigenschaft einer LegendData-Instanz zugewiesen.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Eine Factory, die die Klasse darstellt, die von der Serie zur Darstellung der einzelnen Elemente in einem Diagramm verwendet wird. Diese Klasse wird für jedes Element im Diagramm einmal instanziiert. Als itemRenderer verwendete Klassen müssen die IFlexDisplayObject-, ISimpleStyleClient- und IDataRenderer-Schnittstellen implementieren. Der Eigenschaft <codeph>data</codeph> wird das von der Skininstanz gerenderte ChartItem zugewiesen.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Legt den Strichstil für diese Datenserie fest. Sie müssen ein Stroke-Objekt angeben, um den Strich zu definieren. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Legt die Füllung für diese Datenserie fest. Sie können entweder ein Objekt angeben, das die IFill-Schnittstelle implementiert, oder eine Zahl, die einen Volltonfarbwert darstellt. Außerdem können Sie eine Volltonfüllung mit CSS angeben. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:BarSeries&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:BarSeries
    <strong>Properties</strong>
    barWidthRatio=".65"
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    labelField="<i>No default</i>"
    labelFunction="<i>No default</i>"
    maxBarWidth="<i>No default</i>"
    minField="null"
    offset="<i>No default</i>"
    stacker="<i>No default</i>"
    stackTotals="<i>No default</i>"
    verticalAxis="<i>No default</i>" 
    xField="null"
    yField="null"
  
    <strong>Styles</strong>
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    fontFamily="Verdana"
    fontSize="10"
    fontStyle="italic|normal"
    fontWeight="bold|normal"
    labelAlign="center|left|right"
    labelPosition="none|inside|outside"
    labelSizeLimit="9"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    stroke="<i>IStroke; no default</i>"
    textDecoration="underline|none"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IStackable2</apiBaseInterface><apiBaseInterface>mx.charts.chartClasses:IBar</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  Definiert die Datenserie für ein BarChart-Steuerelement. Standardmäßig verwendet diese Klasse die BoxItemRenderer-Klasse. Optional können Sie einen itemRenderer für die Datenserie definieren. Der itemRenderer muss die IDataRenderer-Schnittstelle implementieren. 
   </apiDesc><example conref="Column_BarChartExample.mxml"><swfblock conref="../examples/Column_BarChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#BarChart"><linktext>mx.charts.BarChart</linktext></link></related-links><apiConstructor id="mx.charts.series:BarSeries:BarSeries"><apiName>BarSeries</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:BarSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      Passt die Elementrenderer-Instanzen an, die zur Darstellung des Diagramms verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Die neue Elementrenderer-Instanz.
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>InstanceCache zur Verwaltung der Elementrenderer-Instanzen.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Passt die Elementrenderer-Instanzen an, die zur Darstellung des Diagramms verwendet werden. Diese Methode wird automatisch aufgerufen, wenn ein neuer Elementrenderer benötigt wird, während das Diagramm gerendert wird. Sie können diese Methode überschreiben, um bei Bedarf Ihre eigene Anpassung hinzuzufügen.
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.series:BarSeries:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      
      Informiert die Serie, dass die zugrunde liegenden Daten im Datenprovider geändert wurden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Bei <codeph>true</codeph> löst diese Methode Aufrufe der Aktualisierungsmethoden aus.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Informiert die Serie, dass die zugrunde liegenden Daten im Datenprovider geändert wurden. Diese Funktion ruft die <codeph>updateData()</codeph>-, <codeph>updateMapping()</codeph>-, <codeph>updateFilter()</codeph>- und <codeph>updateTransform()</codeph>-Methode beim nächsten Aufruf der <codeph>commitProperties()</codeph>-Methode auf. Wenn Datenelementen im Diagramm Dateneffekte zugewiesen sind, werden sie durch diese Methode angezeigt oder ausgeblendet.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:protected:invalidateMapping"><apiName>invalidateMapping</apiName><shortdesc>
      
      Informiert die Serie, dass sich die Zuordnung von Daten zu numerischen Werten geändert hat und neu berechnet werden muss.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Bei <codeph>true</codeph> löst diese Methode Aufrufe der Aktualisierungsmethoden aus.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Informiert die Serie, dass sich die Zuordnung von Daten zu numerischen Werten geändert hat und neu berechnet werden muss. Diese Funktion ruft die <codeph>updateMapping()</codeph>-, <codeph>updateFilter()</codeph>- und <codeph>updateTransform()</codeph>-Methode beim nächsten Aufruf der <codeph>commitProperties()</codeph>-Methode auf. Wenn Datenelementen im Diagramm Dateneffekte zugewiesen sind, werden sie durch diese Methode angezeigt oder ausgeblendet.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:stackAll"><apiName>stackAll</apiName><shortdesc>
      Stapelt die Serie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein Objekt, das die Höchst- und Mindestwerte in der neu gestapelten Serie darstellt.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>stackedPosYValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Enthält die Basiswerte, auf denen gestapelt wird. Die Schlüssel im Wörterbuch sind die y-Werte und die Werte entsprechen positiven x-Werten.
     
      </apiDesc></apiParam><apiParam><apiItemName>stackedNegYValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Enthält die Basiswerte, auf denen gestapelt wird. Die Schlüssel im Wörterbuch sind die y-Werte und die Werte entsprechen negativen x-Werten.
      
      </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable2</apiOperationClassifier><apiDesc>Das vorherige Element im Stapel. Wenn das Element beispielsweise den gleichen Typ aufweist, können Sie mit dieser Eigenschaft Arbeit beim Rendern sparen.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Stapelt die Serie. Normalerweise implementiert eine Serie die <codeph>updateData()</codeph>-Methode, um die Daten aus dem Datenprovider zu laden. Eine Stapelserie führt jedoch spezielle Vorgänge durch, da ihre Werte nicht unbedingt im Datenprovider gespeichert sind. Ihre Werte entsprechen den im Datenprovider gespeicherten Werten, zu denen die Werte addiert werden, die von dem darunter befindlichen Stapelobjekt geladen wurden.
      <p>Eine angepasste Stapelserie muss die <codeph>stackAll()</codeph>-Methode implementieren, indem sie die Daten aus dem Datenprovider lädt und zu den Basisdaten im Wörterbuch addiert, um die tatsächlich zu rendernden Werte abzurufen und die Werte im Wörterbuch durch die neuen, addierten Werten zu ersetzen.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:stack"><apiName>stack</apiName><shortdesc>
      Stapelt die Serie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Höchstwert in der neu gestapelten Serie.
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>stackedYValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Enthält die Basiswerte, auf denen gestapelt wird. Die Schlüssel im Wörterbuch sind die x-Werte und die Werte entsprechen den y-Werten.
      
      </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable</apiOperationClassifier><apiDesc>Das vorherige Element im Stapel. Wenn das Element beispielsweise den gleichen Typ aufweist, können Sie mit dieser Eigenschaft Arbeit beim Rendern sparen.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Stapelt die Serie. Normalerweise implementiert eine Serie die <codeph>updateData()</codeph>-Methode, um die Daten aus dem Datenprovider zu laden. Eine Stapelserie führt jedoch spezielle Vorgänge durch, da ihre Werte nicht unbedingt im Datenprovider gespeichert sind. Ihre Werte entsprechen den im Datenprovider gespeicherten Werten, zu denen die Werte addiert werden, die von dem darunter befindlichen Stapelobjekt geladen wurden.
      <p>Eine angepasste Stapelserie muss die <codeph>stack()</codeph>-Methode implementieren, indem sie die Daten aus dem Datenprovider lädt und zu den Basisdaten im Wörterbuch addiert, um die tatsächlich gerenderten Werte abzurufen und die Werte im Wörterbuch durch die neuen, addierten Werte zu ersetzen.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:BarSeries:barWidthRatio:get"><apiName>barWidthRatio</apiName><shortdesc>
      Gibt an, wie breit die Balken im Verhältnis zur Kategoriebreite gerendert werden sollen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>.65
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt an, wie breit die Balken im Verhältnis zur Kategoriebreite gerendert werden sollen. Beim Wert 1 wird der gesamte Raum verwendet, beim Wert 0,6 dagegen 60 % des verfügbaren Raums des Balkens. Normalerweise legen Sie diese Eigenschaft nicht direkt fest. Als eigentliche Balkenbreite wird entweder die Eigenschaft <codeph>barWidthRatio</codeph> oder die Eigenschaft <codeph>maxbarWidth</codeph> verwendet, abhängig davon, welcher Wert kleiner ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Gibt eine Methode an, die die Füllung für das aktuelle Diagrammelement in der Serie zurückgibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Gibt eine Methode an, die die Füllung für das aktuelle Diagrammelement in der Serie zurückgibt. Wenn diese Eigenschaft festgelegt ist, hat der Rückgabewert der angepassten Füllfunktion Vorrang vor den Stileigenschaften <codeph>fill</codeph> und <codeph>fills</codeph>. Wenn allerdings null zurückgegeben wird, werden <codeph>fills</codeph> und <codeph>fill</codeph> (in dieser Reihenfolge) bevorzugt.  
     
     <p>Die angepasste <codeph>fillFunction</codeph> hat die folgende Signatur:
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> ist ein Verweis auf das gerenderte Diagrammelement. <codeph>index</codeph> ist die Indexposition des Diagrammobjekts im renderData-Cache. Diese unterscheidet sich vom Datenprovider, da dieser anhand der x-, y- und z-Werte sortiert wird. Diese Funktion gibt ein Objekt zurück, dass die <codeph>IFill</codeph>-Schnittstelle implementiert.
     </p>
      
     <p>Ein Beispiel für die Verwendung einer angepassten <codeph>fillFunction</codeph> ist die Rückgabe einer Füllung auf der Basis eines Schwellenwerts.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill
     {
          var curItem:BarSeriesItem = BarSeriesItem(item);
          if (curItem.xNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
          <p>
      Wenn Sie eine angepasste Füllfunktion für Ihre Diagrammserie angeben und über ein Legendensteuerelement verfügen möchten, müssen Sie das Legendensteuerelement manuell erstellen und LegendItems hinzufügen.
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der x-Achse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der x-Achse. Verwenden Sie die LinearAxis- oder CategoryAxis-Klasse, um die Eigenschaften der horizontalAxis als untergeordnetes Tag in MXML festzulegen, oder erstellen Sie ein LinearAxis- oder CategoryAxis-Objekt in ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      Der untergeordnete ChartItem-Typ, der von dieser Serie zur Darstellung einzelner Elemente verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Der untergeordnete ChartItem-Typ, der von dieser Serie zur Darstellung einzelner Elemente verwendet wird. Unterklassen können eine spezialisiertere Klasse überschreiben und zurückgeben, wenn zusätzliche Informationen in den Elementen gespeichert werden müssen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:items:get"><apiName>items</apiName><shortdesc>
      
      Ruft alle Elemente ab, die in der Serie nach dem Filtern vorhanden sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Ruft alle Elemente ab, die in der Serie nach dem Filtern vorhanden sind.
      <p>Einzelne Serien bestimmen die Liste der Elemente, die zurückgegeben werden sollen.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:labelField:get"><apiName>labelField</apiName><shortdesc>
     Name eines Felds im Datenprovider, dessen Wert als Beschriftung angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
     Name eines Felds im Datenprovider, dessen Wert als Beschriftung angezeigt wird. Diese Eigenschaft wird ignoriert, wenn die Eigenschaft <codeph>labelFunction</codeph> angegeben ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Gibt eine Rückruffunktion zum Rendern jeder Beschriftung der Serie an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Gibt eine Rückruffunktion zum Rendern jeder Beschriftung der Serie an. Eine labelFunction muss folgende Signatur aufweisen:
          <pre>
     function <i>function_name</i>(<i>element</i>:ChartItem, <i>series</i>:Series):String { ... }
     </pre>
     
     <codeph><i>element</i></codeph> entspricht dem gerenderten Diagrammelement. <codeph><i>series</i></codeph> entspricht der Serie, zu der das Diagrammelement gehört. Der zurückgegebene String stellt die Beschriftung des aktuellen Elements dar.
          <p>Beispiel für die Verwendung einer angepassten labelFunction:</p>
     <pre>
     private function myLabelFunction(element:ChartItem, series:Series):String {
          var item:BarSeriesItem = BarSeriesItem(element);
          var ser:BarSeries = BarSeries(series);
          return(item.item.Country + ":" +"" + ser.xField.toString() +":"+ item.xNumber);
     }
     </pre>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:maxBarWidth:get"><apiName>maxBarWidth</apiName><shortdesc>
      Gibt die Breite der Balken in Pixeln an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Gibt die Breite der Balken in Pixeln an. Als eigentliche Balkenbreite wird entweder dieser Stil oder die Eigenschaft <codeph>barWidthRatio</codeph> verwendet, abhängig davon, welcher Wert kleiner ist. Bei gruppierten Balken wird dieser Raum anteilsmäßig zwischen den Balken in jeder Gruppe aufgeteilt. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:minField:get"><apiName>minField</apiName><shortdesc>
      Gibt das Feld des Datenproviders an, das die Unterseite jedes Balkens bestimmt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt das Feld des Datenproviders an, das die Unterseite jedes Balkens bestimmt. Bei <codeph>null</codeph> basieren die Säulen auf dem Mindestwert des Bereichs (oder auf dem Höchstwert, wenn der Feldwert negativ ist).  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:offset:get"><apiName>offset</apiName><shortdesc>
      Gibt an, wie weit die Mitte der Balken von der Mitte des verfügbaren Raums im Bezug zur Kategoriebreite entfernt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt an, wie weit die Mitte der Balken von der Mitte des verfügbaren Raums im Bezug zur Kategoriebreite entfernt ist. Der Wertebereich ist ein Prozentsatz zwischen <codeph>-100</codeph> und <codeph>100</codeph>. Bei der Einstellung <codeph>0</codeph> werden die Balken im Raum zentriert. Bei der Einstellung <codeph>-50</codeph> wird die Säule am Anfang des verfügbaren Raums zentriert. Normalerweise legen Sie diese Eigenschaft nicht direkt fest.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      Der untergeordnete ChartRenderData-Typ, der von dieser Serie zum Speichern der zum Rendern benötigten Daten verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Der untergeordnete ChartRenderData-Typ, der von dieser Serie zum Speichern der zum Rendern benötigten Daten verwendet wird. Unterklassen können eine spezialisiertere Klasse überschreiben und zurückgeben, wenn zusätzliche Informationen zum Rendern gespeichert werden müssen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:stacker:get"><apiName>stacker</apiName><shortdesc>
      Die StackedSeries, die mit dieser BarSeries verknüpft ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:StackedSeries</apiValueClassifier></apiValueDef><apiDesc>
      Die StackedSeries, die mit dieser BarSeries verknüpft ist. Der Stacker verwaltet das Stapelverhalten der Serie.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der y-Achse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Definiert die Beschriftungen, Markierungen und Datenpositionen für Elemente auf der y-Achse. Verwenden Sie die LinearAxis- oder CategoryAxis-Klasse, um die Eigenschaften der verticalAxis als untergeordnetes Tag in MXML festzulegen, oder erstellen Sie ein LinearAxis- oder CategoryAxis-Objekt in ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:xField:get"><apiName>xField</apiName><shortdesc>
      Gibt das Feld des Datenproviders an, das die x-Achsenposition der Oberseite jedes Balkens bestimmt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt das Feld des Datenproviders an, das die x-Achsenposition der Oberseite jedes Balkens bestimmt. Bei <codeph>null</codeph> geht die BarSeries davon aus, dass der Datenprovider ein Array von Zahlen ist und verwendet die Zahlen als Werte.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:yField:get"><apiName>yField</apiName><shortdesc> 
      Gibt das Feld des Datenproviders an, das die y-Achsenposition der Unterseite jedes Balkens im Diagramm bestimmt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Gibt das Feld des Datenproviders an, das die y-Achsenposition der Unterseite jedes Balkens im Diagramm bestimmt. Bei <codeph>null</codeph> zeigt Flex die Balken in der Reihenfolge der Daten im Datenprovider an. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.charts.series:BarSeries:stackTotals:set"><apiName>stackTotals</apiName><shortdesc>
      Die Gesamtsummen des Stapels für die Serie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      Die Gesamtsummen des Stapels für die Serie.
           </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>