<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.charts.series"><apiName>mx.charts.series</apiName><apiDetail/><apiClassifier id="mx.charts.series:BarSet"><apiName>BarSet</apiName><shortdesc>
  Ensemble de regroupement pouvant être utilisé pour empiler ou regrouper des objets BarSeries dans un graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="series"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IBar</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:StackedSeries</apiBaseClassifier></apiClassifierDef><apiDesc>
  Ensemble de regroupement pouvant être utilisé pour empiler ou regrouper des objets BarSeries dans un graphique. Une classe BarSet encapsule le même comportement de regroupement que celui utilisé dans un contrôle BarChart, mais elle peut être utilisée pour assembler des graphiques personnalisés basés sur la classe CartesianChart. Les classes BarSet peuvent être utilisées pour regrouper tout type d’élément de graphique implémentant l’interface IBar. Elles peuvent empiler tout type d’élément de graphique implémentant les interfaces IBar et IStackable. Comme la classe BarSet implémente l’interface IBar, vous pouvez utiliser des classes BarSet pour regrouper d’autres classes BarSet afin de créer des graphiques personnalisés plus sophistiqués.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.series:BarSet:BarSet"><apiName>BarSet</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:BarSet:stack"><apiName>stack</apiName><shortdesc>
	  Met à jour les données de la série et utilise les valeurs des données de la série empilées, de sorte que l’empilage puisse être effectué correctement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  Met à jour les données de la série et utilise les valeurs des données de la série empilées, de sorte que l’empilage puisse être effectué correctement.
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:BarSet:barWidthRatio:get"><apiName>barWidthRatio</apiName><shortdesc>
	  Spécifie la largeur de rendu des barres par rapport à la largeur des catégories.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.65
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Spécifie la largeur de rendu des barres par rapport à la largeur des catégories. La valeur <codeph>1</codeph> utilise l’intégralité de l’espace et la valeur <codeph>.6</codeph> 60 % de l’espace disponible pour la barre. En règle générale, vous ne devez pas définir cette propriété directement. La largeur réelle de la barre correspond soit à la valeur de la propriété <codeph>barWidthRatio</codeph>, soit à la valeur de <codeph>maxbarWidth</codeph>, la plus petite des deux étant prise en compte.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSet:maxBarWidth:get"><apiName>maxBarWidth</apiName><shortdesc>
	  Spécifie la largeur de tracé des barres, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Spécifie la largeur de tracé des barres, en pixels. La largeur réelle de la barre correspond soit à la valeur du style, soit à la valeur de la propriété <codeph>barWidthRatio</codeph>, la plus petite des deux étant prise en compte. Les barres regroupées divisent cet espace proportionnellement entre les barres de chaque groupe. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSet:offset:get"><apiName>offset</apiName><shortdesc>
	  Spécifie dans quelle mesure le centre des barres doit être décalé par rapport au centre de l’espace disponible, selon la largeur des catégories.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Spécifie dans quelle mesure le centre des barres doit être décalé par rapport au centre de l’espace disponible, selon la largeur des catégories. La plage des valeurs est un pourcentage de la plage qui s’étend de <codeph>-100</codeph> à <codeph>100</codeph>. Définissez cette propriété sur <codeph>0</codeph> pour centrer les barres dans l’espace. Définissez cette propriété sur <codeph>-50</codeph> pour centrer la colonne au début de l’espace disponible. En règle générale, vous ne définissez pas cette propriété directement.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.series:BubbleSeries"><apiName>BubbleSeries</apiName><shortdesc>
  Définit une série de données pour un contrôle BubbleChart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="Array">
<description>
  Spécifie un tableau d’objets de remplissage définissant le remplissage de chaque élément de la série. Cette propriété est prioritaire par rapport à la propriété de style <codeph>fill</codeph>. Si une méthode personnalisée est spécifiée par la propriété <codeph>fillFunction</codeph>, elle est prioritaire par rapport à ce tableau. Si vous ne fournissez pas autant d’éléments de tableau qu’il y a d’éléments, Flex reprend la valeur de remplissage à partir du début du tableau.
  
  <p>Pour définir la valeur de cette propriété en utilisant le langage CSS :
   <pre>
    BubbleSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Pour définir la valeur de cette propriété en utilisant le langage MXML :
   <pre>
    &lt;mx:BubbleSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:BubbleSeries>
   </pre>
  </p>
  
  <p>
  Si vous spécifiez la propriété <codeph>fills</codeph> et que vous souhaitez disposer d’un contrôle Legend, vous devez créer manuellement le contrôle Legend et y ajouter des objets LegendItem.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Classe utilisée par la série pour le rendu du marqueur de la série dans les légendes associées. Si ce style est <codeph>null</codeph>, la plupart des séries utilisent par défaut leur fonctionnalité de rendu itemRenderer comme habillage de marqueur de légende. Les classes utilisées comme marqueurs de légende doivent implémenter l’interface IFlexDisplayObject et éventuellement les interfaces ISimpleStyleClient et IDataRenderer. Si la classe utilisée comme marqueur de légende implémente l’interface IDataRenderer, la propriété data est affectée à une occurrence LegendData.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Fabrique représentant la classe que la série utilisera pour représenter les différents éléments du graphique. Cette classe est instanciée une fois pour chaque élément du graphique. Les classes utilisées comme fonctionnalités de rendu itemRenderer doivent implémenter les interfaces IFlexDisplayObject, ISimpleStyleClient et IDataRenderer. L’objet chartItem rendu par l’occurrence d’habillage est affecté à la propriété <codeph>data</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Définit le style de trait de la série de données. Vous devez spécifier un objet Stroke pour définir le trait. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Définit le remplissage de la série de données. Vous pouvez spécifier soit un objet implémentant l’interface IFill, soit un nombre représentant une valeur de couleur unie. Vous pouvez également spécifier un remplissage uni à l’aide du langage CSS. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ <p>
  The <code>&lt;mx:BubbleSeries&gt;</code> tag inherits all the properties of its parent classes, and 
  the following properties:
  </p>
  <pre>
  &lt;mx:BubbleSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    itemType="<i>No default</i>"
    legendData="<i>No default</i>"
    maxRadius="50"
    minRadius="0"
    radiusAxis="<i>No default</i>"
    radiusField="<i>No default</i>"
    renderData="<i>No default</i>"
    renderDataType="<i>No default</i>"
    verticalAxis="<i>No default</i>"
    xField="null"
    yField="null"
    
    <strong>Styles</strong>
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    stroke="<i>IStroke; no default</i>"  
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  Définit une série de données pour un contrôle BubbleChart. La fonctionnalité de rendu itemRenderer par défaut est la classe CircleRenderer. Si vous le souhaitez, vous pouvez définir une fonctionnalité de rendu itemRenderer pour la série de données. La fonctionnalité de rendu itemRenderer doit implémenter l’interface IDataRenderer.
   </apiDesc><example conref="BubbleChartExample.mxml"><swfblock conref="../examples/BubbleChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#BubbleChart"><linktext>mx.charts.BubbleChart</linktext></link></related-links><apiConstructor id="mx.charts.series:BubbleSeries:BubbleSeries"><apiName>BubbleSeries</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:BubbleSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      Applique des propriétés de style à l’objet DisplayObject spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Occurrence créée.
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>Référence au cache d’occurrence lui-même.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Applique des propriétés de style à l’objet DisplayObject spécifié. Cette méthode est le rappel appelé par la classe InstanceCache lorsqu’elle crée une nouvelle fonctionnalité de rendu.  
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:beginInterpolation"><apiName>beginInterpolation</apiName><shortdesc>
      
      Appelée par l’effet SeriesInterpolate pour initier un effet d’interpolation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Données dont la série a besoin pour réaliser l’interpolation.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>sourceRenderData</apiItemName><apiType value="Object"/><apiDesc>Données source entre lesquelles la série doit réaliser l’interpolation.
     
      </apiDesc></apiParam><apiParam><apiItemName>destRenderData</apiItemName><apiType value="Object"/><apiDesc>Données de destination entre lesquelles la série doit réaliser l’interpolation.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Appelée par l’effet SeriesInterpolate pour initier un effet d’interpolation. L’effet transmet les données source et les données de destination pour que la série puisse réaliser une interpolation entre ces données. L’effet transmet la valeur de retour de cette méthode de façon répétée à la méthode <codeph>interpolate()</codeph> de la série pour réaliser l’animation pendant toute la durée de l’effet. La série calcule les données nécessaires pour réaliser l’interpolation et les renvoie dans cette méthode.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:describeData"><apiName>describeData</apiName><shortdesc>
      
      
      Appelée par la classe DataTransform gouvernante pour obtenir une description des données représentées par cet élément IChartElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Tableau contenant les occurrences DataDescription qui décrivent les données affichées.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>Détermine l’axe dont les descriptions des données doivent être obtenues.
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>Champ de bits indiquant quelles valeurs de l’objet DataDescription sont prises en compte par cet axe. Les implémenteurs peuvent optimiser le calcul en calculant uniquement les champs nécessaires.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      Appelée par la classe DataTransform gouvernante pour obtenir une description des données représentées par cet élément IChartElement. Les implémenteurs remplissent et renvoient un tableau d’objets mx.charts.chartClasses.DataDescription pour garantir que leurs données sont correctement prises en compte par les axes générant automatiquement les valeurs à partir des données affichées (par exemple minimum, maximum, interval et unitSize). La plupart des types d’éléments renvoient un tableau contenant une seule description DataDescription. Les agrégats tels que BarSet et ColumnSet peuvent renvoyer plusieurs occurrences DataDescription décrivant les données affichées par leurs sous-éléments. Lorsque cette méthode est appelée, l’implémenteur décrit les données le long de l’axe indiqué par l’argument <codeph>dimension</codeph>. Cette fonction peut être appelée pour chaque axe pris en charge par le graphique conteneur.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:findDataPoints"><apiName>findDataPoints</apiName><shortdesc>
       
      Trouve le point de données le plus proche représenté par l’élément qui se trouve sous les coordonnées spécifiées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Tableau de HitData.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Coordonnée X.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Coordonnée Y.
     
      </apiDesc></apiParam><apiParam><apiItemName>sensitivity</apiItemName><apiType value="Number"/><apiDesc>Nombre maximal de pixels séparant le pointeur des coordonnées exactes pour qu’il puisse être considéré comme étant « sous » ces coordonnées. Cette propriété est identique à la valeur de la propriété mouseSensitivity du contrôle de graphique.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
       
      Trouve le point de données le plus proche représenté par l’élément qui se trouve sous les coordonnées spécifiées.
     
      <p>Cette méthode renvoie un tableau de structures HitData décrivant les points de données de la plage. Certains éléments ChartElement individuels peuvent choisir de renvoyer un seul point dataPoint s’il est garanti que ces points dataPoint ne se chevauchent pas.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:getElementBounds"><apiName>getElementBounds</apiName><shortdesc>
      
      Remplit les propriétés elementBounds, bounds et visibleBounds d’une structure renderData générée par la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderData</apiItemName><apiType value="Object"/><apiDesc>Structure générée par la série.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Remplit les propriétés <codeph>elementBounds</codeph>, <codeph>bounds</codeph> et <codeph>visibleBounds</codeph> d’une structure renderData générée par la série. Les classes d’effet appellent cette méthode pour remplir ces champs utilisés pour l’implémentation de différents types d’effets. Les classes dérivées doivent implémenter cette méthode pour générer les limites des éléments de la série uniquement lorsque cela est nécessaire.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:getMissingInterpolationValues"><apiName>getMissingInterpolationValues</apiName><shortdesc>
      
      Remplit les valeurs manquantes dans une structure d’interpolation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sourceProps</apiItemName><apiType value="Object"/><apiDesc>Objet contenant les valeurs source interpolées pour un élément spécifique. A la sortie de cette méthode, toutes les propriétés de l’objet doivent être associées à des valeurs autres que <codeph>NaN</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>srcCache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’éléments de graphique source interpolés.
     
      </apiDesc></apiParam><apiParam><apiItemName>destProps</apiItemName><apiType value="Object"/><apiDesc>Objet contenant les valeurs de destination interpolées pour un élément spécifique. A la sortie de cette méthode, toutes les propriétés de l’objet doivent être associées à des valeurs autres que <codeph>NaN</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>destCache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’éléments de graphique de destination interpolés.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index de l’élément mis en cache.  
     
      </apiDesc></apiParam><apiParam><apiItemName>customData</apiItemName><apiType value="Object"/><apiDesc>Données transmises par la série à la méthode <codeph>initializeInterpolationData()</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Remplit les valeurs manquantes dans une structure d’interpolation. Lorsqu’une série appelle la méthode <codeph>initializeInterpolationData()</codeph>, elle transmet des tableaux de valeurs source et de valeurs de destination pour l’interpolation. Si l’un ou l’autre de ces tableaux est incomplet, la série doit fournir des valeurs d’espace réservé adaptées pour l’interpolation. La manière dont ces valeurs d’espace réservé sont déterminées dépend du type de série. Les extendeurs de série doivent remplacer cette méthode pour fournir ces valeurs d’espace réservé.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:styleChanged"><apiName>styleChanged</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateData"><apiName>updateData</apiName><shortdesc>
      
      Appelée lorsque les données sous-jacentes représentées par la série ont été modifiées et doivent être rechargées à partir du fournisseur de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Appelée lorsque les données sous-jacentes représentées par la série ont été modifiées et doivent être rechargées à partir du fournisseur de données. Si vous implémentez des types de série personnalisés, vous devez remplacer cette méthode et charger toutes les données nécessaires au rendu de la série à partir du fournisseur de données. Vous devez également appeler la méthode <codeph>super.updateData()</codeph> dans la sous-classe. En règle générale, vous ne devez pas appeler cette méthode directement. En revanche, pour garantir que les données ont été mises à jour à tel ou tel endroit, appelez la méthode <codeph>validateData()</codeph> de la classe Series.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateFilter"><apiName>updateFilter</apiName><shortdesc>
      
      Appelée lorsque les données sous-jacentes représentées par la série doivent être filtrées par rapport aux plages de valeurs représentées par les axes de la transformation de données associée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Appelée lorsque les données sous-jacentes représentées par la série doivent être filtrées par rapport aux plages de valeurs représentées par les axes de la transformation de données associée. Cette situation peut se produire lorsque les données sous-jacentes ont été modifiées ou lorsque la plage de valeurs des axes associés a changé. Si vous implémentez un type de série personnalisé, vous devez remplacer cette méthode et filtrer les données hors plage en utilisant la méthode <codeph>filterCache()</codeph> des axes gérés par la transformation de données associée. La méthode <codeph>filterCache()</codeph> convertit les valeurs hors plage en valeurs <codeph>NaN</codeph>. Vous devez également appeler la méthode <codeph>super.updateFilter()</codeph> dans la sous-classe. En règle générale, vous ne devez pas appeler cette méthode directement. En revanche, si vous souhaitez garantir que les données ont été filtrées à tel ou tel endroit, appelez la méthode <codeph>validateTransform()</codeph> de la classe Series. En général, vous pouvez supposer que les méthodes <codeph>updateData()</codeph> et <codeph>updateMapping()</codeph> ont été appelées avant cette méthode, si nécessaire.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateMapping"><apiName>updateMapping</apiName><shortdesc>
      
      Appelée lorsque les données sous-jacentes représentées par la série doivent être mappées à des représentations numériques.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Appelée lorsque les données sous-jacentes représentées par la série doivent être mappées à des représentations numériques. Cette situation peut se produire lorsque les données sous-jacentes ont été modifiées ou lorsque les axes utilisés pour le rendu de la série ont fait l’objet de modifications significatives. Si vous implémentez une série personnalisée, vous devez remplacer cette méthode et convertir les données représentées en valeurs numériques, en utilisant la méthode <codeph>mapCache()</codeph> des axes gérés par la transformation de données associée. Vous devez également appeler la méthode <codeph>super.updateMapping()</codeph> dans la sous-classe. En règle générale, vous ne devez pas appeler cette méthode directement. En revanche, pour garantir que les données ont été mappées à tel ou tel endroit, appelez la méthode <codeph>validateData()</codeph> de la classe Series. En général, vous pouvez supposer que la méthode <codeph>updateData()</codeph> a été appelée avant cette méthode, si nécessaire.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateTransform"><apiName>updateTransform</apiName><shortdesc>
      
      Appelée lorsque les données sous-jacentes représentées par la série doivent être transformées en valeurs d’écran par les axes de la transformation de données associée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Appelée lorsque les données sous-jacentes représentées par la série doivent être transformées en valeurs d’écran par les axes de la transformation de données associée. Cette situation peut se produire lorsque les données sous-jacentes ont été modifiées, lorsque la plage de valeurs des axes associés a changé, ou encore lorsque la taille de la zone à l’écran a changé. Si vous implémentez un type de série personnalisé, vous devez remplacer cette méthode et transformer les données en utilisant la méthode <codeph>transformCache()</codeph> de la transformation de données associée. Vous devez également appeler la méthode <codeph>super.updateTransform()</codeph> dans la sous-classe. En règle générale, vous ne devez pas appeler cette méthode directement. En revanche, si vous souhaitez garantir que les données ont été filtrées à tel ou tel endroit, appelez la méthode <codeph>validateTransform()</codeph> de la classe Series. En général, vous pouvez supposer que les méthodes <codeph>updateData()</codeph>, <codeph>updateMapping()</codeph> et <codeph>updateFilter()</codeph> ont été appelées avant cette méthode, si nécessaire.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:BubbleSeries:RADIUS_AXIS"><apiName>RADIUS_AXIS</apiName><shortdesc>
      Type d’axe de rayon.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bubbleRadius</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Type d’axe de rayon.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:maxRadius"><apiName>maxRadius</apiName><shortdesc>
      Rayon du plus grand élément rendu dans cette série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>50</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Rayon du plus grand élément rendu dans cette série. Lorsque vous utilisez un objet BubbleSeries dans une classe BubbleChart, le graphique affecte automatiquement sa valeur de style <codeph>maxRadius</codeph> à cette propriété, pour toutes les séries du graphique. Lorsque vous utilisez des objets BubbleSeries dans des contrôles CartesianChart, vous devez gérer cette propriété manuellement.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:minRadius"><apiName>minRadius</apiName><shortdesc>
      Rayon du plus petit élément rendu dans cette série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Rayon du plus petit élément rendu dans cette série. Lorsque vous utilisez un objet BubbleSeries dans une classe BubbleChart, le graphique affecte automatiquement sa valeur de style <codeph>minRadius</codeph> à cette propriété, pour toutes les séries du graphique. Lorsque vous utilisez des objets BubbleSeries dans des contrôles CartesianChart, vous devez gérer cette propriété manuellement.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Spécifie une méthode renvoyant le remplissage de l’élément de graphique actuel de la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Spécifie une méthode renvoyant le remplissage de l’élément de graphique actuel de la série. Lorsque cette propriété est définie, la valeur de retour de la fonction de remplissage personnalisée est prioritaire par rapport aux propriétés de style <codeph>fill</codeph> et <codeph>fills</codeph>. Cependant, si la valeur renvoyée est null, les propriétés <codeph>fills</codeph> et <codeph>fill</codeph> sont prises en compte, dans cet ordre.  
     
     <p>La fonction <codeph>fillFunction</codeph> personnalisée présente la signature suivante :
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> est une référence à l’élément de graphique rendu. <codeph>index</codeph> est l’index de l’élément de graphique du cache de la fonction renderData du cache. Il diffère de l’index du fournisseur de données du graphique car il est trié en fonction des valeurs x, y et z. 
     </p>
      
     <p>L’utilisation d’une fonction <codeph>fillFunction</codeph> personnalisée permet par exemple de renvoyer un remplissage en fonction d’un certain seuil.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:BubbleSeriesItem = BubbleSeriesItem(item);
          if (curItem.zNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
          <p>
      Si vous spécifiez une fonction de remplissage personnalisée pour la série du graphique et que vous souhaitez disposer d’un contrôle Legend, vous devez créer manuellement le contrôle Legend et y ajouter des objets LegendItem.
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe X. Utilisez la classe LinearAxis ou CategoryAxis pour définir les propriétés de l’objet horizontalAxis en tant que balise enfant en langage MXML, ou pour créer un objet LinearAxis ou CategoryAxis en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      Sous-type d’objet ChartItem utilisé par cette série pour représenter les différents éléments.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Sous-type d’objet ChartItem utilisé par cette série pour représenter les différents éléments. Les sous-classes peuvent effectuer un remplacement et renvoyer une classe plus spécialisée si elles doivent stocker des informations supplémentaires dans les éléments.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:items:get"><apiName>items</apiName><shortdesc>
      
      Obtient tous les éléments présents dans la série après filtrage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Obtient tous les éléments présents dans la série après filtrage.
      <p>Les différentes séries déterminent la liste des éléments à renvoyer.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:legendData:get"><apiName>legendData</apiName><shortdesc>
      
      Tableau d’occurrences LegendData décrivant les éléments qui doivent s’afficher dans une légende représentant cette série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Tableau d’occurrences LegendData décrivant les éléments qui doivent s’afficher dans une légende représentant cette série. Les classes de série dérivées remplacent cet accesseur de lecture et renvoient des données de légende propres à leurs styles et à leur méthode de représentation des données. Bien que la plupart des types de séries renvoient une seule occurrence LegendData, certains d’entre eux (par exemple PieSeries et StackedSeries) renvoient plusieurs occurrences représentant différents éléments du tableau ou différentes manières de rendre les données.   
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:radiusAxis:get"><apiName>radiusAxis</apiName><shortdesc>
      Axe auquel est mappé le rayon de la bulle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Axe auquel est mappé le rayon de la bulle. Les graphiques à bulles considèrent la taille des différentes bulles comme une troisième dimension des données, qui est transformée de la même manière que les positions x et y. Par défaut, <codeph>radiusAxis</codeph> est un objet LinearAxis dont la propriété <codeph>autoAdjust</codeph> est définie sur <codeph>false</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:radiusField:get"><apiName>radiusField</apiName><shortdesc>
      Spécifie le champ du fournisseur de données qui détermine le rayon de chaque symbole, par rapport aux autres points de données du graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Spécifie le champ du fournisseur de données qui détermine le rayon de chaque symbole, par rapport aux autres points de données du graphique.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      Sous-type de données ChartRenderData utilisé par cette série pour stocker toutes les données nécessaires au rendu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Sous-type de données ChartRenderData utilisé par cette série pour stocker toutes les données nécessaires au rendu. Les sous-classes peuvent effectuer un remplacement et renvoyer une classe plus spécialisée si elles doivent stocker des informations supplémentaires pour le rendu.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:protected:renderData:get"><apiName>renderData</apiName><shortdesc>
      
      Stocke les informations nécessaires au rendu de cette série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      Stocke les informations nécessaires au rendu de cette série.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe Y. Utilisez la classe LinearAxis ou CategoryAxis pour définir les propriétés de l’objet verticalAxis en tant que balise enfant en langage MXML, ou pour créer un objet LinearAxis ou CategoryAxis en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:xField:get"><apiName>xField</apiName><shortdesc>
      Spécifie le champ du fournisseur de données qui détermine la position de chaque point de données sur l’axe X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le champ du fournisseur de données qui détermine la position de chaque point de données sur l’axe X. Si la valeur est <codeph>null</codeph>, Flex rend les points de données dans l’ordre dans lequel ils apparaissent dans le fournisseur de données. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:yField:get"><apiName>yField</apiName><shortdesc>
      Spécifie le champ du fournisseur de données qui détermine la position de chaque point de données sur l’axe Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le champ du fournisseur de données qui détermine la position de chaque point de données sur l’axe Y. Si la valeur est <codeph>null</codeph>, la classe BubbleSeries suppose que le fournisseur de données est un tableau de nombres et utilise ces nombres comme valeurs pour les points de données. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:CandlestickSeries"><apiName>CandlestickSeries</apiName><shortdesc>
  Représente des données financières sous la forme d’une série de chandeliers représentant les valeurs supérieure, inférieure, d’ouverture et de fermeture d’une série de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="Array">
<description>
  Spécifie un tableau d’objets de remplissage définissant le remplissage de chaque élément de la série. Cette propriété est prioritaire par rapport à la propriété de style <codeph>fill</codeph>. Si une méthode personnalisée est spécifiée par la propriété <codeph>fillFunction</codeph>, elle est prioritaire par rapport à ce tableau. Si vous ne fournissez pas autant d’éléments de tableau qu’il y a d’éléments, Flex reprend la valeur de remplissage à partir du début du tableau.
  
  <p>Pour définir la valeur de cette propriété en utilisant le langage CSS :
   <pre>
    CandlestickSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Pour définir la valeur de cette propriété en utilisant le langage MXML :
   <pre>
    &lt;mx:CandlestickSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:CandlestickSeries>
   </pre>
  </p>
  
  <p>
  Si vous spécifiez la propriété <codeph>fills</codeph> et que vous souhaitez disposer d’un contrôle Legend, vous devez créer manuellement le contrôle Legend et y ajouter des objets LegendItem.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="declineFill" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Définit le remplissage de baisse de cette série de données, utilisé lorsque la valeur de fermeture d’un élément est inférieure à la valeur d’ouverture. Vous pouvez spécifier soit un objet implémentant l’interface IFill, soit un nombre représentant une valeur de couleur unie. Vous pouvez également spécifier un remplissage uni à l’aide du langage CSS. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="boxStroke" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Définit le style de trait utilisé pour délimiter le cadre définissant la région d’ouverture-fermeture de la série.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Définit le style de trait de la série de données. Vous devez spécifier un objet Stroke pour définir le trait. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Définit le remplissage de la série de données. Vous pouvez spécifier soit un objet implémentant l’interface IFill, soit un nombre représentant une valeur de couleur unie. Vous pouvez également spécifier un remplissage uni à l’aide du langage CSS. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ <p>
  The <code>&lt;mx:CandlestickSeries&gt;</code> tag inherits all the properties of its parent classes, and 
  the following properties:
  </p>
  <pre>
  &lt;mx:CandlestickSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
 
    <strong>Styles</strong>
    boxStroke="<i>IStroke; no default</i>"
    declineFill="<i>IFill; no default</i>"
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    stroke="<i>IStroke; no default</i>"  
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:HLOCSeriesBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Représente des données financières sous la forme d’une série de chandeliers représentant les valeurs supérieure, inférieure, d’ouverture et de fermeture d’une série de données. Le sommet et la base de la ligne verticale de chaque chandelier représentent les valeurs supérieure et inférieure du point de données, alors que le sommet et la base de la zone remplie représentent les valeurs d’ouverture et de fermeture. Chaque chandelier est rempli différemment, selon que la valeur de fermeture du point de données est supérieure ou inférieure à la valeur d’ouverture.
   </apiDesc><example conref="CandlestickChartExample.mxml"><swfblock conref="../examples/CandlestickChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#CandlestickChart"><linktext>mx.charts.CandlestickChart</linktext></link></related-links><apiConstructor id="mx.charts.series:CandlestickSeries:CandlestickSeries"><apiName>CandlestickSeries</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:CandlestickSeries:findDataPoints"><apiName>findDataPoints</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Array"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>sensitivity</apiItemName><apiType value="Number"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:CandlestickSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Spécifie une méthode renvoyant le remplissage de l’élément de graphique actuel de la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Spécifie une méthode renvoyant le remplissage de l’élément de graphique actuel de la série. Lorsque cette propriété est définie, la valeur de retour de la fonction de remplissage personnalisée est prioritaire par rapport aux propriétés de style <codeph>fill</codeph> et <codeph>fills</codeph>. Cependant, si la valeur renvoyée est null, les propriétés <codeph>fills</codeph> et <codeph>fill</codeph> sont prises en compte, dans cet ordre.  
     
     <p>La fonction <codeph>fillFunction</codeph> personnalisée présente la signature suivante :
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> est une référence à l’élément de graphique rendu. <codeph>index</codeph> est l’index de l’élément de graphique du cache de la fonction renderData du cache. Il diffère de l’index du fournisseur de données du graphique car il est trié en fonction des valeurs x, y et z. Cette fonction renvoie un objet implémentant l’interface <codeph>IFill</codeph>.
     </p>
      
     <p>L’utilisation d’une fonction <codeph>fillFunction</codeph> personnalisée permet par exemple de renvoyer un remplissage en fonction d’un certain seuil.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:HLOCSeriesItem = HLOCSeriesItem(item);
          if (curItem.closeNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
       
     <p>
      Si vous spécifiez une fonction de remplissage personnalisée pour la série du graphique et que vous souhaitez disposer d’un contrôle Legend, vous devez créer manuellement le contrôle Legend et y ajouter des objets LegendItem.
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:CandlestickSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:AreaSet"><apiName>AreaSet</apiName><shortdesc>
  Ensemble de regroupement pouvant être utilisé pour empiler des objets AreaSeries dans un graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="series"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:StackedSeries</apiBaseClassifier></apiClassifierDef><apiDesc>
  Ensemble de regroupement pouvant être utilisé pour empiler des objets AreaSeries dans un graphique. Une classe AreaSet encapsule le même comportement d’empilement que celui utilisé dans un contrôle AreaChart, mais elle peut être utilisée pour assembler des graphiques personnalisés basés sur la classe CartesianChart.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.series:AreaSet:AreaSet"><apiName>AreaSet</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.charts.series:PlotSeries"><apiName>PlotSeries</apiName><shortdesc>
  Définit une série de données pour un contrôle PlotChart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="radius" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="Number">
<description> 
  Spécifie le rayon (en pixels) de l’élément de graphique au niveau de chaque point de données. Par défaut, le contrôle PlotChart trace un cercle au niveau de chaque point de données. Vous pouvez définir cette propriété en langage MXML ou à l’aide de styles. La valeur par défaut est de <codeph>5</codeph> pixels. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="Array">
<description>
  Spécifie un tableau d’objets de remplissage définissant le remplissage de chaque élément de la série. Cette propriété est prioritaire par rapport à la propriété de style <codeph>fill</codeph>. Si une méthode personnalisée est spécifiée par la propriété <codeph>fillFunction</codeph>, elle est prioritaire par rapport à ce tableau. Si vous ne fournissez pas autant d’éléments de tableau qu’il y a d’éléments, Flex reprend la valeur de remplissage à partir du début du tableau.
  
  <p>Pour définir la valeur de cette propriété en utilisant le langage CSS :
   <pre>
    PlotSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Pour définir la valeur de cette propriété en utilisant le langage MXML :
   <pre>
    &lt;mx:PlotSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:PlotSeries>
   </pre>
  </p>
  
  <p>
  Si vous spécifiez la propriété <codeph>fills</codeph> et que vous souhaitez disposer d’un contrôle Legend, vous devez créer manuellement le contrôle Legend et y ajouter des objets LegendItem.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="adjustedRadius" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="Number">
<description>
  Spécifie le nombre de pixels d’augmentation du rayon de l’élément de graphique lorsqu’il est mis en surbrillance ou sélectionné.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Classe utilisée par la série pour le rendu du marqueur de la série dans les légendes associées. Si ce style est <codeph>null</codeph>, la plupart des séries utilisent par défaut leur fonctionnalité de rendu itemRenderer comme habillage de marqueur de légende. Les classes utilisées comme marqueurs de légende doivent implémenter l’interface IFlexDisplayObject et éventuellement les interfaces ISimpleStyleClient et IDataRenderer. Si la classe utilisée comme marqueur de légende implémente l’interface IDataRenderer, la propriété data est affectée à une occurrence LegendData.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Fabrique représentant la classe que la série utilisera pour représenter les différents éléments du graphique. Cette classe est instanciée une fois pour chaque élément du graphique. Les classes utilisées comme fonctionnalités de rendu itemRenderer doivent implémenter les interfaces IFlexDisplayObject, ISimpleStyleClient et IDataRenderer. L’objet chartItem rendu par l’occurrence d’habillage est affecté à la propriété <codeph>data</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Définit le style de trait de la série de données. Vous devez spécifier un objet Stroke pour définir le trait. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Définit le remplissage de la série de données. Vous pouvez spécifier soit un objet implémentant l’interface IFill, soit un nombre représentant une valeur de couleur unie. Vous pouvez également spécifier un remplissage uni à l’aide du langage CSS. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;mx:PlotSeries&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:</p>
  
  <pre>
  &lt;mx:PlotSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    verticalAxis="<i>No default</i>"
    xField="null"
    yField="null"
 
    <strong>Styles</strong>
    adjustedRadius="2"
    fill="0xFFFFFF"
    fills="<i>IFill; no default</i>"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    radius="5"
    stroke="<i>IStroke; no default</i>" 
  /&gt;
  </pre>
  </p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  Définit une série de données pour un contrôle PlotChart. La fonctionnalité de rendu d’élément par défaut d’un contrôle PlotChart est la classe DiamondItemRenderer. Si vous le souhaitez, vous pouvez définir une fonctionnalité de rendu pour la série de données. La fonctionnalité de rendu doit implémenter l’interface IDataRenderer. 
   </apiDesc><example conref="PlotChartExample.mxml"><swfblock conref="../examples/PlotChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#PlotChart"><linktext>mx.charts.PlotChart</linktext></link><link href="mx.charts.renderers.xml#DiamondItemRenderer"><linktext>mx.charts.renderers.DiamondItemRenderer</linktext></link></related-links><apiConstructor id="mx.charts.series:PlotSeries:PlotSeries"><apiName>PlotSeries</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:PlotSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      Personnalise les occurrences de fonctionnalité de rendu d’élément utilisées pour représenter le graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Nouvelle occurrence de fonctionnalité de rendu d’élément créée.
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>Classe InstanceCache utilisée pour gérer les occurrences de fonctionnalité de rendu.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Personnalise les occurrences de fonctionnalité de rendu d’élément utilisées pour représenter le graphique. Cette méthode est appelée automatiquement chaque fois qu’une nouvelle fonctionnalité de rendu est nécessaire pendant le processus de rendu du graphique. Si vous le souhaitez, vous pouvez remplacer cette méthode pour personnaliser les paramètres.
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PlotSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:PlotSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Spécifie une méthode renvoyant le remplissage de l’élément de graphique actuel de la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Spécifie une méthode renvoyant le remplissage de l’élément de graphique actuel de la série. Lorsque cette propriété est définie, la valeur de retour de la fonction de remplissage personnalisée est prioritaire par rapport aux propriétés de style <codeph>fill</codeph> et <codeph>fills</codeph>. Cependant, si la valeur renvoyée est null, les propriétés <codeph>fills</codeph> et <codeph>fill</codeph> sont prises en compte, dans cet ordre.  
     
     <p>La fonction <codeph>fillFunction</codeph> personnalisée présente la signature suivante :
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> est une référence à l’élément de graphique rendu. <codeph>index</codeph> est l’index de l’élément de graphique du cache de la fonction renderData du cache. Il diffère de l’index du fournisseur de données du graphique car il est trié en fonction des valeurs x, y et z. Cette fonction renvoie un objet implémentant l’interface <codeph>IFill</codeph>.
     </p>
      
     <p>L’utilisation d’une fonction <codeph>fillFunction</codeph> personnalisée permet par exemple de renvoyer un remplissage en fonction d’un certain seuil.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:PlotSeriesItem = PlotSeriesItem(item);
          if (curItem.yNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
       
     <p>
      Si vous spécifiez une fonction de remplissage personnalisée pour la série du graphique et que vous souhaitez disposer d’un contrôle Legend, vous devez créer manuellement le contrôle Legend et y ajouter des objets LegendItem.
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe X. Utilisez la classe LinearAxis ou CategoryAxis pour définir les propriétés de l’objet horizontalAxis en tant que balise enfant en langage MXML, ou pour créer un objet LinearAxis ou CategoryAxis en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      Sous-type d’objet ChartItem utilisé par cette série pour représenter les différents éléments.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Sous-type d’objet ChartItem utilisé par cette série pour représenter les différents éléments. Les sous-classes peuvent effectuer un remplacement et renvoyer une classe plus spécialisée si elles doivent stocker des informations supplémentaires dans les éléments.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:items:get"><apiName>items</apiName><shortdesc>
      
      Obtient tous les éléments présents dans la série après filtrage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Obtient tous les éléments présents dans la série après filtrage.
      <p>Les différentes séries déterminent la liste des éléments à renvoyer.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      Sous-type de données ChartRenderData utilisé par cette série pour stocker toutes les données nécessaires au rendu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Sous-type de données ChartRenderData utilisé par cette série pour stocker toutes les données nécessaires au rendu. Les sous-classes peuvent effectuer un remplacement et renvoyer une classe plus spécialisée si elles doivent stocker des informations supplémentaires pour le rendu.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:protected:renderData:get"><apiName>renderData</apiName><shortdesc>
      Sous-type de données ChartRenderData utilisé par cette série pour stocker toutes les données nécessaires au rendu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Sous-type de données ChartRenderData utilisé par cette série pour stocker toutes les données nécessaires au rendu. Les sous-classes peuvent effectuer un remplacement et renvoyer une classe plus spécialisée si elles doivent stocker des informations supplémentaires pour le rendu.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe Y. Utilisez la classe LinearAxis ou CategoryAxis pour définir les propriétés de l’objet verticalAxis en tant que balise enfant en langage MXML, ou pour créer un objet LinearAxis ou CategoryAxis en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:xField:get"><apiName>xField</apiName><shortdesc>
      Spécifie le champ du fournisseur de données qui détermine la position de chaque point de données sur l’axe X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le champ du fournisseur de données qui détermine la position de chaque point de données sur l’axe X. Si la valeur est <codeph>null</codeph>, Flex rend les points de données dans l’ordre dans lequel ils apparaissent dans le fournisseur dataProvider. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:yField:get"><apiName>yField</apiName><shortdesc>
      Spécifie le champ du fournisseur de données qui détermine la position de chaque point de données sur l’axe Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le champ du fournisseur de données qui détermine la position de chaque point de données sur l’axe Y. Si la valeur est <codeph>null</codeph>, la classe PlotSeries suppose que le fournisseur de données est un tableau de nombres et utilise ces nombres comme valeurs. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:ColumnSeries"><apiName>ColumnSeries</apiName><shortdesc>
  Définit une série de données pour un contrôle ColumnChart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="labelSizeLimit" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  Spécifie le seuil de taille de police (en points), en deçà duquel les libellés sont considérés comme illisibles. En deçà de ce seuil, Flex tronque le libellé.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,outside,inside" inherit="no" name="labelPosition" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
 Détermine la position des libellés. Les valeurs possibles sont <codeph>none</codeph>, <codeph>outside</codeph> et <codeph>inside</codeph>.
 
 </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="labelClass" owner="mx.charts.series:ColumnSeries" playerVersion="Flash10.2" type="Class">
<description>
  La classe utilisée par ce composant pour effectuer le rendu des étiquettes.
   <p>Elle peut être définie sur la classe mx.controls.Label ou la classe spark.components.Label.</p>
   </description>
<default>spark.components.Label
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,center,bottom" inherit="no" name="labelAlign" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
 Détermine l’alignement du libellé. Considéré uniquement lorsque labelPosition est <codeph>à l'intérieur</codeph> et le libellé est indiqué verticalement. Les valeurs valides sont <codeph>center</codeph>, <codeph>top</codeph> et <codeph>bottom</codeph>.
 
 </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Array">
<description>
  Spécifie un tableau d’objets de remplissage définissant le remplissage de chaque élément de la série. Cette propriété est prioritaire par rapport à la propriété de style <codeph>fill</codeph>. Si une méthode personnalisée est spécifiée par la propriété <codeph>fillFunction</codeph>, elle est prioritaire par rapport à ce tableau. Si vous ne fournissez pas autant d’éléments de tableau qu’il y a d’éléments, Flex reprend la valeur de remplissage à partir du début du tableau.
  
  <p>Pour définir la valeur de cette propriété en utilisant le langage CSS :
   <pre>
    ColumnSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Pour définir la valeur de cette propriété en utilisant le langage MXML :
   <pre>
    &lt;mx:ColumnSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:ColumnSeries>
   </pre>
  </p>
  
  <p>
  Si vous spécifiez la propriété <codeph>fills</codeph> et que vous souhaitez disposer d’un contrôle Legend, vous devez créer manuellement le contrôle Legend et y ajouter des objets LegendItem.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur (en pixels).
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut pour la plupart des contrôles est <codeph>left</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Pour ces composants, cette propriété est reconnue uniquement lorsque la valeur de la propriété <codeph>labelPlacement</codeph> est <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est pris en charge uniquement pour les polices FlashType incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en gras. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"bold"</codeph>. Pour LegendItem, la valeur par défaut est <codeph>"bold"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. La valeur par défaut est 10 pour tous les contrôles, à l’exception de ColorPicker. Pour le contrôle ColorPicker, la valeur par défaut est 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>. Cette valeur active la fonctionnalité de rendu FlashType si vous utilisez une police incorporée FlashType. Définissez cette propriété sur <codeph>"normal"</codeph> pour désactiver la fonctionnalité de rendu FlashType.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="uint">
<description>
  Couleur du texte du composant, libellé du composant inclus.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Classe utilisée par la série pour le rendu du marqueur de la série dans les légendes associées. Si ce style est <codeph>null</codeph>, la plupart des séries utilisent par défaut leur fonctionnalité de rendu itemRenderer comme habillage de marqueur de légende. Les classes utilisées comme marqueurs de légende doivent implémenter l’interface IFlexDisplayObject et éventuellement les interfaces ISimpleStyleClient et IDataRenderer. Si la classe utilisée comme marqueur de légende implémente l’interface IDataRenderer, la propriété data est affectée à une occurrence LegendData.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Fabrique représentant la classe que la série utilisera pour représenter les différents éléments du graphique. Cette classe est instanciée une fois pour chaque élément du graphique. Les classes utilisées comme fonctionnalités de rendu itemRenderer doivent implémenter les interfaces IFlexDisplayObject, ISimpleStyleClient et IDataRenderer. L’objet chartItem rendu par l’occurrence d’habillage est affecté à la propriété <codeph>data</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Définit le style de trait de la série de données. Vous devez spécifier un objet Stroke pour définir le trait. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Définit le remplissage de la série de données. Vous pouvez spécifier soit un objet implémentant l’interface IFill, soit un nombre représentant une valeur de couleur unie. Vous pouvez également spécifier un remplissage uni à l’aide du langage CSS. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ <p>
  The <code>&lt;mx:ColumnSeries&gt;</code> tag inherits all the properties of its parent classes, and 
  the following properties:
  </p>
  <pre>
  &lt;mx:ColumnSeries
    <strong>Properties</strong>
    columnWidthRatio=".65"
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    labelField="<i>No default</i>"
    labelFunction="<i>No default</i>"
    legendData="<i>No default</i>"
    maxColumnWidth="<i>No default</i>"
    minField="null"
    offset="<i>No default</i>"
    sortOnXField="false|true"
    stacker="<i>No default</i>"
    stackTotals="<i>No default</i>"
    verticalAxis="<i>No default</i>"
    xField="null"
    yField="null"
 
    
    <strong>Styles</strong>
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    fontFamily="Verdana"
    fontSize="10"
    fontStyle="italic|normal"
    fontWeight="bold|normal"
    labelAlign="center|left|right"
    labelPosition="none|inside|outside"
    labelSizeLimit="9"
    itemRenderer="<i>BoxItemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    stroke="<i>Stroke; no default</i>"
    textDecoration="underline|none"
  /&gt;
  </pre>
  </p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IColumn</apiBaseInterface><apiBaseInterface>mx.charts.chartClasses:IStackable2</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  Définit une série de données pour un contrôle ColumnChart. Par défaut, cette classe utilise la classe BoxItemRenderer. Si vous le souhaitez, vous pouvez définir une fonctionnalité de rendu itemRenderer personnalisée pour la série de données. La fonctionnalité de rendu itemRenderer personnalisée doit implémenter l’interface IDataRenderer. 
   </apiDesc><example conref="Column_BarChartExample.mxml"><swfblock conref="../examples/Column_BarChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#ColumnChart"><linktext>mx.charts.ColumnChart</linktext></link></related-links><apiConstructor id="mx.charts.series:ColumnSeries:ColumnSeries"><apiName>ColumnSeries</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:ColumnSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      Personnalise les occurrences de fonctionnalité de rendu d’élément utilisées pour représenter le graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Nouvelle occurrence de fonctionnalité de rendu d’élément créée.
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>Classe InstanceCache utilisée pour gérer les occurrences de fonctionnalité de rendu.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Personnalise les occurrences de fonctionnalité de rendu d’élément utilisées pour représenter le graphique. Cette méthode est appelée automatiquement chaque fois qu’une nouvelle fonctionnalité de rendu est nécessaire pendant le processus de rendu du graphique. Si vous le souhaitez, vous pouvez remplacer cette méthode pour personnaliser les paramètres.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      
      Signale à la série que les données sous-jacentes du fournisseur de données ont changé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, cette méthode déclenche l’appel des méthodes de mise à jour.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Signale à la série que les données sous-jacentes du fournisseur de données ont changé. Cette fonction déclenche l’appel des méthodes <codeph>updateData()</codeph>, <codeph>updateMapping()</codeph>, <codeph>updateFilter()</codeph> et <codeph>updateTransform()</codeph> lors du prochain appel de la méthode <codeph>commitProperties()</codeph>. Si des effets de données sont affectés à des éléments du graphique, cette méthode déclenche également les effets d’affichage et de masquage.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:protected:invalidateMapping"><apiName>invalidateMapping</apiName><shortdesc>
      
      Signale à la série que le mappage des données à des valeurs numériques a changé et doit être recalculé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, cette méthode déclenche l’appel des méthodes de mise à jour.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Signale à la série que le mappage des données à des valeurs numériques a changé et doit être recalculé. L’appel de cette fonction déclenche l’appel des méthodes <codeph>updateMapping()</codeph>, <codeph>updateFilter()</codeph> et <codeph>updateTransform()</codeph> lors du prochain appel de la méthode <codeph>commitProperties()</codeph>. Si des effets de données sont affectés à des éléments du graphique, cette méthode déclenche également les effets d’affichage et de masquage.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:stackAll"><apiName>stackAll</apiName><shortdesc>
      
  Empile la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet représentant les valeurs maximale et minimale de la série nouvellement empilée.	 
  
  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>stackedPosXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Contient les valeurs de base d’empilement de la série. Les clés du dictionnaire correspondent aux valeurs x et leurs valeurs aux valeurs x positives.
 
  </apiDesc></apiParam><apiParam><apiItemName>stackedNegXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Contient les valeurs de base d’empilement de la série. Les clés du dictionnaire correspondent aux valeurs x et leurs valeurs aux valeurs y négatives.
  
  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable2</apiOperationClassifier><apiDesc>Elément précédent dans la pile. Par exemple, si l’élément est de même type, vous pouvez utiliser l’accès à cette propriété pour éviter une double opération lors du rendu.
  
  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
  Empile la série. Normalement, une série implémente la méthode <codeph>updateData()</codeph> pour charger ses données à partir du fournisseur de données. Cependant, une série d’empilement réalise certaines opérations spéciales, car ses valeurs ne sont pas nécessairement stockées dans son fournisseur de données. Ses valeurs correspondent à la somme des valeurs stockées dans le fournisseur de données et des valeurs chargées par l’objet empilé.
  <p>Une série d’empilement personnalisée implémente la méthode <codeph>stack()</codeph> en chargeant ses données à partir du fournisseur de données, en les ajoutant aux valeurs de base stockées dans le dictionnaire pour obtenir les valeurs réelles à utiliser pour le rendu, et en remplaçant les valeurs du dictionnaire par les nouvelles valeurs additionnées.</p>
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:stack"><apiName>stack</apiName><shortdesc>
     
	  Empile la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Valeur maximale de la série nouvellement empilée.	 
	  
	  </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>stackedXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Contient les valeurs de base d’empilement de la série. Les clés du dictionnaire correspondent aux valeurs y et leurs valeurs aux valeurs x.
	  
	  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable</apiOperationClassifier><apiDesc>Elément précédent dans la pile. Par exemple, si l’élément est de même type, vous pouvez utiliser l’accès à cette propriété pour éviter une double opération lors du rendu.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
     
	  Empile la série. Normalement, une série implémente la méthode <codeph>updateData()</codeph> pour charger ses données à partir du fournisseur de données. Cependant, une série d’empilement réalise certaines opérations spéciales, car ses valeurs ne sont pas nécessairement stockées dans son fournisseur de données. Ses valeurs correspondent à la somme des valeurs stockées dans le fournisseur de données et des valeurs chargées par l’objet empilé.
	  <p>Une série d’empilement personnalisée implémente la méthode <codeph>stack()</codeph> en chargeant ses données à partir du fournisseur de données, en les ajoutant aux valeurs de base stockées dans le dictionnaire pour obtenir les valeurs réelles à utiliser pour le rendu, et en remplaçant les valeurs du dictionnaire par les nouvelles valeurs additionnées.</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:ColumnSeries:columnWidthRatio:get"><apiName>columnWidthRatio</apiName><shortdesc>
      Spécifie la largeur des colonnes par rapport à la largeur des catégories.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.65
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie la largeur des colonnes par rapport à la largeur des catégories. La valeur 1 utilise l’intégralité de l’espace et la valeur .6 60 % de l’espace disponible pour la colonne. En règle générale, vous ne devez pas définir cette propriété directement. La largeur réelle de la colonne correspond soit à la valeur de la propriété <codeph>columnWidthRatio</codeph>, soit à la valeur de <codeph>maxColumnWidth</codeph>, la plus petite des deux étant prise en compte.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Spécifie une méthode renvoyant le remplissage de l’élément de graphique actuel de la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Spécifie une méthode renvoyant le remplissage de l’élément de graphique actuel de la série. Lorsque cette propriété est définie, la valeur de retour de la fonction de remplissage personnalisée est prioritaire par rapport aux propriétés de style <codeph>fill</codeph> et <codeph>fills</codeph>. Cependant, si la valeur renvoyée est null, les propriétés <codeph>fills</codeph> et <codeph>fill</codeph> sont prises en compte, dans cet ordre.  
     
     <p>La fonction <codeph>fillFunction</codeph> personnalisée présente la signature suivante :
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> est une référence à l’élément de graphique rendu. <codeph>index</codeph> est l’index de l’élément de graphique du cache de la fonction renderData du cache. Il diffère de l’index du fournisseur de données du graphique car il est trié en fonction des valeurs x, y et z. Cette fonction renvoie un objet implémentant l’interface <codeph>IFill</codeph>.
     </p>
      
     <p>L’utilisation d’une fonction <codeph>fillFunction</codeph> personnalisée permet par exemple de renvoyer un remplissage en fonction d’un certain seuil.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:ColumnSeriesItem = ColumnSeriesItem(item);
          if (curItem.yNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
          <p>
      Si vous spécifiez une fonction de remplissage personnalisée pour la série du graphique et que vous souhaitez disposer d’un contrôle Legend, vous devez créer manuellement le contrôle Legend et y ajouter des objets LegendItem.
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe X. Utilisez la classe LinearAxis ou CategoryAxis pour définir les propriétés de l’objet horizontalAxis en tant que balise enfant en langage MXML, ou pour créer un objet LinearAxis ou CategoryAxis en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      Sous-type d’objet ChartItem utilisé par cette série pour représenter les différents éléments.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Sous-type d’objet ChartItem utilisé par cette série pour représenter les différents éléments. Les sous-classes peuvent effectuer un remplacement et renvoyer une classe plus spécialisée si elles doivent stocker des informations supplémentaires dans les éléments.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:items:get"><apiName>items</apiName><shortdesc>
      
      Obtient tous les éléments présents dans la série après filtrage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Obtient tous les éléments présents dans la série après filtrage.
      <p>Les différentes séries déterminent la liste des éléments à renvoyer.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:labelField:get"><apiName>labelField</apiName><shortdesc>
     Nom d’un champ du fournisseur de données dont la valeur apparaît en tant que libellé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
     Nom d’un champ du fournisseur de données dont la valeur apparaît en tant que libellé. Cette propriété est ignorée si la propriété <codeph>labelFunction</codeph> est définie.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Spécifie une fonction de rappel utilisée pour rendre chaque libellé de la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Spécifie une fonction de rappel utilisée pour rendre chaque libellé de la série. Une fonction labelFunction doit présenter la signature suivante :
          <pre>
     function <i>function_name</i>(<i>element</i>:ChartItem, <i>series</i>:Series):String { ... }
     </pre>
     
     <codeph><i>element</i></codeph> correspond à l’élément de graphique rendu. <codeph><i>series</i></codeph> correspond à la série à laquelle appartient l’élément de graphique. La chaîne renvoyée correspond au libellé de l’élément actuel.
          <p>Voici un exemple d’utilisation d’une fonction labelFunction personnalisée :</p>
     <pre>
     private function myLabelFunction(element:ChartItem, series:Series):String {
          var item:ColumnSeriesItem = ColumnSeriesItem(element);
          var ser:ColumnSeries = ColumnSeries(series);
          return(item.item.Country + ":" +"" + ser.yField.toString() +":"+ item.yNumber);
     }
     </pre>
           
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:maxColumnWidth:get"><apiName>maxColumnWidth</apiName><shortdesc>
      Spécifie la largeur des colonnes, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Spécifie la largeur des colonnes, en pixels. La largeur réelle de la colonne correspond soit à la valeur du style, soit à la valeur de la propriété <codeph>columnWidthRatio</codeph>, la plus petite des deux étant prise en compte. Les colonnes regroupées divisent cet espace proportionnellement entre les colonnes de chaque groupe. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:minField:get"><apiName>minField</apiName><shortdesc>
      Spécifie le champ du fournisseur de données qui détermine la position du bas d’une colonne sur l’axe Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Spécifie le champ du fournisseur de données qui détermine la position du bas d’une colonne sur l’axe Y. Si la valeur est <codeph>null</codeph>, le bas des colonnes est placé au niveau de la valeur minimale de la plage (ou de la valeur maximale, si la valeur du champ est négative). La valeur par défaut est <codeph>null</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:offset:get"><apiName>offset</apiName><shortdesc>
      Spécifie dans quelle mesure le centre des colonnes doit être décalé par rapport au centre de l’espace disponible, selon la largeur des catégories.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Spécifie dans quelle mesure le centre des colonnes doit être décalé par rapport au centre de l’espace disponible, selon la largeur des catégories. Si la valeur est 0, les colonnes sont centrées dans l’espace disponible. Définissez cette propriété sur -50 pour centrer la colonne au début de l’espace disponible. En règle générale, vous ne devez pas définir cette propriété directement. Le contrôle ColumnChart gère cette valeur en fonction de sa propriété <codeph>columnWidthRatio</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      Sous-type de données ChartRenderData utilisé par cette série pour stocker toutes les données nécessaires au rendu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Sous-type de données ChartRenderData utilisé par cette série pour stocker toutes les données nécessaires au rendu. Les sous-classes peuvent effectuer un remplacement et renvoyer une classe plus spécialisée si elles doivent stocker des informations supplémentaires pour le rendu.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:sortOnXField:get"><apiName>sortOnXField</apiName><shortdesc> 
      Demande de trier les colonnes de gauche à droite avant le rendu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Demande de trier les colonnes de gauche à droite avant le rendu. Par défaut, la classe ColumnSeries rend les colonnes dans l’ordre dans lequel elles apparaissent dans le fournisseur de données. 
      
      <p>Si vous utilisez la propriété <codeph>xField</codeph> pour déterminer la position de chaque colonne, celles-ci peuvent apparaître dans un autre ordre à l’écran. Les colonnes peuvent être rendues dans n’importe quel ordre. Cependant, certaines colonnes personnalisées peuvent nécessiter que les colonnes soient rendues de gauche à droite.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:stacker:get"><apiName>stacker</apiName><shortdesc>
      Classe StackedSeries associée à cette classe BarSeries.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:StackedSeries</apiValueClassifier></apiValueDef><apiDesc>
      Classe StackedSeries associée à cette classe BarSeries. La propriété stacker gère le comportement d’empilement de la série.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe Y. Utilisez la classe LinearAxis ou CategoryAxis pour définir les propriétés de l’objet verticalAxis en tant que balise enfant en langage MXML, ou pour créer un objet LinearAxis ou CategoryAxis en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:xField:get"><apiName>xField</apiName><shortdesc>
      Spécifie le champ du fournisseur de données qui détermine la position de la colonne sur l’axe X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Spécifie le champ du fournisseur de données qui détermine la position de la colonne sur l’axe X. Si la valeur est <codeph>null</codeph>, Flex rend les colonnes dans l’ordre dans lequel elles apparaissent dans le fournisseur de données. La valeur par défaut est <codeph>null</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:yField:get"><apiName>yField</apiName><shortdesc>
      Spécifie le champ du fournisseur de données qui détermine la position du haut d’une colonne sur l’axe Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Spécifie le champ du fournisseur de données qui détermine la position du haut d’une colonne sur l’axe Y. Si la valeur est <codeph>null</codeph>, la classe ColumnSeries suppose que le fournisseur de données est un tableau de nombres et utilise ces nombres comme valeurs. La valeur par défaut est <codeph>null</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.charts.series:ColumnSeries:stackTotals:set"><apiName>stackTotals</apiName><shortdesc>
      Totaux de pile pour la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      Totaux de pile pour la série.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.series:ColumnSet"><apiName>ColumnSet</apiName><shortdesc>
  ColumnSet est un ensemble de regroupement permettant d’empiler ou de regrouper des séries de colonnes dans un graphique arbitraire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="series"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IColumn</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:StackedSeries</apiBaseClassifier></apiClassifierDef><apiDesc>
  ColumnSet est un ensemble de regroupement permettant d’empiler ou de regrouper des séries de colonnes dans un graphique arbitraire. Une classe ColumnSet encapsule le même comportement de regroupement que celui utilisé dans un contrôle ColumnChart, mais elle peut être utilisée pour assembler des graphiques personnalisés basés sur la classe CartesianChart. Les classes ColumnSet peuvent être utilisées pour regrouper tout type d’élément de graphique implémentant l’interface IColumn. Elles peuvent empiler tout type d’élément de graphique implémentant les interfaces IColumn et IStackable. Comme la classe ColumnSet implémente l’interface IColumn, vous pouvez utiliser des classes ColumnSet pour regrouper d’autres classes ColumnSet afin de créer des graphiques personnalisés plus sophistiqués.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.series:ColumnSet:ColumnSet"><apiName>ColumnSet</apiName><shortdesc>
	 Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	 Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:ColumnSet:protected:buildSubSeries"><apiName>buildSubSeries</apiName><shortdesc> 
	  
      Traite le tableau de la sous-série en vue de l’affichage, si nécessaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
	  
      Traite le tableau de la sous-série en vue de l’affichage, si nécessaire. Cette méthode garantit que toutes les sous-séries sont ajoutées en tant qu’enfants de cet ensemble d’empilement et réalise une personnalisation par série si nécessaire (par exemple, affectation de fournisseurs de données hérités ou de propriétés de regroupement).
      <p>Cette méthode est également chargée de signaler au graphique que la série a changé et que par conséquent, les styles implicites de la série doivent être réaffectés. Cette méthode est appelée automatiquement par l’ensemble d’empilement lorsque cela est nécessaire. Au lieu d’appeler cette méthode directement, envisagez plutôt d’appeler la méthode <codeph>invalidateSeries()</codeph>.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSet:protected:customizeSeries"><apiName>customizeSeries</apiName><shortdesc>
	   
      Applique une personnalisation à une sous-série lors de la construction du comportement d’empilement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>glyph</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IChartElement</apiOperationClassifier><apiDesc>Elément de graphique à personnaliser.
      
      </apiDesc></apiParam><apiParam><apiItemName>i</apiItemName><apiType value="uint"/><apiDesc>Position de la sous-série dans le tableau de séries.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	   
      Applique une personnalisation à une sous-série lors de la construction du comportement d’empilement. Par défaut, cette méthode affecte les fournisseurs de données hérités à la sous-série. Les classes dérivées peuvent remplacer cette méthode pour appliquer une personnalisation plus poussée.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSet:describeData"><apiName>describeData</apiName><shortdesc>
	  
      
      Appelée par la classe DataTransform gouvernante pour obtenir une description des données représentées par cet élément IChartElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Tableau contenant les occurrences DataDescription qui décrivent les données affichées.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>Détermine l’axe dont les descriptions des données doivent être obtenues.
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>Champ de bits indiquant quelles valeurs de l’objet DataDescription sont prises en compte par cet axe. Les implémenteurs peuvent optimiser le calcul en calculant uniquement les champs nécessaires.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      
      Appelée par la classe DataTransform gouvernante pour obtenir une description des données représentées par cet élément IChartElement. Les implémenteurs remplissent et renvoient un tableau d’objets mx.charts.chartClasses.DataDescription pour garantir que leurs données sont correctement prises en compte par les axes générant automatiquement les valeurs à partir des données affichées (par exemple minimum, maximum, interval et unitSize). La plupart des types d’éléments renvoient un tableau contenant une seule description DataDescription. Les agrégats tels que BarSet et ColumnSet peuvent renvoyer plusieurs occurrences DataDescription décrivant les données affichées par leurs sous-éléments. Lorsque cette méthode est appelée, l’implémenteur décrit les données le long de l’axe indiqué par l’argument <codeph>dimension</codeph>. Cette fonction peut être appelée pour chaque axe pris en charge par le graphique conteneur.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSet:protected:formatDataTip"><apiName>formatDataTip</apiName><shortdesc>
	  
      Fournit le texte personnalisé des objets DataTip.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Texte personnalisé de l’objet DataTip. La valeur par défaut est une chaîne vide. Vous devez remplacer cette méthode pour fournir un objet DataTip personnalisé.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>hd</apiItemName><apiOperationClassifier>mx.charts:HitData</apiOperationClassifier><apiDesc>Objet hitData de la pile.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      Fournit le texte personnalisé des objets DataTip. Les ensembles d’empilement remplacent le texte DataTip des sous-séries qu’ils contiennent pour afficher des informations supplémentaires concernant le comportement d’empilement. Les classes dérivées doivent remplacer cette méthode pour définir du texte DataTip personnalisé.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:ColumnSet:columnWidthRatio:get"><apiName>columnWidthRatio</apiName><shortdesc>
	  Spécifie la largeur des colonnes par rapport à la largeur des catégories.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.65
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Spécifie la largeur des colonnes par rapport à la largeur des catégories. La valeur <codeph>1</codeph> utilise l’intégralité de l’espace et la valeur <codeph>.6</codeph> 60 % de l’espace disponible pour la colonne. En règle générale, vous ne devez pas définir cette propriété directement. La largeur réelle de la colonne correspond soit à la valeur de la propriété <codeph>columnWidthRatio</codeph>, soit à la valeur de <codeph>maxColumnWidth</codeph>, la plus petite des deux étant prise en compte.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSet:maxColumnWidth:get"><apiName>maxColumnWidth</apiName><shortdesc>
	  Spécifie la largeur des colonnes, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Spécifie la largeur des colonnes, en pixels. La largeur réelle de la colonne correspond soit à la valeur du style, soit à la valeur de la propriété <codeph>columnWidthRatio</codeph>, la plus petite des deux étant prise en compte. Les colonnes regroupées divisent cet espace proportionnellement entre les colonnes de chaque groupe. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSet:offset:get"><apiName>offset</apiName><shortdesc>
	  Spécifie dans quelle mesure le centre des colonnes doit être décalé par rapport au centre de l’espace disponible, selon la largeur des catégories.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Spécifie dans quelle mesure le centre des colonnes doit être décalé par rapport au centre de l’espace disponible, selon la largeur des catégories. Si la valeur est <codeph>0</codeph>, les colonnes sont centrées dans l’espace disponible. Définissez cette propriété sur <codeph>-50</codeph> pour centrer la colonne au début de l’espace disponible. En règle générale, vous ne devez pas définir cette propriété directement. Le contrôle ColumnChart gère cette valeur en fonction de sa propriété <codeph>columnWidthRatio</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.series:HLOCSeries"><apiName>HLOCSeries</apiName><shortdesc>
  Représente des données financières sous la forme d’une série d’éléments représentant les valeurs supérieure, inférieure et de fermeture d’une série de données, et éventuellement sa valeur d’ouverture.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="style" name="hlocColor"/><styles><style inherit="no" name="stroke" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Définit le style de trait de la série de données. Vous devez spécifier un objet Stroke pour définir le trait. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="openTickStroke" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Spécifie le trait à utiliser pour la graduation d’ouverture si une valeur d’ouverture est spécifiée.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="openTickLength" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="Number">
<description>
  Spécifie la longueur (en pixels) de la graduation d’ouverture si une valeur d’ouverture est spécifiée. Quelle que soit cette valeur, la classe HLOCSeries ne rendra pas la graduation d’ouverture en dehors de la zone affectée à l’élément.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="closeTickStroke" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Spécifie le trait à utiliser pour la graduation de fermeture si une valeur d’ouverture est spécifiée.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="closeTickLength" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="Number">
<description>
  Spécifie la longueur (en pixels) de la graduation de fermeture. Quelle que soit cette valeur, la classe HLOCSeries ne rendra pas la graduation de fermeture en dehors de la zone affectée à l’élément.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:HLOCSeries&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:</p>
  
  <pre>
  &lt;mx:HLOCSeries
    <strong>Styles</strong>
    closeTickLength="<i>No default</i>"
    closeTickStroke="<i>No default</i>"
    openTickLength="<i>No default</i>"
    openTickStroke="<i>No default</i>"
    stroke="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:HLOCSeriesBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Représente des données financières sous la forme d’une série d’éléments représentant les valeurs supérieure, inférieure et de fermeture d’une série de données, et éventuellement sa valeur d’ouverture. Le sommet et la base de la ligne verticale de chaque élément représentent les valeurs supérieure et inférieure du point de données. La graduation orientée vers la droite représente la valeur de fermeture et la graduation orientée vers la gauche représente la valeur d’ouverture, si elle a été spécifiée. 
 
  </apiDesc><example conref="HLOCChartExample.mxml"><swfblock conref="../examples/HLOCChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#HLOCChart"><linktext>mx.charts.HLOCChart</linktext></link></related-links><apiConstructor id="mx.charts.series:HLOCSeries:HLOCSeries"><apiName>HLOCSeries</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts.series:HLOCSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:LineSeries"><apiName>LineSeries</apiName><shortdesc>
  Définit une série de données pour un contrôle LineChart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="radius" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="Number">
<description> 
  Spécifie le rayon (en pixels) des éléments de graphique des points de données. Cette propriété s’applique uniquement si vous spécifiez une fonctionnalité de rendu d’élément en utilisant la propriété <codeph>itemRenderer</codeph>. Vous pouvez spécifier la fonctionnalité de rendu <codeph>itemRenderer</codeph> en langage MXML ou à l’aide de styles.  
  
  </description>
<default>4 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="lineStroke" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description> 
   Définit le trait des segments de ligne réels. La valeur par défaut d’un contrôle LineChart est l’orange (<codeph>0xE48701</codeph>). La couleur par défaut d’un contrôle LineSeries utilisé dans un contrôle CartesianChart est le noir (<codeph>0x000000</codeph>). La valeur par défaut de la largeur est 3.
   
   </description>

<playerversion>AIR 1.1
   </playerversion>
	<prolog><asCustoms><langversion>3.0
   </langversion><productversion>Flex 3
  </productversion></asCustoms></prolog></style><style inherit="no" name="lineSegmentRenderer" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Fabrique représentant la classe utilisée par la série pour représenter les différents segments de ligne de la série. Cette classe est instanciée une fois pour chaque segment de la série. Les classes utilisées comme fonctionnalités de rendu lineSegmentRenderer doivent implémenter les interfaces IFlexDisplayObject, ISimpleStyleClient et IDataRenderer. Une occurrence de la classe mx.charts.series.items.LineSeriesSegment décrivant le segment à rendre est affectée à la propriété <codeph>data</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="segment,step,reverseStep,vertical,horizontal,curve" inherit="no" name="form" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="String">
<description>
  Spécifie le type de ligne du graphique. Valeurs possibles :
  <ul>
    <li><codeph>"curve"</codeph> : trace une courbe entre les points de données.</li>
    
    <li><codeph>"horizontal"</codeph> : trace une ligne verticale uniquement entre la coordonnée X du premier point et la coordonnée X du deuxième point, au niveau de la coordonnée Y de ce deuxième point. L’opération est répétée pour chaque point de données.</li>
    
    <li><codeph>"vertical"</codeph> : trace une ligne verticale uniquement entre la coordonnée Y du premier point et la coordonnée Y du deuxième point, au niveau de la coordonnée X de ce deuxième point. L’opération est répétée pour chaque point de données.</li>
    
    <li><codeph>"segment"</codeph> : trace des lignes sous la forme de segments reliés formant un angle au niveau de chaque point de données de la série.</li>
    
    <li><codeph>"step"</codeph> : trace des lignes sous la forme de segments horizontaux. Une ligne horizontale est tracée à partir du premier point de données, une ligne verticale la relie au second point, et ainsi de suite.</li>
    
    <li><codeph>"reverseStep"</codeph> : trace des lignes sous la forme de segments horizontaux. Une ligne verticale est tracée à partir du premier point de données, une ligne horizontale la relie au second point, et ainsi de suite.</li>
  </ul>
  La valeur par défaut est <codeph>"segment"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="Array">
<description>
  Spécifie un tableau d’objets de remplissage définissant le remplissage de chaque élément de la série. Cette propriété est prioritaire par rapport à la propriété de style <codeph>fill</codeph>. Si une méthode personnalisée est spécifiée par la propriété <codeph>fillFunction</codeph>, elle est prioritaire par rapport à ce tableau. Si vous ne fournissez pas autant d’éléments de tableau qu’il y a d’éléments, Flex reprend la valeur de remplissage à partir du début du tableau.
  
  <p>Pour définir la valeur de cette propriété en utilisant le langage CSS :
   <pre>
    LineSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Pour définir la valeur de cette propriété en utilisant le langage MXML :
   <pre>
    &lt;mx:LineSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:LineSeries>
   </pre>
  </p>
  
  <p>
  Si vous spécifiez la propriété <codeph>fills</codeph> et que vous souhaitez disposer d’un contrôle Legend, vous devez créer manuellement le contrôle Legend et y ajouter des objets LegendItem.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="adjustedRadius" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="Number">
<description>
  Spécifie le nombre de pixels d’augmentation du rayon de l’élément de graphique lorsqu’il est mis en surbrillance ou sélectionné.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Classe utilisée par la série pour le rendu du marqueur de la série dans les légendes associées. Si ce style est <codeph>null</codeph>, la plupart des séries utilisent par défaut leur fonctionnalité de rendu itemRenderer comme habillage de marqueur de légende. Les classes utilisées comme marqueurs de légende doivent implémenter l’interface IFlexDisplayObject et éventuellement les interfaces ISimpleStyleClient et IDataRenderer. Si la classe utilisée comme marqueur de légende implémente l’interface IDataRenderer, la propriété data est affectée à une occurrence LegendData.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Fabrique représentant la classe que la série utilisera pour représenter les différents éléments du graphique. Cette classe est instanciée une fois pour chaque élément du graphique. Les classes utilisées comme fonctionnalités de rendu itemRenderer doivent implémenter les interfaces IFlexDisplayObject, ISimpleStyleClient et IDataRenderer. L’objet chartItem rendu par l’occurrence d’habillage est affecté à la propriété <codeph>data</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Définit le style de trait de la série de données. Vous devez spécifier un objet Stroke pour définir le trait. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Définit le remplissage de la série de données. Vous pouvez spécifier soit un objet implémentant l’interface IFill, soit un nombre représentant une valeur de couleur unie. Vous pouvez également spécifier un remplissage uni à l’aide du langage CSS. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:LineSeries&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:LineSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    interpolateValues="false|true"
    sortOnXField="false|true"
    verticalAxis="<i>No default</i>"
    xField="null"
    yField="null"
 
    <strong>Styles</strong>
    adjustedRadius="2"
    fill="0xFFFFFF"
    fills="<i>IFill; no default</i>"
    form="segment|curve|horizontal|reverseStep|step|vertical"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    lineSegmentRenderer="<i>ShadowLineRenderer</i>"
    lineStroke="Stroke(0xE47801,3)"
    radius="4"
    stroke="<i>IStroke; no default</i>" 
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  Définit une série de données pour un contrôle LineChart. Par défaut, cette classe utilise la classe ShadowLineRenderer. Si vous le souhaitez, vous pouvez définir une fonctionnalité de rendu itemRenderer pour la série de données. La fonctionnalité de rendu itemRenderer doit implémenter l’interface IDataRenderer. 
   </apiDesc><example conref="Line_AreaChartExample.mxml"><swfblock conref="../examples/Line_AreaChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#LineChart"><linktext>mx.charts.LineChart</linktext></link><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links><apiConstructor id="mx.charts.series:LineSeries:LineSeries"><apiName>LineSeries</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:LineSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      Personnalise les occurrences de fonctionnalité de rendu d’élément utilisées pour représenter le graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Nouvelle occurrence de fonctionnalité de rendu d’élément créée.
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>Classe InstanceCache utilisée pour gérer les occurrences de fonctionnalité de rendu.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Personnalise les occurrences de fonctionnalité de rendu d’élément utilisées pour représenter le graphique. Cette méthode est appelée automatiquement chaque fois qu’une nouvelle fonctionnalité de rendu est nécessaire pendant le processus de rendu du graphique. Si vous le souhaitez, vous pouvez remplacer cette méthode pour personnaliser les paramètres.
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:LineSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:LineSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Spécifie une méthode renvoyant le remplissage de l’élément de graphique actuel de la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Spécifie une méthode renvoyant le remplissage de l’élément de graphique actuel de la série. Lorsque cette propriété est définie, la valeur de retour de la fonction de remplissage personnalisée est prioritaire par rapport aux propriétés de style <codeph>fill</codeph> et <codeph>fills</codeph>. Cependant, si la valeur renvoyée est null, les propriétés <codeph>fills</codeph> et <codeph>fill</codeph> sont prises en compte, dans cet ordre.  
     
     <p>La fonction <codeph>fillFunction</codeph> personnalisée présente la signature suivante :
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> est une référence à l’élément de graphique rendu. <codeph>index</codeph> est l’index de l’élément de graphique du cache de la fonction renderData du cache. Il diffère de l’index du fournisseur de données du graphique car il est trié en fonction des valeurs x, y et z. Cette fonction renvoie un objet implémentant l’interface <codeph>IFill</codeph>.
     </p>
      
     <p>L’utilisation d’une fonction <codeph>fillFunction</codeph> personnalisée permet par exemple de renvoyer un remplissage en fonction d’un certain seuil.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:LineSeriesItem = LineSeriesItem(item);
          if (curItem.yNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
       
     <p>
      Si vous spécifiez une fonction de remplissage personnalisée pour la série du graphique et que vous souhaitez disposer d’un contrôle Legend, vous devez créer manuellement le contrôle Legend et y ajouter des objets LegendItem.
      </p>
           
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe X. Utilisez la classe LinearAxis ou CategoryAxis pour définir les propriétés de l’objet horizontalAxis en tant que balise enfant en langage MXML, ou pour créer un objet LinearAxis ou CategoryAxis en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:interpolateValues:get"><apiName>interpolateValues</apiName><shortdesc> 
      Spécifie comment représenter les données manquantes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
     </apiDefaultValue></apiValueDef><apiDesc> 
      Spécifie comment représenter les données manquantes.
           <p>Définissez cette propriété sur <codeph>false</codeph> pour interrompre la ligne au niveau de la valeur manquante. Définissez cette propriété sur <codeph>true</codeph> pour tracer une ligne continue en interpolant la valeur manquante.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      Sous-type d’objet ChartItem utilisé par cette série pour représenter les différents éléments.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Sous-type d’objet ChartItem utilisé par cette série pour représenter les différents éléments. Les sous-classes peuvent effectuer un remplacement et renvoyer une classe plus spécialisée si elles doivent stocker des informations supplémentaires dans les éléments.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:items:get"><apiName>items</apiName><shortdesc>
      
      Obtient tous les éléments présents dans la série après filtrage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Obtient tous les éléments présents dans la série après filtrage.
      <p>Les différentes séries déterminent la liste des éléments à renvoyer.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:protected:lineSegmentType:get"><apiName>lineSegmentType</apiName><shortdesc>
      Classe utilisée par cette série pour stocker toutes les données nécessaires pour représenter un segment de ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Classe utilisée par cette série pour stocker toutes les données nécessaires pour représenter un segment de ligne. Les sous-classes peuvent effectuer un remplacement et renvoyer une classe plus spécialisée si elles doivent stocker des informations supplémentaires pour le rendu.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:radius:get"><apiName>radius</apiName><shortdesc> 
      Spécifie le rayon (en pixels) des éléments de graphique des points de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Spécifie le rayon (en pixels) des éléments de graphique des points de données. Cette propriété s’applique uniquement si vous spécifiez une fonctionnalité de rendu d’élément en utilisant la propriété <codeph>itemRenderer</codeph>. Vous pouvez spécifier la fonctionnalité de rendu <codeph>itemRenderer</codeph> en langage MXML ou à l’aide de styles.  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      Sous-type de données ChartRenderData utilisé par cette série pour stocker toutes les données nécessaires au rendu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Sous-type de données ChartRenderData utilisé par cette série pour stocker toutes les données nécessaires au rendu. Les sous-classes peuvent effectuer un remplacement et renvoyer une classe plus spécialisée si elles doivent stocker des informations supplémentaires pour le rendu.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:sortOnXField:get"><apiName>sortOnXField</apiName><shortdesc> 
      Demande de trier les points de données de la ligne de gauche à droite avant le rendu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Demande de trier les points de données de la ligne de gauche à droite avant le rendu.
           <p>Par défaut, la classe LineSeries rend les points de gauche à droite. Définissez cette propriété sur <codeph>false</codeph> pour que les éléments soient rendus dans l’ordre dans lequel ils apparaissent dans le fournisseur de données.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe Y. Utilisez la classe LinearAxis ou CategoryAxis pour définir les propriétés de l’objet verticalAxis en tant que balise enfant en langage MXML, ou pour créer un objet LinearAxis ou CategoryAxis en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:xField:get"><apiName>xField</apiName><shortdesc>
      Spécifie le champ du fournisseur de données qui détermine la position de chaque point de données sur l’axe X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le champ du fournisseur de données qui détermine la position de chaque point de données sur l’axe X. Si la valeur est <codeph>null</codeph>, les points de données sont rendus dans l’ordre dans lequel ils apparaissent dans le fournisseur de données.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:yField:get"><apiName>yField</apiName><shortdesc>
      Spécifie le champ du fournisseur de données qui détermine la position de chaque point de données sur l’axe Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le champ du fournisseur de données qui détermine la position de chaque point de données sur l’axe Y. Si la valeur est <codeph>null</codeph>, la classe LineSeries suppose que le fournisseur de données est un tableau de nombres et utilise ces nombres comme valeurs. 
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:AreaSeries"><apiName>AreaSeries</apiName><shortdesc>
  Définit une série de données pour un contrôle AreaChart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="radius" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="Number">
<description> 
  Spécifie le rayon (en pixels) des éléments de graphique des points de données. Cette propriété s’applique uniquement si vous spécifiez une propriété <codeph>itemRenderer</codeph>. Vous pouvez spécifier la fonctionnalité de rendu itemRenderer en langage MXML ou à l’aide de styles.  
  
  </description>
<default>4 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="segment,step,reverseStep,vertical,horizontal,curve" inherit="no" name="form" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="String">
<description>
  Spécifie le type de limite de la zone. Valeurs possibles :
  
  <ul>
   <li><codeph>"curve"</codeph> : trace des courbes correspondant aux limites entre les points de données.</li>
  
   <li><codeph>"horizontal"</codeph> : trace une limite uniquement entre la coordonnée X du premier point et la coordonnée X du deuxième point, au niveau de la coordonnée Y de ce deuxième point. L’opération est répétée pour chaque point de données.</li>
  
   <li><codeph>"reverseStep"</codeph> : trace les limites de la zone sous forme de segments horizontaux. Une ligne de limite verticale est tracée à partir du premier point de données, une ligne de limite horizontale la relie au second point, et ainsi de suite.</li>
  
   <li><codeph>"segment"</codeph> : trace les limites de la zone sous la forme de segments reliés formant un angle au niveau de chaque point de données de la série.</li>
  
   <li><codeph>"step"</codeph> : trace les limites de la zone sous forme de segments horizontaux. Une ligne de limite horizontale est tracée à partir du premier point de données, une ligne de limite verticale la relie au second point, et ainsi de suite.</li>
  
   <li><codeph>"vertical"</codeph> : trace la limite uniquement entre la coordonnée Y du premier point et la coordonnée Y du deuxième point, au niveau de la coordonnée X de ce deuxième point. L’opération est répétée pour chaque point de données.</li>
  </ul>
  
  </description>
<default>segment
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="Array">
<description>
  Spécifie un tableau d’objets de remplissage définissant le remplissage de chaque élément de la série. Cette propriété est prioritaire par rapport à la propriété de style <codeph>fill</codeph>. Si une méthode personnalisée est spécifiée par la propriété <codeph>fillFunction</codeph>, elle est prioritaire par rapport à ce tableau. Si vous ne fournissez pas autant d’éléments de tableau qu’il y a d’éléments, Flex reprend la valeur de remplissage à partir du début du tableau.
  
  <p>Pour définir la valeur de cette propriété en utilisant le langage CSS :
   <pre>
    AreaSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Pour définir la valeur de cette propriété en utilisant le langage MXML :
   <pre>
    &lt;mx:AreaSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:AreaSeries>
   </pre>
  </p>
  
  <p>
  Si vous spécifiez la propriété <codeph>fills</codeph> et que vous souhaitez disposer d’un contrôle Legend, vous devez créer manuellement le contrôle Legend et y ajouter des objets LegendItem.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="areaStroke" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description> 
  Définit le style de trait de la zone. Vous devez utiliser un objet Stroke pour définir le trait. Vous pouvez spécifier la fonctionnalité de rendu itemRenderer en langage MXML ou à l’aide de styles.  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="areaRenderer" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Classe utilisée par la série pour représenter la zone remplie sur le graphique. Cette classe est instanciée une fois par série. Les classes utilisées comme fonctionnalités de rendu areaRenderer doivent implémenter les interfaces IFlexDisplayObject, ISimpleStyleClient et IDataRenderer. La classe AreaSeriesRenderData décrivant les données de la zone est affectée à la propriété data.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="areaFill" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description> 
  Définit le remplissage de la zone. Vous pouvez spécifier soit un objet implémentant l’interface IFill, soit un nombre représentant une valeur de couleur unie. Vous pouvez également spécifier un remplissage uni à l’aide du langage CSS.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="adjustedRadius" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="Number">
<description>
  Spécifie le nombre de pixels d’augmentation du rayon de l’élément de graphique lorsqu’il est mis en surbrillance ou sélectionné.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Classe utilisée par la série pour le rendu du marqueur de la série dans les légendes associées. Si ce style est <codeph>null</codeph>, la plupart des séries utilisent par défaut leur fonctionnalité de rendu itemRenderer comme habillage de marqueur de légende. Les classes utilisées comme marqueurs de légende doivent implémenter l’interface IFlexDisplayObject et éventuellement les interfaces ISimpleStyleClient et IDataRenderer. Si la classe utilisée comme marqueur de légende implémente l’interface IDataRenderer, la propriété data est affectée à une occurrence LegendData.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Fabrique représentant la classe que la série utilisera pour représenter les différents éléments du graphique. Cette classe est instanciée une fois pour chaque élément du graphique. Les classes utilisées comme fonctionnalités de rendu itemRenderer doivent implémenter les interfaces IFlexDisplayObject, ISimpleStyleClient et IDataRenderer. L’objet chartItem rendu par l’occurrence d’habillage est affecté à la propriété <codeph>data</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Définit le style de trait de la série de données. Vous devez spécifier un objet Stroke pour définir le trait. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Définit le remplissage de la série de données. Vous pouvez spécifier soit un objet implémentant l’interface IFill, soit un nombre représentant une valeur de couleur unie. Vous pouvez également spécifier un remplissage uni à l’aide du langage CSS. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:AreaSeries&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:AreaSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    minField="null"
    sortOnXField="<i>true</i>"
    stacker="<i>No default</i>"
    stackTotals="<i>No default</i>"
    xField="null"
    verticalAxis="<i>No default</i>"
    yField="null"
 
    <strong>Styles</strong>
    adjustedRadius="2"
    areaFill="<i>IFill</i>"
    areaRenderer="<i>areaRenderer</i>"
    areaStroke="<i>Stroke</i>"
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    form="<i>segment|curve|horizontal|reverseStep|step|vertical</i>"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    radius="4"
    stroke="<i>IStroke; no default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IStackable2</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  Définit une série de données pour un contrôle AreaChart. Par défaut, cette classe utilise la fonctionnalité de rendu d’élément AreaRenderer. Si vous le souhaitez, vous pouvez définir une autre fonctionnalité de rendu itemRenderer pour la série de données. La fonctionnalité de rendu itemRenderer doit implémenter l’interface IDataRenderer. 
  
  </apiDesc><example conref="Line_AreaChartExample.mxml"><swfblock conref="../examples/Line_AreaChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#AreaChart"><linktext>mx.charts.AreaChart</linktext></link></related-links><apiConstructor id="mx.charts.series:AreaSeries:AreaSeries"><apiName>AreaSeries</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:AreaSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      Personnalise les occurrences de fonctionnalité de rendu d’élément utilisées pour représenter le graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Nouvelle occurrence de fonctionnalité de rendu d’élément créée.
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>Classe InstanceCache utilisée pour gérer les occurrences de fonctionnalité de rendu.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Personnalise les occurrences de fonctionnalité de rendu d’élément utilisées pour représenter le graphique. Cette méthode est appelée automatiquement chaque fois qu’une nouvelle fonctionnalité de rendu est nécessaire pendant le processus de rendu du graphique. Si vous le souhaitez, vous pouvez remplacer cette méthode pour personnaliser les paramètres.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      
      Signale à la série que les données sous-jacentes du fournisseur de données ont changé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, cette méthode déclenche l’appel des méthodes de mise à jour.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Signale à la série que les données sous-jacentes du fournisseur de données ont changé. Cette fonction déclenche l’appel des méthodes <codeph>updateData()</codeph>, <codeph>updateMapping()</codeph>, <codeph>updateFilter()</codeph> et <codeph>updateTransform()</codeph> lors du prochain appel de la méthode <codeph>commitProperties()</codeph>. Si des effets de données sont affectés à des éléments du graphique, cette méthode déclenche également les effets d’affichage et de masquage.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:protected:invalidateMapping"><apiName>invalidateMapping</apiName><shortdesc>
      
      Signale à la série que le mappage des données à des valeurs numériques a changé et doit être recalculé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, cette méthode déclenche l’appel des méthodes de mise à jour.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Signale à la série que le mappage des données à des valeurs numériques a changé et doit être recalculé. L’appel de cette fonction déclenche l’appel des méthodes <codeph>updateMapping()</codeph>, <codeph>updateFilter()</codeph> et <codeph>updateTransform()</codeph> lors du prochain appel de la méthode <codeph>commitProperties()</codeph>. Si des effets de données sont affectés à des éléments du graphique, cette méthode déclenche également les effets d’affichage et de masquage.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:stackAll"><apiName>stackAll</apiName><shortdesc>
      
  Empile la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet représentant les valeurs maximale et minimale de la série nouvellement empilée.	 
  
  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>stackedPosXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Contient les valeurs de base d’empilement de la série. Les clés du dictionnaire correspondent aux valeurs x et leurs valeurs aux valeurs x positives.
 
  </apiDesc></apiParam><apiParam><apiItemName>stackedNegXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Contient les valeurs de base d’empilement de la série. Les clés du dictionnaire correspondent aux valeurs x et leurs valeurs aux valeurs y négatives.
  
  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable2</apiOperationClassifier><apiDesc>Elément précédent dans la pile. Par exemple, si l’élément est de même type, vous pouvez utiliser l’accès à cette propriété pour éviter une double opération lors du rendu.
  
  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
  Empile la série. Normalement, une série implémente la méthode <codeph>updateData()</codeph> pour charger ses données à partir du fournisseur de données. Cependant, une série d’empilement réalise certaines opérations spéciales, car ses valeurs ne sont pas nécessairement stockées dans son fournisseur de données. Ses valeurs correspondent à la somme des valeurs stockées dans le fournisseur de données et des valeurs chargées par l’objet empilé.
  <p>Une série d’empilement personnalisée implémente la méthode <codeph>stack()</codeph> en chargeant ses données à partir du fournisseur de données, en les ajoutant aux valeurs de base stockées dans le dictionnaire pour obtenir les valeurs réelles à utiliser pour le rendu, et en remplaçant les valeurs du dictionnaire par les nouvelles valeurs additionnées.</p>
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:stack"><apiName>stack</apiName><shortdesc>
      
	  Empile la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Valeur maximale de la série nouvellement empilée.	 
	  
	  </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>stackedXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Contient les valeurs de base d’empilement de la série. Les clés du dictionnaire correspondent aux valeurs y et leurs valeurs aux valeurs x.
	  
	  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable</apiOperationClassifier><apiDesc>Elément précédent dans la pile. Par exemple, si l’élément est de même type, vous pouvez utiliser l’accès à cette propriété pour éviter une double opération lors du rendu.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Empile la série. Normalement, une série implémente la méthode <codeph>updateData()</codeph> pour charger ses données à partir du fournisseur de données. Cependant, une série d’empilement réalise certaines opérations spéciales, car ses valeurs ne sont pas nécessairement stockées dans son fournisseur de données. Ses valeurs correspondent à la somme des valeurs stockées dans le fournisseur de données et des valeurs chargées par l’objet empilé.
	  <p>Une série d’empilement personnalisée implémente la méthode <codeph>stack()</codeph> en chargeant ses données à partir du fournisseur de données, en les ajoutant aux valeurs de base stockées dans le dictionnaire pour obtenir les valeurs réelles à utiliser pour le rendu, et en remplaçant les valeurs du dictionnaire par les nouvelles valeurs additionnées.</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:AreaSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Spécifie une méthode renvoyant le remplissage de l’élément de graphique actuel de la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Spécifie une méthode renvoyant le remplissage de l’élément de graphique actuel de la série. Lorsque cette propriété est définie, la valeur de retour de la fonction de remplissage personnalisée est prioritaire par rapport aux propriétés de style <codeph>fill</codeph> et <codeph>fills</codeph>. Cependant, si la valeur renvoyée est null, les propriétés <codeph>fills</codeph> et <codeph>fill</codeph> sont prises en compte, dans cet ordre.
       
     <p>La fonction <codeph>fillFunction</codeph> personnalisée présente la signature suivante :
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> est une référence à l’élément de graphique rendu. <codeph>index</codeph> est l’index de l’élément de graphique du cache de la fonction renderData du cache. Il diffère de l’index du fournisseur de données du graphique car il est trié en fonction des valeurs x, y et z. Cette fonction renvoie un objet implémentant l’interface <codeph>IFill</codeph>.
     </p>
      
     <p>L’utilisation d’une fonction <codeph>fillFunction</codeph> personnalisée permet par exemple de renvoyer un remplissage en fonction d’un certain seuil.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill 
     {
          var curItem:AreaSeriesItem = AreaSeriesItem(item);
          if (curItem.yNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
          <p>
      Si vous spécifiez une fonction de remplissage personnalisée pour la série du graphique et que vous souhaitez disposer d’un contrôle Legend, vous devez créer manuellement le contrôle Legend et y ajouter des objets LegendItem.
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe X. Utilisez la classe LinearAxis ou CategoryAxis pour définir les propriétés de l’objet horizontalAxis en tant que balise enfant en langage MXML, ou pour créer un objet LinearAxis ou CategoryAxis en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      Sous-type d’objet ChartItem utilisé par cette série pour représenter les différents éléments.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Sous-type d’objet ChartItem utilisé par cette série pour représenter les différents éléments. Les sous-classes peuvent effectuer un remplacement et renvoyer une classe plus spécialisée si elles doivent stocker des informations supplémentaires dans les éléments.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:items:get"><apiName>items</apiName><shortdesc>
      
      Obtient tous les éléments présents dans la série après filtrage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Obtient tous les éléments présents dans la série après filtrage.
      <p>Les différentes séries déterminent la liste des éléments à renvoyer.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:minField:get"><apiName>minField</apiName><shortdesc>
      Spécifie le champ du fournisseur dataProvider qui détermine la limite basse de la zone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le champ du fournisseur dataProvider qui détermine la limite basse de la zone. Si la valeur est <codeph>null</codeph>, le bas de la zone est placé au niveau de la valeur minimale de la plage (ou de la valeur maximale, si la valeur du champ est négative). 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      Sous-type de données ChartRenderData utilisé par cette série pour stocker toutes les données nécessaires au rendu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Sous-type de données ChartRenderData utilisé par cette série pour stocker toutes les données nécessaires au rendu. Les sous-classes peuvent effectuer un remplacement et renvoyer une classe plus spécialisée si elles doivent stocker des informations supplémentaires pour le rendu.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:sortOnXField:get"><apiName>sortOnXField</apiName><shortdesc> 
      Demande de trier les points de données de la ligne de gauche à droite avant le rendu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Demande de trier les points de données de la ligne de gauche à droite avant le rendu.
           <p>Par défaut, la classe LineSeries rend les points de gauche à droite. Définissez cette propriété sur <codeph>false</codeph> pour que les éléments soient rendus dans l’ordre dans lequel ils apparaissent dans le fournisseur de données.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:stacker:get"><apiName>stacker</apiName><shortdesc>
      Classe StackedSeries associée à cette classe AreaSeries.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:StackedSeries</apiValueClassifier></apiValueDef><apiDesc>
      Classe StackedSeries associée à cette classe AreaSeries. La propriété stacker gère le comportement d’empilement de la série.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe Y. Utilisez la classe LinearAxis ou CategoryAxis pour définir les propriétés de l’objet verticalAxis en tant que balise enfant en langage MXML, ou pour créer un objet LinearAxis ou CategoryAxis en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:xField:get"><apiName>xField</apiName><shortdesc>
      Spécifie le champ du fournisseur de données qui détermine la position des points de données sur l’axe horizontal.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le champ du fournisseur de données qui détermine la position des points de données sur l’axe horizontal. Si la valeur est <codeph>null</codeph>, les points de données sont rendus dans l’ordre dans lequel ils apparaissent dans le fournisseur de données.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:yField:get"><apiName>yField</apiName><shortdesc>
      Spécifie le champ du fournisseur de données qui détermine la position du point de données sur l’axe vertical.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le champ du fournisseur de données qui détermine la position du point de données sur l’axe vertical. Si la valeur est <codeph>null</codeph>, la classe AreaSeries suppose que le fournisseur dataProvider est un tableau de nombres et utilise ces nombres comme valeurs pour les points de données. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.charts.series:AreaSeries:stackTotals:set"><apiName>stackTotals</apiName><shortdesc>
      Totaux de pile pour la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      Totaux de pile pour la série.
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.series:PieSeries"><apiName>PieSeries</apiName><shortdesc>
  La classe PieSeries définit l’éditeur la série de données d’un contrôle PieChart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="stroke" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Définit le style de trait de la série de données. Vous devez spécifier un objet Stroke pour définir le trait. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="clockwise,counterClockwise" inherit="no" name="renderDirection" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Définit la direction dans laquelle la série est rendue. Valeurs valides :
  <ul>
    <li><codeph>"clockwise"</codeph> : dessine les secteurs dans le sens des aiguilles d’une montre.</li>
  
    <li><codeph>"counterClockwise"</codeph> : dessine les secteurs dans le sens inverse des aiguilles d’une montre.</li>
  </ul>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="radialStroke" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Spécifie le style de trait utilisé pour tracer la bordure entre les secteurs du graphique circulaire.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,outside,callout,inside,insideWithCallout" inherit="no" name="labelPosition" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description> 
  Spécifie comment rendre les libellés de valeur. Vous pouvez définir cette propriété en langage MXML ou à l’aide de styles. Valeurs valides :
  <ul>
    <li><codeph>"none"</codeph> : aucun libellé n’est tracé.</li>
  
    <li><codeph>"outside"</codeph> : les libellés sont tracés autour de la limite du graphique circulaire.</li>
  
    <li><codeph>"callout"</codeph> : les libellés sont tracés sous forme de deux colonnes placées de part et d’autre du graphique circulaire. Si nécessaire, le graphique est réduit pour laisser la place aux libellés (voir <codeph>maxLabelRadius</codeph>). Trace des lignes de renvoi entre chaque libellé et le secteur associé. Les libellés sont éventuellement réduits, en fonction de l’espace disponible.</li>
  
    <li><codeph>"inside"</codeph> : les libellés sont tracés dans le graphique et centrés à environ sept dixièmes de la longueur de l’arc de cercle de chaque secteur. Les libellés sont réduits pour éviter qu’ils ne se chevauchent. Si des libellés sont réduits en deçà de la valeur de la propriété <codeph>insideLabelSizeLimitSize</codeph>, ils sont supprimés. Lorsque deux libellés se chevauchent, Flex donne la priorité aux libellés désignant les secteurs les plus grands.</li>
  
    <li><codeph>"insideWithCallout"</codeph> : les libellés sont tracés dans le graphique circulaire, mais si certains d’entre eux sont réduits à tel point qu’ils ne sont plus lisibles, Flex les convertit en légendes.</li>
  </ul>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="insideLabelSizeLimit" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Spécifie le seuil de taille de police (en points), en deçà duquel les libellés présents dans le graphique sont considérés comme illisibles. En deçà de ce seuil, Flex supprime les libellés ou les rend sous forme de légendes, en fonction de la propriété <codeph>labelPosition</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="innerRadius" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Valeur comprise entre 0 et 1, spécifiant la distance entre le centre de la série et le bord intérieur des secteurs rendus, sous forme de pourcentage du rayon total affecté à la série. Cette propriété est affectée directement à la série.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Array">
<description>
  Spécifie un tableau d’objets de remplissage utilisé pour rendre chaque secteur du contrôle PieChart. Si vous ne fournissez pas autant d’éléments de tableau qu’il y a de secteurs, Flex reprend la valeur de remplissage à partir du début du tableau. Si vous spécifiez une méthode en utilisant la propriété <codeph>fillFunction</codeph>, les valeurs définies par cette méthode sont prioritaires par rapport à celles du tableau.
  
  <p>Pour définir la valeur de cette propriété en utilisant le langage CSS :
   <pre>
    PieSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Pour définir la valeur de cette propriété en utilisant le langage MXML :
   <pre>
    &lt;mx:PieSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:PieSeries>
   </pre>
  </p>
  
  <p>
  Si vous spécifiez la propriété <codeph>fills</codeph> et que vous souhaitez disposer d’un contrôle Legend, vous devez créer manuellement le contrôle Legend et y ajouter des objets LegendItem.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="calloutStroke" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Spécifie le style de trait utilisé pour tracer les lignes de légende.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="calloutGap" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Spécifie le nombre de pixels d’espace à insérer entre le bord du graphique circulaire et les libellés lors du rendu des légendes.
  
  </description>
<default>10
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur (en pixels).
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut pour la plupart des contrôles est <codeph>left</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Pour ces composants, cette propriété est reconnue uniquement lorsque la valeur de la propriété <codeph>labelPlacement</codeph> est <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est pris en charge uniquement pour les polices FlashType incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en gras. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"bold"</codeph>. Pour LegendItem, la valeur par défaut est <codeph>"bold"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. La valeur par défaut est 10 pour tous les contrôles, à l’exception de ColorPicker. Pour le contrôle ColorPicker, la valeur par défaut est 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>. Cette valeur active la fonctionnalité de rendu FlashType si vous utilisez une police incorporée FlashType. Définissez cette propriété sur <codeph>"normal"</codeph> pour désactiver la fonctionnalité de rendu FlashType.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="uint">
<description>
  Couleur du texte du composant, libellé du composant inclus.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Classe utilisée par la série pour le rendu du marqueur de la série dans les légendes associées. Si ce style est <codeph>null</codeph>, la plupart des séries utilisent par défaut leur fonctionnalité de rendu itemRenderer comme habillage de marqueur de légende. Les classes utilisées comme marqueurs de légende doivent implémenter l’interface IFlexDisplayObject et éventuellement les interfaces ISimpleStyleClient et IDataRenderer. Si la classe utilisée comme marqueur de légende implémente l’interface IDataRenderer, la propriété data est affectée à une occurrence LegendData.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Fabrique représentant la classe que la série utilisera pour représenter les différents éléments du graphique. Cette classe est instanciée une fois pour chaque élément du graphique. Les classes utilisées comme fonctionnalités de rendu itemRenderer doivent implémenter les interfaces IFlexDisplayObject, ISimpleStyleClient et IDataRenderer. L’objet chartItem rendu par l’occurrence d’habillage est affecté à la propriété <codeph>data</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:PieSeries&gt;</code> tag inherits all the properties
  of its parent classes, and the following properties:</p>
  
  <pre>
  &lt;mx:PieSeries
    <strong>Properties</strong>
    angularAxis=""
    explodeRadius="0"
    field="null"
    fillFunction="<i>Internal fill function</i>"
    itemType="<i>No default</i>"
    labelFunction="<i>No default</i>"
    labelField="<i>No default</i>"
    maxLabelRadius="0.6" 
    nameField="null"
    outerRadius="1"
    perWedgeExplodeRadius="<i>Array, no default</i>"
    renderDataType="<i>No default</i>"
    reserveExplodeRadius="0"
    startAngle="0"
 
    <strong>Styles</strong>
    calloutGap="10"
    calloutStroke="<i>IStroke; no default</i>"
    fills="<i>IFill; no default</i>"
    fontSize="10"
    innerRadius="0"
    insideLabelSizeLimit="9"
    itemRenderer="<i>No default</i>"
    labelPosition="none|callout|inside|insideWithCallout|outside"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    radialStroke="<i>IStroke; no default</i>"
    renderDirection="clockwise|counterClockwise"
    stroke="<i>IStroke; no default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe PieSeries définit l’éditeur la série de données d’un contrôle PieChart. La fonctionnalité de rendu d’élément par défaut est la classe WedgeItemRenderer. Si vous le souhaitez, vous pouvez définir une fonctionnalité de rendu itemRenderer pour la série de données. La fonctionnalité de rendu itemRenderer doit implémenter l’interface IDataRenderer.
   </apiDesc><example conref="PieChartExample.mxml"><swfblock conref="../examples/PieChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#PieChart"><linktext>mx.charts.PieChart</linktext></link></related-links><apiConstructor id="mx.charts.series:PieSeries:PieSeries"><apiName>PieSeries</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:PieSeries:beginInterpolation"><apiName>beginInterpolation</apiName><shortdesc>
      
      Appelée par l’effet SeriesInterpolate pour initier un effet d’interpolation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Données dont la série a besoin pour réaliser l’interpolation.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>sourceRenderData</apiItemName><apiType value="Object"/><apiDesc>Données source entre lesquelles la série doit réaliser l’interpolation.
     
      </apiDesc></apiParam><apiParam><apiItemName>destRenderData</apiItemName><apiType value="Object"/><apiDesc>Données de destination entre lesquelles la série doit réaliser l’interpolation.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Appelée par l’effet SeriesInterpolate pour initier un effet d’interpolation. L’effet transmet les données source et les données de destination pour que la série puisse réaliser une interpolation entre ces données. L’effet transmet la valeur de retour de cette méthode de façon répétée à la méthode <codeph>interpolate()</codeph> de la série pour réaliser l’animation pendant toute la durée de l’effet. La série calcule les données nécessaires pour réaliser l’interpolation et les renvoie dans cette méthode.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
	  
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.series:PieSeries:dataToLocal"><apiName>dataToLocal</apiName><shortdesc>
      
      
      Convertit un tuple de valeurs de données en coordonnée x-y à l’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Coordonnées relatives au graphique.
      
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>dataValues</apiItemName><apiType value="restParam"/><apiDesc>Valeurs de données à convertir en coordonnées.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      Convertit un tuple de valeurs de données en coordonnée x-y à l’écran. Appelez cette fonction pour transformer des données à l’écran en utilisant la même transformation que pour des éléments individuels. Par exemple, si vous souhaitez créer une surbrillance personnalisée pour une région de données d’un graphique, vous pouvez utiliser cette fonction pour déterminer les coordonnées à l’écran de la plage de valeurs à prendre en compte.
      
      <p>Pour les éléments de graphique Cartesian, deux valeurs sont en général transmises. La première valeur correspond à l’axe horizontal et la deuxième à l’axe vertical.</p>
      
      <p>Dans le cas de graphiques polaires, la première valeur correspond à l’axe angulaire et la deuxième à l’axe radial.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:getElementBounds"><apiName>getElementBounds</apiName><shortdesc>
      
      Remplit les propriétés elementBounds, bounds et visibleBounds d’une structure renderData générée par la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderData</apiItemName><apiType value="Object"/><apiDesc>Structure générée par la série.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Remplit les propriétés <codeph>elementBounds</codeph>, <codeph>bounds</codeph> et <codeph>visibleBounds</codeph> d’une structure renderData générée par la série. Les classes d’effet appellent cette méthode pour remplir ces champs utilisés pour l’implémentation de différents types d’effets. Les classes dérivées doivent implémenter cette méthode pour générer les limites des éléments de la série uniquement lorsque cela est nécessaire.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:protected:getMissingInterpolationValues"><apiName>getMissingInterpolationValues</apiName><shortdesc> 
      
      Remplit les valeurs manquantes dans une structure d’interpolation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sourceProps</apiItemName><apiType value="Object"/><apiDesc>Objet contenant les valeurs source interpolées pour un élément spécifique. A la sortie de cette méthode, toutes les propriétés de l’objet doivent être associées à des valeurs autres que <codeph>NaN</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>srcCache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’éléments de graphique source interpolés.
     
      </apiDesc></apiParam><apiParam><apiItemName>destProps</apiItemName><apiType value="Object"/><apiDesc>Objet contenant les valeurs de destination interpolées pour un élément spécifique. A la sortie de cette méthode, toutes les propriétés de l’objet doivent être associées à des valeurs autres que <codeph>NaN</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>destCache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’éléments de graphique de destination interpolés.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index de l’élément mis en cache.  
     
      </apiDesc></apiParam><apiParam><apiItemName>customData</apiItemName><apiType value="Object"/><apiDesc>Données transmises par la série à la méthode <codeph>initializeInterpolationData()</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      
      Remplit les valeurs manquantes dans une structure d’interpolation. Lorsqu’une série appelle la méthode <codeph>initializeInterpolationData()</codeph>, elle transmet des tableaux de valeurs source et de valeurs de destination pour l’interpolation. Si l’un ou l’autre de ces tableaux est incomplet, la série doit fournir des valeurs d’espace réservé adaptées pour l’interpolation. La manière dont ces valeurs d’espace réservé sont déterminées dépend du type de série. Les extendeurs de série doivent remplacer cette méthode pour fournir ces valeurs d’espace réservé.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:interpolate"><apiName>interpolate</apiName><shortdesc>
      
      Appelée par l’effet SeriesInterpolate pour progresser dans l’interpolation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>interpolationValues</apiItemName><apiType value="Array"/><apiDesc>Tableau de nombres compris entre 0 et 1, où le <i>n</i>ième nombre indique le pourcentage d’interpolation de la <i>n</i>ième valeur de la série de données entre les valeurs de début et de fin.
     
      </apiDesc></apiParam><apiParam><apiItemName>interpolationData</apiItemName><apiType value="Object"/><apiDesc>Données renvoyées par la méthode <codeph>beginInterpolation()</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Appelée par l’effet SeriesInterpolate pour progresser dans l’interpolation. L’effet appelle cette méthode une fois par image, jusqu’à la fin de l’interpolation. La série doit utiliser les paramètres pour rendre les valeurs interpolées. Par défaut, la série suppose que <codeph>interpolationData</codeph> est une structure de données renvoyée par la méthode <codeph>initializeInterpolationData()</codeph> et la transmet à la méthode <codeph>applyInterpolation()</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:localToData"><apiName>localToData</apiName><shortdesc>
      
      
      Convertit une coordonnée à l’écran en un tuple de valeurs de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Tuple de valeurs de données.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>v</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Point à convertir.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      Convertit une coordonnée à l’écran en un tuple de valeurs de données. Appelez cette fonction pour déterminer quelles sont les valeurs de données représentées par un point précis à l’écran.
      <p>Les différents types de graphiques déterminent la manière dont cette transformation est réalisée. Le point doit être relatif à l’espace de coordonnées du graphique.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:PieSeries:maxLabelRadius"><apiName>maxLabelRadius</apiName><shortdesc>
      Rayon maximal de l’objet PieSeries pouvant être alloué aux libellés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0.6</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Rayon maximal de l’objet PieSeries pouvant être alloué aux libellés. Cette valeur est prise en compte uniquement lorsque la série rend des libellés de légende.
      
      <p>Lors du rendu de libellés de légende, la classe PieSeries réduit le rayon des secteurs pour que les libellés puissent être placés de part et d’autre. Une fois que l’espace alloué aux libellés atteint la limite définie, la série commence à réduire la taille des libellés de façon à rester dans les limites de taille.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:angularAxis:get"><apiName>angularAxis</apiName><shortdesc>
      Objet d’axe utilisé pour mapper des valeurs de données à un angle compris entre 0 et 2 PI.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Objet d’axe utilisé pour mapper des valeurs de données à un angle compris entre 0 et 2 PI. Par défaut, il s’agit d’un axe linéaire dont la propriété <codeph>autoAdjust</codeph> est définie sur <codeph>false</codeph>. Par conséquent, les valeurs des données sont mappées de façon uniforme autour du graphique.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:explodeRadius:get"><apiName>explodeRadius</apiName><shortdesc>
      Valeur comprise entre 0 et 1, spécifiant la distance entre le centre du graphique et l’extrémité des secteurs de la série du graphique circulaire, sous forme de pourcentage du rayon total.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Valeur comprise entre 0 et 1, spécifiant la distance entre le centre du graphique et l’extrémité des secteurs de la série du graphique circulaire, sous forme de pourcentage du rayon total. 
      
      <p>Cette valeur étend tous les secteurs de la série du graphique circulaire de façon uniforme. Vous pouvez définir la valeur pour les différents secteurs par le biais de la propriété <codeph>perWedgeExplodeRadius</codeph>.</p>
      
      <p>Le rayon de développement de chaque secteur correspond à la somme de la valeur de la propriété <codeph>explodeRadius</codeph> et de sa valeur dans le tableau <codeph>perWedgeExplodeRadius</codeph>.</p>
      
      <p>Pour faire en sorte que la série du graphique circulaire reste dans les limites du graphique conteneur tout en étendant les secteurs, la série peut réduire le rayon total du graphique. Si vous étendez de manière dynamique des secteurs à l’exécution, le rayon total du graphique circulaire est réduit. Pour éviter cette situation, vous pouvez en quelque sorte « réserver » l’espace et réduire initialement le rayon total en attribuant à la propriété <codeph>reserveExplodeRadius</codeph> la valeur d’extension maximale du rayon que vous avez l’intention de définir à l’exécution.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:field:get"><apiName>field</apiName><shortdesc>
      Spécifie le champ du fournisseur de données qui détermine les données de chaque secteur du contrôle PieChart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le champ du fournisseur de données qui détermine les données de chaque secteur du contrôle PieChart.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Spécifie une méthode renvoyant le remplissage de l’élément de graphique actuel de la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Spécifie une méthode renvoyant le remplissage de l’élément de graphique actuel de la série. Lorsque cette propriété est définie, la valeur de retour de la fonction de remplissage personnalisée est prioritaire par rapport à la propriété de style <codeph>fills</codeph>. Cependant, si la valeur renvoyée est null, la propriété <codeph>fills</codeph> est prise en compte.
     
     <p>La fonction <codeph>fillFunction</codeph> personnalisée présente la signature suivante :
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> est une référence à l’élément de graphique rendu. <codeph>index</codeph> est l’index de l’élément de graphique du cache de la fonction renderData du cache. Il diffère de l’index du fournisseur de données du graphique car il est trié en fonction des valeurs x, y et z. Cette fonction renvoie un objet implémentant l’interface <codeph>IFill</codeph>.
     </p>
      
     <p>L’utilisation d’une fonction <codeph>fillFunction</codeph> personnalisée permet par exemple de renvoyer un remplissage en fonction d’un certain seuil.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:PieSeriesItem = PieSeriesItem(item);
          if (curItem.number > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
       
     <p>
      Si vous spécifiez une fonction de remplissage personnalisée pour la série du graphique et que vous souhaitez disposer d’un contrôle Legend, vous devez créer manuellement le contrôle Legend et y ajouter des objets LegendItem.
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      Sous-type d’objet ChartItem utilisé par cette série pour représenter les différents éléments.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Sous-type d’objet ChartItem utilisé par cette série pour représenter les différents éléments. Les sous-classes peuvent effectuer un remplacement et renvoyer une classe plus spécialisée si elles doivent stocker des informations supplémentaires dans les éléments.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:items:get"><apiName>items</apiName><shortdesc>
      
      Obtient tous les éléments présents dans la série après filtrage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Obtient tous les éléments présents dans la série après filtrage.
      <p>Les différentes séries déterminent la liste des éléments à renvoyer.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:labelField:get"><apiName>labelField</apiName><shortdesc>
     Nom d’un champ du fournisseur de données dont la valeur apparaît en tant que libellé. Cette propriété est ignorée si une valeur labelFunction est spécifiée.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
     Nom d’un champ du fournisseur de données dont la valeur apparaît en tant que libellé. Cette propriété est ignorée si une valeur labelFunction est spécifiée.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Spécifie une fonction de rappel utilisée pour rendre chaque libellé de la série PieSeries.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Spécifie une fonction de rappel utilisée pour rendre chaque libellé de la série PieSeries. La fonction de rappel utilise le format suivant :
      <pre>
      <i>function_name</i>(<i>data</i>:Object, <i>field</i>:String, <i>index</i>:Number, <i>percentValue</i>:Number):String { ... }
      </pre>
     
      L’objet <codeph>data</codeph> est l’élément dataProvider rendu. La chaîne <codeph>field</codeph> correspond au nom du champ dans les données rendues. Le nombre <codeph>index</codeph> est l’index du fournisseur dataProvider d’origine de l’élément rendu. Le nombre <codeph>percent</codeph> correspond au pourcentage du total représenté par cet élément. Cette fonction renvoie une chaîne correspondant au libellé de cet élément.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:nameField:get"><apiName>nameField</apiName><shortdesc>
      Spécifie le champ du fournisseur de données qui détermine le nom de chaque secteur du contrôle PieChart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le champ du fournisseur de données qui détermine le nom de chaque secteur du contrôle PieChart.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:outerRadius:get"><apiName>outerRadius</apiName><shortdesc>
      Pourcentage de l’espace total disponible pour la série PieSeries, à utiliser lors du rendu du contenu de la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Pourcentage de l’espace total disponible pour la série PieSeries, à utiliser lors du rendu du contenu de la série. Cette valeur est gérée par le graphique conteneur et ne doit pas être affectée directement.
      <p>Cette valeur est un nombre compris entre 0 et 1.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:perWedgeExplodeRadius:get"><apiName>perWedgeExplodeRadius</apiName><shortdesc>
      Tableau de nombres compris entre 0 et 1, spécifiant la distance entre le centre du graphique et l’extrémité des secteurs de la série du graphique circulaire, sous forme de pourcentage du rayon total.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau de nombres compris entre 0 et 1, spécifiant la distance entre le centre du graphique et l’extrémité des secteurs de la série du graphique circulaire, sous forme de pourcentage du rayon total. 
      
      <p>La <i>n</i>ième valeur dans ce tableau correspond au <i>n</i>ième secteur du graphique circulaire. Par exemple, pour étendre le troisième secteur jusqu’à mi-chemin, affectez la valeur <codeph>perWedgeExplodeRadius = [ 0, 0, 50];</codeph>.</p>
      
      <p>Dans le tableau, la valeur <codeph>null</codeph> et les valeurs manquantes sont considérées comme étant égales à 0.</p>
      
      <p>Pour faire en sorte que la série du graphique circulaire reste dans les limites du graphique conteneur tout en étendant les secteurs, la série peut réduire le rayon total du graphique.</p>
           
      <p>Si vous étendez de manière dynamique des secteurs à l’exécution, le rayon total du graphique circulaire est réduit. Pour éviter cette situation, vous pouvez en quelque sorte « réserver » l’espace et réduire initialement le rayon total en attribuant à la propriété <codeph>reserveExplodeRadius</codeph> la valeur d’extension maximale du rayon que vous avez l’intention de définir à l’exécution.</p>
      
      <p>La valeur d’un secteur dans le tableau <codeph>perWedgeExplodeRadius</codeph> est ajoutée à la valeur de la propriété <codeph>explodeRadius</codeph> de la série, pour calculer le rayon total d’extension d’un secteur.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      Sous-type de données ChartRenderData utilisé par cette série pour stocker toutes les données nécessaires au rendu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Sous-type de données ChartRenderData utilisé par cette série pour stocker toutes les données nécessaires au rendu. Les sous-classes peuvent effectuer un remplacement et renvoyer une classe plus spécialisée si elles doivent stocker des informations supplémentaires pour le rendu.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:reserveExplodeRadius:get"><apiName>reserveExplodeRadius</apiName><shortdesc>
      Nombre compris entre 0 et 1, spécifiant la proportion du rayon total de la série du graphique circulaire à réserver, en vue de l’extension des secteurs à l’exécution.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Nombre compris entre 0 et 1, spécifiant la proportion du rayon total de la série du graphique circulaire à réserver, en vue de l’extension des secteurs à l’exécution. Lorsqu’un secteur de graphique circulaire est étendu, la série doit réduire le rayon total du graphique, de sorte qu’il ne dépasse pas les limites du graphique conteneur. Ainsi, si un développeur modifie la valeur d’extension d’un secteur à l’exécution, au lieu d’étendre un seul secteur, ceci peut provoquer la réduction de tous les secteurs. Pour éviter cette situation, définissez la propriété <codeph>reserveExplodeRadius</codeph> sur la valeur maximale que vous comptez utiliser pour l’extension des secteurs à l’exécution.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:startAngle:get"><apiName>startAngle</apiName><shortdesc>
      Spécifie l’angle de départ du premier secteur du contrôle PieChart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Spécifie l’angle de départ du premier secteur du contrôle PieChart. La valeur par défaut est 0. Dans ce cas, le premier secteur est placé à l’horizontale, sur le côté droit du contrôle PieChart.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:BarSeries"><apiName>BarSeries</apiName><shortdesc>
  Définit une série de données pour un contrôle BarChart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="labelSizeLimit" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  Spécifie le seuil de taille de police (en points), en deçà duquel les libellés sont considérés comme illisibles. En deçà de ce seuil, Flex tronque le libellé.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,outside,inside" inherit="no" name="labelPosition" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
 Détermine la position des libellés. Les valeurs possibles sont <codeph>"none"</codeph>, <codeph>"outside"</codeph> et <codeph>"inside"</codeph>.
 
 </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="labelClass" owner="mx.charts.series:BarSeries" playerVersion="Flash10.2" type="Class">
<description>
  La classe utilisée par ce composant pour effectuer le rendu des étiquettes.
   <p>Elle peut être définie sur la classe mx.controls.Label ou la classe spark.components.Label.</p>
   </description>
<default>spark.components.Label
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="labelAlign" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
 Détermine l’alignement du libellé. Cette valeur est prise en compte uniquement lorsque la valeur de <codeph>labelPosition</codeph> est <codeph>inside</codeph>. Les valeurs valides sont <codeph>center</codeph>, <codeph>left</codeph> et <codeph>right</codeph>.
 
 </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Array">
<description>
  Spécifie un tableau d’objets de remplissage définissant le remplissage de chaque élément de la série. Cette propriété est prioritaire par rapport à la propriété de style <codeph>fill</codeph>. Si une méthode personnalisée est spécifiée par la propriété <codeph>fillFunction</codeph>, elle est prioritaire par rapport à ce tableau. Si vous ne fournissez pas autant d’éléments de tableau qu’il y a d’éléments, Flex reprend la valeur de remplissage à partir du début du tableau.
  
  <p>Pour définir la valeur de cette propriété en utilisant le langage CSS :
   <pre>
    BarSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Pour définir la valeur de cette propriété en utilisant le langage MXML :
   <pre>
    &lt;mx:BarSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:BarSeries>
   </pre>
  </p>
  
  <p>
  Si vous spécifiez la propriété <codeph>fills</codeph> et que vous souhaitez disposer d’un contrôle Legend, vous devez créer manuellement le contrôle Legend et y ajouter des objets LegendItem.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur (en pixels).
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut pour la plupart des contrôles est <codeph>left</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Pour ces composants, cette propriété est reconnue uniquement lorsque la valeur de la propriété <codeph>labelPlacement</codeph> est <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est pris en charge uniquement pour les polices FlashType incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en gras. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"bold"</codeph>. Pour LegendItem, la valeur par défaut est <codeph>"bold"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. La valeur par défaut est 10 pour tous les contrôles, à l’exception de ColorPicker. Pour le contrôle ColorPicker, la valeur par défaut est 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>. Cette valeur active la fonctionnalité de rendu FlashType si vous utilisez une police incorporée FlashType. Définissez cette propriété sur <codeph>"normal"</codeph> pour désactiver la fonctionnalité de rendu FlashType.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="uint">
<description>
  Couleur du texte du composant, libellé du composant inclus.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Classe utilisée par la série pour le rendu du marqueur de la série dans les légendes associées. Si ce style est <codeph>null</codeph>, la plupart des séries utilisent par défaut leur fonctionnalité de rendu itemRenderer comme habillage de marqueur de légende. Les classes utilisées comme marqueurs de légende doivent implémenter l’interface IFlexDisplayObject et éventuellement les interfaces ISimpleStyleClient et IDataRenderer. Si la classe utilisée comme marqueur de légende implémente l’interface IDataRenderer, la propriété data est affectée à une occurrence LegendData.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Fabrique représentant la classe que la série utilisera pour représenter les différents éléments du graphique. Cette classe est instanciée une fois pour chaque élément du graphique. Les classes utilisées comme fonctionnalités de rendu itemRenderer doivent implémenter les interfaces IFlexDisplayObject, ISimpleStyleClient et IDataRenderer. L’objet chartItem rendu par l’occurrence d’habillage est affecté à la propriété <codeph>data</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Définit le style de trait de la série de données. Vous devez spécifier un objet Stroke pour définir le trait. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Définit le remplissage de la série de données. Vous pouvez spécifier soit un objet implémentant l’interface IFill, soit un nombre représentant une valeur de couleur unie. Vous pouvez également spécifier un remplissage uni à l’aide du langage CSS. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:BarSeries&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:BarSeries
    <strong>Properties</strong>
    barWidthRatio=".65"
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    labelField="<i>No default</i>"
    labelFunction="<i>No default</i>"
    maxBarWidth="<i>No default</i>"
    minField="null"
    offset="<i>No default</i>"
    stacker="<i>No default</i>"
    stackTotals="<i>No default</i>"
    verticalAxis="<i>No default</i>" 
    xField="null"
    yField="null"
  
    <strong>Styles</strong>
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    fontFamily="Verdana"
    fontSize="10"
    fontStyle="italic|normal"
    fontWeight="bold|normal"
    labelAlign="center|left|right"
    labelPosition="none|inside|outside"
    labelSizeLimit="9"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    stroke="<i>IStroke; no default</i>"
    textDecoration="underline|none"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IStackable2</apiBaseInterface><apiBaseInterface>mx.charts.chartClasses:IBar</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  Définit une série de données pour un contrôle BarChart. Par défaut, cette classe utilise la classe BoxItemRenderer. Si vous le souhaitez, vous pouvez définir une fonctionnalité de rendu itemRenderer pour la série de données. La fonctionnalité de rendu itemRenderer doit implémenter l’interface IDataRenderer. 
   </apiDesc><example conref="Column_BarChartExample.mxml"><swfblock conref="../examples/Column_BarChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#BarChart"><linktext>mx.charts.BarChart</linktext></link></related-links><apiConstructor id="mx.charts.series:BarSeries:BarSeries"><apiName>BarSeries</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:BarSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      Personnalise les occurrences de fonctionnalité de rendu d’élément utilisées pour représenter le graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Nouvelle occurrence de fonctionnalité de rendu d’élément créée.
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>Classe InstanceCache utilisée pour gérer les occurrences de fonctionnalité de rendu.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Personnalise les occurrences de fonctionnalité de rendu d’élément utilisées pour représenter le graphique. Cette méthode est appelée automatiquement chaque fois qu’une nouvelle fonctionnalité de rendu est nécessaire pendant le processus de rendu du graphique. Si vous le souhaitez, vous pouvez remplacer cette méthode pour personnaliser les paramètres.
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.series:BarSeries:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      
      Signale à la série que les données sous-jacentes du fournisseur de données ont changé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, cette méthode déclenche l’appel des méthodes de mise à jour.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Signale à la série que les données sous-jacentes du fournisseur de données ont changé. Cette fonction déclenche l’appel des méthodes <codeph>updateData()</codeph>, <codeph>updateMapping()</codeph>, <codeph>updateFilter()</codeph> et <codeph>updateTransform()</codeph> lors du prochain appel de la méthode <codeph>commitProperties()</codeph>. Si des effets de données sont affectés à des éléments du graphique, cette méthode déclenche également les effets d’affichage et de masquage.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:protected:invalidateMapping"><apiName>invalidateMapping</apiName><shortdesc>
      
      Signale à la série que le mappage des données à des valeurs numériques a changé et doit être recalculé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, cette méthode déclenche l’appel des méthodes de mise à jour.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Signale à la série que le mappage des données à des valeurs numériques a changé et doit être recalculé. L’appel de cette fonction déclenche l’appel des méthodes <codeph>updateMapping()</codeph>, <codeph>updateFilter()</codeph> et <codeph>updateTransform()</codeph> lors du prochain appel de la méthode <codeph>commitProperties()</codeph>. Si des effets de données sont affectés à des éléments du graphique, cette méthode déclenche également les effets d’affichage et de masquage.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:stackAll"><apiName>stackAll</apiName><shortdesc>
      Empile la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet représentant les valeurs maximale et minimale de la série nouvellement empilée.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>stackedPosYValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Contient les valeurs de base d’empilement de la série. Les clés du dictionnaire correspondent aux valeurs y et leurs valeurs aux valeurs x positives.
     
      </apiDesc></apiParam><apiParam><apiItemName>stackedNegYValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Contient les valeurs de base d’empilement de la série. Les clés du dictionnaire correspondent aux valeurs y et leurs valeurs aux valeurs x négatives.
      
      </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable2</apiOperationClassifier><apiDesc>Elément précédent dans la pile. Par exemple, si l’élément est de même type, vous pouvez utiliser l’accès à cette propriété pour éviter une double opération lors du rendu.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Empile la série. Normalement, une série implémente la méthode <codeph>updateData()</codeph> pour charger ses données à partir du fournisseur de données. Cependant, une série d’empilement réalise certaines opérations spéciales, car ses valeurs ne sont pas nécessairement stockées dans son fournisseur de données. Ses valeurs correspondent à la somme des valeurs stockées dans le fournisseur de données et des valeurs chargées par l’objet empilé.
      <p>Une série d’empilement personnalisée implémente la méthode <codeph>stackAll()</codeph> en chargeant ses données à partir du fournisseur de données, en les ajoutant aux valeurs de base stockées dans le dictionnaire pour obtenir les valeurs réelles à utiliser pour le rendu, et en remplaçant les valeurs du dictionnaire par les nouvelles valeurs additionnées.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:stack"><apiName>stack</apiName><shortdesc>
      Empile la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Valeur maximale de la série nouvellement empilée.
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>stackedYValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Contient les valeurs de base d’empilement de la série. Les clés du dictionnaire correspondent aux valeurs x et leurs valeurs aux valeurs y.
      
      </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable</apiOperationClassifier><apiDesc>Elément précédent dans la pile. Par exemple, si l’élément est de même type, vous pouvez utiliser l’accès à cette propriété pour éviter une double opération lors du rendu.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Empile la série. Normalement, une série implémente la méthode <codeph>updateData()</codeph> pour charger ses données à partir du fournisseur de données. Cependant, une série d’empilement réalise certaines opérations spéciales, car ses valeurs ne sont pas nécessairement stockées dans son fournisseur de données. Ses valeurs correspondent à la somme des valeurs stockées dans le fournisseur de données et des valeurs chargées par l’objet empilé.
      <p>Une série d’empilement personnalisée implémente la méthode <codeph>stack()</codeph> en chargeant ses données à partir du fournisseur de données, en les ajoutant aux valeurs de base stockées dans le dictionnaire pour obtenir les valeurs réelles à utiliser pour le rendu, et en remplaçant les valeurs du dictionnaire par les nouvelles valeurs additionnées.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:BarSeries:barWidthRatio:get"><apiName>barWidthRatio</apiName><shortdesc>
      Spécifie la largeur de rendu des barres par rapport à la largeur des catégories.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>.65
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie la largeur de rendu des barres par rapport à la largeur des catégories. La valeur 1 utilise l’intégralité de l’espace et la valeur .6 60 % de l’espace disponible pour la barre. En règle générale, vous ne devez pas définir cette propriété directement. La largeur réelle de la barre correspond soit à la valeur de la propriété <codeph>barWidthRatio</codeph>, soit à la valeur de <codeph>maxbarWidth</codeph>, la plus petite des deux étant prise en compte.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Spécifie une méthode renvoyant le remplissage de l’élément de graphique actuel de la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Spécifie une méthode renvoyant le remplissage de l’élément de graphique actuel de la série. Lorsque cette propriété est définie, la valeur de retour de la fonction de remplissage personnalisée est prioritaire par rapport aux propriétés de style <codeph>fill</codeph> et <codeph>fills</codeph>. Cependant, si la valeur renvoyée est null, les propriétés <codeph>fills</codeph> et <codeph>fill</codeph> sont prises en compte, dans cet ordre.  
     
     <p>La fonction <codeph>fillFunction</codeph> personnalisée présente la signature suivante :
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> est une référence à l’élément de graphique rendu. <codeph>index</codeph> est l’index de l’élément de graphique du cache de la fonction renderData du cache. Il diffère du fournisseur de données du graphique car il est trié en fonction des valeurs x, y et z. Cette fonction renvoie un objet implémentant l’interface <codeph>IFill</codeph>.
     </p>
      
     <p>L’utilisation d’une fonction <codeph>fillFunction</codeph> personnalisée permet par exemple de renvoyer un remplissage en fonction d’un certain seuil.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill
     {
          var curItem:BarSeriesItem = BarSeriesItem(item);
          if (curItem.xNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
          <p>
      Si vous spécifiez une fonction de remplissage personnalisée pour la série du graphique et que vous souhaitez disposer d’un contrôle Legend, vous devez créer manuellement le contrôle Legend et y ajouter des objets LegendItem.
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe X. Utilisez la classe LinearAxis ou CategoryAxis pour définir les propriétés de l’objet horizontalAxis en tant que balise enfant en langage MXML, ou pour créer un objet LinearAxis ou CategoryAxis en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      Sous-type d’objet ChartItem utilisé par cette série pour représenter les différents éléments.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Sous-type d’objet ChartItem utilisé par cette série pour représenter les différents éléments. Les sous-classes peuvent effectuer un remplacement et renvoyer une classe plus spécialisée si elles doivent stocker des informations supplémentaires dans les éléments.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:items:get"><apiName>items</apiName><shortdesc>
      
      Obtient tous les éléments présents dans la série après filtrage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Obtient tous les éléments présents dans la série après filtrage.
      <p>Les différentes séries déterminent la liste des éléments à renvoyer.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:labelField:get"><apiName>labelField</apiName><shortdesc>
     Nom d’un champ du fournisseur de données dont la valeur apparaît en tant que libellé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
     Nom d’un champ du fournisseur de données dont la valeur apparaît en tant que libellé. Cette propriété est ignorée si la propriété <codeph>labelFunction</codeph> est définie.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Spécifie une fonction de rappel utilisée pour rendre chaque libellé de la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Spécifie une fonction de rappel utilisée pour rendre chaque libellé de la série. Une fonction labelFunction doit présenter la signature suivante :
          <pre>
     function <i>function_name</i>(<i>element</i>:ChartItem, <i>series</i>:Series):String { ... }
     </pre>
     
     <codeph><i>element</i></codeph> correspond à l’élément de graphique rendu. <codeph><i>series</i></codeph> correspond à la série à laquelle appartient l’élément de graphique. La chaîne renvoyée correspond au libellé de l’élément actuel.
          <p>Voici un exemple d’utilisation d’une fonction labelFunction personnalisée :</p>
     <pre>
     private function myLabelFunction(element:ChartItem, series:Series):String {
          var item:BarSeriesItem = BarSeriesItem(element);
          var ser:BarSeries = BarSeries(series);
          return(item.item.Country + ":" +"" + ser.xField.toString() +":"+ item.xNumber);
     }
     </pre>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:maxBarWidth:get"><apiName>maxBarWidth</apiName><shortdesc>
      Spécifie la largeur des barres, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Spécifie la largeur des barres, en pixels. La largeur réelle de la barre correspond soit à la valeur du style, soit à la valeur de la propriété <codeph>barWidthRatio</codeph>, la plus petite des deux étant prise en compte. Les barres regroupées divisent cet espace proportionnellement entre les barres de chaque groupe. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:minField:get"><apiName>minField</apiName><shortdesc>
      Spécifie le champ du fournisseur de données qui détermine la position du bas de chaque barre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le champ du fournisseur de données qui détermine la position du bas de chaque barre. Si la valeur est <codeph>null</codeph>, le bas des colonnes est placé au niveau de la valeur minimale de la plage (ou de la valeur maximale, si la valeur du champ est négative). 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:offset:get"><apiName>offset</apiName><shortdesc>
      Spécifie dans quelle mesure le centre des barres doit être décalé par rapport au centre de l’espace disponible, selon la largeur des catégories.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie dans quelle mesure le centre des barres doit être décalé par rapport au centre de l’espace disponible, selon la largeur des catégories. La plage des valeurs est un pourcentage de la plage qui s’étend de <codeph>-100</codeph> à <codeph>100</codeph>. Définissez cette propriété sur <codeph>0</codeph> pour centrer les barres dans l’espace. Définissez cette propriété sur <codeph>-50</codeph> pour centrer la colonne au début de l’espace disponible. En règle générale, vous ne définissez pas cette propriété directement.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      Sous-type de données ChartRenderData utilisé par cette série pour stocker toutes les données nécessaires au rendu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Sous-type de données ChartRenderData utilisé par cette série pour stocker toutes les données nécessaires au rendu. Les sous-classes peuvent effectuer un remplacement et renvoyer une classe plus spécialisée si elles doivent stocker des informations supplémentaires pour le rendu.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:stacker:get"><apiName>stacker</apiName><shortdesc>
      Classe StackedSeries associée à cette classe BarSeries.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:StackedSeries</apiValueClassifier></apiValueDef><apiDesc>
      Classe StackedSeries associée à cette classe BarSeries. La propriété stacker gère le comportement d’empilement de la série.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe Y. Utilisez la classe LinearAxis ou CategoryAxis pour définir les propriétés de l’objet verticalAxis en tant que balise enfant en langage MXML, ou pour créer un objet LinearAxis ou CategoryAxis en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:xField:get"><apiName>xField</apiName><shortdesc>
      Spécifie le champ du fournisseur de données qui détermine la position du haut de chaque barre colonne sur l’axe X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le champ du fournisseur de données qui détermine la position du haut de chaque barre colonne sur l’axe X. Si la valeur est <codeph>null</codeph>, la classe BarSeries suppose que le fournisseur de données est un tableau de nombres et utilise ces nombres comme valeurs.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:yField:get"><apiName>yField</apiName><shortdesc> 
      Spécifie le champ du fournisseur de données qui détermine la position du bas de chaque barre sur l’axe Y du graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Spécifie le champ du fournisseur de données qui détermine la position du bas de chaque barre sur l’axe Y du graphique. Si la valeur est <codeph>null</codeph>, Flex place les barres dans l’ordre des données dans le fournisseur de données. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.charts.series:BarSeries:stackTotals:set"><apiName>stackTotals</apiName><shortdesc>
      Totaux de pile pour la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      Totaux de pile pour la série.
           </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>