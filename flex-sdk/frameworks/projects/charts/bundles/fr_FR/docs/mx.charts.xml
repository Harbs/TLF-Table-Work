<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.charts"><apiName>mx.charts</apiName><apiDetail/><apiClassifier id="mx.charts:ColumnChart"><apiName>ColumnChart</apiName><shortdesc>
  Le contrôle ColumnChart représente des données sous la forme d’une série de colonnes verticales dont la hauteur dépend des valeurs contenues dans les données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="labelClass" owner="mx.charts:ColumnChart" playerVersion="Flash10.2" type="Class">
<description>
  La classe utilisée par ce composant pour effectuer le rendu des étiquettes.
   <p>Elle peut être définie sur la classe mx.controls.Label ou la classe spark.components.Label.</p>
   </description>
<default>spark.components.Label
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="maxColumnWidth" owner="mx.charts:ColumnChart" playerVersion="Flash9" type="Number">
<description>
  Spécifie la largeur de tracé des colonnes, en pixels. La largeur réelle de la colonne correspond soit à la valeur de cette propriété, soit à la valeur de la propriété <codeph>columnWidthRatio</codeph>, la plus petite des deux étant prise en compte. Les colonnes regroupées divisent cet espace proportionnellement entre les colonnes de chaque groupe. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnWidthRatio" owner="mx.charts:ColumnChart" playerVersion="Flash9" type="Number">
<description>
  Spécifie le rapport entre la largeur de tracé des colonnes et la largeur des catégories, sous forme de pourcentage compris entre 0 et 1. La valeur 1 utilise l’intégralité de l’espace et la valeur 0.6 utilise 60 % de l’espace disponible pour la colonne. La largeur réelle de la colonne correspond soit à la valeur de la propriété <codeph>columnWidthRatio</codeph>, soit à la valeur de <codeph>maxColumnWidth</codeph>, la plus petite des deux étant prise en compte. Les colonnes regroupées divisent cet espace proportionnellement entre les colonnes de chaque groupe. La valeur par défaut est 0.65.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:ColumnChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:ColumnChart
    <strong>Properties</strong>
    extendLabelToEnd="false|true"
    maxLabelWidth="<i>50</i>"
    showLabelVertically="false|true"
    type="<i>clustered|overlaid|stacked|100%</i>"
 
    <strong>Styles</strong>
    columnWidthRatio=".65"
    maxColumnWidth="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle ColumnChart représente des données sous la forme d’une série de colonnes verticales dont la hauteur dépend des valeurs contenues dans les données. Le contrôle ColumnChart permet de représenter différents graphiques : colonnes simples, colonnes regroupées, colonnes empilées, colonnes empilées en pourcentage et colonnes haut/bas. 
  
  <p>Un contrôle ColumnChart suppose que la propriété de sa <codeph>série</codeph> contient un tableau d’objets ColumnSeries.</p>
   <p>Les graphiques de colonnes empilées et de colonnes empilées en pourcentage remplacent la propriété <codeph>minField</codeph> de leurs objets ColumnSeries.</p>
   </apiDesc><example conref="Column_BarChartExample.mxml"><swfblock conref="examples/Column_BarChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#ColumnSeries"><linktext>mx.charts.series.ColumnSeries</linktext></link></related-links><apiConstructor id="mx.charts:ColumnChart:ColumnChart"><apiName>ColumnChart</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:ColumnChart:extendLabelToEnd:get"><apiName>extendLabelToEnd</apiName><shortdesc>
     Détermine si les libellés de données peuvent ou non s’étendre jusqu’à l’extrémité du graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
     Détermine si les libellés de données peuvent ou non s’étendre jusqu’à l’extrémité du graphique. Si la valeur est true, les libellés peuvent utiliser l’intégralité de l’espace entre l’élément et la limite du graphique. Sinon, les libellés de données sont limités à la zone définie par leur élément de graphique.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ColumnChart:maxLabelWidth:get"><apiName>maxLabelWidth</apiName><shortdesc>
     Détermine la largeur maximale, en pixels, du libellé des éléments.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>50
      
      </apiDefaultValue></apiValueDef><apiDesc>
     Détermine la largeur maximale, en pixels, du libellé des éléments.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ColumnChart:showLabelVertically:get"><apiName>showLabelVertically</apiName><shortdesc>
     Détermine si les libellés de données peuvent ou non être affichés verticalement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
     Détermine si les libellés de données peuvent ou non être affichés verticalement. Si la valeur est true et que des polices incorporées sont utilisées, les libellés sont affichés verticalement lorsque la largeur de la colonne est insuffisante.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ColumnChart:type:get"><apiName>type</apiName><shortdesc>
      Type de graphique à colonnes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Type de graphique à colonnes.
           <p>Valeurs possibles :</p>
      <ul>
        <li><codeph>"clustered"</codeph> : les valeurs issues de différentes séries sont regroupées en catégories. Il s’agit du type par défaut.</li>
        <li><codeph>"overlaid"</codeph> : plusieurs valeurs sont rendues les unes par-dessus les autres en fonction de leur catégorie, la dernière série apparaissant sur le dessus. </li>
        <li><codeph>"stacked"</codeph> : les colonnes sont empilées les unes sur les autres et regroupées par catégorie. Chaque colonne représente la valeur cumulée des colonnes qui se trouvent en dessous. </li>
        <li><codeph>"100%"</codeph> : les colonnes sont empilées les unes sur les autres ; additionnées, elles représentent 100 %. Chaque colonne représente sa proportion dans la somme des valeurs de la catégorie.</li>
      </ul>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ColumnChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:LinearAxis"><apiName>LinearAxis</apiName><shortdesc>
  La classe LinearAxis répartit les valeurs numériques uniformément entre une valeur minimale et une valeur maximale le long d’un axe du graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:LinearAxis&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:LinearAxis
    <strong>Properties</strong>
    interval="null"
    maximum="null"
    maximumLabelPrecision="null"
    minimum="null"
    minorInterval="null"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:NumericAxis</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe LinearAxis répartit les valeurs numériques uniformément entre une valeur minimale et une valeur maximale le long d’un axe du graphique. Par défaut, elle détermine les valeurs des propriétés <codeph>minimum</codeph>, <codeph>maximum</codeph> et <codeph>interval</codeph> à partir des données du graphique, de sorte que tous les éléments puissent être présentés à l’écran. Vous pouvez également définir explicitement des valeurs spécifiques pour ces propriétés.
  
  <p>La détermination automatique des valeurs de la plage fonctionne de la manière suivante suit :
 
  <ol>
    <li> Flex détermine une valeur minimale et une valeur maximale englobant toutes les données affichées dans le graphique.</li>
    <li> Si les propriétés <codeph>autoAdjust</codeph> et <codeph>baseAtZero</codeph> sont définies sur <codeph>true</codeph>, Flex réalise les ajustements suivants :
      <ul>
        <li>Si toutes les valeurs sont positives, Flex définit la propriété <codeph>minimum</codeph> sur zéro.</li>
  	  <li>Si toutes les valeurs sont négatives, Flex définit la propriété <codeph>maximum</codeph> sur zéro.</li>
  	</ul>
    </li>
    <li> Si la propriété <codeph>autoAdjust</codeph> est définie sur <codeph>true</codeph>, Flex ajuste les valeurs des propriétés <codeph>minimum</codeph> et <codeph>maximum</codeph> en les arrondissant à la valeur supérieure ou inférieure.</li>
    <li> Flex détermine si certains éléments affichés dans le graphique nécessitent une marge supplémentaire pour être affichés correctement (libellés, par exemple). Flex ajuste en conséquence les valeurs des propriétés <codeph>minimum</codeph> et <codeph>maximum</codeph>.</li>
    <li> Flex détermine si vous avez spécifié explicitement une marge autour des valeurs <codeph>minimum</codeph> et <codeph>maximum</codeph> et les ajuste en conséquence.</li>
  </ol>
  </p>
  
  </apiDesc><example conref="HLOCChartExample.mxml"><swfblock conref="examples/HLOCChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.chartClasses.xml#IAxis"><linktext>mx.charts.chartClasses.IAxis</linktext></link></related-links><apiConstructor id="mx.charts:LinearAxis:LinearAxis"><apiName>LinearAxis</apiName><shortdesc>
	 Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	 Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:LinearAxis:interval:get"><apiName>interval</apiName><shortdesc>
	  Spécifie la différence numérique entre les valeurs des libellés le long de l’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Spécifie la différence numérique entre les valeurs des libellés le long de l’axe. Flex calcule l’intervalle si cette propriété est définie sur <codeph>NaN</codeph>. La valeur par défaut est <codeph>NaN</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LinearAxis:maximum:get"><apiName>maximum</apiName><shortdesc>
	  Spécifie la valeur maximale d’un libellé d’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Spécifie la valeur maximale d’un libellé d’axe. Si vous définissez la propriété <codeph>autoAdjust</codeph> sur <codeph>true</codeph>, Flex calcule cette valeur. Si la valeur est <codeph>NaN</codeph>, Flex détermine la valeur maximale à partir des données du graphique. La valeur par défaut est <codeph>NaN</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LinearAxis:minimum:get"><apiName>minimum</apiName><shortdesc>
	  Spécifie la valeur minimale d’un libellé d’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Spécifie la valeur minimale d’un libellé d’axe. Si la valeur est <codeph>NaN</codeph>, Flex détermine la valeur minimale à partir des données du graphique. La valeur par défaut est <codeph>NaN</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LinearAxis:minorInterval:get"><apiName>minorInterval</apiName><shortdesc>
	  Spécifie la différence numérique entre les graduations secondaires le long de l’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Spécifie la différence numérique entre les graduations secondaires le long de l’axe. Si cette propriété est définie sur <codeph>NaN</codeph>, Flex calcule la différence.  
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LinearAxis:maximumLabelPrecision:set"><apiName>maximumLabelPrecision</apiName><shortdesc>
	  Spécifie le nombre maximal de décimales représentant les valeurs décimales dans les libellés générés par cet axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Spécifie le nombre maximal de décimales représentant les valeurs décimales dans les libellés générés par cet axe. Par défaut, l’axe génère automatiquement cette valeur à partir des libellés eux-mêmes. La valeur 0 arrondit le nombre à l’entier le plus proche et la valeur 2 au centième le plus proche.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:AreaChart"><apiName>AreaChart</apiName><shortdesc>
  Le contrôle AreaChart représente les données sous forme de zone délimitée par une ligne reliant les valeurs contenues dans les données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:AreaChart&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:</p>
  
  <pre>
  &lt;mx:AreaChart
    <strong>Properties</strong>
    type="<i>overlaid|stacked|100%</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle AreaChart représente les données sous forme de zone délimitée par une ligne reliant les valeurs contenues dans les données. Le contrôle AreaChart permet de représenter différentes variations : zones simples, zones empilées, zones empilées en pourcentage et zones haut/bas.
  
  <p>Un contrôle AreaChart suppose que laa propriété de sa <codeph>série</codeph> contient un tableau d’objets AreaSeries.</p>
  
  <p>Les graphiques de zones empilées et de zones empilées en pourcentage remplacent la propriété <codeph>minField</codeph> de leurs objets AreaSeries.</p>
   </apiDesc><example conref="Line_AreaChartExample.mxml"><swfblock conref="examples/Line_AreaChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#AreaSeries"><linktext>mx.charts.series.AreaSeries</linktext></link></related-links><apiConstructor id="mx.charts:AreaChart:AreaChart"><apiName>AreaChart</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:AreaChart:type:get"><apiName>type</apiName><shortdesc>
      Type de graphique en zones à rendre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Type de graphique en zones à rendre.
           <p>Valeurs possibles :</p>
      <ul>
        <li><codeph>"overlaid"</codeph> : plusieurs zones sont rendues les unes par-dessus les autres, la dernière série apparaissant sur le dessus. Il s’agit de la valeur par défaut.</li>
        <li><codeph>"stacked"</codeph> : les zones sont empilées les unes sur les autres et regroupées par catégorie. Chaque zone représente la valeur cumulée des zones qui se trouvent en dessous.</li>
        <li><codeph>"100%"</codeph> : les zones sont empilées les unes sur les autres ; additionnées, elles représentent 100%. Chaque zone représente la proportion représentée par la série de la somme totale.</li>
      </ul>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AreaChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:PieChart"><apiName>PieChart</apiName><shortdesc>
  Le contrôle PieChart représente une série de données sous forme de graphique circulaire standard.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="innerRadius" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  Détermine la taille du trou qui se trouve au centre du graphique circulaire. Cette propriété correspond à un pourcentage du rayon du cercle central, par rapport au rayon global du graphique circulaire. La valeur par défaut est 0 %. Utilisez cette propriété pour créer un graphique en forme d’anneau.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur (en pixels).
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut pour la plupart des contrôles est <codeph>left</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Pour ces composants, cette propriété est reconnue uniquement lorsque la valeur de la propriété <codeph>labelPlacement</codeph> est <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts:PieChart" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est pris en charge uniquement pour les polices FlashType incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en gras. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"bold"</codeph>. Pour LegendItem, la valeur par défaut est <codeph>"bold"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. La valeur par défaut est 10 pour tous les contrôles, à l’exception de ColorPicker. Pour le contrôle ColorPicker, la valeur par défaut est 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>. Cette valeur active la fonctionnalité de rendu FlashType si vous utilisez une police incorporée FlashType. Définissez cette propriété sur <codeph>"normal"</codeph> pour désactiver la fonctionnalité de rendu FlashType.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts:PieChart" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts:PieChart" playerVersion="Flash9" type="uint">
<description>
  Couleur du texte du composant, libellé du composant inclus.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:PieChart&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:
  
  <pre>
  &lt;mx:PieChart
    <strong>Styles</strong>
    innerRadius="0"
    textAlign="left"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:PolarChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle PieChart représente une série de données sous forme de graphique circulaire standard. Les données du fournisseur de données déterminent la taille de chaque secteur du graphique circulaire, par rapport aux autres secteurs. La classe PieSeries permet de créer des graphiques circulaires standard, des graphiques en anneau ou des graphiques circulaires empilés.
  
  <p>Un contrôle PieChart suppose que la propriété de sa <codeph>series</codeph> contient un tableau d’objets PieSeries.</p>
   </apiDesc><example conref="PieChartExample.mxml"><swfblock conref="examples/PieChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#PieSeries"><linktext>mx.charts.series.PieSeries</linktext></link></related-links><apiConstructor id="mx.charts:PieChart:PieChart"><apiName>PieChart</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:PieChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:GridLines"><apiName>GridLines</apiName><shortdesc> 
  La classe GridLines trace une grille à l’intérieur de la zone de données du graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="verticalTickAligned" owner="mx.charts:GridLines" playerVersion="Flash9" type="Boolean">
<description>
  Détermine si les lignes verticales de la grille doivent être alignées sur les graduations. Si la valeur est <codeph>true</codeph>, Flex trace les lignes verticales de la grille dans le prolongement des graduations. Si la valeur est <codeph>false</codeph>, Flex les trace entre les graduations. La valeur par défaut est <codeph>true</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalStroke" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Spécifie le style de trait des lignes verticales de la grille. Utilisez la classe Stroke pour définir les propriétés en tant que balise enfant en langage MXML, ou pour créer un objet Stroke en langage ActionScript.  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalShowOrigin" owner="mx.charts:GridLines" playerVersion="Flash9" type="Boolean">
<description>
  Détermine si l’origine verticale doit être tracée. Si la valeur est <codeph>true</codeph> et que l’origine se trouve dans la zone délimitée par le graphique, Flex les trace en utilisant le style <codeph>verticalOriginStroke</codeph>. Pour les contrôles ColumnChart, LineChart et AreaChart, la valeur par défaut est <codeph>false</codeph>. Pour les contrôles PlotChart, BubbleChart et BarChart, la valeur par défaut est <codeph>true</codeph>. Cette propriété ne s’applique pas aux contrôles PieChart.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalOriginStroke" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Spécifie le style de trait de l’origine verticale. Utilisez la classe Stroke pour définir les propriétés en tant que balise enfant en langage MXML, ou pour créer un objet Stroke en langage ActionScript.  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalFill" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Spécifie le motif de remplissage des bandes verticales alternées créées par la grille. Utilisez la classe IFill pour définir les propriétés du remplissage en tant que balise enfant en langage MXML, ou pour créer un objet IFill en langage ActionScript. Définissez la valeur sur <codeph>null</codeph> pour ne pas remplir les bandes. La valeur par défaut est <codeph>null</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalChangeCount" owner="mx.charts:GridLines" playerVersion="Flash9" type="int">
<description>
  Spécifie le nombre de graduations présentes entre les lignes verticales de la grille. Définissez la propriété <codeph>verticalChangeCount</codeph> sur <codeph>3</codeph> pour tracer une grille toutes les trois graduations le long de l’axe. Le style de remplissage change à chaque ligne de la grille. Par conséquent, plus la valeur <codeph>verticalChangeCount</codeph> est grande, plus les bandes alternées sont larges. La valeur par défaut est <codeph>1</codeph>. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalAlternateFill" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Spécifie le motif de remplissage des bandes verticales alternées qui ne sont pas définies par la propriété de remplissage. Utilisez la classe IFill pour définir les propriétés du remplissage en tant que balise enfant en langage MXML, ou pour créer un objet IFill en langage ActionScript. Définissez la valeur sur <codeph>null</codeph> pour ne pas remplir les bandes. La valeur par défaut est <codeph>null</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalTickAligned" owner="mx.charts:GridLines" playerVersion="Flash9" type="Boolean">
<description>
  Détermine si les lignes horizontales de la grille doivent être alignées sur les graduations. Si la valeur est <codeph>true</codeph>, les lignes horizontales de la grille sont tracées dans le prolongement des graduations. Si la valeur est <codeph>false</codeph>, Flex les trace entre les graduations. La valeur par défaut est <codeph>true</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalStroke" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Spécifie le style de trait des lignes horizontales de la grille. Utilisez la classe Stroke pour définir les propriétés en tant que balise enfant en langage MXML, ou pour créer un objet Stroke en langage ActionScript.  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalShowOrigin" owner="mx.charts:GridLines" playerVersion="Flash9" type="Boolean">
<description>
  Détermine si l’origine horizontale doit être tracée. Si la valeur est <codeph>true</codeph> et que l’origine se trouve dans la zone délimitée par le graphique, la grille est tracée en utilisant le style <codeph>horizontalOriginStroke</codeph>. Pour les contrôles ColumnChart, LineChart, PlotChart, BubbleChart et AreaChart, la valeur par défaut est <codeph>true</codeph>. Pour les contrôles BarChart, la valeur par défaut est <codeph>false</codeph>. Cette propriété ne s’applique pas aux contrôles PieChart.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalOriginStroke" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Spécifie le style de trait de l’origine horizontale. Utilisez la classe Stroke pour définir les propriétés en tant que balise enfant en langage MXML, ou pour créer un objet Stroke en langage ActionScript.  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalFill" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Spécifie le motif de remplissage des bandes verticales impaires créées par la grille. Utilisez la classe IFill pour définir les propriétés du remplissage en tant que balise enfant en langage MXML, ou pour créer un objet IFill en langage ActionScript. Définissez la valeur sur <codeph>null</codeph> pour ne pas remplir les bandes. La valeur par défaut est <codeph>null</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalChangeCount" owner="mx.charts:GridLines" playerVersion="Flash9" type="int">
<description>
  Spécifie le nombre de graduations entre les lignes horizontales de la grille. Définissez la propriété <codeph>horizontalChangeCount</codeph> sur 3 pour tracer une grille toutes les trois graduations le long de l’axe. Le style de remplissage change à chaque ligne de la grille. Par conséquent, plus la valeur <codeph>horizontalChangeCount</codeph> est grande, plus les bandes alternées sont larges. La valeur par défaut est <codeph>1</codeph>. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalAlternateFill" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Spécifie le motif de remplissage des bandes horizontales alternées qui ne sont pas définies par la propriété <codeph>fill</codeph>. Utilisez la classe IFill pour définir les propriétés du remplissage en tant que balise enfant en langage MXML, ou pour créer un objet IFill en langage ActionScript. Définissez la valeur sur <codeph>null</codeph> pour ne pas remplir les bandes. La valeur par défaut est <codeph>null</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="horizontal,vertical,both" inherit="no" name="gridDirection" owner="mx.charts:GridLines" playerVersion="Flash9" type="String">
<description>
  Spécifie la direction des lignes de la grille. Valeurs autorisées : <codeph>horizontal</codeph>, <codeph>vertical</codeph> ou <codeph>both</codeph>. La valeur par défaut est <codeph>horizontal</codeph>.  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:GridLines&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:GridLines
    <strong>Styles</strong>
     gridDirection="horizontal|vertical|both"
     horizontalAlternateFill="null"
     horizontalChangeCount="1"
     horizontalFill="null"
     horizontalOriginStroke="<i>IStroke; No default</i>"
     horizontalShowOrigin="<i>Default depends on type of chart</i>"
     horizontalStroke="<i>IStroke; No default</i>"
     horizontalTickAligned="true|false"
     verticalAlternateFill="null"
     verticalChangeCount="1"
     verticalFill="null"
     verticalOriginStroke="<i>IStroke; No default</i>"
     verticalShowOrigin="<i>Default depends on type of chart</i>"
     verticalStroke="<i>IStroke; No default</i>"
     verticalTickAligned="true|false"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:ChartElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
  La classe GridLines trace une grille à l’intérieur de la zone de données du graphique. Flex peut tracer la grille horizontalement, verticalement ou dans les deux sens. 
  
  <p>Flex trace les lignes de la grille dans le prolongement des graduations du graphique parent. Par défaut, Flex trace une ligne pour chaque graduation le long de l’axe concerné.</p>
  
  <p>La classe GridLines est généralement utilisée comme balise enfant pour les propriétés <codeph>backgroundElements</codeph> ou <codeph>annotationElements</codeph> d’un contrôle de graphique.</p>
  
  </apiDesc><example conref="GridLinesExample.mxml"><swfblock conref="examples/GridLinesExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.charts:GridLines:GridLines"><apiName>GridLines</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:GridLines:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts:HLOCChart"><apiName>HLOCChart</apiName><shortdesc>
  Le contrôle HLOCChart (High Low Open Close) représente des données financières sous la forme d’une série d’éléments représentant les valeurs supérieure, inférieure et de fermeture d’une série de données et éventuellement sa valeur d’ouverture.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="maxColumnWidth" owner="mx.charts:HLOCChart" playerVersion="Flash9" type="Number">
<description>
  Spécifie la largeur de tracé des lignes HLOC, en pixels. La largeur réelle correspond soit à la valeur de cette propriété, soit à la valeur de la propriété <codeph>columnWidthRatio</codeph>, la plus petite des deux étant prise en compte. Les différentes séries HLOC divisent cet espace proportionnellement.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnWidthRatio" owner="mx.charts:HLOCChart" playerVersion="Flash9" type="Number">
<description>
  Spécifie le rapport entre la largeur de tracé des lignes HLOC et les largeurs des catégories sur l’axe horizontal, sous forme de pourcentage compris entre 0 et 1. La valeur 1 utilise l’intégralité de l’espace et la valeur 0.6 utilise 60 % de l’espace disponible pour la catégorie. La largeur réelle de l’élément correspond soit à la valeur de la propriété <codeph>columnWidthRatio</codeph>, soit à la valeur de <codeph>maxColumnWidth</codeph>, la plus petite des deux étant prise en compte. Les différentes séries d’éléments divisent cet espace proportionnellement. La valeur par défaut est 0.65.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  The <code>&lt;mx:HLOCChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:HLOCChart
    <strong>Styles</strong>
    columnWidthRatio=".65"
    maxColumnWidth="<i>No default</i>"
  /&gt;
  </pre> 
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle HLOCChart (High Low Open Close) représente des données financières sous la forme d’une série d’éléments représentant les valeurs supérieure, inférieure et de fermeture d’une série de données et éventuellement sa valeur d’ouverture. Le sommet et la base de la ligne verticale de chaque élément représentent les valeurs supérieure et inférieure du point de données. La graduation orientée vers la droite représente les valeurs de fermeture et la graduation orientée vers la gauche représente la valeur d’ouverture, si elle a été spécifiée. 
   
  <p>Un contrôle HLOCChart suppose que la propriété de sa <codeph>série</codeph> contient un tableau d’objets HLOCSeries.</p>
 
  </apiDesc><example conref="HLOCChartExample.mxml"><swfblock conref="examples/HLOCChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#HLOCSeries"><linktext>mx.charts.series.HLOCSeries</linktext></link></related-links><apiConstructor id="mx.charts:HLOCChart:HLOCChart"><apiName>HLOCChart</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:HLOCChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:BarChart"><apiName>BarChart</apiName><shortdesc>
  Le contrôle BarChart représente des données sous la forme d’une série de barres horizontales dont la longueur dépend des valeurs contenues dans les données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="labelClass" owner="mx.charts:BarChart" playerVersion="Flash10.2" type="Class">
<description>
  La classe utilisée par ce composant pour effectuer le rendu des étiquettes.
   <p>Elle peut être définie sur la classe mx.controls.Label ou la classe spark.components.Label.</p>
   </description>
<default>spark.components.Label
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="maxBarWidth" owner="mx.charts:BarChart" playerVersion="Flash9" type="Number">
<description>
  Spécifie la largeur de tracé des barres, en pixels. La largeur réelle de la barre correspond soit à la valeur de cette propriété, soit à la valeur de la propriété <codeph>barWidthRatio</codeph>, la plus petite des deux étant prise en compte. Les barres regroupées divisent cet espace proportionnellement entre les barres de chaque groupe. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="barWidthRatio" owner="mx.charts:BarChart" playerVersion="Flash9" type="Number">
<description>
  Spécifie le rapport entre la largeur de tracé des barres et la largeur des catégories, sous forme de pourcentage compris entre 0 et 1. La valeur 1 utilise l’intégralité de l’espace et la valeur 0.6 utilise 60 % de l’espace disponible pour la barre. La largeur réelle de la barre correspond soit à la valeur de la propriété <codeph>barWidthRatio</codeph>, soit à la valeur de <codeph>maxbarWidth</codeph>, la plus petite des deux étant prise en compte. Les barres regroupées divisent cet espace proportionnellement entre les barres de chaque groupe. La valeur par défaut est 0.65.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:BarChart&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:</p>
  
  <pre>
  &lt;mx:BarChart
    <strong>Properties</strong>
    type="clustered|overlaid|stacked|100%"
    
    <strong>Styles</strong>
    barWidthRatio=".65"
    maxBarWidth="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle BarChart représente des données sous la forme d’une série de barres horizontales dont la longueur dépend des valeurs contenues dans les données. Un contrôle BarChart peut représenter différentes variations sous forme de graphique : barres simples, barres regroupées, barres empilées, barres empilées en pourcentage et barres haut/bas.
  
  <p>Un contrôle BarChart suppose que sa propriété <codeph>series</codeph> contient un tableau d’objets BarSeries.</p>
  
  <p>Les graphiques de barres empilées et de barres empilées en pourcentage remplacent la propriété <codeph>minField</codeph> de leurs objets BarSeries.</p>
   </apiDesc><example conref="Column_BarChartExample.mxml"><swfblock conref="examples/Column_BarChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#BarSeries"><linktext>mx.charts.series.BarSeries</linktext></link></related-links><apiConstructor id="mx.charts:BarChart:BarChart"><apiName>BarChart</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:BarChart:type:get"><apiName>type</apiName><shortdesc>
      Type de graphique à barres à rendre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Type de graphique à barres à rendre. Valeurs possibles :    
      <ul>
        <li><codeph>"clustered"</codeph> : les barres sont regroupées en catégories. Il s’agit de la valeur par défaut.</li>
      
        <li><codeph>"overlaid"</codeph> : plusieurs barres sont rendues les unes par-dessus les autres par catégorie, la dernière série apparaissant sur le dessus.</li>
      
        <li><codeph>"stacked"</codeph> : les barres sont empilées de bout à bout et regroupées par catégorie. Chaque barre représente la valeur cumulée des valeurs qui se trouvent en dessous.</li>
      
        <li><codeph>"100%"</codeph> : les barres sont empilées de bout à bout ; additionnées, elles représentent 100 %. Chaque barre représente sa proportion dans la somme des valeurs de la catégorie.</li>
      </ul>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:BarChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:LegendItem"><apiName>LegendItem</apiName><shortdesc>
  Contrôle les différents éléments de légende d’une légende de graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="stroke" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Object">
<description>
  Spécifie le style de trait de l’élément de légende.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="markerWidth" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  Spécifie la largeur de l’élément de légende.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="markerHeight" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description> 
  Spécifie la hauteur de l’élément de légende.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts:LegendItem" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Spécifie la classe qui rend la partie de l’élément de légende contenant les marqueurs. Généralement, le marqueur est fourni par l’élément de graphique générant l’élément de légende. Cependant, lorsque vous créez une légende manuellement, ce style spécifie la classe utilisée pour le rendu du marqueur. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="top,bottom,right,left" inherit="yes" name="labelPlacement" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  Spécifie l’emplacement du libellé de l’élément de légende. Les valeurs reconnues sont <codeph>"top"</codeph>, <codeph>"bottom"</codeph>, <codeph>"left"</codeph> et <codeph>"right"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Object">
<description>
  Spécifie un objet IFill définissant le remplissage de l’élément de légende.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur (en pixels).
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut pour la plupart des contrôles est <codeph>left</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Pour ces composants, cette propriété est reconnue uniquement lorsque la valeur de la propriété <codeph>labelPlacement</codeph> est <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est pris en charge uniquement pour les polices FlashType incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en gras. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"bold"</codeph>. Pour LegendItem, la valeur par défaut est <codeph>"bold"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. La valeur par défaut est 10 pour tous les contrôles, à l’exception de ColorPicker. Pour le contrôle ColorPicker, la valeur par défaut est 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>. Cette valeur active la fonctionnalité de rendu FlashType si vous utilisez une police incorporée FlashType. Définissez cette propriété sur <codeph>"normal"</codeph> pour désactiver la fonctionnalité de rendu FlashType.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts:LegendItem" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts:LegendItem" playerVersion="Flash9" type="uint">
<description>
  Couleur du texte du composant, libellé du composant inclus.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure droite du contrôle et le bord droit de sa zone de contenu.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure gauche du contrôle et le bord gauche de sa zone de contenu.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants, verticalement. La valeur par défaut dépend de la classe de composant. Si elle n’est pas remplacée pour la classe, la valeur par défaut est 6.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants dans le sens horizontal. La valeur par défaut dépend de la classe de composant. Si elle n’est pas remplacée pour la classe, la valeur par défaut est 8.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:LegendItem&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:LegendItem
    <strong>Properties</strong>
    element="<i>No default</i>"    
    label="<i>No default</i>"
    source="<i>No default</i>"
    legendData="<i>No default</i>"
    marker="<i>No default</i>"
    markerAspectRatio="<i>No default</i>"
 
    <strong>Styles</strong>
    fill="<i>IFill; no default.</i>"
    fontWeight="normal|bold"
    fontSize="10"
    horizontalGap="8"
    labelPlacement="right|left|top|bottom"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    markerHeight="15"
    markerWidth="10"
    paddingLeft="0"
    paddingRight="0"
    stroke="<i>IStroke; no default</i>"
 	  textDecoration="underline|none"
    verticalGap="6"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Contrôle les différents éléments de légende d’une légende de graphique.
  
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#Legend"><linktext>mx.charts.Legend</linktext></link><link href="mx.charts.chartClasses.xml#LegendData"><linktext>mx.charts.chartClasses.LegendData</linktext></link></related-links><apiConstructor id="mx.charts:LegendItem:LegendItem"><apiName>LegendItem</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:LegendItem:element"><apiName>element</apiName><shortdesc>
	  Elément de graphique chargé de générer cet objet de légende.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.charts.chartClasses:IChartElement</apiValueClassifier></apiValueDef><apiDesc>
	  Elément de graphique chargé de générer cet objet de légende. Lorsque le contenu d’un contrôle Legend est généré automatiquement par un graphique, ce champ fait référence à l’élément de graphique (généralement une série) représenté par cet objet LegendItem. Dans certains cas, plusieurs éléments LegendItem représentent le même élément de graphique.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:markerAspectRatio"><apiName>markerAspectRatio</apiName><shortdesc>
	  Rapport largeur/hauteur du marqueur associé à cet élément de légende.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Rapport largeur/hauteur du marqueur associé à cet élément de légende. Certains marqueurs fournis par la série du graphique sont conçus pour être affichés selon un rapport largeur/hauteur bien précis. Si cette propriété est définie, l’élément de légende garantit le rapport largeur/hauteur du marqueur lors de la mise en forme.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:label:get"><apiName>label</apiName><shortdesc>
	  Spécifie le texte que Flex affiche près de l’élément de légende.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  Spécifie le texte que Flex affiche près de l’élément de légende.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:marker:get"><apiName>marker</apiName><shortdesc>
	  Marqueur affiché par cet élément de légende.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexDisplayObject"/></apiValueDef><apiDesc>
	  Marqueur affiché par cet élément de légende. Les marqueurs sont généralement affectés par l’élément de graphique qui a généré l’occurrence LegendData associée à cet élément.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:source:get"><apiName>source</apiName><shortdesc>
	  Contient une référence à la série de données à partir de laquelle l’occurrence LegendItem a été générée si vous liez la propriété dataProvider du contrôle Legend parent à un contrôle de graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
	  Contient une référence à la série de données à partir de laquelle l’occurrence LegendItem a été générée si vous liez la propriété <codeph>dataProvider</codeph> du contrôle Legend parent à un contrôle de graphique. Dans le cas contraire, cette propriété contient une référence à l’objet associé à l’occurrence LegendItem.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:legendData:set"><apiName>legendData</apiName><shortdesc>
	  Occurrence LegendData représentée par cet objet LegendItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Object"/></apiValueDef><apiDesc>
	  Occurrence LegendData représentée par cet objet LegendItem. Lorsqu’un graphique génère le contenu d’un contrôle Legend, les éléments du graphique génèrent une ou plusieurs structures LegendData à afficher dans le contrôle Legend. Chaque structure LegendData génère un objet LegendItem.  
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts:HitData"><apiName>HitData</apiName><shortdesc>
  La classe HitData représente les informations concernant l’élément de données qui se trouve à une position précise à l’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe HitData représente les informations concernant l’élément de données qui se trouve à une position précise à l’écran. Flex renvoie la structure HitData des événements de souris survenant au-dessus des points de données du graphique. Cette structure décrit quels points de données se trouvent sous le pointeur de la souris. 
 
  <p>Vous pouvez également obtenir une structure HitData décrivant le point de données qui se trouve à une position précise dans le graphique en utilisant la méthode <codeph>findDataPoints()</codeph> du contrôle de graphique.</p>
  
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#ChartItem"><linktext>mx.charts.ChartItem</linktext></link></related-links><apiConstructor id="mx.charts:HitData:HitData"><apiName>HitData</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>id</apiItemName><apiType value="Number"/><apiDesc>Spécifie un identificateur unique représentant le point de données.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>distance</apiItemName><apiType value="Number"/><apiDesc>Spécifie la distance entre l’élément de données à l’écran et la position du pointeur de la souris, en pixels.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Spécifie la coordonnée x de l’élément de données à l’écran.
	 
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Spécifie la coordonnée y de l’élément de données à l’écran.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>chartItem</apiItemName><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier><apiDesc>Elément de graphique décrit par les données visées par le pointeur.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Constructeur.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:HitData:chartItem"><apiName>chartItem</apiName><shortdesc>
	  Elément de graphique décrit par les données visées par le pointeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.charts:ChartItem</apiValueClassifier></apiValueDef><apiDesc>
	  Elément de graphique décrit par les données visées par le pointeur. Un élément de graphique représente les données utilisées par une série pour décrire un élément individuel à partir de son fournisseur <codeph>dataProvider</codeph>. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:contextColor"><apiName>contextColor</apiName><shortdesc>
	  Valeur RVB pouvant être utilisée pour associer une représentation à l’écran de l’objet chartItem associé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  Valeur RVB pouvant être utilisée pour associer une représentation à l’écran de l’objet <codeph>chartItem</codeph> associé. Les objets DataTip utilisent ce champ pour faciliter le rendu des données.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:dataTipFunction"><apiName>dataTipFunction</apiName><shortdesc>
	  Fonction fournie par le créateur HitData pour générer une chaîne adaptée à l’utilisateur, permettant d’afficher à l’écran une description de l’élément référencé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
	  Fonction fournie par le créateur HitData pour générer une chaîne adaptée à l’utilisateur, permettant d’afficher à l’écran une description de l’élément référencé. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:distance"><apiName>distance</apiName><shortdesc>
	  Spécifie la distance entre l’élément de données à l’écran et la position du pointeur de la souris, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Spécifie la distance entre l’élément de données à l’écran et la position du pointeur de la souris, en pixels.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:id"><apiName>id</apiName><shortdesc>
	  Spécifie un identificateur unique représentant le point de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Spécifie un identificateur unique représentant le point de données. Vous pouvez utiliser cet identificateur pour vérifier que deux objets HitData sont identiques. Si deux éléments de graphique différents représentent la même entrée <codeph>dataProvider</codeph>, ils sont associés à deux identificateurs différents.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:item"><apiName>item</apiName><shortdesc>
	  Spécifie l’élément de données décrit par la structure HitData.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
	  Spécifie l’élément de données décrit par la structure HitData.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:x"><apiName>x</apiName><shortdesc>
	  Spécifie la coordonnée X de l’élément de données à l’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Spécifie la coordonnée X de l’élément de données à l’écran.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:y"><apiName>y</apiName><shortdesc>
	  Spécifie la coordonnée Y de l’élément de données à l’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Spécifie la coordonnée Y de l’élément de données à l’écran.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:displayText:get"><apiName>displayText</apiName><shortdesc>
	  Description de l’élément associé pour l’affichage à l’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
	  Description de l’élément associé pour l’affichage à l’écran. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:element:get"><apiName>element</apiName><shortdesc>
	  Spécifie l’élément de graphique rendant l’élément de données qui a généré la structure HitData.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.charts.chartClasses:IChartElement</apiValueClassifier></apiValueDef><apiDesc>
	  Spécifie l’élément de graphique rendant l’élément de données qui a généré la structure HitData.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:BubbleChart"><apiName>BubbleChart</apiName><shortdesc>
  Le contrôle BubbleChart représente les données en utilisant trois valeurs pour chaque point de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="minRadius" owner="mx.charts:BubbleChart" playerVersion="Flash9" type="Number">
<description>
  Rayon minimal de l’élément de graphique le plus petit, en pixels. Flex affecte ce rayon au point de données dont la valeur est la plus faible. Un rayon plus grand est affecté aux autres points de données, en fonction de leur valeur par rapport à la valeur la plus élevée et à la valeur la plus faible. La valeur par défaut est de 0 pixel.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="maxRadius" owner="mx.charts:BubbleChart" playerVersion="Flash9" type="Number">
<description>
  Rayon maximal de l’élément de graphique le plus grand, en pixels. Flex affecte ce rayon au point de données dont la valeur est la plus élevée. Un rayon plus petit est affecté aux autres points de données, en fonction de leur valeur par rapport à la valeur la plus élevée et à la valeur la plus faible. La valeur par défaut est de 50 pixels.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  The <code>&lt;mx:BubbleChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:BubbleChart
    <strong>Properties</strong>
    radiusAxis="<i>LinearAxis</i>"
 
    <strong>Styles</strong>
    maxRadius="50"
    minRadius="0"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle BubbleChart représente les données en utilisant trois valeurs pour chaque point de données. Chaque point de données est défini par une valeur déterminant sa position sur l’axe horizontal, une valeur déterminant sa position sur l’axe vertical et une valeur déterminant la taille de l’élément de graphique, par rapport aux autres points de données du graphique.
  
  <p>Le contrôle BubbleChart suppose que la propriété de sa <codeph>série</codeph> contient un tableau d’objets BubbleSeries.</p>
  
  </apiDesc><example conref="BubbleChartExample.mxml"><swfblock conref="examples/BubbleChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#BubbleSeries"><linktext>mx.charts.series.BubbleSeries</linktext></link></related-links><apiConstructor id="mx.charts:BubbleChart:BubbleChart"><apiName>BubbleChart</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:BubbleChart:radiusAxis:get"><apiName>radiusAxis</apiName><shortdesc>
      Axe utilisé pour le positionnement du rayon des bulles. Les graphiques à bulles considèrent la taille des différentes bulles comme une troisième dimension des données, qui est transformée de la même manière que les positions x et y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Axe utilisé pour le positionnement du rayon des bulles. Les graphiques à bulles considèrent la taille des différentes bulles comme une troisième dimension des données, qui est transformée de la même manière que les positions x et y. Par défaut, <codeph>radiusAxis</codeph> est un objet LinearAxis dont la propriété <codeph>autoAdjust</codeph> est définie sur <codeph>false</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:BubbleChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:Legend"><apiName>Legend</apiName><shortdesc>
      Le contrôle Legend ajoute également une légende aux graphiques. La légende contient le libellé de chaque série de données du graphique et un renvoi désignant l’élément de graphique de la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="tileWidth"/><Exclude kind="property" name="tileHeight"/><Exclude kind="property" name="label"/><Exclude kind="property" name="icon"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="defaultButton"/><styles><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
      Alignement vertical de chaque enfant à l’intérieur de sa cellule Tile. Valeurs possibles : <codeph>"top"</codeph>, <codeph>"middle"</codeph> et <codeph>"bottom"</codeph>. Si la valeur est <codeph>"top"</codeph>, le bord supérieur de chaque enfant est confondu avec le bord supérieur de sa cellule. Si la valeur est <codeph>"middle"</codeph>, chaque enfant est centré verticalement dans la cellule. Si la valeur est <codeph>"bottom"</codeph>, le bord inférieur de chaque enfant est confondu avec le bord inférieur de sa cellule.
           </description>
<default>"top"
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts:Legend" playerVersion="Flash9" type="Object">
<description>
      Spécifie le style de trait de l’élément de légende.
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="uint">
<description>
      Couleur d’un symbole de composant. Les exemples incluent la coche d’un composant CheckBox ou la flèche d’un bouton ScrollBar.
       
      </description>
<default>0x000000
     
      </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
      Nombre de pixels entre la bordure supérieure de la légende et la partie supérieure de sa zone de contenu.
           </description>
<default>0
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
      Nombre de pixels entre la bordure inférieure de la légende et la partie inférieure de sa zone de contenu.
           </description>
<default>0
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="markerWidth" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
      Spécifie la largeur de l’élément de légende.
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="markerHeight" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
      Spécifie la hauteur de l’élément de légende.
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style enumeration="top,bottom,right,left" inherit="yes" name="labelPlacement" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
      Spécifie l’emplacement du libellé de l’élément de légende. Les valeurs possibles sont <codeph>"top"</codeph>, <codeph>"bottom"</codeph>, <codeph>"right"</codeph> et <codeph>"left"</codeph>.
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
      Alignement horizontal de chaque enfant à l’intérieur de sa cellule Tile. Valeurs possibles : <codeph>"left"</codeph>, <codeph>"center"</codeph> et <codeph>"right"</codeph>. Si la valeur est <codeph>"left"</codeph>, le bord gauche de chaque enfant est confondu avec le bord gauche de sa cellule. Si la valeur est <codeph>"center"</codeph>, chaque enfant est centré horizontalement dans la cellule. Si la valeur est <codeph>"right"</codeph>, le bord droit de chaque enfant est confondu avec le bord droit de sa cellule.
           </description>
<default>"left"
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="uint">
<description>
      Couleur de l’anneau de focus lorsque le composant détient le focus.
       
      </description>
<default>0x70B2EE
      
      </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style inherit="no" name="disabledOverlayAlpha" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
      Valeur alpha pour l’incrustation placée au-dessus du conteneur lorsqu’il est désactivé. 
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
      Rayon des angles des composants. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est 0. La valeur par défaut du contrôle ApplicationControlBar est 5.
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="uint">
<description>
      Couleur de la zone de contenu du composant. 
       
      </description>
<default>0xFFFFFF
      
      </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="Number">
<description>
      Valeur alpha de l’arrière-plan du contenu pour ce composant. 
     
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="barColor" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="uint">
<description>
      Détermine la couleur d’un contrôle ProgressBar. Un contrôle ProgressBar est rempli d’un dégradé vertical entre cette couleur et une couleur plus vive qui en découle. Ce style n’a aucun effet sur d’autres composants, mais il peut être défini sur un conteneur pour contrôler l’apparence de toutes les barres de progression trouvées à l’intérieur. La valeur par défaut est <codeph>undefined</codeph>, ce qui signifie qu’elle n’est pas définie. Dans ce cas, la propriété de style <codeph>themeColor</codeph> est utilisée.
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
      Couleur d’arrière-plan d’un composant. Les deux propriétés <codeph>backgroundColor</codeph> et <codeph>backgroundImage</codeph> peuvent être définies. Certains composants n’ont pas d’arrière-plan. Le contrôle DataGrid ignore ce style. La valeur par défaut est <codeph>undefined</codeph>, ce qui signifie qu’elle n’est pas définie. Si ce style et le style de la propriété <codeph>backgroundImage</codeph> sont <codeph>undefined</codeph>, le composant est doté d’un arrière-plan transparent.
           <p>Pour le conteneur Application, ce style indique la couleur d’arrière-plan lors du chargement de l’application et un dégradé d’arrière-plan lors de son exécution. Flex calcule le motif de dégradé entre une couleur légèrement plus sombre que la couleur spécifiée et une couleur légèrement plus claire que la couleur spécifiée.</p>
     
      <p>Les habillages par défaut de la plupart des contrôles Flex sont partiellement transparents. Par conséquent, la couleur d’arrière-plan d’un conteneur déteint partiellement sur les contrôles qui se trouvent dans ce conteneur. Vous pouvez éviter cette situation en définissant les valeurs Alpha de la propriété <codeph>fillAlphas</codeph> du contrôle sur 1, comme le montre l’exemple suivant :
      <pre>
      &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
          &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
      &lt;/mx:<i>Container</i>></pre>
      </p>
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
      Niveau Alpha de la couleur définie par la propriété <codeph>backgroundColor</codeph>, de l’image ou fichier SWF défini par le style <codeph>backgroundImage</codeph>. Les valeurs possibles vont de 0.0 à 1.0. Pour la plupart des contrôles, la valeur par défaut est 1.0, mais pour les contrôles ToolTip, la valeur par défaut est de 0.95 et pour les contrôles Alert, elle est de 0.9.
      
      </description>
<default>1.0
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAttachment" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
      Si une image d’arrière-plan est spécifiée, ce style spécifie si elle est figée dans la fenêtre (<codeph>"fixed"</codeph>) ou défile avec le contenu (<codeph>"scroll"</codeph>).
           </description>
<default>"scroll"
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="uint">
<description>
      Couleur d’accentuation utilisée par les habillages des composants. L’habillage de bouton par défaut utilise cette couleur pour teinter l’arrière-plan. La mise en surbrillance du rail du curseur utilise cette couleur.  
     
      </description>
<default>#0099FF
     
      </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants, verticalement. La valeur par défaut dépend de la classe de composant. Si elle n’est pas remplacée pour la classe, la valeur par défaut est 6.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants dans le sens horizontal. La valeur par défaut dépend de la classe de composant. Si elle n’est pas remplacée pour la classe, la valeur par défaut est 8.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur (en pixels).
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.charts:Legend" playerVersion="Flash10" type="Class">
<description>
  Classe implémentant l’occurrence IUITextField qui permet à ce composant de rendre le texte.
 
  <p>Elle peut être définie sur la classe mx.core.UITextField (pour utiliser la classe TextField classique intégrée à Flash Player) ou la classe mx.core.UIFTETextField (pour utiliser Text Layout Framework, qui permet d’améliorer le rendu du texte et d’obtenir notamment une mise en forme bidirectionnelle).</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut pour la plupart des contrôles est <codeph>left</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Pour ces composants, cette propriété est reconnue uniquement lorsque la valeur de la propriété <codeph>labelPlacement</codeph> est <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.charts:Legend" playerVersion="Flash10" type="String">
<description>
  Paramètres régionaux du texte affiché par ce composant. 
 
  <p>FTE et TLF utilisent ces paramètres régionaux pour mapper des caractères Unicode à des glyphes de police et rechercher des polices de rechange. </p>
 
  <p>Remarque : ce style s’applique uniquement lorsqu’un composant MX spécifie UIFTETextField comme classe <codeph>textFieldClass</codeph>.</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts:Legend" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est pris en charge uniquement pour les polices anticrénelage avancées incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en gras. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"bold"</codeph>. Pour les contrôles Button, la valeur par défaut est <codeph>"bold »</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police anticrénelage avancée incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced »</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. La valeur par défaut est 10 pour tous les contrôles, à l’exception de ColorPicker. Pour le contrôle ColorPicker, la valeur par défaut est 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police anticrénelage avancée incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced »</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police anticrénelage avancée incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced »</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>. Cette valeur active l’anticrénelage avancé lorsque vous utilisez une police anticrénelage avancée. Définissez cette propriété sur <codeph>"normal"</codeph> pour désactiver l’anticrénelage avancé.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts:Legend" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts:Legend" playerVersion="Flash9" type="uint">
<description>
  Couleur du texte du composant, libellé du composant inclus.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure droite du contrôle et le bord droit de sa zone de contenu.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure gauche du contrôle et le bord gauche de sa zone de contenu.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Distance de l’ombre portée. Si la propriété est définie sur une valeur négative, l’ombre apparaît au-dessus du composant.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="String">
<description>
  Direction de l’ombre portée. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"center"</codeph> et <codeph>"right"</codeph>.
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropShadowColor" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’ombre portée.
 
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Propriété booléenne qui indique si le composant comporte une ombre portée visible. La valeur par défaut est <codeph>false</codeph>.
 
  <p><b>Remarque :</b> pour que les ombres portées apparaissent sur des conteneurs, définissez la propriété <codeph>contentBackgroundColor</codeph>. Sinon, l’ombre s’affiche derrière le conteneur, car l’arrière-plan par défaut d’un conteneur est transparent.</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  Propriété booléenne qui indique si le composant comporte une ombre portée visible. Ce style est utilisé avec <codeph>borderStyle="solid"</codeph>. La valeur par défaut est <codeph>false</codeph>.
 
  <p><b>Remarque :</b> pour que les ombres portées apparaissent sur des conteneurs, définissez les propriétés <codeph>backgroundColor</codeph> ou <codeph>backgroundImage</codeph>. Sinon, l’ombre s’affiche derrière le conteneur, car l’arrière-plan par défaut d’un conteneur est transparent.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Visibilité de la bordure.
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Epaisseur du cadre de sélection. Utilisé uniquement lorsque la propriété <codeph>borderStyle</codeph> est définie sur <codeph>"solid"</codeph>.
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  Style du cadre de sélection. Les valeurs possibles sont <codeph>"none"</codeph>, <codeph>"solid"</codeph>, <codeph>"inset"</codeph> et <codeph>"outset"</codeph>. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>"inset"</codeph>. La valeur par défaut de la plupart des conteneurs est <codeph>"none"</codeph>. Les valeurs <codeph>"inset"</codeph> et <codeph>"outset"</codeph> sont valides uniquement avec le thème Halo.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSkin" owner="mx.charts:Legend" playerVersion="Flash9" type="Class">
<description>
  Classe d’habillage de bordure du composant. La valeur par défaut de tous les composants qui ne spécifient pas explicitement leur propre valeur par défaut est <codeph>mx.skins.halo.HaloBorder</codeph> pour le thème Halo et <codeph>mx.skins.spark.BorderSkin</codeph> pour le thème Spark. La valeur par défaut du conteneur Panel est <codeph>mx.skins.halo.PanelSkin</codeph> pour le thème Halo et <codeph>mx.skins.spark.BorderSkin</codeph> pour le thème Spark. Pour déterminer la valeur par défaut d’un composant, voir le fichier default.css.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSides" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="String">
<description>
  Côtés du cadre de sélection. Chaîne délimitée par des espaces qui indique quels côtés de la bordure afficher. La chaîne peut contenir les valeurs <codeph>"left"</codeph>, <codeph>"top"</codeph>, <codeph>"right"</codeph> et <codeph>"bottom"</codeph> dans n’importe quel ordre. La valeur par défaut est <codeph>"left top right bottom"</codeph>, ce qui permet de montrer les quatre côtés. Ce style est uniquement utilisé lorsque la propriété borderStyle est <codeph>"solid"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  Couleur de la bordure. La valeur par défaut dépend de la classe du composant ; si elle n’est pas remplacée pour la classe, la valeur par défaut est <codeph>0xB7BABC</codeph> pour le thème Halo et <codeph>0x696969</codeph> pour le thème Spark. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Alpha de la bordure.
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSize" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="String">
<description>
  Met à l’échelle l’image spécifiée par la propriété <codeph>backgroundImage</codeph> sur différentes tailles de pourcentage. Une valeur de <codeph>"100%"</codeph> étire l’image afin de remplir l’intégralité du composant. Pour spécifier un pourcentage, vous devez inclure le symbole de pourcentage (%). La valeur par défaut du conteneur Application est <codeph>100%</codeph>. La valeur par défaut de tous les autres conteneurs est <codeph>auto</codeph>, ce qui permet de conserver la taille d’origine de l’image.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="Object">
<description>
  Image d’arrière-plan d’un composant. Il peut s’agir d’une URL absolue ou relative ou d’une classe. Vous pouvez définir la propriété <codeph>backgroundColor</codeph> ou <codeph>backgroundImage</codeph>. L’image d’arrière-plan s’affiche par dessus la couleur d’arrière-plan. La valeur par défaut est <codeph>undefined</codeph>, c’est-à-dire « non définie ». Si ce style et le style de la propriété <codeph>backgroundColor</codeph> ne sont pas définis, le composant est doté d’un arrière-plan transparent.
 
  <p>Les habillages par défaut de la plupart des contrôles Flex sont partiellement transparents. Par conséquent, l’image d’arrière-plan d’un conteneur déteint partiellement sur les contrôles qui se trouvent dans ce conteneur. Vous pouvez éviter cette situation en définissant les valeurs Alpha de la propriété <codeph>fillAlphas</codeph> du contrôle sur 1, comme le montre l’exemple suivant :
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="backgroundDisabledColor" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur d’arrière-plan du composant lorsqu’il est désactivé. La valeur par défaut globale est <codeph>undefined</codeph>. La valeur par défaut des contrôles List est <codeph>0xDDDDDD</codeph> (gris clair). Si un conteneur est désactivé, l’arrière-plan est estompé et le degré d’estompe est contrôlé par le style <codeph>disabledOverlayAlpha</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
      <p>The <code>&lt;mx:Legend&gt;</code> tag inherits all the properties
      of its parent classes and adds the following properties:</p>
      
      <pre>
      &lt;mx:Legend
        <strong>Properties</strong>
        autoLayout="true|false"
        clipContent="true|false"
        creationIndex="undefined"
        creationPolicy="auto|all|queued|none"
        dataProvider="<i>No default</i>"
        direction="horizontal|vertical"
        horizontalScrollPosition="0"
        legendItemClass="<i>No default</i>"
        verticalScrollPosition="0"   
     
        <strong>Styles</strong>
        backgroundAlpha="1.0"
        backgroundAttachment="scroll"
        backgroundColor="undefined"
        backgroundDisabledColor="undefined"
        backgroundImage="undefined"
        backgroundSize="auto" 
        barColor="undefined"
        borderColor="0xAAB3B3"
        borderSides="left top right bottom"
        borderSkin="mx.skins.halo.HaloBorder"
        borderStyle="inset|none|solid|outset"
        borderThickness="1"
        color="0x0B333C"
        cornerRadius="0"
        disabledColor="0xAAB3B3"
        disbledOverlayAlpha="undefined"
        dropShadowColor="0x000000"
        dropShadowEnabled="false"
        fontAntiAliasType="advanced"
        fontfamily="Verdana"
        fontGridFitType="pixel"
        fontSharpness="0""
        fontSize="10"
        fontStyle="normal"
        fontThickness="0"
        fontWeight="normal"
        horizontalAlign="left|center|right"
        horizontalGap="<i>8</i>"
        labelPlacement="right|left|top|bottom"
        markerHeight="15"
        markerWidth="10"
        paddingBottom="0"
        paddingLeft="0"
        paddingRight="0"
        paddingTop="0"
        shadowDirection="center"
        shadowDistance="2"
        stroke="<i>IStroke; no default</i>"
        textAlign="left"
        textDecoration="none|underline"
        textIndent="0"
        verticalAlign="top|middle|bottom"
        verticalGap="<i>6</i>"
        
        <strong>Events</strong>
        childAdd="<i>No default</i>"
        childIndexChange="<i>No default</i>"
        childRemove="<i>No default</i>"
        dataChange="<i>No default</i>"
        itemClick="<i>Event; no default</i>"
        itemMouseDown="<i>Event; no default</i>"
        itemMouseOut="<i>Event; no default</i>"
        itemMouseOver="<i>Event; no default</i>"
        itemMouseUp="<i>Event; no default</i>"
      /&gt;
      </pre>
           ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IContainer</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
      Le contrôle Legend ajoute également une légende aux graphiques. La légende contient le libellé de chaque série de données du graphique et un renvoi désignant l’élément de graphique de la série.
      
      <p>Vous pouvez initialiser un contrôle Legend en liant un identificateur de contrôle de graphique à la propriété <codeph>dataProvider</codeph> du contrôle Legend, ou définir un tableau d’objets LegendItem.</p>
           </apiDesc><example conref="PlotChartExample.mxml"><swfblock conref="examples/PlotChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#LegendItem"><linktext>mx.charts.LegendItem</linktext></link></related-links><adobeApiEvent id="mx.charts:Legend_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
      Distribué lorsque la propriété data change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Distribué lorsque la propriété <codeph>data</codeph> change.
           <p>Lorsqu’une légende est utilisée comme rendu dans un objet List ou d’autres composants, la propriété <codeph>data</codeph> permet de transmettre à la légende les données à afficher.</p>
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.events.ChildExistenceChangedEvent.CHILD_REMOVE_childRemove"><apiName>childRemove</apiName><shortdesc>
      Distribuée avant la suppression d’un enfant d’une légende.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ChildExistenceChangedEvent.CHILD_REMOVE</apiEventType><adobeApiEventClassifier>mx.events.ChildExistenceChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Distribuée avant la suppression d’un enfant d’une légende.
           <p>Cet événement est diffusé lors de l’appel de l’une des méthodes suivantes : <codeph>removeChild()</codeph>, <codeph>removeChildAt()</codeph> ou <codeph>removeAllChildren()</codeph>.</p>
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.events.IndexChangedEvent.CHILD_INDEX_CHANGE_childIndexChange"><apiName>childIndexChange</apiName><shortdesc>
      Distribuée après la modification de l’index (parmi les enfants de la légende) d’un enfant de la légende.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.IndexChangedEvent.CHILD_INDEX_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.IndexChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Distribuée après la modification de l’index (parmi les enfants de la légende) d’un enfant de la légende. Cet événement est diffusé uniquement pour l’enfant spécifié comme argument de la méthode <codeph>setChildIndex()</codeph>. Il n’est diffusé pour aucun autre enfant dont la position d’index change en raison de l’appel de la méthode <codeph>setChildIndex()</codeph>.
           <p>La position d’index de l’enfant est modifiée lorsque la méthode <codeph>setChildIndex()</codeph> est appelée.</p>
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.events.ChildExistenceChangedEvent.CHILD_ADD_childAdd"><apiName>childAdd</apiName><shortdesc>
      Distribuée après l’ajout d’un enfant à une légende.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ChildExistenceChangedEvent.CHILD_ADD</apiEventType><adobeApiEventClassifier>mx.events.ChildExistenceChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Distribuée après l’ajout d’un enfant à une légende.
           <p>L’événement childAdd est distribué lors de l’appel de la méthode <codeph>addChild()</codeph> ou <codeph>addChildAt()</codeph>. Lors de la première création d’un conteneur, la méthode <codeph>addChild()</codeph> est automatiquement appelée pour chaque composant enfant déclaré dans le fichier MXML. La méthode <codeph>addChildAt()</codeph> est appelée automatiquement chaque fois qu’un objet Repeater ajoute ou supprime des objets enfant. Le développeur de l’application peut également appeler ces méthodes manuellement pour ajouter de nouveaux enfants.</p>
           <p>Lorsque cet événement est envoyé, l’objet enfant a été initialisé, mais sa largeur et sa hauteur n’ont pas encore été calculées et il n’a pas été tracé à l’écran. Si vous souhaitez recevoir une notification lorsque l’enfant est entièrement initialisé et rendu, enregistrez-vous en tant qu’écouteur pour l’événement <codeph>creationComplete</codeph> de l’enfant.</p>
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.charts.events.LegendMouseEvent.ITEM_MOUSE_UP_itemMouseUp"><apiName>itemMouseUp</apiName><shortdesc>
      Distribué lorsque l’utilisateur relâche le bouton de la souris alors que le pointeur survole un objet LegendItem du contrôle Legend.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.LegendMouseEvent.ITEM_MOUSE_UP</apiEventType><adobeApiEventClassifier>mx.charts.events.LegendMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Distribué lorsque l’utilisateur relâche le bouton de la souris alors que le pointeur survole un objet LegendItem du contrôle Legend.
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.charts.events.LegendMouseEvent.ITEM_MOUSE_OVER_itemMouseOver"><apiName>itemMouseOver</apiName><shortdesc>
      Distribué lorsque l’utilisateur place le pointeur de la souris au-dessus d’un objet LegendItem du contrôle Legend.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.LegendMouseEvent.ITEM_MOUSE_OVER</apiEventType><adobeApiEventClassifier>mx.charts.events.LegendMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Distribué lorsque l’utilisateur place le pointeur de la souris au-dessus d’un objet LegendItem du contrôle Legend.
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.charts.events.LegendMouseEvent.ITEM_MOUSE_OUT_itemMouseOut"><apiName>itemMouseOut</apiName><shortdesc>
      Distribué lorsque l’utilisateur éloigne le pointeur de la souris d’un objet LegendItem du contrôle Legend, alors qu’il le survolait.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.LegendMouseEvent.ITEM_MOUSE_OUT</apiEventType><adobeApiEventClassifier>mx.charts.events.LegendMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Distribué lorsque l’utilisateur éloigne le pointeur de la souris d’un objet LegendItem du contrôle Legend, alors qu’il le survolait.
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.charts.events.LegendMouseEvent.ITEM_MOUSE_DOWN_itemMouseDown"><apiName>itemMouseDown</apiName><shortdesc>
      Distribué lorsque l’utilisateur appuie le bouton de la souris alors que le pointeur survole un objet LegendItem du contrôle Legend.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.LegendMouseEvent.ITEM_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>mx.charts.events.LegendMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Distribué lorsque l’utilisateur appuie le bouton de la souris alors que le pointeur survole un objet LegendItem du contrôle Legend.
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.charts.events.LegendMouseEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
      Distribué lorsque l’utilisateur clique sur un objet LegendItem du contrôle Legend.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.LegendMouseEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.charts.events.LegendMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Distribué lorsque l’utilisateur clique sur un objet LegendItem du contrôle Legend.
           </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.charts:Legend:Legend"><apiName>Legend</apiName><shortdesc>
          Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
          Constructeur.
          
          </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts:Legend:addChildAt"><apiName>addChildAt</apiName><shortdesc>
          Ajoute un objet DisplayObject enfant à ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Enfant ajouté comme un objet de type DisplayObject. La valeur renvoyée est généralement projetée sur un objet UIComponent ou le type du composant ajouté.
                   </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Objet DisplayObject à ajouter en tant qu’enfant de ce conteneur. Il doit implémenter l’interface IUIComponent.
                   </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Position d’index à laquelle ajouter l’enfant.
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          Ajoute un objet DisplayObject enfant à ce conteneur. L’enfant est placé à la position d’index spécifiée.
                   <p><b>Remarque : </b>lorsque l’argument <codeph>child</codeph> de la méthode est spécifié de type DisplayObject, l’argument doit implémenter l’interface IUIComponent pour être ajouté en tant qu’enfant d’un conteneur. Tous les composants Flex implémentent cette interface.</p>
                   <p>Les enfants sont superposés de l’arrière à l’avant. En d’autres termes, si les enfants se chevauchent, celui portant la position d’index 0 est le plus éloigné et celui portant la position d’index <codeph>numChildren - 1</codeph> est le plus rapproché. Cela signifie que les nouveaux enfants ajoutés sont superposés aux enfants existants.</p>
                   <p>Lorsque vous ajoutez un nouvel enfant à une position d’index déjà occupée par un enfant ancien, il ne remplace pas l’enfant ancien. Au lieu de cela, l’enfant ancien et ceux figurant après se décalent et voient leur position d’index incrémentée d’une unité. Par exemple, supposons qu’un conteneur contient les enfants (A, B, C) et que vous ajoutez D à la position d’index 1. Le conteneur contiendra (A, D, B, C). Si vous souhaitez remplacer un enfant ancien, vous devez d’abord le supprimer avant d’ajouter le nouveau.</p>
                   </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.IUIComponent.xml"><linktext>mx.core.IUIComponent</linktext></link></related-links></apiOperation><apiOperation id="mx.charts:Legend:addChild"><apiName>addChild</apiName><shortdesc>
          Ajoute un objet DisplayObject enfant à ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Enfant ajouté comme un objet de type DisplayObject. La valeur renvoyée est généralement projetée sur un objet UIComponent ou le type du composant ajouté.
                   </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Objet DisplayObject à ajouter en tant qu’enfant de ce conteneur. Il doit implémenter l’interface IUIComponent.
                   </apiDesc></apiParam><apiTipTexts><apiTipText>Ajoute un objet enfant à ce conteneur.
          
          </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
          Ajoute un objet DisplayObject enfant à ce conteneur. L’enfant est ajouté après les autres enfants existants, de sorte que le premier enfant ajouté a la position d’index 0, le prochain a la position d’index 1 et ainsi de suite.
                   <p><b>Remarque : </b>lorsque l’argument <codeph>child</codeph> de la méthode est spécifié de type DisplayObject, l’argument doit implémenter l’interface IUIComponent pour être ajouté en tant qu’enfant d’un conteneur. Tous les composants Flex implémentent cette interface.</p>
                   <p>Les enfants sont superposés de l’arrière à l’avant. En d’autres termes, si les enfants se chevauchent, celui portant la position d’index 0 est le plus éloigné et celui portant la position d’index <codeph>numChildren - 1</codeph> est le plus rapproché. Cela signifie que les nouveaux enfants ajoutés sont superposés aux enfants existants.</p>
                   </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.IUIComponent.xml"><linktext>mx.core.IUIComponent</linktext></link></related-links></apiOperation><apiOperation id="mx.charts:Legend:addElementAt"><apiName>addElementAt</apiName><shortdesc conref="mx.core.IVisualElementContainer#addElementAt()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#addElementAt()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:addElement"><apiName>addElement</apiName><shortdesc conref="mx.core.IVisualElementContainer#addElement()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#addElement()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:protected:attachOverlay"><apiName>attachOverlay</apiName><shortdesc>
          Utilisée en interne par l’effet Fondre pour ajouter l’incrustation au chrome d’un conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          Utilisée en interne par l’effet Fondre pour ajouter l’incrustation au chrome d’un conteneur. 
          
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:contentToGlobal"><apiName>contentToGlobal</apiName><shortdesc conref="mx.core.UIComponent#contentToGlobal()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#contentToGlobal()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:contentToLocal"><apiName>contentToLocal</apiName><shortdesc conref="mx.core.UIComponent#contentToLocal()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#contentToLocal()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:protected:createBorder"><apiName>createBorder</apiName><shortdesc>
          Crée l’habillage de la bordure du conteneur s’il est nécessaire et n’existe pas encore. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          Crée l’habillage de la bordure du conteneur s’il est nécessaire et n’existe pas encore. 
          
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:createComponentFromDescriptor"><apiName>createComponentFromDescriptor</apiName><shortdesc>
          A partir d’un seul descripteur UIComponentDescriptor, créez le composant correspondant et ajoutez le composant en tant qu’enfant de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Composant qui est créé.
         
          </apiDesc><apiType value="mx.core:IFlexDisplayObject"/></apiReturn><apiParam><apiItemName>descriptor</apiItemName><apiType value="mx.core:ComponentDescriptor"/><apiDesc>Le descripteur UIComponentDescriptor pour le composant à créer. Cet argument est soit un objet UIComponentDescriptor, soit la position d’index de l’un des enfants du conteneur (entier compris entre 0 et n-1, où n est le nombre total d’enfants de ce conteneur). 
                   </apiDesc></apiParam><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc>Si la valeur est <codeph>false</codeph>, créez ce composant, mais aucun de ses enfants. Si la valeur est <codeph>true</codeph>, après la création du composant, Flex appelle la méthode <codeph>createComponentsFromDescriptors()</codeph> pour créer un ou plusieurs de ses enfants, en fonction de la valeur de la propriété <codeph>creationPolicy</codeph> du composant.
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          A partir d’un seul descripteur UIComponentDescriptor, créez le composant correspondant et ajoutez le composant en tant qu’enfant de ce conteneur.
          
          <p>Cette méthode instancie le nouvel objet, mais ne l’ajoute pas à la liste d’affichage. L’objet ne s’affiche donc pas sur l’écran par défaut. Pour ajouter le nouvel objet à la liste d’affichage, appelez la méthode <codeph>validateNow()</codeph> sur le conteneur après l’appel de la méthode <codeph>createComponentFromDescriptor()</codeph>, comme l’illustre l’exemple suivant :
          <pre>
          myVBox.createComponentFromDescriptor(myVBox.childDescriptors[0],false);
          myVBox.validateNow();
          </pre>
          </p>
          
          <p>Vous pouvez également appeler la méthode <codeph>createComponentsFromDescriptors()</codeph> sur le conteneur pour créer tous les composants à la fois. Il n’est pas nécessaire d’appeler la méthode <codeph>validateNow()</codeph> après l’appel de la méthode <codeph>createComponentsFromDescriptors()</codeph>.</p>
                   </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.UIComponentDescriptor.xml"><linktext>mx.core.UIComponentDescriptor</linktext></link></related-links></apiOperation><apiOperation id="mx.charts:Legend:createComponentsFromDescriptors"><apiName>createComponentsFromDescriptors</apiName><shortdesc>
          Effectuez une itération sur le tableau de descripteurs childDescriptors et appelez la méthode createComponentFromDescriptor() pour chacun d’entre eux.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, créer les composants de manière récursive.
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Effectuez une itération sur le tableau de descripteurs <codeph>childDescriptors</codeph> et appelez la méthode <codeph>createComponentFromDescriptor()</codeph> pour chacun d’entre eux.
          
          <p>Si la valeur de la propriété <codeph>creationPolicy</codeph> du conteneur est <codeph>ContainerCreationPolicy.ALL</codeph>, alors cette méthode est appelée automatiquement lors de la séquence d’initialisation.</p>
          
          <p>Si la valeur de la propriété <codeph>creationPolicy</codeph> est <codeph>ContainerCreationPolicy.AUTO</codeph>, cette méthode est appelée automatiquement lorsque les enfants du conteneur sont sur le point de devenir visibles.</p>
          
          <p>Si la valeur de la propriété <codeph>creationPolicy</codeph> du conteneur est <codeph>ContainerCreationPolicy.NONE</codeph>, il est conseillé d’appeler cette fonction lorsque vous souhaitez créer les enfants de ce conteneur.</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:createDeferredContent"><apiName>createDeferredContent</apiName><shortdesc>
          Exécute une action équivalente à l’appel de la méthode createComponentsFromDescriptors(true) pour les conteneurs qui implémentent l’interface IDeferredContentOwner afin de prendre en charge l’instanciation différée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          Exécute une action équivalente à l’appel de la méthode <codeph>createComponentsFromDescriptors(true)</codeph> pour les conteneurs qui implémentent l’interface IDeferredContentOwner afin de prendre en charge l’instanciation différée. 
                   </apiDesc></apiOperationDetail><related-links><link href="mx.charts.xml#Legend/createComponentsFromDescriptors()"><linktext>createComponentsFromDescriptors()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts:Legend:executeBindings"><apiName>executeBindings</apiName><shortdesc>
          Exécute tous les liaisons de données sur ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>Si la valeur est false, ne s’exécutent le panneau Liaisons sur ce conteneur. </codeph> Si la valeur est <codeph>true</codeph>, exécuter également les liaisons sur les descendants de ce conteneur, ses enfants, petits-enfants, arrière-petits-enfants, et ainsi de suite.
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Exécute tous les liaisons de données sur ce conteneur. Flex appelle cette méthode automatiquement après la création d’un conteneur pour provoquer l’exécution des liaisons de données ayant des destinations en son sein. Solution au problème de conteneur/liaisons MXML (177074) : remplacer la méthode Container.executeBindings() pour préférer descriptor.document à parentDocument dans l’appel de la méthode BindingManager.executeBindings(). Cette opération doit toujours fournir le comportement correct pour les occurrences créées par descripteur et fournit le comportement d’origine pour les occurrences créées de manière procédurale (le bogue peut se produire, ou non, dans le dernier cas). Une correction plus approfondie, garantissant un comportement correct en présence de scénarios non DI et de scénarios à composants réapparentés, est prévue pour Updater 1.
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:executeChildBindings"><apiName>executeChildBindings</apiName><shortdesc>
          Exécute les liaisons dans les objets UIComponent enfant de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc>Si la valeur est <codeph>false</codeph>, seuls les liaisons des enfants immédiats de cet objet Container sont exécutés. Si la valeur est <codeph>true</codeph>, exécuter également les liaisons sur les descendants de ce conteneur, ses petits-enfants, arrière-petits-enfants, et ainsi de suite.
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Exécute les liaisons dans les objets UIComponent enfant de ce conteneur. Flex appelle cette méthode automatiquement après la création d’un conteneur.
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:getChildAt"><apiName>getChildAt</apiName><shortdesc>
          Récupère le n-ième objet de composant enfant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Référence à l’enfant comme un objet de type DisplayObject. La valeur renvoyée est généralement projetée sur un composant UIComponent ou sur le type d’un contrôle Flex spécifique, tel qu’un composant ComboBox ou TextArea. 
          
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Nombre compris entre 0 et (numChildren - 1).
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          Récupère le <i>n</i>ième objet de composant enfant.
                   <p>Les enfants renvoyés par cette méthode incluent les enfants déclarées dans le code MXML et les enfants ajoutés à l’aide de la méthode <codeph>addChild()</codeph> ou <codeph>addChildAt()</codeph>.</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:getChildByName"><apiName>getChildByName</apiName><shortdesc>
          Renvoie l’enfant dont la propriété name est la chaîne spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Objet DisplayObject représentant l’enfant comme un objet de type DisplayObject. La valeur renvoyée est généralement projetée sur un composant UIComponent ou sur le type d’un contrôle Flex spécifique, tel qu’un composant ComboBox ou TextArea. Transmet une erreur d’exécution si l’enfant portant le nom spécifié n’existe pas.
          
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>Identifiant de l’enfant.
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          Renvoie l’enfant dont la propriété <codeph>name</codeph> est la chaîne spécifiée.
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:getChildIndex"><apiName>getChildIndex</apiName><shortdesc>
          Récupère la position d’index à base zéro d’un enfant spécifique. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nombre compris entre 0 et (numChildren - 1).
          
          </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Référence à l’enfant correspondant à la position d’index à obtenir.
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          Récupère la position d’index basée sur zéro d’un enfant spécifique. 
                   <p>Le premier enfant du conteneur (par exemple la première balise enfant figurant dans la déclaration MXML) a la position d’index 0, le deuxième enfant a la position d’index 1, et ainsi de suite. Les positions d’index des enfants d’un conteneur déterminent l’ordre dans lequel ils sont présentés. Par exemple, dans une VBox l’enfant ayant la position d’index 0 est situé en haut, l’enfant ayant la position d’index 1 est situé en dessous, etc.</p>
                   <p>Si vous ajoutez un enfant en appelant la méthode <codeph>addChild()</codeph>, la position d’index du nouvel enfant est égale à la plus grande position d’index parmi les enfants existants plus un. Vous pouvez insérer un enfant à une position d’index spécifiée à l’aide de la méthode <codeph>addChildAt()</codeph>. Dans ce cas, les indices de l’enfant à cette position d’index et ceux des enfants ayant des indices supérieurs sont tous augmentés de 1, afin que tous les indices appartiennent à la plage comprise entre 0 et <codeph>(numChildren - 1)</codeph>.</p>
                   <p>Si vous supprimez un enfant en appelant la méthode <codeph>removeChild()</codeph> ou <codeph>removeChildAt()</codeph>, alors les indices des enfants restants sont ajustés afin que tous les indices appartiennent à la plage comprise entre 0 et <codeph>(numChildren - 1)</codeph>.</p>
                   <p>Si <codeph>myView.getChildIndex(myChild)</codeph> renvoie 5, alors <codeph>myView.getChildAt(5)</codeph> renvoie myChild.</p>
                   <p>La position d’index d’un enfant peut être modifiée par l’appel de la méthode <codeph>setChildIndex()</codeph>.</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:getChildren"><apiName>getChildren</apiName><shortdesc>
          Renvoie un tableau d’objets DisplayObject composé des enfants de contenu du conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tableau d’objets DisplayObject composé des enfants de contenu du conteneur.
         
          </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
          Renvoie un tableau d’objets DisplayObject composé des enfants de contenu du conteneur. Ce tableau n’inclut <b>pas</b> les objets DisplayObject qui implémentent les éléments d’affichage du conteneur, telles que sa bordure et l’image d’arrière-plan.
                   </apiDesc></apiOperationDetail><related-links><link href="mx.charts.xml#Legend/rawChildren"><linktext>rawChildren</linktext></link></related-links></apiOperation><apiOperation id="mx.charts:Legend:getElementAt"><apiName>getElementAt</apiName><shortdesc conref="mx.core.IVisualElementContainer#getElementAt()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#getElementAt()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:getElementIndex"><apiName>getElementIndex</apiName><shortdesc conref="mx.core.IVisualElementContainer#getElementIndex()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#getElementIndex()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:globalToContent"><apiName>globalToContent</apiName><shortdesc conref="mx.core.UIComponent#globalToContent()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#globalToContent()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:protected:layoutChrome"><apiName>layoutChrome</apiName><shortdesc>
          Répond aux changements de taille en définissant les positions et les tailles des bordures de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Indique la largeur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleX</codeph> du composant.
                   </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Indique la hauteur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleY</codeph> du composant.
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Répond aux changements de taille en définissant les positions et les tailles des bordures de ce conteneur. Il s’agit d’une méthode avancée que vous pouvez remplacer lorsque vous créez une sous-classe de la classe Container.
                   <p>Flex appelle la méthode <codeph>layoutChrome()</codeph> lorsque le conteneur est ajouté à un conteneur parent par le biais de la méthode <codeph>addChild()</codeph> et lorsque la méthode <codeph>invalidateDisplayList()</codeph> du conteneur est appelée.</p>
                   <p>La méthode <codeph>Container.layoutChrome()</codeph> est appelée quelle que soit la valeur de la propriété <codeph>autoLayout</codeph>.</p>
                   <p>La méthode <codeph>Container.layoutChrome()</codeph> définit la position et la taille de la bordure du conteneur de la classe Container. Dans chaque sous-classe de la classe Container, la méthode <codeph>layoutChrome()</codeph> de la sous-classe doit appeler la méthode <codeph>super.layoutChrome()</codeph>, afin de positionner correctement la bordure.</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:localToContent"><apiName>localToContent</apiName><shortdesc conref="mx.core.UIComponent#localToContent()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#localToContent()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeAllChildren"><apiName>removeAllChildren</apiName><shortdesc>
          Supprime tous les enfants de la liste d’enfants de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          Supprime tous les enfants de la liste d’enfants de ce conteneur.
          
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeAllElements"><apiName>removeAllElements</apiName><shortdesc conref="mx.core.IVisualElementContainer#removeAllElements()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#removeAllElements()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeChildAt"><apiName>removeChildAt</apiName><shortdesc>
          Supprime un objet DisplayObject enfant de la liste d’enfants de ce conteneur à la position d’index spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Enfant supprimé comme un objet de type DisplayObject. La valeur renvoyée est généralement projetée sur un objet UIComponent ou le type du composant supprimé.
          
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index enfant de l’objet DisplayObject à supprimer.
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          Supprime un objet DisplayObject enfant de la liste d’enfants de ce conteneur à la position d’index spécifiée. La propriété <codeph>parent</codeph> de l’enfant supprimé est définie sur null. L’enfant persiste sauf s’il est explicitement détruit. Si vous l’ajoutez à un autre conteneur, il conserve son dernier état connu.
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeChild"><apiName>removeChild</apiName><shortdesc>
          Supprime un objet DisplayObject enfant de la liste d’enfants de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Enfant supprimé comme un objet de type DisplayObject. La valeur renvoyée est généralement projetée sur un objet UIComponent ou le type du composant supprimé.
          
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Objet DisplayObject à supprimer.
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          Supprime un objet DisplayObject enfant de la liste d’enfants de ce conteneur. La propriété <codeph>parent</codeph> de l’enfant supprimé est définie sur null. L’enfant persiste sauf s’il est explicitement détruit. Si vous l’ajoutez à un autre conteneur, il conserve son dernier état connu.
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeElementAt"><apiName>removeElementAt</apiName><shortdesc conref="mx.core.IVisualElementContainer#removeElementAt()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#removeElementAt()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeElement"><apiName>removeElement</apiName><shortdesc conref="mx.core.IVisualElementContainer#removeElement()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#removeElement()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:protected:scrollChildren"><apiName>scrollChildren</apiName><shortdesc>
          Positionne la zone de contenu du conteneur par rapport à la zone visible, en fonction des propriétés horizontalScrollPosition et verticalScrollPosition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          Positionne la zone de contenu du conteneur par rapport à la zone visible, en fonction des propriétés horizontalScrollPosition et verticalScrollPosition. Le contenu qui n’apparaît pas dans la zone affichable est découpé. Cette méthode doit être remplacée par les sous-classes dont le chrome peut défiler dans la zone de contenu.
          
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:setChildIndex"><apiName>setChildIndex</apiName><shortdesc>
          Définit la position d’index d’un enfant particulier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Référence à l’enfant correspondant à la position d’index à définir.
                   </apiDesc></apiParam><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiDesc>Nombre indiquant la nouvelle position d’index. Doit correspondre à un entier compris entre 0 et (numChildren - 1).
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Définit la position d’index d’un enfant particulier. Voir la méthode <codeph>getChildIndex()</codeph> pour une description de la position d’index de l’enfant.
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:setElementIndex"><apiName>setElementIndex</apiName><shortdesc conref="mx.core.IVisualElementContainer#setElementIndex()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#setElementIndex()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc conref="mx.core.IVisualElementContainer#swapElementsAt()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#swapElementsAt()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:swapElements"><apiName>swapElements</apiName><shortdesc conref="mx.core.IVisualElementContainer#swapElements()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#swapElements()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
          Répond aux changements de taille en définissant les positions et les tailles des enfants de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Indique la largeur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleX</codeph> du composant.
                   </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Indique la hauteur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleY</codeph> du composant.
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          Répond aux changements de taille en définissant les positions et les tailles des enfants de ce conteneur.
                   <p>Pour plus d’informations sur la méthode <codeph>updateDisplayList()</codeph>, voir la méthode <codeph>UIComponent.updateDisplayList()</codeph>.</p>
                   <p>La méthode <codeph>Container.updateDisplayList()</codeph> définit la position et la taille de la bordure du conteneur de la classe Container. Dans chaque sous-classe de la classe Container, la méthode <codeph>updateDisplayList()</codeph> de la sous-classe doit appeler la méthode <codeph>super.updateDisplayList()</codeph>, afin de positionner correctement la bordure.</p>
                   </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.UIComponent.xml"><linktext>mx.core.UIComponent</linktext></link></related-links></apiOperation><apiValue id="mx.charts:Legend:protected:actualCreationPolicy"><apiName>actualCreationPolicy</apiName><shortdesc>
          Stratégie de création de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
          Stratégie de création de ce conteneur. 
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:legendItemClass"><apiName>legendItemClass</apiName><shortdesc>
          Classe utilisée pour instancier des objets LegendItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
          Classe utilisée pour instancier des objets LegendItem. Lorsque le contenu d’une légende est dérivé du graphique ou des données, il instancie une occurrence de <codeph>legendItemClass</codeph> pour chaque élément décrit par le fournisseur <codeph>dataProvider</codeph>. Si vous souhaitez mettre en œuvre un comportement personnalisé dans les éléments de légende, vous pouvez affecter une sous-classe de la classe LegendItem à cette propriété, de sorte que le contrôle Legend crée des occurrences de leur type dérivé.  
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:autoLayout:get"><apiName>autoLayout</apiName><shortdesc>
          Si la valeur est true, la mesure et la présentation sont effectuées lorsque la position ou la taille de l’enfant est modifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Si la valeur est <codeph>true</codeph>, la mesure et la présentation sont effectuées lorsque la position ou la taille de l’enfant est modifiée. <codeph>Si la valeur est false, mesure et la mise en page sont lieu qu’une seule fois, lorsque les enfants sont ajoutés ou supprimés dans le conteneur. </codeph>
                   <p>Lorsque vous utilisez l’effet Move, la présentation autour du composant en mouvement n’est pas réajusté pour correspondre à l’animation de l’effet Move. La définition de la propriété <codeph>autoLayout</codeph> d’un conteneur sur <codeph>true</codeph> n’a aucun effet sur ce comportement. </p>
                   <p>L’effet Zoom ne fonctionne pas si la propriété <codeph>autoLayout</codeph> est définie sur <codeph>false</codeph>.</p>
                   <p>La propriété <codeph>autoLayout</codeph> ne s’applique pas aux conteneurs Accordion ou ViewStack.</p>
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
          Renvoie un objet EdgeMetrics qui comporte quatre propriétés : left, top, right et bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
          Renvoie un objet EdgeMetrics qui comporte quatre propriétés : <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> et <codeph>bottom</codeph>. La valeur de chaque propriété est égale à l’épaisseur d’un côté de la bordure, exprimée en pixels.
                   <p>Contrairement à <codeph>viewMetrics</codeph>, cette propriété n’est pas remplacée par les sous-classes de la classe Container.</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:childDescriptors:get"><apiName>childDescriptors</apiName><shortdesc>
          Tableau d’objets UIComponentDescriptor produits par le compilateur MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
          Tableau d’objets UIComponentDescriptor produits par le compilateur MXML.
                   <p>Chaque objet UIComponentDescriptor contient les informations spécifiées dans une balise MXML enfant de la balise MXML du conteneur. L’ordre des objets UIComponentDescriptor du tableau est identique à l’ordre des balises enfant. Lors de l’initialisation, les descripteurs enfant sont utilisés pour créer les objets UIComponent enfant et objets Repeater du conteneur, et pour leur donner les valeurs de propriété initiales, les gestionnaires d’événements, les effets, etc. qui ont été spécifiés dans le code MXML.</p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.UIComponentDescriptor.xml"><linktext>mx.core.UIComponentDescriptor</linktext></link></related-links></apiValue><apiValue id="mx.charts:Legend:clipContent:get"><apiName>clipContent</apiName><shortdesc>
          Spécifie l’application d’un masque de découpage ou non, si les positions et/ou les tailles des enfants de ce conteneur dépassent les limites du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Spécifie l’application d’un masque de découpage ou non, si les positions et/ou les tailles des enfants de ce conteneur dépassent les limites du conteneur. Si la valeur est <codeph>false</codeph>, les enfants de ce conteneur restent visibles lorsqu’ils sont déplacés ou redimensionnés en dehors du cadre de ce conteneur. Si la valeur est <codeph>true</codeph>, les enfants de ce conteneur sont écrêtés. 
                   <p>Si la propriété <codeph>clipContent</codeph> a la valeur <codeph>false</codeph>, le défilement est désactivé pour ce conteneur et les barres de défilement ne sont pas affichées Si la propriété <codeph>clipContent</codeph> a la valeur true, les barres de défilement s’affichent habituellement dès lors que les enfants du conteneur s’étendent au-delà du bord du conteneur. Pour un contrôle supérieur de l’aspect des barres de défilement, voir <codeph>horizontalScrollPolicy</codeph> et <codeph>verticalScrollPolicy</codeph>.</p>
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:contentMouseX:get"><apiName>contentMouseX</apiName><shortdesc conref="mx.core.UIComponent#contentMouseX">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#contentMouseX">
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:contentMouseY:get"><apiName>contentMouseY</apiName><shortdesc conref="mx.core.UIComponent#contentMouseY">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#contentMouseY">
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:creatingContentPane:get"><apiName>creatingContentPane</apiName><shortdesc>
          Les conteneurs utilisent un volet de contenu interne pour contrôler le défilement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          Les conteneurs utilisent un volet de contenu interne pour contrôler le défilement. La propriété <codeph>creatingContentPane</codeph> a la valeur <codeph>true</codeph> lorsque le conteneur crée le panneau de contenu. Certains événements peuvent donc être ignorés ou bloqués.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:creationIndex:get"><apiName>creationIndex</apiName><shortdesc>
          Spécifie l’ordre pour instancier et tracer les enfants du conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
          
          </apiDefaultValue><apiDeprecated><apiDesc>Déconseillé</apiDesc></apiDeprecated></apiValueDef><apiDesc>
          Spécifie l’ordre pour instancier et tracer les enfants du conteneur.
                   <p>Cette propriété peut être utilisée uniquement lorsque la propriété <codeph>creationPolicy</codeph> est définie sur <codeph>ContainerCreationPolicy.QUEUED</codeph>. Dans le cas contraire, elle est ignorée.</p>
                   </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:creationPolicy:get"><apiName>creationPolicy</apiName><shortdesc>
          Stratégie de création d’enfant de ce conteneur MX.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ContainerCreationPolicy.AUTO
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Stratégie de création d’enfant de ce conteneur MX. Les valeurs ActionScript peuvent être <codeph>ContainerCreationPolicy.AUTO</codeph>, <codeph>ContainerCreationPolicy.ALL</codeph> ou <codeph>ContainerCreationPolicy.NONE</codeph>. Les valeurs MXML peuvent être <codeph>auto</codeph>, <codeph>all</codeph> ou <codeph>none</codeph>.
                   <p>Si aucune propriété <codeph>creationPolicy</codeph> n’est spécifiée pour un conteneur, il hérite de la stratégie <codeph>creationPolicy</codeph> de son parent. Si aucune propriété <codeph>creationPolicy</codeph> n’est spécifiée pour l’application, la valeur par défaut est <codeph>ContainerCreationPolicy.AUTO</codeph>.</p>
                   <p>La propriété <codeph>creationPolicy</codeph> avec la valeur <codeph>ContainerCreationPolicy.AUTO</codeph> signifie que le conteneur retarde la création de certains ou de tous les descendants en attendant leur nécessité, un processus nommé <i>instanciation différée</i>. Cette stratégie présente le meilleur temps de démarrage en raison du nombre réduit de composants UIComponent créés initialement. Toutefois, cela implique des délais d’attente lorsqu’un utilisateur accède à d’autres parties de l’application pour la première fois. Les conteneurs de navigateur, tels que Accordion, TabNavigator et ViewStack implémentent la stratégie <codeph>ContainerCreationPolicy.AUTO</codeph> en créant immédiatement tous leurs enfants, mais en attendant pour créer les descendants successifs d’un enfant qu’il devienne l’enfant sélectionné du conteneur de navigateur.</p>
                   <p>La propriété <codeph>creationPolicy</codeph> avec la valeur <codeph>ContainerCreationPolicy.ALL</codeph> signifie que les conteneurs de navigateur créent immédiatement des descendants successifs pour chaque enfant, plutôt que d’attendre que l’enfant soit sélectionné. Pour les conteneurs à vue unique tel qu’un conteneur VBox, il n’existe aucune différence entre les stratégies <codeph>ContainerCreationPolicy.AUTO</codeph> et <codeph>ContainerCreationPolicy.ALL</codeph>.</p>
                   <p>La propriété <codeph>creationPolicy</codeph> avec la valeur <codeph>ContainerCreationPolicy.NONE</codeph> signifie que le conteneur ne crée aucun de ses enfants. Dans ce cas, l’auteur du code MXML est chargé de la création des enfants en appelant la méthode <codeph>createComponentsFromDescriptors()</codeph>.</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
          Ensemble de données à utiliser dans le contrôle Legend.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="collectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
          Ensemble de données à utiliser dans le contrôle Legend.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:data:get"><apiName>data</apiName><shortdesc>
          La propriété data vous permet de transmettre une valeur au composant lorsque vous l’utilisez dans un rendu d’élément ou un éditeur d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
          </apiDefaultValue></apiValueDef><apiDesc>
          La propriété <codeph>data</codeph> vous permet de transmettre une valeur au composant lorsque vous l’utilisez dans un rendu d’élément ou un éditeur d’élément. Vous utilisez généralement la liaison des données pour lier un champ de la propriété <codeph>data</codeph> à une propriété de ce composant.
                   <p>Vous ne pouvez pas définir cette propriété dans MXML.</p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.charts:Legend:deferredContentCreated:get"><apiName>deferredContentCreated</apiName><shortdesc>
          Equivalent de processedDescriptors pour IDeferredContentOwner 
         
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          Equivalent de processedDescriptors pour IDeferredContentOwner 
         
          </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.charts.xml#UIComponent/processedDescriptors"><linktext>UIComponent.processedDescriptors</linktext></link></related-links></apiValue><apiValue id="mx.charts:Legend:direction:get"><apiName>direction</apiName><shortdesc>
          Détermine la manière dont les enfants sont placés dans le conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="directionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"horizontal"
         
          </apiDefaultValue></apiValueDef><apiDesc>
          Détermine la manière dont les enfants sont placés dans le conteneur. Valeurs MXML possibles : <codeph>"horizontal"</codeph> et <codeph>"vertical"</codeph>. En langage ActionScript, vous pouvez définir la direction à l’aide des valeurs TileDirection.HORIZONTAL ou TileDirection.VERTICAL. La valeur par défaut est <codeph>"horizontal"</codeph> (si le conteneur est un conteneur Legend, qui est une sous-classe de Tile, la valeur par défaut est <codeph>"vertical"</codeph>).
                   <p>Le premier enfant est toujours placé dans le coin supérieur gauche du conteneur Tile. Si la valeur de la propriété <codeph>direction</codeph> est <codeph>"horizontal"</codeph>, les enfants sont placés de gauche à droite dans la ligne qui se trouve le plus en haut, puis de gauche à droite dans la deuxième ligne, et ainsi de suite. Si la valeur de la propriété direction est <codeph>"vertical"</codeph>, les enfants sont placés de haut en bas dans la colonne qui se trouve le plus à gauche, puis de haut en bas dans la deuxième colonne, et ainsi de suite.</p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.charts.TileDirection.xml"><linktext>TileDirection</linktext></link></related-links></apiValue><apiValue id="mx.charts:Legend:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
          Position actuelle de la barre de défilement horizontale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="viewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Position actuelle de la barre de défilement horizontale. Cette valeur est égale à la distance en pixels entre le bord gauche de la surface défilante et la partie la plus à gauche de la surface actuellement visible.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:maxHorizontalScrollPosition:get"><apiName>maxHorizontalScrollPosition</apiName><shortdesc>
          Plus grande valeur possible de la propriété horizontalScrollPosition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
          Plus grande valeur possible de la propriété <codeph>horizontalScrollPosition</codeph>. La valeur par défaut est 0 si la barre de défilement horizontale n’est pas présente.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:maxVerticalScrollPosition:get"><apiName>maxVerticalScrollPosition</apiName><shortdesc>
          Plus grande valeur possible de la propriété verticalScrollPosition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
          Plus grande valeur possible de la propriété <codeph>verticalScrollPosition</codeph>. La valeur par défaut est 0 si la barre de défilement verticale n’est pas présente.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:numChildren:get"><apiName>numChildren</apiName><shortdesc>
          Nombre de composants enfant dans ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
          Nombre de composants enfant dans ce conteneur.
                   <p>Le nombre d’enfants est initialement égal au nombre d’enfants déclarés dans la code MXML. Lors de l’exécution, de nouveaux enfants peuvent être ajoutés par l’appel des méthodes <codeph>addChild()</codeph> ou <codeph>addChildAt()</codeph> et les enfants existants peuvent être supprimés par l’appel des méthodes <codeph>removeChild()</codeph>, <codeph>removeChildAt()</codeph> ou <codeph>removeAllChildren()</codeph>.</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:numElements:get"><apiName>numElements</apiName><shortdesc conref="mx.core.IVisualElementContainer#numElements">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.IVisualElementContainer#numElements">
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:rawChildren:get"><apiName>rawChildren</apiName><shortdesc>
          Un conteneur contient généralement des composants enfant qui peuvent être énumérés à l’aide de la méthode Container.getChildAt() et de la propriété Container.numChildren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:IChildList"/></apiValueDef><apiDesc>
          Un conteneur contient généralement des composants enfant qui peuvent être énumérés à l’aide de la méthode <codeph>Container.getChildAt()</codeph> et de la propriété <codeph>Container.numChildren</codeph>. De plus, le conteneur peut contenir des éléments de style et des habillages, tels que la bordure et l’arrière-plan. Flash Player et AIR ne font aucune distinction entre les composants enfant et les habillages. Elles sont toutes accessibles à l’aide de la méthode <codeph>getChildAt()</codeph> et de la propriété <codeph>numChildren</codeph> du lecteur. Toutefois, la classe Container remplace la méthode <codeph>getChildAt()</codeph> et la propriété <codeph>numChildren</codeph> (ainsi que plusieurs autres méthodes) pour créer l’illusion que les enfants du conteneur sont les seuls composants enfant.
                   <p>Si vous devez accéder à tous les enfants du conteneur (les enfants de contenu et les habillages), utilisez les méthodes et propriétés sur la propriété <codeph>rawChildren</codeph> plutôt que les méthodes habituelles de la classe Container. Par exemple, utilisez la méthode <codeph>Container.rawChildren.getChildAt())</codeph>. Toutefois, si un conteneur crée un objet Sprite ContentPane pour ses enfants, la valeur de la propriété <codeph>rawChildren</codeph> ne compte que l’élément ContentPane, pas les enfants du conteneur. Il n’est pas toujours possible de déterminer le moment où un conteneur va disposer d’un élément ContentPane.</p>
         
          <p><b>Remarque :</b> si vous appelez la méthode <codeph>addChild</codeph> ou <codeph>addChildAt</codeph> de l’objet <codeph>rawChildren</codeph>, définissez la valeur <codeph>tabFocusEnabled = false</codeph> sur le composant ajouté. Cela empêche les utilisateurs d’accéder par tabulation au composant uniquement visuel ajouté.</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc>
          Position actuelle de la barre de défilement verticale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="viewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
          
          </apiDefaultValue></apiValueDef><apiDesc>
          Position actuelle de la barre de défilement verticale. Cette valeur est égale à la distance en pixels entre le bord supérieur de la surface défilante et la partie située tout en haut de la surface actuellement visible.
                   </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:viewMetricsAndPadding:get"><apiName>viewMetricsAndPadding</apiName><shortdesc>
          Retourne un objet qui comporte quatre propriétés : left, top, right et bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
          Renvoie un objet qui comporte quatre propriétés : <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> et <codeph>bottom</codeph>. La valeur de chaque propriété est égale à l’épaisseur du chrome (éléments visuels) autour du bord du conteneur, plus l’épaisseur des marges de l’objet.
                   <p>Le chrome comprend l’épaisseur de la bordure. Si la propriété <codeph>horizontalScrollPolicy</codeph> ou <codeph>verticalScrollPolicy</codeph> a la valeur <codeph>ScrollPolicy.ON</codeph>, le chrome comprend également l’épaisseur de la barre de défilement correspondante. Si la stratégie de défilement est <codeph>ScrollPolicy.AUTO</codeph>, la mesure du chrome n’inclut pas l’épaisseur de la barre de défilement, même si une barre de défilement est affichée.</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:viewMetrics:get"><apiName>viewMetrics</apiName><shortdesc>
          Retourne un objet qui comporte quatre propriétés : left, top, right et bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
          Renvoie un objet qui comporte quatre propriétés : <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> et <codeph>bottom</codeph>. La valeur de chaque propriété est égale à l’épaisseur du chrome (éléments visuels) autour du bord du conteneur.  
                   <p>Le chrome comprend l’épaisseur de la bordure. Si la propriété <codeph>horizontalScrollPolicy</codeph> ou <codeph>verticalScrollPolicy</codeph> a la valeur <codeph>ScrollPolicy.ON</codeph>, le chrome comprend également l’épaisseur de la barre de défilement correspondante. Si la stratégie de défilement est <codeph>ScrollPolicy.AUTO</codeph>, la mesure du chrome n’inclut pas l’épaisseur de la barre de défilement, même si une barre de défilement est affichée.</p>
                   <p>Les sous-classes de la classe Container doivent remplacer cette méthode, de sorte à inclure le chrome supplémentaire à prendre en compte lors du positionnement des enfants du conteneur. Par exemple, la propriété <codeph>viewMetrics</codeph> de la classe Panel doit renvoyer un objet dont la propriété <codeph>top</codeph> inclut l’épaisseur de la barre de titre du conteneur Panel.</p>
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:ChartItem"><apiName>ChartItem</apiName><shortdesc>
  Un objet ChartItem représente un seul élément dans une série ChartSeries.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Un objet ChartItem représente un seul élément dans une série ChartSeries. Dans la plupart des séries courantes, un seul objet ChartItem est créé pour chaque élément de la collection dataProvider de la série. Les objets ChartItem sont transmis aux occurrences de la fonctionnalité de rendu itemRenderer d’une série en vue du rendu. La plupart des types de séries étendent la classe ChartItem de manière à contenir des informations supplémentaires propres au type de graphique.  
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts:ChartItem:ChartItem"><apiName>ChartItem</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IChartElement</apiOperationClassifier><apiData>null</apiData><apiDesc>Série ou élément auquel l’objet ChartItem appartient.
     
      </apiDesc></apiParam><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Elément du fournisseur de données de la série représenté par cet objet ChartItem.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>Index des données dans le fournisseur de données de la série représenté par cet objet ChartItem.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts:ChartItem:clone"><apiName>clone</apiName><shortdesc>
      Renvoie une copie de cet objet ChartItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Copie de cet objet ChartItem.
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Renvoie une copie de cet objet ChartItem.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts:ChartItem:DISABLED"><apiName>DISABLED</apiName><shortdesc>
      Valeur indiquant que l.objet ChartItem semble être désactivé et qu.il ne peut pas être sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>disabled</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Valeur indiquant que l.objet ChartItem semble être désactivé et qu.il ne peut pas être sélectionné.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:FOCUSEDSELECTED"><apiName>FOCUSEDSELECTED</apiName><shortdesc>
      Valeur indiquant que l’objet ChartItem a le focus et semble être sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>focusedSelected</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Valeur indiquant que l’objet ChartItem a le focus et semble être sélectionné.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:FOCUSED"><apiName>FOCUSED</apiName><shortdesc>
      Valeur indiquant que l’objet ChartItem a le focus, mais qu’il ne semble pas être sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>focused</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Valeur indiquant que l’objet ChartItem a le focus, mais qu’il ne semble pas être sélectionné.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:NONE"><apiName>NONE</apiName><shortdesc>
      Valeur indiquant que l’objet ChartItem ne semble pas être sélectionné, n’a pas le focus et n’est pas survolé par le pointeur de la souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Valeur indiquant que l’objet ChartItem ne semble pas être sélectionné, n’a pas le focus et n’est pas survolé par le pointeur de la souris.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:ROLLOVER"><apiName>ROLLOVER</apiName><shortdesc>
      Valeur indiquant que l’objet ChartItem semble être survolé par le pointeur de la souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOver</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Valeur indiquant que l’objet ChartItem semble être survolé par le pointeur de la souris.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:SELECTED"><apiName>SELECTED</apiName><shortdesc>
      Valeur indiquant que l’objet ChartItem semble être sélectionné, mais qu’il n’a pas le focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selected</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Valeur indiquant que l’objet ChartItem semble être sélectionné, mais qu’il n’a pas le focus.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:element"><apiName>element</apiName><shortdesc>
      Série ou élément propriétaire de l’objet ChartItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.charts.chartClasses:IChartElement</apiValueClassifier></apiValueDef><apiDesc>
      Série ou élément propriétaire de l’objet ChartItem.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:index"><apiName>index</apiName><shortdesc>
      Index des données dans le fournisseur de données de la série représenté par cet objet ChartItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      Index des données dans le fournisseur de données de la série représenté par cet objet ChartItem.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:itemRenderer"><apiName>itemRenderer</apiName><shortdesc>
      Occurrence de la fonctionnalité de rendu itemRenderer du graphique qui représente cet objet ChartItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:IFlexDisplayObject"/></apiValueDef><apiDesc>
      Occurrence de la fonctionnalité de rendu itemRenderer du graphique qui représente cet objet ChartItem.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:item"><apiName>item</apiName><shortdesc>
      Elément du fournisseur de données de la série représenté par cet objet ChartItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      Elément du fournisseur de données de la série représenté par cet objet ChartItem.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:currentState:get"><apiName>currentState</apiName><shortdesc>
      Définit l’apparence de l’objet ChartItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Définit l’apparence de l’objet ChartItem. La propriété <codeph>currentState</codeph> peut être définie sur <codeph>none</codeph>, <codeph>survol</codeph>, <codeph>sélectionné</codeph>, <codeph>désactivé</codeph>, <codeph>focusSelected</codeph> et <codeph>focalisé</codeph>.
     
      <P>Le fait de définir l’état de l’élément ne l’ajoute pas pour autant au tableau selectedItems. Seule l’apparence de l’élément de graphique est modifiée. La définition de la valeur de cette propriété ne déclenche pas non plus d’événement <codeph>change</codeph>.</P>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:LineChart"><apiName>LineChart</apiName><shortdesc>
  Le contrôle LineChart représente une série de données sous forme de points reliés par une ligne continue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  The <code>&lt;mx:LineChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:LineChart
  /&gt;
  </pre> 
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle LineChart représente une série de données sous forme de points reliés par une ligne continue. Vous pouvez utiliser une icône ou un symbole pour représenter chaque point de données le long de la ligne, ou afficher une ligne simple sans icône. 
  
  <p>Le contrôle LineChart suppose que la propriété de sa <codeph>série</codeph> contient un tableau d’objets LineSeries.</p>
 
  </apiDesc><example conref="Line_AreaChartExample.mxml"><swfblock conref="examples/Line_AreaChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#LineSeries"><linktext>mx.charts.series.LineSeries</linktext></link></related-links><apiConstructor id="mx.charts:LineChart:LineChart"><apiName>LineChart</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:LineChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:AxisLabel"><apiName>AxisLabel</apiName><shortdesc>
  Un objet AxisLabel représente un libellé unique sur l’axe du graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Un objet AxisLabel représente un libellé unique sur l’axe du graphique. Les objets AxisLabel sont générés par les objets IAxis. L’objet AxisLabel est également transmis en tant que données aux objets AxisLabel personnalisés qui implémentent l’interface IDataRenderer.
  	
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#AxisRenderer"><linktext>mx.charts.AxisRenderer</linktext></link><link href="mx.charts.chartClasses.xml#IAxis"><linktext>mx.charts.chartClasses.IAxis</linktext></link></related-links><apiConstructor id="mx.charts:AxisLabel:AxisLabel"><apiName>AxisLabel</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>position</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Position du libellé sur l’axe, sous la forme d’une valeur comprise entre 0 et 1.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Valeur représentée par le libellé.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Libellé de texte réellement rendu le long de l’axe.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Constructeur.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:AxisLabel:position"><apiName>position</apiName><shortdesc>
	  Position du libellé sur l’axe, sous la forme d’une valeur comprise entre 0 et 1.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Position du libellé sur l’axe, sous la forme d’une valeur comprise entre 0 et 1. Si la valeur de position d’un objet An AxisLabel est 0, il est placé à la valeur minimale de l’axe. Si sa valeur est 1, il est placé au niveau de la valeur maximale de l’axe.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisLabel:text"><apiName>text</apiName><shortdesc>
	  Libellé de texte réellement rendu le long de l’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Libellé de texte réellement rendu le long de l’axe.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisLabel:value"><apiName>value</apiName><shortdesc>
	  Valeur représentée par le libellé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
	  Valeur représentée par le libellé. Le type spécifique de la propriété de valeur est propre à l’axe qui a généré le libellé. Par exemple, un axe LinearAxis génère des valeurs numériques, alors qu’un axe DateTimeAxis génère des valeurs d’occurrence Date.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:LogAxis"><apiName>LogAxis</apiName><shortdesc>
  La classe LogAxis place les valeurs numériques de manière logarithmique entre une valeur minimale et une valeur maximale le long d’un axe du graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:LogAxis&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:LogAxis
    <strong>Properties</strong>
    interval="10"
    maximum="null"
    maximumLabelPrecision="null"
    minimum="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:NumericAxis</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe LogAxis place les valeurs numériques de manière logarithmique entre une valeur minimale et une valeur maximale le long d’un axe du graphique. Par défaut, elle détermine les valeurs des propriétés <codeph>minimum</codeph>, <codeph>maximum</codeph> et <codeph>interval</codeph> à partir des données du graphique, de sorte que tous les éléments puissent être présentés à l’écran. Vous pouvez également définir explicitement des valeurs spécifiques pour ces propriétés. Un objet LogAxis ne peut pas rendre correctement les valeurs négatives, car la valeur Log10() d’un nombre négatif est non <codeph>définie</codeph>.
 
  </apiDesc><example conref="LogAxisExample.mxml"><swfblock conref="examples/LogAxisExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.chartClasses.xml#IAxis"><linktext>mx.charts.chartClasses.IAxis</linktext></link></related-links><apiConstructor id="mx.charts:LogAxis:LogAxis"><apiName>LogAxis</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:LogAxis:interval:get"><apiName>interval</apiName><shortdesc>
	  Spécifie le multiplicateur des valeurs des libellés présents le long de l’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Spécifie le multiplicateur des valeurs des libellés présents le long de l’axe. La valeur 10 génère des libellés au niveau des valeurs 1, 10, 100, 1000, etc. La valeur 100 génère des libellés au niveau des valeurs 1, 100, 10000, etc. Flex calcule l’intervalle si cette propriété est définie sur <codeph>NaN</codeph>. Les intervalles doivent correspondre à une puissance de 10 paire et doivent être supérieurs ou égaux à 10. Si nécessaire, l’axe LogAxis arrondit l’intervalle à une puissance de 10 paire inférieure.
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LogAxis:maximum:get"><apiName>maximum</apiName><shortdesc>
	  Spécifie la valeur maximale d’un libellé d’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Spécifie la valeur maximale d’un libellé d’axe. Si la valeur est <codeph>NaN</codeph>, Flex détermine la valeur maximale à partir des données du graphique. La valeur maximale doit être une puissance paire de 10 paire. Si nécessaire, l’axe LogAxis arrondit une valeur maximale explicite à la puissance de 10 paire supérieure.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LogAxis:minimum:get"><apiName>minimum</apiName><shortdesc>
	  Spécifie la valeur minimale d’un libellé d’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Spécifie la valeur minimale d’un libellé d’axe. Si la valeur est <codeph>NaN</codeph>, Flex détermine la valeur minimale à partir des données du graphique. La valeur minimale doit être une puissance de 10 paire. Si nécessaire, l’axe LogAxis arrondit une valeur minimale explicite à la puissance de 10 paire inférieure.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LogAxis:maximumLabelPrecision:set"><apiName>maximumLabelPrecision</apiName><shortdesc>
	  Spécifie le nombre maximal de décimales représentant les valeurs décimales dans les libellés générés par cet axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Spécifie le nombre maximal de décimales représentant les valeurs décimales dans les libellés générés par cet axe. Par défaut, l’axe génère automatiquement cette valeur à partir des libellés eux-mêmes. La valeur 0 arrondit le nombre à l’entier le plus proche et la valeur 2 au centième le plus proche.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:AxisRenderer"><apiName>AxisRenderer</apiName><shortdesc>
  La classe AxisRenderer permet de décrire les axes horizontaux et verticaux d’un graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style enumeration="flippedVertical,vertical" inherit="no" name="verticalAxisTitleAlignment" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Spécifie comment rendre le titre de l’axe vertical. La valeur <codeph>flippedVertical</codeph> rend le titre du haut vers le bas <codeph>vertical</codeph> du bas vers le haut.
 
  </description>
<default>flippedVertical
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="tickStroke" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Spécifie les caractéristiques des graduations le long de l’axe. Ce style doit être une occurrence de la classe Stroke.  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inside,outside,cross,none" inherit="no" name="tickPlacement" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Spécifie où tracer les graduations. Options disponibles :
  <ul>
    <li><codeph>"inside"</codeph> : les graduations sont tracées à l’intérieur de la zone de données.</li>
     <li><codeph>"outside"</codeph> : les graduations sont tracées dans la zone de libellé.</li>
     <li><codeph>"cross"</codeph> : les graduations sont tracées sous forme de croix le long de l’axe.</li>
     <li><codeph>"none"</codeph> : aucune graduation n’est générée.</li>
  </ul>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="tickLength" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  Spécifie la longueur des graduations le long de l’axe, en pixels. 
  
  </description>
<default>3  
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="showLine" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Boolean">
<description>
  Détermine si l’axe doit être affiché. 
  
  </description>
<default>true 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="showLabels" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Boolean">
<description>
  Détermine si des libellés doivent s’afficher le long de l’axe. 
  
  </description>
<default>true 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="minorTickStroke" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Spécifie les caractéristiques des graduations secondaires le long de l’axe. Ce style doit être une occurrence de la classe Stroke.  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inside,outside,cross,none" inherit="no" name="minorTickPlacement" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Spécifie où tracer les graduations secondaires. Options disponibles :
  <ul>
    <li><codeph>"inside"</codeph> : les graduations secondaires sont tracées à l’intérieur de la zone de données.</li>
     <li><codeph>"outside"</codeph> : les graduations secondaires sont tracées dans la zone de libellé.</li>
     <li><codeph>"cross"</codeph> : les graduations secondaires sont tracées sous forme de croix le long de l’axe.</li>
     <li><codeph>"none"</codeph> : aucune graduation secondaire n’est générée.</li>
  </ul>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="minorTickLength" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  Spécifie la longueur des graduations secondaires le long de l’axe, en pixels. 
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="labelRotation" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description> 
  Spécifie la rotation du libellé. Si le rendu des libellés est réalisé à partir de polices de périphérique, les libellés sont toujours tracés horizontalement. Si ce style correspond à une valeur négative, la classe AxisRenderer détermine l’angle optimal permettant de rendre les libellés dans la zone la plus petite possible sans provoquer de chevauchement.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="labelGap" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description> 
  Spécifie l’epace entre la fin des graduations et le haut des libellés, en pixels. 
  
  </description>
<default>3 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="labelClass" owner="mx.charts:AxisRenderer" playerVersion="Flash10.2" type="Class">
<description>
  La classe utilisée par ce composant pour effectuer le rendu des étiquettes.
   <p>Elle peut être définie sur la classe mx.controls.Label ou la classe spark.components.Label.</p>
   </description>
<default>spark.components.Label
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="left,top,right,bottom,center" inherit="no" name="labelAlign" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Spécifie l’alignement des libellés par rapport à la position de la valeur désignée.
 
  </description>
<default>center
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="canStagger" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Boolean">
<description> 
  Détermine si les libellés doivent être répartis sur deux lignes de libellé. Utilisez ce paramètre pour réduire l’espace requis pour les libellés. La valeur par défaut est <codeph>true</codeph>. Dans ce cas, les libellés sont répartis sur plusieurs lignes. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="canDropLabels" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Boolean">
<description>
  Détermine si la classe AxisRenderer doit omettre les libellés lorsque cela est nécessaire pour la mise en forme.
   <p>Si la valeur est <codeph>true</codeph>, la classe AxisRenderer omet les libellés qui se chevauchent. Les libellés sont systématiquement rendus à intervalle régulier. Si nécessaire, la classe AxisRenderer rend un libellé sur deux ou un libellé sur trois, mais elle n’omet jamais deux ou plus de deux libellés consécutifs.</p>
   <p>Définissez cette propriété sur <codeph>false</codeph> pour que la classe AxisRenderer utilise d’autres dispositifs (rotation, mise à l’échelle) pour mettre en forme les libellés.</p>
   <p>Si vous ne définissez pas ce style explicitement, la classe AxisRenderer prend une valeur par défaut adaptée, en fonction du type d’axe à rendre.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="axisTitleStyleName" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Nom du sélecteur de classe CSS à utiliser pour le formatage du titre de l’axe.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="axisStroke" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Spécifie les caractéristiques de la ligne de l’axe. Ce style doit être une occurrence de la classe Stroke.  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur (en pixels).
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut pour la plupart des contrôles est <codeph>left</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Pour ces composants, cette propriété est reconnue uniquement lorsque la valeur de la propriété <codeph>labelPlacement</codeph> est <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est pris en charge uniquement pour les polices FlashType incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en gras. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"bold"</codeph>. Pour LegendItem, la valeur par défaut est <codeph>"bold"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. La valeur par défaut est 10 pour tous les contrôles, à l’exception de ColorPicker. Pour le contrôle ColorPicker, la valeur par défaut est 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>. Cette valeur active la fonctionnalité de rendu FlashType si vous utilisez une police incorporée FlashType. Définissez cette propriété sur <codeph>"normal"</codeph> pour désactiver la fonctionnalité de rendu FlashType.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="uint">
<description>
  Couleur du texte du composant, libellé du composant inclus.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:AxisRenderer&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:</p>
  
  <pre>
  &lt;mx:AxisRenderer
    <strong>Properties</strong>
    axis="<i>IAxis</i>"
    chart="<i>ChartBase</i>"
    gutters="<i>Rectangle</i>"
    heightLimit="<i>Number</i>"
    labelRenderer="<i>IFactory</i>"
    labelFunction="<i>Function</i>"
    length="<i>Number</i>"
    otherAxes="<i>Array</i>"
    placement="right|left|bottom|top"
    ticks="<i>Array</i>"
    titleRenderer="<i>IFactory</i>"
     
    <strong>Styles</strong>
    axisStroke="<i>No default</i>"
    axisTitleStyleName="<i>No default</i>"
    canDropLabels="true|false"
    canStagger="true|false"
    labelAlign="center|left|right" (horizontal axes) or "center|top|bottom" (vertical axes)
    labelGap="3"
    labelRotation="<i>No default</i>"
    minorTickLength="<i>Default depends on axis</i>"
    minorTickPlacement="none|inside|outside|cross"
    minorTickStroke="<i>No default</i>"
    showLabels="true|false"
    showLine="true|false"
    tickLength="<i>Default depends on axis</i>"
    tickPlacement="inside|outside|cross|none"
    tickStroke="<i>No default</i>"
    verticalAxisTitleAlignment="flippedVertical|vertical"
  /&gt;
  </pre>
    
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IAxisRenderer</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:DualStyleObject</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe AxisRenderer permet de décrire les axes horizontaux et verticaux d’un graphique. L’axe est chargé de rendre les libellés, graduations et titres le long d’une ligne. 
   
  <p>Les objets AxisRenderer héritent de certaines propriétés d’affichage de l’objet de graphique conteneur. Le format du texte des libellés et des titres prend par défaut les valeurs des propriétés de texte CSS de la fonctionnalité de rendu. Vous pouvez contrôler le formatage du titre de l’axe de façon indépendante en spécifiant un nom <codeph>axisTitleStyleName</codeph>, soit au niveau de la classe AxisRenderer, soit au niveau du graphique conteneur.</p> 
  
  <p>Lors du positionnement et du dimensionnement des libellés, la classe AxisRenderer utilise le moins d’espace possible disponible pour le graphique. Si les libellés prennent trop de place, la classe AxisRenderer les met à l’échelle. Cependant, elle ne réduit jamais les libellés à la taille d’un point. Pour améliorer la lisibilité, la classe AxisRenderer choisit parmi les méthodes de mise en forme suivantes celle qui nécessite le moins de réduction :</p>
   <ul>
    <li>Les libellés sont rendus horizontalement d’une extrémité à l’autre.</li> 
    <li>Les libellés sont répartis sur deux lignes.</li> 
    <li>Les libellés font l’objet d’une rotation, de sorte qu’ils puissent rentrer dans l’espace disponible. La classe AxisRenderer fait pivoter les libellés en utilisant l’angle le plus petit possible, tout en évitant tout chevauchement. La valeur maximale de l’angle est de 90 degrés.</li>
  </ul>
  
  <p>La classe AxisRenderer ajuste les limites de la zone de données du graphique pour faire en sorte que les libellés puissent être tracés sans dépasser des limites.</p>
  
  </apiDesc><example conref="HLOCChartExample.mxml"><swfblock conref="examples/HLOCChartExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.charts:AxisRenderer:AxisRenderer"><apiName>AxisRenderer</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts:AxisRenderer:adjustGutters"><apiName>adjustGutters</apiName><shortdesc>
      
      Ajuste la mise en forme en fonction des valeurs de gouttière transmises.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Rectangle définissant les dimensions des gouttières, ajustements inclus.
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>workingGutters</apiItemName><apiType value="flash.geom:Rectangle"/><apiDesc>Définit les gouttières à ajuster.
     
      </apiDesc></apiParam><apiParam><apiItemName>adjustable</apiItemName><apiType value="Object"/><apiDesc>Ce paramètre se compose de quatre propriétés booléennes (left=true/false, top=true/false, right=true/false et bottom=true/false) indiquant si la fonctionnalité de rendu d’axe peut éventuellement ajuster les gouttières définies.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Ajuste la mise en forme en fonction des valeurs de gouttière transmises. Cette méthode est appelée par le graphique conteneur pour déterminer la taille des gouttières et de la zone de données correspondante. Cette méthode permet à la classe AxisRenderer de calculer la mise en forme en fonction des nouvelles gouttières et de les ajuster si nécessaire. Si une gouttière est ajustable, une fonctionnalité de rendu d’axe peut éventuellement ajuster les gouttières vers l’intérieur (gouttières plus larges), mais pas vers l’extérieur (gouttières moins larges).
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:AxisRenderer:chartStateChanged"><apiName>chartStateChanged</apiName><shortdesc>
      Appelée par le graphique pour indiquer quand l’état de transition actuel change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>oldState</apiItemName><apiType value="uint"/><apiDesc>Nombre représentant l’ancien état.
           </apiDesc></apiParam><apiParam><apiItemName>newState</apiItemName><apiType value="uint"/><apiDesc>Nombre représentant le nouvel état.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée par le graphique pour indiquer quand l’état de transition actuel change.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:AxisRenderer:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts:AxisRenderer:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts:AxisRenderer:protected:measure"><apiName>measure</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts:AxisRenderer:move"><apiName>move</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts:AxisRenderer:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts:AxisRenderer:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="mx.charts:AxisRenderer:axis:get"><apiName>axis</apiName><shortdesc>
      Objet d’axe associé à cette fonctionnalité de rendu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Objet d’axe associé à cette fonctionnalité de rendu. Cette propriété est gérée par le graphique conteneur et peut être définie explicitement si plusieurs fonctionnalités de rendu d’axe sont utilisées.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:protected:chart:get"><apiName>chart</apiName><shortdesc>
      Graphique de base de cet objet AxisRenderer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.charts.chartClasses:ChartBase</apiValueClassifier></apiValueDef><apiDesc>
      Graphique de base de cet objet AxisRenderer.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:gutters:get"><apiName>gutters</apiName><shortdesc> 
    
      Distance entre l’objet axisRenderer et les côtés du graphique conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc> 
    
      Distance entre l’objet axisRenderer et les côtés du graphique conteneur. Cette propriété est affectée automatiquement par le graphique et ne doit pas être affectée directement.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:heightLimit:get"><apiName>heightLimit</apiName><shortdesc> 
    
      Quantité maximale d’espace, en pixels, qu’une fonctionnalité de rendu d’axe peut occuper dans un graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
    
      Quantité maximale d’espace, en pixels, qu’une fonctionnalité de rendu d’axe peut occuper dans un graphique. Par défaut, les fonctionnalités de rendu d’axe occupent uniquement l’espace nécessaire pour rendre l’ensemble des libellés à leur taille normale dans le graphique. Si la propriété heightLimit est définie, un objet AxisRenderer réduit la taille des libellés pour faire en sorte que la taille totale de l’axe soit inférieure à la valeur heightLimit.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:highlightElements:get"><apiName>highlightElements</apiName><shortdesc>
      Indique si les éléments du graphique tels que Series doivent être mis en surbrillance lorsque le pointeur de la souris les survole.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indique si les éléments du graphique tels que Series doivent être mis en surbrillance lorsque le pointeur de la souris les survole.
      
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:horizontal:get"><apiName>horizontal</apiName><shortdesc>
      
      true si la fonctionnalité de rendu d’axe est utilisée comme axe horizontal.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      <codeph>true</codeph> si la fonctionnalité de rendu d’axe est utilisée comme axe horizontal. Cette propriété est gérée par le contrôle CartesianChart conteneur et ne doit pas être définie directement.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Appelée pour formater les valeurs de fonctionnalité de rendu d’axe à afficher en tant que libellés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Appelée pour formater les valeurs de fonctionnalité de rendu d’axe à afficher en tant que libellés. La fonction <codeph>labelFunction</codeph> présente la signature suivante :
      <pre>
      function labelFunction(<i>axisRenderer</i>:IAxisRenderer, <i>label</i>:String):String { ... }
      </pre>
      
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:labelRenderer:get"><apiName>labelRenderer</apiName><shortdesc> 
      Référence à la fabrique utilisée pour le rendu des libellés d’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/></apiValueDef><apiDesc> 
      Référence à la fabrique utilisée pour le rendu des libellés d’axe. Ce type doit implémenter les interfaces IDataRenderer et IFlexDisplayObject.
      <p>La classe AxisRenderer crée une occurrence de cette classe pour chaque libellé de l’axe. Un objet AxisLabel contenant la valeur et le libellé à rendre est affecté à la propriété data de la fonctionnalité de rendu labelRenderer.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:length:get"><apiName>length</apiName><shortdesc> 
      Spécifie la longueur de l’axe, en coordonnées d’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
      Spécifie la longueur de l’axe, en coordonnées d’écran. La longueur par défaut dépend d’un certain nombre de facteurs, dont la taille du graphique, la taille des libellés, la manière dont la classe AxisRenderer met en forme les libellés et les différentes exigences imposées par d’autres parties du graphique.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:minorTicks:get"><apiName>minorTicks</apiName><shortdesc>
      
      Contient un tableau spécifiant où Flex doit tracer les graduations secondaires le long de l’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Contient un tableau spécifiant où Flex doit tracer les graduations secondaires le long de l’axe. Chaque élément du tableau contient une valeur comprise entre 0 et 1. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:placement:get"><apiName>placement</apiName><shortdesc>
      
      Côté du graphique sur lequel l’objet axisRenderer sera affiché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
      Côté du graphique sur lequel l’objet axisRenderer sera affiché. Valeurs autorisées : <codeph>"left"</codeph> et <codeph>"right"</codeph> pour le rendu des axes verticaux et <codeph>"top"</codeph> et <codeph>"bottom"</codeph> pour le rendu des axes horizontaux. Par défaut, les axes principaux sont placés à gauche et en haut et les axes secondaires à droite et en bas. Les contrôles CartesianChart placent automatiquement les axes secondaires à l’opposé des axes principaux. Par exemple, si vous placez explicitement un axe vertical principal à droite, l’axe vertical secondaire est automatiquement placé à gauche.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:ticks:get"><apiName>ticks</apiName><shortdesc>
      
      Contient un tableau spécifiant où Flex doit tracer les graduations le long de l’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Contient un tableau spécifiant où Flex doit tracer les graduations le long de l’axe. Chaque élément du tableau contient une valeur comprise entre 0 et 1. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:titleRenderer:get"><apiName>titleRenderer</apiName><shortdesc> 
      Référence à la fabrique utilisée pour le rendu du titre de l’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/></apiValueDef><apiDesc> 
      Référence à la fabrique utilisée pour le rendu du titre de l’axe. Ce type doit étendre l’interface UIComponent et implémenter les interfaces IDataRenderer et IFlexDisplayObject.
      <p>La classe AxisRenderer crée une occurrence de cette classe pour le titre de l’axe. Le titre à rendre est affecté à la propriété des données de la fonctionnalité de rendu titleRenderer.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.charts:AxisRenderer:otherAxes:set"><apiName>otherAxes</apiName><shortdesc>
      
      Tableau d’axes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Tableau d’axes.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:CategoryAxis"><apiName>CategoryAxis</apiName><shortdesc>
  La classe CategoryAxis permet aux graphiques de représenter des données regroupées dans un ensemble de valeurs distinctes le long d’un axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:CategoryAxis&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:CategoryAxis
    <strong>Properties</strong>
    categoryField="null"
    dataFunction="<i>No default</i>"
    dataProvider="<i>No default</i>"
    labelFunction="<i>No default</i>"
    padding="<i>Default depends on chart type</i>"
    ticksBetweenLabels="<i>true</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IAxis</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:AxisBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe CategoryAxis permet aux graphiques de représenter des données regroupées dans un ensemble de valeurs distinctes le long d’un axe. La classe CategoryAxis est en général utilisée pour définir un ensemble de libellés apparaissant le long d’un axe de graphique. Vous pouvez par exemple l’utiliser avec des graphiques qui rendent les données en fonction de la ville, de l’année, du centre de profit, etc.
  
  <p>Il n’est pas obligatoire de définir explicitement la propriété <codeph>dataProvider</codeph> d’une classe CategoryAxis. La classe CategoryAxis utilisée dans un graphique hérite de la propriété <codeph>dataProvider</codeph> du graphique conteneur.</p>
  
  <p>Même si vous pouvez utiliser le même fournisseur de données pour fournir des données au graphique et des catégories à la classe CategoryAxis, la classe CategoryAxis peut optimiser le rendu si son fournisseur de données est relativement statique. Si possible, veillez à ce que les catégories restent relativement statiques et à ce que les données couramment modifiées soient stockées dans des fournisseurs de données séparés.</p>
  
  <p>La propriété <codeph>dataProvider</codeph> peut accepter soit un tableau de chaînes, soit un tableau d’enregistrements (objets) contenant une propriété qui spécifie le nom de catégorie. Si vous spécifiez une propriété <codeph>categoryField</codeph>, la classe CategoryAxis suppose que le fournisseur de données est un tableau d’objets. Si la valeur de la propriété <codeph>categoryField</codeph> est <codeph>null</codeph>, la classe CategoryAxis suppose que le fournisseur de données est un tableau de chaînes.</p>
  
  </apiDesc><example conref="HLOCChartExample.mxml"><swfblock conref="examples/HLOCChartExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.charts:CategoryAxis:CategoryAxis"><apiName>CategoryAxis</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts:CategoryAxis:filterCache"><apiName>filterCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#filterCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’objets à partir duquel les valeurs converties sont lues et dans lequel elles sont stockées.
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>Champ des objets du tableau de cache qui contient les valeurs préfiltrées.
     
      </apiDesc></apiParam><apiParam><apiItemName>filteredField</apiItemName><apiType value="String"/><apiDesc>Champ des objets du tableau de cache dans lequel les valeurs filtrées doivent être stockées.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#filterCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:formatForScreen"><apiName>formatForScreen</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#formatForScreen()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>Texte de l’objet DataTip.
      
      </apiDesc></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Valeur à convertir en chaîne. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#formatForScreen()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:getLabelEstimate"><apiName>getLabelEstimate</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#getLabelEstimate()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier><apiDesc>Tableau d’objets AxisLabel.
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#getLabelEstimate()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:getLabels"><apiName>getLabels</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#getLabels()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier><apiDesc>Tableau d’objets AxisLabel.
      
      </apiDesc></apiReturn><apiParam><apiItemName>minimumAxisLength</apiItemName><apiType value="Number"/><apiDesc>Longeur minimale de l’axe, en pixels. L’axe peut être plus court que cette valeur, mais pas plus long.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#getLabels()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:invertTransform"><apiName>invertTransform</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#invertTransform()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>Objet contenant la valeur transformée.
      
      </apiDesc></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Limite de l’axe. La valeur de ce paramètre doit être comprise entre 0 et 1, 0 représentant la limite minimale de l’axe et 1 sa limite maximale.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#invertTransform()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:mapCache"><apiName>mapCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#mapCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’objets à partir duquel les valeurs converties sont lues et dans lequel elles sont stockées.
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>Champ des objets du tableau de cache qui contient les valeurs préconverties.
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>Champ des objets du tableau de cache dans lequel les valeurs converties doivent être stockées.
     
      </apiDesc></apiParam><apiParam><apiItemName>indexValues</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>La valeur de ce paramètre est <codeph>true</codeph> si les valeurs mappées sont des valeurs d’index et <codeph>false</codeph> s’il s’agit de valeurs de données naturelles.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#mapCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:preferDropLabels"><apiName>preferDropLabels</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#preferDropLabels()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> si les libellés peuvent être omis sans perte de données, <codeph>false</codeph> dans le cas contraire. 
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#preferDropLabels()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:reduceLabels"><apiName>reduceLabels</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#reduceLabels()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier><apiDesc>Nouvel ensemble de libellés résolvant le chevauchement en réduisant le nombre de libellés.
      
      </apiDesc></apiReturn><apiParam><apiItemName>intervalStart</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>Début de l’intervalle de chevauchement des libellés.
     
      </apiDesc></apiParam><apiParam><apiItemName>intervalEnd</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>Fin de l’intervalle de chevauchement des libellés.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#reduceLabels()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:transformCache"><apiName>transformCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#transformCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’objets à partir duquel les valeurs mappées sont lues et dans lequel elles sont stockées.
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>Champ des objets du tableau de cache qui contient les valeurs prémappées.
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>Champ des objets du tableau de cache dans lequel les valeurs mappées doivent être stockées.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#transformCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:update"><apiName>update</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#update()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#update()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts:CategoryAxis:baseline:get"><apiName>baseline</apiName><shortdesc>
      
      Position de la ligne de base de l’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      Position de la ligne de base de l’axe. Certaines séries telles que ColumnSeries ou AreaSeries utilisent cette valeur pour définir la base d’une région remplie lorsqu’aucune valeur minimale n’est spécifiée.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:categoryField:get"><apiName>categoryField</apiName><shortdesc>
      Spécifie le champ du fournisseur de données qui contient le texte des libellés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le champ du fournisseur de données qui contient le texte des libellés. Si la valeur de cette propriété est <codeph>null</codeph>, l’objet CategoryAxis suppose que le fournisseur de données contient un tableau de chaînes.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:dataFunction:get"><apiName>dataFunction</apiName><shortdesc>
     Spécifie une méthode qui renvoie la valeur à utiliser comme valeur categoryValue pour l’élément actuel. Si cette propriété est définie, la valeur de retour de la fonction de données personnalisée est prioritaire par rapport à la propriété categoryField. La fonction dataFunction personnalisée présente la signature suivante : nom_fonction (axis:CategoryAxis, item:Object):Object { ...</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Spécifie une méthode qui renvoie la valeur à utiliser comme valeur categoryValue pour l’élément actuel. Si cette propriété est définie, la valeur de retour de la fonction de données personnalisée est prioritaire par rapport à la propriété <codeph>categoryField</codeph>
     
     <p>La fonction <codeph>dataFunction</codeph> personnalisée présente la signature suivante :
      
     <pre>
     <i>function_name</i> (axis:CategoryAxis, item:Object):Object { ... }
     </pre>
     
     <codeph>axe</codeph> correspond à l’axe actuel qui utilise cette fonction <codeph>dataFunction</codeph>. <codeph>item</codeph> correspond à l’élément pris en compte dans le fournisseur dataProvider. Cette fonction renvoie un objet.
     </p>
      
     <p>Une fonction <codeph>dataFunction</codeph> personnalisée permet par exemple de renvoyer une valeur à partir d’un fournisseur dataProvider contenant des éléments à champs imbriqués</p>
       
     </apiDesc><example>
     <pre>
     public function myFunction(axis:CategoryAxis,item:Object):Object {
          return(item.Country.State);
     }     
     </pre>
     
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      Spécifie la source de données contenant les noms des libellés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Spécifie la source de données contenant les noms des libellés. Le fournisseur <codeph>dataProvider</codeph> peut être un tableau de valeurs, un tableau d’objets ou tout objet implémentant l’interface IList ou ICollectionView. Si le fournisseur <codeph>dataProvider</codeph> est un tableau de chaînes, veillez à ce que la propriété <codeph>categoryField</codeph> soit définie sur <codeph>null</codeph>. Si le fournisseur dataProvider est un tableau d’objets, définissez la propriété <codeph>categoryField</codeph> sur le nom du champ contenant le texte du libellé.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Spécifie une fonction qui définit les libellés générés pour chaque élément dans le fournisseur dataProvider de l’objet CategoryAxis.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Spécifie une fonction qui définit les libellés générés pour chaque élément dans le fournisseur <codeph>dataProvider</codeph> de l’objet CategoryAxis. Si aucune fonction <codeph>labelFunction</codeph> n’est fournie, les libellés d’axe prennent par défaut la valeur de la catégorie elle-même.
     
      <p>La méthode <codeph>labelFunction</codeph> d’un objet CategoryAxis présente la signature suivante :</p>
      <pre>
      function <i>function_name</i>(<i>categoryValue</i>:Object, <i>previousCategoryValue</i>:Object, <i>axis</i>:CategoryAxis, <i>categoryItem</i>:Object):String { ... }
      </pre>
      
      <p>Où :</p>
      <ul>
       <li><codeph><i>categoryValue</i></codeph> correspond à la valeur de la catégorie à représenter.</li>
       <li><codeph><i>previousCategoryValue</i></codeph> correspond à la valeur de la catégorie précédente sur l’axe.</li>
       <li><codeph><i>axis</i></codeph> correspond à l’objet CategoryAxis à rendre.</li>
       <li><codeph><i>categoryItem</i></codeph> correspond à l’élément du fournisseur <codeph>dataProvider</codeph> qui est représenté.</li>
      </ul>
      
      <p>Flex affiche la chaîne renvoyée en tant que libellé de l’axe.</p>
     
      <p>Si la propriété <codeph>categoryField</codeph> n’est pas définie, la valeur est identique à celle de la propriété <codeph>categoryValue</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:padding:get"><apiName>padding</apiName><shortdesc>
      Spécifie la marge ajoutée de part et d’autre de l’axe lors du rendu de l’élément à l’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.5
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie la marge tée de part et d’autre de l’axe lors du rendu de l’élément à l’écran. Définissez cette valeur sur 0 pour placer la première catégorie au tout début de l’axe et la dernière catégorie à la fin. Définissez cette valeur sur 0.5 pour conserver une marge correspondant à la moitié de la largeur d’une catégorie sur l’axe entre le début de l’axe et la première catégorie et entre la dernière catégorie et la fin de l’axe.
      
      <p>Cette propriété est utile pour les types de graphiques dont le rendu s’étend au-delà des limites de la catégorie (colonnes et barres, par exemple). Cependant, lorsque vous l’utilisez comme valeur horizontalAxis dans un contrôle LineChart ou AreaChart, elle est réinitialisée sur 0.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:ticksBetweenLabels:get"><apiName>ticksBetweenLabels</apiName><shortdesc>
      Spécifie la position des graduations principales le long de l’axe, par rapport aux libellés des catégories.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Spécifie la position des graduations principales le long de l’axe, par rapport aux libellés des catégories. Si la valeur est <codeph>true</codeph>, les graduations ainsi que la grille associée apparaissent entre les catégories. Si la valeur est <codeph>false</codeph>, les graduations apparaissent au milieu de la catégorie, dans le prolongement du libellé.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:PlotChart"><apiName>PlotChart</apiName><shortdesc>
  Le contrôle PlotChart représente les données en utilisant deux valeurs pour chaque point de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  The <code>&lt;mx:PlotChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:PlotChart
  /&gt;
  </pre> 
  
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle PlotChart représente les données en utilisant deux valeurs pour chaque point de données. Une des valeurs détermine la position du point de données sur l’axe horizontal et l’autre valeur détermine sa position sur l’axe vertical.
  
  <p>Le contrôle PlotChart suppose que la propriété de sa <codeph>série</codeph> contient un tableau d’objets PlotSeries.</p>
 
  </apiDesc><example conref="PlotChartExample.mxml"><swfblock conref="examples/PlotChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#PlotSeries"><linktext>mx.charts.series.PlotSeries</linktext></link></related-links><apiConstructor id="mx.charts:PlotChart:PlotChart"><apiName>PlotChart</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:PlotChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:CandlestickChart"><apiName>CandlestickChart</apiName><shortdesc>
  Le contrôle CandlestickChart représente des données financières sous la forme d’une série de chandeliers représentant les valeurs supérieure, inférieure, d’ouverture et de fermeture d’une série de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="maxColumnWidth" owner="mx.charts:CandlestickChart" playerVersion="Flash9" type="Number">
<description>
  Spécifie la largeur de tracé des chandeliers, en pixels. La largeur réelle de la colonne correspond soit à la valeur de cette propriété, soit à la valeur de la propriété <codeph>columnWidthRatio</codeph>, la plus petite des deux étant prise en compte. Les différentes séries de chandeliers divisent cet espace proportionnellement.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnWidthRatio" owner="mx.charts:CandlestickChart" playerVersion="Flash9" type="Number">
<description>
  Spécifie le rapport entre la largeur de tracé des chandeliers et les largeurs des catégories sur l’axe horizontal, sous forme de pourcentage compris entre 0 et 1. La valeur 1 utilise l’intégralité de l’espace et la valeur 0.6 utilise 60 % de l’espace disponible pour la colonne. La largeur réelle du chandelier correspond soit à la valeur de la propriété <codeph>columnWidthRatio</codeph>, soit à la valeur de <codeph>maxColumnWidth</codeph>, la plus petite des deux étant prise en compte. Les différentes séries de chandeliers divisent cet espace proportionnellement. La valeur par défaut est 0.65.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  The <code>&lt;mx:CandlestickChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:CandlestickChart
    <strong>Styles</strong>
    columnWidthRatio=".65"
    maxColumnWidth="<i>No default</i>"
  /&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle CandlestickChart représente des données financières sous la forme d’une série de chandeliers représentant les valeurs supérieure, inférieure, d’ouverture et de fermeture d’une série de données. Le sommet et la base de la ligne verticale de chaque chandelier représentent les valeurs supérieure et inférieure du point de données, alors que le sommet et la base de la zone remplie représentent les valeurs d’ouverture et de fermeture. Chaque chandelier est rempli différemment, selon que la valeur de fermeture du point de données est supérieure ou inférieure à la valeur d’ouverture.
   
  <p>Un contrôle CandlestickChart suppose que la propriété de sa <codeph>série</codeph> contient un tableau d’objets CandlestickSeries.</p>
   </apiDesc><example conref="CandlestickChartExample.mxml"><swfblock conref="examples/CandlestickChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#CandlestickSeries"><linktext>mx.charts.series.CandlestickSeries</linktext></link></related-links><apiConstructor id="mx.charts:CandlestickChart:CandlestickChart"><apiName>CandlestickChart</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:CandlestickChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:DateTimeAxis"><apiName>DateTimeAxis</apiName><shortdesc>
  La classe DateTimeAxis répartit les valeurs temporelles uniformément entre une valeur minimale et une valeur maximale le long d’un axe de graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:DateTimeAxis&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:DateTimeAxis
    <strong>Properties</strong>
    alignLabelsToUnits="true|false"
    dataUnits="milliseconds|seconds|minutes|hours|days|weeks|months|years"
    disabledDays="<i>Array; No default</i>"
    disabledRanges="<i>Array; No default</i>"
    displayLocalTime="<i>false</i>"
    interval="<i>Number</i>"
    labelUnits="milliseconds|seconds|minutes|hours|days|weeks|months|years"
    maximum="<i>Date</i>"
    minimum="<i>Date</i>"
    minorTickInterval="<i>Number</i>"
    minorTickUnits="milliseconds|seconds|minutes|hours|days|weeks|months|years"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:NumericAxis</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe DateTimeAxis répartit les valeurs temporelles uniformément entre une valeur minimale et une valeur maximale le long d’un axe de graphique. Elle peut tracer des valeurs représentées sous forme d’occurrences de la classe Date, sous forme de valeurs numériques représentant le nombre de millisecondes depuis l’epoch (minuit le 1er janvier 1970, heure GMT), ou encore sous forme de valeurs de chaîne lorsque vous spécifiez une fonction d’analyse personnalisée.  
 
  <p>La classe DateTimeAxis choisit les unités les plus adaptées pour marquer l’axe, en examinant la plage entre les valeurs minimale et maximale de l’axe. L’axe choisit l’unité la plus grande capable de générer un nombre suffisamment important de libellés pour l’axe donné. Vous pouvez restreindre les unités devant être prises en compte par le graphique ou spécifier les unités à utiliser, par le biais de la propriété <codeph>labelUnits</codeph>.</p>
 
  <p>Vous pouvez spécifier explicitement les valeurs minimale et maximale, ou laisser l’axe les déterminer automatiquement en examinant les valeurs rendues dans le graphique. Par défaut, la classe DateTimeAxis choisit la plage de valeurs la plus petite possible contenant toutes les valeurs représentées dans le graphique. Si vous le souhaitez, vous pouvez faire en sorte que les valeurs minimale et maximale soient arrondies à des unités entières (millisecondes, secondes, minutes, heures, jours, semaines, mois, années) en définissant la propriété <codeph>autoAdjust</codeph> sur <codeph>true</codeph>.</p>
  
  <p>Vous pouvez choisir de désactiver certains jours de la semaine et des plages de dates pour afficher uniquement les jours ouvrables sur l’axe, au lieu d’afficher tous les jours présents entre les valeurs minimale et maximale. En outre, la classe DateTimeAxis filtre les données et affiche uniquement les données correspondant aux jours ouvrables sur le graphique.</p>
  </apiDesc><example conref="DateTimeAxisExample.mxml"><swfblock conref="examples/DateTimeAxisExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.chartClasses.xml#IAxis"><linktext>mx.charts.chartClasses.IAxis</linktext></link></related-links><apiConstructor id="mx.charts:DateTimeAxis:DateTimeAxis"><apiName>DateTimeAxis</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts:DateTimeAxis:protected:buildMinorTickCache"><apiName>buildMinorTickCache</apiName><shortdesc>
      
      Crée un tableau de positions pour le tableau de graduations secondaires généré par cet axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Tableau de positions comprises entre 0 et 1, qui représentent les points auxquels des graduations secondaires sont rendues, entre les valeurs minimale et maximale de l’axe.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      
      Crée un tableau de positions pour le tableau de graduations secondaires généré par cet axe. Les sous-classes doivent implémenter cette fonction. Cette fonction est appelée automatiquement par la classe NumericAxis. Il est recommandé d’accéder à la propriété <codeph>minorTicks</codeph> plutôt que d’appeler directement cette fonction.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:filterCache"><apiName>filterCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#filterCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’objets à partir duquel les valeurs converties sont lues et dans lequel elles sont stockées.
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>Champ des objets du tableau de cache qui contient les valeurs préfiltrées.
     
      </apiDesc></apiParam><apiParam><apiItemName>filteredField</apiItemName><apiType value="String"/><apiDesc>Champ des objets du tableau de cache dans lequel les valeurs filtrées doivent être stockées.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#filterCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatDays"><apiName>formatDays</apiName><shortdesc>
      Fonction de formatage par défaut utilisée lorsque l’axe rend les valeurs en utilisant les jours comme unité labelUnits.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Libellé formaté.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>Objet Date contenant l’unité à formater.
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>Objet Date contenant le point de données apparaissant avant le point de données actuel.
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>Objet DateTimeAxis sur lequel le libellé est rendu.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fonction de formatage par défaut utilisée lorsque l’axe rend les valeurs à partir d’unités <codeph>labelUnits</codeph> journalières. Si vous écrivez une classe DateTimeAxis personnalisée, vous pouvez remplacer cette méthode pour spécifier un autre formatage par défaut.
      
      <p>Vous n’appelez pas cette méthode directement. En fait, Flex appelle cette méthode avant de rendre le libellé, afin d’obtenir la chaîne à afficher.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatMilliseconds"><apiName>formatMilliseconds</apiName><shortdesc>
      Fonction de formatage par défaut utilisée lorsque l’axe rend les valeurs en utilisant les millisecondes comme unité labelUnits.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Libellé formaté.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>Objet Date contenant l’unité à formater.
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>Objet Date contenant le point de données apparaissant avant le point de données actuel.
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>Objet DateTimeAxis sur lequel le libellé est rendu.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fonction de formatage par défaut utilisée lorsque l’axe rend les valeurs en utilisant les millisecondes comme unité <codeph>labelUnits</codeph>. Si vous écrivez une classe DateTimeAxis personnalisée, vous pouvez remplacer cette méthode pour spécifier un autre formatage par défaut.
      
      <p>Vous n’appelez pas cette méthode directement. En fait, Flex appelle cette méthode avant de rendre le libellé, afin d’obtenir la chaîne à afficher.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatMinutes"><apiName>formatMinutes</apiName><shortdesc>
      Fonction de formatage par défaut utilisée lorsque l’axe rend les valeurs en utilisant les minutes comme unité labelUnits.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Libellé formaté.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>Objet Date contenant l’unité à formater.
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>Objet Date contenant le point de données apparaissant avant le point de données actuel.
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>Objet DateTimeAxis sur lequel le libellé est rendu.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fonction de formatage par défaut utilisée lorsque l’axe rend les valeurs en utilisant les minutes comme unité <codeph>labelUnits</codeph>. Si vous écrivez une classe DateTimeAxis personnalisée, vous pouvez remplacer cette méthode pour spécifier un autre formatage par défaut.
      
      <p>Vous n’appelez pas cette méthode directement. En fait, Flex appelle cette méthode avant de rendre le libellé, afin d’obtenir la chaîne à afficher.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatMonths"><apiName>formatMonths</apiName><shortdesc>
      Fonction de formatage par défaut utilisée lorsque l’axe rend les valeurs en utilisant les mois comme unité labelUnits.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Libellé formaté.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>Objet Date contenant l’unité à formater.
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>Objet Date contenant le point de données apparaissant avant le point de données actuel.
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>Objet DateTimeAxis sur lequel le libellé est rendu.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fonction de formatage par défaut utilisée lorsque l’axe rend les valeurs en utilisant les mois comme unité <codeph>labelUnits</codeph>. Si vous écrivez une classe DateTimeAxis personnalisée, vous pouvez remplacer cette méthode pour spécifier un autre formatage par défaut.
      
      <p>Vous n’appelez pas cette méthode directement. En fait, Flex appelle cette méthode avant de rendre le libellé, afin d’obtenir la chaîne à afficher.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatSeconds"><apiName>formatSeconds</apiName><shortdesc>
      Fonction de formatage par défaut utilisée lorsque l’axe rend les valeurs en utilisant les secondes comme unité labelUnits.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Libellé formaté.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>Objet Date contenant l’unité à formater.
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>Objet Date contenant le point de données apparaissant avant le point de données actuel.
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>Objet DateTimeAxis sur lequel le libellé est rendu.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fonction de formatage par défaut utilisée lorsque l’axe rend les valeurs en utilisant les secondes comme unité <codeph>labelUnits</codeph>. Si vous écrivez une classe DateTimeAxis personnalisée, vous pouvez remplacer cette méthode pour spécifier un autre formatage par défaut.
      
      <p>Vous n’appelez pas cette méthode directement. En fait, Flex appelle cette méthode avant de rendre le libellé, afin d’obtenir la chaîne à afficher.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatYears"><apiName>formatYears</apiName><shortdesc> 
      Fonction de formatage par défaut utilisée lorsque l’axe rend les valeurs en utilisant les années comme unité labelUnits.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Libellé formaté.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>Objet Date contenant l’unité à formater.
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>Objet Date contenant le point de données apparaissant avant le point de données actuel.
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>Objet DateTimeAxis sur lequel le libellé est rendu.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Fonction de formatage par défaut utilisée lorsque l’axe rend les valeurs en utilisant les années comme unité <codeph>labelUnits</codeph>. Si vous écrivez une classe DateTimeAxis personnalisée, vous pouvez remplacer cette méthode pour spécifier un autre formatage par défaut.
      
      <p>Vous n’appelez pas cette méthode directement. En fait, Flex appelle cette méthode avant de rendre le libellé, afin d’obtenir la chaîne à afficher.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:reduceLabels"><apiName>reduceLabels</apiName><shortdesc> 
      Appelée lorsqu’un objet AxisRenderer est incapable de rendre correctement les libellés sans chevauchement et qu’il souhaite que l’objet Axis réduise l’ensemble de libellés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvel ensemble de libellés résolvant le chevauchement en réduisant le nombre de libellés.
      
      </apiDesc><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier></apiReturn><apiParam><apiItemName>intervalStart</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>Début de l’intervalle de chevauchement des libellés.
     
      </apiDesc></apiParam><apiParam><apiItemName>intervalEnd</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>Fin de l’intervalle de chevauchement des libellés.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Appelée lorsqu’un objet AxisRenderer est incapable de rendre correctement les libellés sans chevauchement et qu’il souhaite que l’objet Axis réduise l’ensemble de libellés. Les deux libellés qui se chevauchent sont transmis à la méthode.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:transformCache"><apiName>transformCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#transformCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’objets à partir duquel les valeurs mappées sont lues et dans lequel elles sont stockées.
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>Champ des objets du tableau de cache qui contient les valeurs prémappées.
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>Champ des objets du tableau de cache dans lequel les valeurs mappées doivent être stockées.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#transformCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts:DateTimeAxis:alignLabelsToUnits:get"><apiName>alignLabelsToUnits</apiName><shortdesc>
      Détermine le positionnement des libellés le long de l’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Détermine le positionnement des libellés le long de l’axe.
      <p>Lorsque la valeur est <codeph>false</codeph>, le graphique place toujours un libellé au début de l’axe. Par exemple, si les libellés doivent être affichés pour chaque mois et que le premier point de données est le 14 juillet, le premier libellé sera placé au niveau du 14 juillet. Lorsque la valeur est <codeph>true</codeph>, Flex commence par calculer l’unité de libellé, puis affiche le libellé pour le premier intervalle complet de cette unité. Par exemple, si le premier point de données correspond au 14 juillet et que les mois sont utilisés comme unité de libellé (unité définie explicitement ou par calcul dynamique), le premier libellé s’affiche au niveau du 1er août.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:dataUnits:get"><apiName>dataUnits</apiName><shortdesc>
      Spécifie l’unité à utiliser pour représenter les données dans le graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie l’unité à utiliser pour représenter les données dans le graphique. La valeur doit être choisie parmi les valeurs suivantes :
      <ul>
       <li><codeph>millisecondes</codeph></li>
       <li><codeph>secondes</codeph></li>
       <li><codeph>minutes</codeph></li>
       <li><codeph>heures</codeph></li>
       <li><codeph>jours</codeph></li>
       <li><codeph>semaines</codeph></li>
       <li><codeph>mois</codeph></li>
       <li><codeph>années</codeph></li>
      </ul>
     
      <p>Cette valeur est utilisée de deux manières. Tout d’abord, lors du choix de l’unité de libellé adaptée, la classe DateTimeAxis ne choisit jamais une unité plus petite que les unités représentées par les données. Si la valeur de la propriété <codeph>dataUnits</codeph> est <codeph>days</codeph>, le graphique ne rend pas les libellés à chaque heure, quelles que soient les valeurs minimale et maximale de la plage.</p>
     
      <p>Par ailleurs, la valeur de la propriété <codeph>dataUnits</codeph> est utilisée par certaines séries pour modifier le rendu. Ainsi, la plupart des séries de colonnes (ColumnSeries, BarSeries, CandlestickSeries et HLOCSeries, par exemple) utilisent la valeur de la propriété <codeph>dataUnits</codeph> pour déterminer la largeur de rendu de leurs colonnes.</p>
     
      <p>Par exemple, si la propriété <codeph>labelUnits</codeph> de l’axe horizontal du contrôle ColumnChart est définie sur <codeph>weeks</codeph> et que sa propriété <codeph>dataUnits</codeph> est définie sur <codeph>days</codeph>, le contrôle ColumnChart rend chaque colonne à 1/7e de la distance entre les libellés.</p>
     
      <p>Lorsque la propriété <codeph>dataUnits</codeph> est définie sur <codeph>null</codeph>, les séries de colonnes rendent leurs colonnes jour par jour, mais la classe DateTimeAxis choisit une unité plus appropriée lors de la génération des libellés.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:disabledDays:get"><apiName>disabledDays</apiName><shortdesc>
      Jours de la semaine à désactiver.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Jours à désactiver dans une semaine. Toutes les dates du mois correspondant au jour spécifié sont désactivées. La valeur des éléments de ce tableau est comprise entre 0 (dimanche) et 6 (samedi). Par exemple, la valeur <codeph>[ 0, 6 ]</codeph> désactive le dimanche et le samedi.
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:disabledRanges:get"><apiName>disabledRanges</apiName><shortdesc>
      Désactive un seul et plusieurs jours.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
      
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Désactive un seul et plusieurs jours.
     
      <p>Cette propriété accepte un tableau d’objets en tant que paramètre. Chaque objet de ce tableau est un objet Date spécifiant un seul jour à désactiver, ou un objet contenant une des propriétés <codeph>rangeStart</codeph> et <codeph>rangeEnd</codeph>, voire les deux, dont les valeurs sont un objet Date. La valeur de ces propriétés décrit les limites de la période. Si l’une ou l’autre des propriétés est omise, la période est considérée comme illimitée dans le sens correspondant. Si vous ne spécifiez que la propriété <codeph>rangeStart</codeph>, toutes les dates qui se trouvent après la date spécifiée sont désactivées, y compris la date <codeph>rangeStart</codeph>. Si vous spécifiez uniquement la propriété <codeph>rangeEnd</codeph>, toutes les dates antérieures à la date spécifiée sont désactivées, y compris la date spécifiée par <codeph>rangeEnd</codeph>. Pour désactiver un jour précis, utilisez un objet Date spécifiant une date dans le tableau.</p>
     
      <p>L’exemple suivant désactive le 11 janvier 2006, la période du 23 janvier au 10 février 2006, ainsi que toutes les dates à partir du 1er mars 2006.</p>
     
      <p><codeph>disabledRanges="{[ new Date(2006,0,11), {rangeStart: new Date(2006,0,23), rangeEnd: new Date(2006,1,10)}, {rangeStart: new Date(2006,2,1)} ]}"</codeph></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:displayLocalTime:get"><apiName>displayLocalTime</apiName><shortdesc> 
      Lorsque la valeur est true, l’objet DateTimeAxis considère que toutes les valeurs de date sont dans le même fuseau horaire que l’ordinateur client exécutant l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
      Lorsque la valeur est <codeph>true</codeph>, l’objet DateTimeAxis considère que toutes les valeurs de date sont dans le même fuseau horaire que l’ordinateur client exécutant l’application. Si la valeur est <codeph>false</codeph>, toutes les valeurs sont exprimées en temps universel (heure du méridien de Greenwich).
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:interval:get"><apiName>interval</apiName><shortdesc>
      Spécifie le nombre d’unités labelUnits entre les valeurs des libellés le long de l’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le nombre d’unités <codeph>labelUnits</codeph> entre les valeurs des libellés le long de l’axe. Flex calcule l’intervalle si cette propriété est définie sur <codeph>null</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:labelUnits:get"><apiName>labelUnits</apiName><shortdesc>
      Unités utilisées par l’axe pour générer les libellés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Unités utilisées par l’axe pour générer les libellés. Par défaut, un objet DateTimeAxis prend en compte toutes les unités valides (<codeph>millisecondes</codeph>, <codeph>secondes</codeph>, <codeph>minutes</codeph>, <codeph>heures</codeph>, <codeph>jours</codeph>, <codeph>semaines</codeph>, <codeph>mois</codeph> ou <codeph>années</codeph>).
      
      <p>Si la propriété <codeph>labelUnits</codeph> n’est pas définie, le graphique n’utilise pas d’unité plus petite que la valeur de la propriété <codeph>dataUnits</codeph> pour rendre les libellés.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:maximum:get"><apiName>maximum</apiName><shortdesc>
      Spécifie la valeur maximale d’un libellé d’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie la valeur maximale d’un libellé d’axe. Si la valeur est <codeph>null</codeph>, Flex détermine la valeur minimale à partir des données du graphique.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:minimum:get"><apiName>minimum</apiName><shortdesc>
      Spécifie la valeur minimale d’un libellé d’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie la valeur minimale d’un libellé d’axe. Si la valeur est <codeph>null</codeph>, Flex détermine la valeur minimale à partir des données du graphique. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:minorTickInterval:get"><apiName>minorTickInterval</apiName><shortdesc> 
      Spécifie le nombre d’unités minorTickUnits entre les graduations secondaires le long de l’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
      Spécifie le nombre d’unités <codeph>minorTickUnits</codeph> entre les graduations secondaires le long de l’axe. Si cette propriété est définie sur <codeph>NaN</codeph>, l’objet DateTimeAxis le calcule automatiquement.
      
      <p>La propriété <codeph>minorTickInterval</codeph> est normalement définie automatiquement sur 1. Cependant, si la propriété <codeph>minorTickUnits</codeph> correspond aux mêmes unités que la propriété <codeph>dataUnits</codeph> (qu’elle soit définie explicitement ou par calcul implicite), alors la propriété <codeph>minorTickInterval</codeph> correspond soit à 1, soit à <codeph>dataInterval</codeph>, la valeur la plus élevée étant prise en compte.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:minorTickUnits:get"><apiName>minorTickUnits</apiName><shortdesc>
      Unités prises en compte par l’axe lors de la génération des graduations secondaires.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Unités prises en compte par l’axe lors de la génération des graduations secondaires. Par défaut, un objet DateTimeAxis prend en compte toutes les unités valides (<codeph>millisecondes</codeph>, <codeph>secondes</codeph>, <codeph>minutes</codeph>, <codeph>heures</codeph>, <codeph>jours</codeph>, <codeph>semaines</codeph>, <codeph>mois</codeph> ou <codeph>années</codeph>).
      
      <p>Si cette propriété n’est pas définie, le graphique détermine la valeur de la propriété <codeph>minorTickUnits</codeph>. Si l’intervalle de libellé est supérieur à 1, la propriété <codeph>minorTickUnits</codeph> est définie sur la valeur de la propriété <codeph>labelUnits</codeph> et la propriété <codeph>minorTickInterval</codeph> est définie sur 1. Si l’intervalle de libellé est égal à 1, la propriété <codeph>minorTickUnits</codeph> est définie sur la valeur inférieure la plus proche de la propriété <codeph>labelUnits</codeph>. Si elle est définie, la propriété <codeph>minorTickUnits</codeph> ne peut en aucun cas être plus petite que la valeur de la propriété <codeph>dataUnits</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:protected:requiredDescribedFields:get"><apiName>requiredDescribedFields</apiName><shortdesc>
      Champs de la structure DescribeData concernés par cet axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
      Champs de la structure DescribeData concernés par cet axe.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:unitSize:get"><apiName>unitSize</apiName><shortdesc>
      Largeur d’une unité de données unique, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Largeur d’une unité de données unique, en pixels. Le type d’une unité de données est déterminé par la valeur de la propriété <codeph>dataUnits</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:dataInterval:set"><apiName>dataInterval</apiName><shortdesc>
      Spécifie l’intervalle entre les données du graphique, spécifié en unités dataUnits.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
      Spécifie l’intervalle entre les données du graphique, spécifié en unités <codeph>dataUnits</codeph>.
      <p>Par exemple, si la propriété <codeph>dataUnits</codeph> est définie sur <codeph>"hours"</codeph> et que la propriété <codeph>dataInterval</codeph> est définie sur 4, le graphique suppose qu’un intervalle de quatre heures sépare les données. Cette propriété influe sur la manière dont certaines séries (ColumnSeries et CandlestickSeries, entre autres) rendent leurs données. Elle influe également sur le choix automatique des libellés.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="mx.charts.xml#DateTimeAxis/dataUnits"><linktext>dataUnits</linktext></link></related-links></apiValue><apiValue id="mx.charts:DateTimeAxis:parseFunction:set"><apiName>parseFunction</apiName><shortdesc> 
      Spécifie une méthode personnalisant la valeur des points de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> 
      Spécifie une méthode personnalisant la valeur des points de données. Grâce à cette propriété, vous pouvez spécifier une méthode acceptant une valeur et renvoyant un objet Date. L’objet Date est ensuite utilisé dans l’objet DateTimeAxis du graphique. Vous pouvez ainsi fournir des chaînes d’entrée de données personnalisables et les convertir en objets Date que Flex peut interpréter dans l’objet DateTimeAxis.
      
      <p>Flex transmet un seul paramètre à la méthode d’analyse. Ce paramètre correspond à la valeur du point de données spécifié pour la série. Il s’agit généralement d’une chaîne représentant une date. Vous ne pouvez pas remplacer ce paramètre ni ajouter des paramètres supplémentaires.</p>
      
      <p>Cet objet Date est immédiatement converti en valeur numérique, de sorte que les fonctions parseFunctions personnalisées puissent réutiliser le même objet Date et ainsi améliorer les performances. Par défaut, la classe DateTimeAxis utilise la fonctionnalité d’analyse de chaîne de la méthode <codeph>Date.parse()</codeph> de la norme ECMA.</p>
      
      L’exemple suivant utilise un fournisseur de données définissant un objet de données au format { aaaa, mm, jj }. La méthode spécifiée par la fonction <codeph>parseFunction</codeph> utilise ces valeurs pour créer un objet Date utilisable par l’axe.
      
      <pre>
      &lt;mx:Script>
          import mx.collections.ArrayCollection;
          [Bindable] 
          public var aapl:ArrayCollection = new ArrayCollection([ 
              {date: "2005, 8, 1", close: 42.71},
              {date: "2005, 8, 2", close: 42.99},
              {date: "2005, 8, 3", close: 44}
          ]);
          
          public function myParseFunction(s:String):Date { 
              // Get an array of Strings from the comma-separated String passed in.
              var a:Array = s.split(",");
      
              // Create the new Date object. Note that the month argument is 0-based (with 0 being January).
              var newDate:Date = new Date(a[0],a[1]-1,a[2]);
              return newDate;
          }
      &lt;/mx:Script>
      &lt;mx:LineChart id="mychart" dataProvider="{aapl}" showDataTips="true">
          &lt;mx:horizontalAxis>
              &lt;mx:DateTimeAxis dataUnits="days" parseFunction="myParseFunction"/>
          &lt;/mx:horizontalAxis>
          &lt;mx:series>
              &lt;mx:LineSeries yField="close" xField="date" displayName="AAPL"/>
          &lt;/mx:series>
      &lt;/mx:LineChart>
      </pre>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>