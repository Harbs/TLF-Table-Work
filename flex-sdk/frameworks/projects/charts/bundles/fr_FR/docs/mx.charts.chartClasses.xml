<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.charts.chartClasses"><apiName>mx.charts.chartClasses</apiName><apiDetail/><apiClassifier id="mx.charts.chartClasses:CartesianCanvasValue"><apiName>CartesianCanvasValue</apiName><shortdesc>
     Définit la position des objets sur un dessin de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
     Définit la position des objets sur un dessin de données. Cette classe est dotée d’une coordonnée de données et d’un décalage facultatif, utilisés par la classe CartesianDataCanvas pour calculer les coordonnées de pixel.
     
     </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.chartClasses.xml#CartesianDataCanvas"><linktext>mx.charts.chartClasses.CartesianDataCanvas</linktext></link></related-links><apiConstructor id="mx.charts.chartClasses:CartesianCanvasValue:CartesianCanvasValue"><apiName>CartesianCanvasValue</apiName><shortdesc>
         Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>Coordonnées de données d’un point.
         </apiDesc></apiParam><apiParam><apiItemName>offset</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Décalage des coordonnées de données spécifiées dans <codeph>value</codeph>, en pixels.
          
          </apiDesc></apiParam></apiConstructorDef><apiDesc>
         Constructeur.
         
         </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.charts.chartClasses:IAxisRenderer"><apiName>IAxisRenderer</apiName><shortdesc>
  La classe IAxis est une interface abstraite permettant de définir les propriétés de libellé, de graduation et de positionnement de données d’un axe de graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  La classe IAxis est une interface abstraite permettant de définir les propriétés de libellé, de graduation et de positionnement de données d’un axe de graphique.
 
  <p>Les classes implémentent cette interface pour fournir des fonctionnalités de définition de plage de valeurs.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#CategoryAxis"><linktext>mx.charts.CategoryAxis</linktext></link><link href="mx.charts.xml#LinearAxis"><linktext>mx.charts.LinearAxis</linktext></link></related-links><apiOperation id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:adjustGutters"><apiName>adjustGutters</apiName><shortdesc>
      Ajuste la mise en forme en fonction des valeurs de gouttière transmises.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Rectangle définissant les dimensions des gouttières, ajustements inclus.
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>workingGutters</apiItemName><apiType value="flash.geom:Rectangle"/><apiDesc>Définit les gouttières à ajuster.
     
      </apiDesc></apiParam><apiParam><apiItemName>adjustable</apiItemName><apiType value="Object"/><apiDesc>Ce paramètre se compose de quatre propriétés booléennes (left=true/false, top=true/false, right=true/false et bottom=true/false) indiquant si la fonctionnalité de rendu d’axe peut éventuellement ajuster les gouttières définies.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajuste la mise en forme en fonction des valeurs de gouttière transmises. Cette méthode est appelée par le graphique conteneur pour déterminer la taille des gouttières et de la zone de données correspondante. Cette méthode permet à la classe AxisRenderer de calculer la mise en forme en fonction des nouvelles gouttières et de les ajuster si nécessaire. Si une gouttière est ajustable, une fonctionnalité de rendu d’axe peut éventuellement ajuster les gouttières vers l’intérieur (gouttières plus larges), mais pas vers l’extérieur (gouttières moins larges).
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:chartStateChanged"><apiName>chartStateChanged</apiName><shortdesc>
      Appelée par le graphique conteneur pour indiquer que l’état actuel du graphique a changé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>oldState</apiItemName><apiType value="uint"/><apiDesc>Entier représentant l’état précédent.
     
      </apiDesc></apiParam><apiParam><apiItemName>v</apiItemName><apiType value="uint"/><apiDesc>Entier représentant le nouvel état.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée par le graphique conteneur pour indiquer que l’état actuel du graphique a changé. Les éléments d’implémentation doivent répondre à cette méthode pour synchroniser les modifications apportées aux données affichées par l’élément.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:axis:get"><apiName>axis</apiName><shortdesc>
      Objet d’axe associé à cette fonctionnalité de rendu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Objet d’axe associé à cette fonctionnalité de rendu. Cette propriété est gérée par le graphique conteneur et ne doit pas être définie explicitement.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:gutters:get"><apiName>gutters</apiName><shortdesc>
      Distance entre l’objet axisRenderer et les côtés du graphique conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      Distance entre l’objet axisRenderer et les côtés du graphique conteneur. Cette propriété est affectée automatiquement par le graphique et ne doit pas être affectée directement.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:horizontal:get"><apiName>horizontal</apiName><shortdesc>
      true si la fonctionnalité de rendu d’axe est utilisée comme axe horizontal.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      <codeph>true</codeph> si la fonctionnalité de rendu d’axe est utilisée comme axe horizontal. Cette propriété est gérée par le contrôle CartesianChart conteneur et ne doit pas être définie directement.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:minorTicks:get"><apiName>minorTicks</apiName><shortdesc>
      Contient un tableau spécifiant où Flex doit tracer les graduations secondaires le long de l’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Contient un tableau spécifiant où Flex doit tracer les graduations secondaires le long de l’axe. Chaque élément du tableau contient une valeur comprise entre 0 et 1. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:placement:get"><apiName>placement</apiName><shortdesc>
      Côté du graphique sur lequel l’objet axisRenderer sera affiché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Côté du graphique sur lequel l’objet axisRenderer sera affiché. Valeurs autorisées : <codeph>"left"</codeph> et <codeph>"right"</codeph> pour le rendu des axes verticaux et <codeph>"top"</codeph> et <codeph>"bottom"</codeph> pour le rendu des axes horizontaux. Par défaut, les axes principaux sont placés à gauche et en haut et les axes secondaires à droite et en bas. Les contrôles CartesianChart placent automatiquement les axes secondaires à l’opposé des axes principaux. Par exemple, si vous placez explicitement un axe vertical principal à droite, l’axe vertical secondaire est automatiquement placé à gauche.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:ticks:get"><apiName>ticks</apiName><shortdesc>
      Contient un tableau spécifiant où Flex doit tracer les graduations le long de l’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Contient un tableau spécifiant où Flex doit tracer les graduations le long de l’axe. Chaque élément du tableau contient une valeur comprise entre 0 et 1. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:heightLimit:set"><apiName>heightLimit</apiName><shortdesc>
      Quantité maximale d’espace, en pixels, qu’une fonctionnalité de rendu d’axe peut occuper dans un graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Quantité maximale d’espace, en pixels, qu’une fonctionnalité de rendu d’axe peut occuper dans un graphique. Par défaut, les fonctionnalités de rendu d’axe occupent uniquement l’espace nécessaire pour rendre l’ensemble des libellés à leur taille normale dans le graphique. Si la propriété heightLimit est définie, un objet AxisRenderer réduit la taille des libellés pour faire en sorte que la taille totale de l’axe soit inférieure à la valeur heightLimit.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:otherAxes:set"><apiName>otherAxes</apiName><shortdesc>
      Tableau d’axes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau d’axes.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:IChartElement"><apiName>IChartElement</apiName><shortdesc>
  L’interface IChartElement définit l’ensemble de base des propriétés et méthodes nécessaires pour qu’un objet UIComponent puisse être représenté dans l’espace de données d’un graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IChartElement définit l’ensemble de base des propriétés et méthodes nécessaires pour qu’un objet UIComponent puisse être représenté dans l’espace de données d’un graphique. Tout composant affecté aux tableaux de série ou d’éléments backgroundElement ou annotationElement d’un graphique doit implémenter cette interface.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:chartStateChanged"><apiName>chartStateChanged</apiName><shortdesc>
      Appelée par le graphique conteneur pour indiquer que l’état actuel du graphique a changé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>oldState</apiItemName><apiType value="uint"/><apiDesc>Entier représentant l’état précédent.
     
      </apiDesc></apiParam><apiParam><apiItemName>v</apiItemName><apiType value="uint"/><apiDesc>Entier représentant le nouvel état.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée par le graphique conteneur pour indiquer que l’état actuel du graphique a changé. Les éléments d’implémentation doivent répondre à cette méthode pour synchroniser les modifications apportées aux données affichées par l’élément.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:claimStyles"><apiName>claimStyles</apiName><shortdesc>
      Appelée par le graphique pour autoriser les éléments associés à récupérer les sélecteurs de style de son tableau chartSeriesStyles.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Nouvelle valeur de <codeph>firstAvailable</codeph> après récupération des styles (par exemple, <codeph>firstAvailable</codeph> + <i>N</i>).
      
      </apiDesc><apiType value="uint"/></apiReturn><apiParam><apiItemName>styles</apiItemName><apiType value="Array"/><apiDesc>Tableau de styles à récupérer.
     
      </apiDesc></apiParam><apiParam><apiItemName>firstAvailable</apiItemName><apiType value="uint"/><apiDesc>Premier sélecteur de style à récupérer dans le tableau.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée par le graphique pour autoriser les éléments associés à récupérer les sélecteurs de style de son tableau chartSeriesStyles. Chaque graphique dispose de son propre ensemble de sélecteurs, qui sont implicitement affectés aux éléments contenus qui les demandent. L’implémentation de cette fonction offre à un élément la possibilité de récupérer des éléments de cet ensemble, si nécessaire. Un élément qui nécessite <i>N</i> sélecteurs de style récupère les valeurs comprises entre <codeph>styles[firstAvailable]</codeph> et <codeph>styles[firstAvailable + <i>N</i> - 1]</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:collectTransitions"><apiName>collectTransitions</apiName><shortdesc>
      Appelée par le graphique conteneur pour collecter les transitions lues par un élément particulier lorsque l’état du graphique change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>chartState</apiItemName><apiType value="Number"/><apiDesc>Etat auquel le graphique lance la lecture des nouvelles transitions.
     
      </apiDesc></apiParam><apiParam><apiItemName>transitions</apiItemName><apiType value="Array"/><apiDesc>Tableau de transition à ajouter à la liste des transitions devant être lues par le graphique.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée par le graphique conteneur pour collecter les transitions lues par un élément particulier lorsque l’état du graphique change. Le graphique collecte les transitions de tous les éléments et s’assure qu’elles sont lues en parallèle. Il attend que toutes les transitions soient terminées avant de passer à un autre état. Les implémenteurs doivent ajouter toutes les transitions nécessaires à la fin du paramètre Array des transitions.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:describeData"><apiName>describeData</apiName><shortdesc>
      Appelée par la classe DataTransform gouvernante pour obtenir une description des données représentées par cet élément IChartElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tableau contenant les occurrences DataDescription qui décrivent les données affichées.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>Détermine l’axe dont les descriptions des données doivent être obtenues.
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>Champ de bits indiquant quelles valeurs de l’objet DataDescription sont prises en compte par cet axe. Les implémenteurs peuvent optimiser le calcul en calculant uniquement les champs nécessaires.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée par la classe DataTransform gouvernante pour obtenir une description des données représentées par cet élément IChartElement. Les implémenteurs remplissent et renvoient un tableau d’objets mx.charts.chartClasses.DataDescription pour garantir que leurs données sont correctement prises en compte par les axes générant automatiquement les valeurs à partir des données affichées (par exemple minimum, maximum, interval et unitSize). La plupart des types d’éléments renvoient un tableau contenant une seule description DataDescription. Les agrégats tels que BarSet et ColumnSet peuvent renvoyer plusieurs occurrences DataDescription décrivant les données affichées par leurs sous-éléments. Lorsque cette méthode est appelée, l’implémenteur décrit les données le long de l’axe indiqué par l’argument <codeph>dimension</codeph>. Cette fonction peut être appelée pour chaque axe pris en charge par le graphique conteneur.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.charts.chartClasses.xml#DataDescription"><linktext>mx.charts.chartClasses.DataDescription</linktext></link><link href="mx.charts.chartClasses.xml#DataTransform"><linktext>mx.charts.chartClasses.DataTransform</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:findDataPoints"><apiName>findDataPoints</apiName><shortdesc>
      Renvoie un objet HitData décrivant le point de données le plus proche des coordonnées transmises à la méthode.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet HitData décrivant le point de données le plus proche, dans un rayon de pixels défini par la propriété <codeph>sensitivity2</codeph>.
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Coordonnée x par rapport à l’objet ChartBase.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Coordonnée y par rapport à l’objet ChartBase.
      
      </apiDesc></apiParam><apiParam><apiItemName>sensitivity2</apiItemName><apiType value="Number"/><apiDesc>Distance maximale entre le point de données et la position de la coordonnée x/y.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie un objet HitData décrivant le point de données le plus proche des coordonnées transmises à la méthode. Les arguments <codeph>x</codeph> et <codeph>y</codeph> doivent être des valeurs exprimées dans le système de coordonnées de l’élément. Lors de la recherche des points de données les plus proches, cette méthode respecte les limites spécifiées par le paramètre <codeph>sensitivity2</codeph>.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.charts.xml#HitData"><linktext>mx.charts.HitData</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:mappingChanged"><apiName>mappingChanged</apiName><shortdesc>
      Indique à l’élément que le mappage de données des axes associés a changé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Indique à l’élément que le mappage de données des axes associés a changé. Les implémenteurs doivent détruire les données mises en cache et générer un nouveau rendu adapté. Cette fonction est appelée automatiquement par l’objet DataTransform lorsque cela est nécessaire.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:labelContainer:get"><apiName>labelContainer</apiName><shortdesc>
      Objet DisplayObject affichant les libellés rendus par cet élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      Objet DisplayObject affichant les libellés rendus par cet élément. Dans la plupart des cas, les libellés affichés dans la zone de données d’un graphique sont rendus par-dessus les autres éléments, au lieu d’être entrelacés avec les données. Si un élément d’implémentation dispose de libellés à afficher, il peut les placer dans un objet Sprite et les renvoyer comme valeur de la propriété <codeph>labelContainer</codeph>. Les graphiques conteneurs rendent les propriétés labelContainer de tous les éléments inclus et les placent dans la zone de données, au-dessus des autres éléments.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:chartDataProvider:set"><apiName>chartDataProvider</apiName><shortdesc>
      Fournisseur de données affecté au graphique conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Object"/></apiValueDef><apiDesc>
      Fournisseur de données affecté au graphique conteneur. Les types d’éléments peuvent choisir d’hériter du fournisseur de données du graphique conteneur si cela est nécessaire ou autoriser les développeurs à affecter spécifiquement des fournisseurs de données à l’élément. Tous les éléments ne dépendent pas obligatoirement d’un fournisseur de données.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:dataTransform:set"><apiName>dataTransform</apiName><shortdesc>
      Objet DataTransform utilisé par l’élément pour mapper les coordonnées de données aux coordonnées d’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiValueClassifier>mx.charts.chartClasses:DataTransform</apiValueClassifier></apiValueDef><apiDesc>
      Objet DataTransform utilisé par l’élément pour mapper les coordonnées de données aux coordonnées d’écran. Cette propriété est affectée par le graphique conteneur.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:LegendData"><apiName>LegendData</apiName><shortdesc>
  La structure LegendData est utilisée par les graphiques pour décrire les éléments à afficher dans une légende générée automatiquement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La structure LegendData est utilisée par les graphiques pour décrire les éléments à afficher dans une légende générée automatiquement. La propriété <codeph>legendData</codeph> d’un graphique contient un tableau d’objets LegendData (un pour chaque élément contenu dans l’objet Legend). 
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:LegendData:LegendData"><apiName>LegendData</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts.chartClasses:LegendData:aspectRatio"><apiName>aspectRatio</apiName><shortdesc>
	  Détermine la taille et la position du marqueur de légende.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Détermine la taille et la position du marqueur de légende. Si cette propriété est définie, l’objet LegendItem fait en sorte que la largeur et la hauteur du marqueur correspondent à cette valeur. Si elle n’est pas définie (valeur <codeph>NaN</codeph>), l’élément de légende choisit une largeur et une hauteur adaptées.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:LegendData:element"><apiName>element</apiName><shortdesc>
	  Elément de graphique qui a généré cet élément de légende.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.charts.chartClasses:IChartElement</apiValueClassifier></apiValueDef><apiDesc>
	  Elément de graphique qui a généré cet élément de légende.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:LegendData:label"><apiName>label</apiName><shortdesc>
	  Texte identifiant la série ou l’élément affiché dans l’élément de légende.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  Texte identifiant la série ou l’élément affiché dans l’élément de légende.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:LegendData:marker"><apiName>marker</apiName><shortdesc>
	  Indicateur visuel associant l’élément de légende à la série ou à l’élément représenté.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:IFlexDisplayObject"/></apiValueDef><apiDesc>
	  Indicateur visuel associant l’élément de légende à la série ou à l’élément représenté. Cet objet DisplayObject est ajouté comme enfant à l’objet LegendItem. 
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:InstanceCache"><apiName>InstanceCache</apiName><shortdesc>
  InstanceCache est un utilitaire régissant les opérations de création et de gestion d’un ensemble contenant n occurrences d’objet, où n change fréquemment.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  InstanceCache est un utilitaire régissant les opérations de création et de gestion d’un ensemble contenant <i>n</i> occurrences d’objet, où <i>n</i> change fréquemment.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:InstanceCache:InstanceCache"><apiName>InstanceCache</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="Object"/><apiDesc>Type d’objet à créer. Il peut s’agir d’un objet Class ou IFactory.
     
      </apiDesc></apiParam><apiParam><apiItemName>parent</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Objet DisplayObject facultatif auquel des occurrences doivent être ajoutées.
     
      </apiDesc></apiParam><apiParam><apiItemName>insertPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Emplacement d’insertion des occurrences dans la liste des enfants du parent. Définissez cette propriété sur -1 pour ajouter les enfants à la fin de la liste.
     
      </apiDesc></apiParam><apiParam><apiItemName>moduleFactory</apiItemName><apiType value="mx.core:IFlexModuleFactory"/><apiData>null</apiData><apiDesc>Contexte d’utilisation de polices intégrées et de recherche du gestionnaire de style qui contrôle les styles de ce composant.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts.chartClasses:InstanceCache:creationCallback"><apiName>creationCallback</apiName><shortdesc>
      Rappel réalisé lors de la création de nouvelles occurrences.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      Rappel réalisé lors de la création de nouvelles occurrences. Ce rappel présente la signature suivante :
      <pre>
      function creationCallback(<i>newInstance</i>:Object, <i>cache</i>:InstanceCache):void;
      </pre>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:discard"><apiName>discard</apiName><shortdesc> 
      Détermine si les occurrences qui ne sont pas nécessaires doivent être ignorées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef><apiDesc> 
      Détermine si les occurrences qui ne sont pas nécessaires doivent être ignorées. Si cette propriété est définie sur <codeph>true</codeph>, les éléments supplémentaires sont ignorés lorsque le nombre d’éléments en cache diminue. Dans le cas contraire, les éléments supplémentaires sont conservés dans un cache distinct, puis réutilisés lorsque le nombre augmente.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:hide"><apiName>hide</apiName><shortdesc>
      Détermine si les occurrences qui ne sont pas nécessaires doivent être masquées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      Détermine si les occurrences qui ne sont pas nécessaires doivent être masquées. Si la valeur est <codeph>true</codeph>, la propriété <codeph>visible</codeph> est définie sur <codeph>false</codeph> sur chaque élément supplémentaire lorsque le nombre d’éléments en cache diminue ; elle est définie sur <codeph>true</codeph> lorsque le nombre d’éléments en cache augmente.
      
      <p>Cette propriété est pertinente uniquement lorsque la fabrique génère des objets DisplayObject. Le fait de définir cette propriété sur <codeph>true</codeph> pour d’autres types de fabrique génère une erreur d’exécution.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:remove"><apiName>remove</apiName><shortdesc>
      Détermine si les occurrences qui ne sont pas nécessaires doivent être supprimées de leur parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      Détermine si les occurrences qui ne sont pas nécessaires doivent être supprimées de leur parent. Si la valeur est <codeph>true</codeph>, la méthode <codeph>removeChild()</codeph> est appelée sur le parent pour chaque élément supplémentaire lorsque le nombre d’éléments en cache diminue.
      
      <p>Cette propriété est pertinente uniquement lorsque la fabrique génère des objets DisplayObject. Le fait de définir cette propriété sur <codeph>true</codeph> pour d’autres types de fabrique génère une erreur d’exécution.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:count:get"><apiName>count</apiName><shortdesc>
      Nombre d’éléments actuellement requis dans le cache.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Nombre d’éléments actuellement requis dans le cache.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:factory:get"><apiName>factory</apiName><shortdesc>
      Fabrique générant le type d’objet à mettre en cache.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/></apiValueDef><apiDesc>
      Fabrique générant le type d’objet à mettre en cache. L’affectation à cette fabrique ignore toutes les occurrences en cours et recrée de nouvelles occurrences en utilisant le type correct.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:format:get"><apiName>format</apiName><shortdesc>
      Objet TextFormat à appliquer aux occurrences créées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.text:TextFormat"/></apiValueDef><apiDesc>
      Objet TextFormat à appliquer aux occurrences créées. Si cette propriété est définie, ce format est appliqué comme format actuel et par défaut au contenu des occurrences créées. Cette propriété est pertinente uniquement lorsque la fabrique génère des occurrences TextField.  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:instances:get"><apiName>instances</apiName><shortdesc>
      Tableau des occurrences mises en cache.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau des occurrences mises en cache. Ce tableau peut contenir plus d’occurrences que le nombre d’occurrences actuellement demandées. La valeur de la propriété <codeph>count</codeph> du cache d’occurrence est plus fiable que la longueur du tableau.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:properties:get"><apiName>properties</apiName><shortdesc>
      Table de hachage contenant les propriétés à affecter aux nouvelles occurrences.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Table de hachage contenant les propriétés à affecter aux nouvelles occurrences. Chaque paire clé/valeur de cette table est affectée à chaque nouvelle occurrence créée. Lorsque cette propriété est définie, la table de hachage des propriétés est affectée aux occurrences existantes.
      
      <p>Les valeurs de la table de hachage ne sont pas clonées. Les valeurs d’objet sont communes à toutes les occurrences.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:insertPosition:set"><apiName>insertPosition</apiName><shortdesc> 
      Position de l’occurrence dans la liste des enfants du parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="int"/></apiValueDef><apiDesc> 
      Position de l’occurrence dans la liste des enfants du parent. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:CartesianTransform"><apiName>CartesianTransform</apiName><shortdesc>
  L’objet CartesianTransform représente un ensemble d’axes mappant des valeurs de données aux coordonnées d’écran x/y Cartesian et inversement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:DataTransform</apiBaseClassifier></apiClassifierDef><apiDesc>
  L’objet CartesianTransform représente un ensemble d’axes mappant des valeurs de données aux coordonnées d’écran x/y Cartesian et inversement.
 
  <p>Lorsque vous utilisez des graphiques dans vos applications, il n’est en général pas nécessaire d’agir sur l’objet CartesianTransform. Les transformations sont créées automatiquement par les types de graphiques intégrés et utilisées par les séries que ces graphiques contiennent, de sorte qu’elles puissent transformer les données en coordonnées de rendu.</p> 
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:CartesianTransform:CartesianTransform"><apiName>CartesianTransform</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:CartesianTransform:invertTransform"><apiName>invertTransform</apiName><shortdesc> 
      Transforme les coordonnées x et y en une valeur à deux dimensions dans l’espace de données, par rapport au système de coordonnées DataTransform.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Tableau contenant les valeurs transformées.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiType value="restParam"/><apiDesc>Positions x et y (dans cet ordre).
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Transforme les coordonnées x et y en une valeur à deux dimensions dans l’espace de données, par rapport au système de coordonnées DataTransform. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianTransform:transformCache"><apiName>transformCache</apiName><shortdesc>
      Mappe à des coordonnées d’écran un ensemble de valeurs numériques représentant des coordonnées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’objets dont les champs contiennent les valeurs de données. C’est également dans ce tableau que la fonction stocke les valeurs numériques converties.
     
      </apiDesc></apiParam><apiParam><apiItemName>xField</apiItemName><apiType value="String"/><apiDesc>Champ dans lequel sont stockées les valeurs de données de l’axe x.
     
      </apiDesc></apiParam><apiParam><apiItemName>xConvertedField</apiItemName><apiType value="String"/><apiDesc>Champ dans lequel est stockée la coordonnée d’écran x mappée.
     
      </apiDesc></apiParam><apiParam><apiItemName>yField</apiItemName><apiType value="String"/><apiDesc>Champ dans lequel sont stockées les valeurs de données de l’axe y.
     
      </apiDesc></apiParam><apiParam><apiItemName>yConvertedField</apiItemName><apiType value="String"/><apiDesc>Champ dans lequel est stockée la coordonnée d’écran y mappée.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Mappe à des coordonnées d’écran un ensemble de valeurs numériques représentant des données. Cette méthode suppose que toutes les valeurs sont des nombres. Par conséquent, toute valeur non numérique doit au préalable être convertie à l’aide de la méthode <codeph>mapCache()</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:CartesianTransform:HORIZONTAL_AXIS"><apiName>HORIZONTAL_AXIS</apiName><shortdesc>
      Chaîne représentant l’axe horizontal.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>h</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Chaîne représentant l’axe horizontal.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianTransform:VERTICAL_AXIS"><apiName>VERTICAL_AXIS</apiName><shortdesc>
      Chaîne représentant l’axe vertical.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>v</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Chaîne représentant l’axe vertical.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianTransform:pixelHeight:set"><apiName>pixelHeight</apiName><shortdesc>
      Hauteur de la zone de données représentée par l’objet CartesianTransform, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
      Hauteur de la zone de données représentée par l’objet CartesianTransform, en pixels. Le graphique conteneur définit explicitement cette propriété lors de la mise en forme. L’objet CatesianTransform utilise cette propriété pour mapper les valeurs de données à des coordonnées d’écran.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianTransform:pixelWidth:set"><apiName>pixelWidth</apiName><shortdesc>
      Largeur de la zone de données représentée par l’objet CartesianTransform, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
      Largeur de la zone de données représentée par l’objet CartesianTransform, en pixels. Le graphique conteneur définit explicitement cette propriété lors de la mise en forme. L’objet CatesianTransform utilise cette propriété pour mapper les valeurs de données à des coordonnées d’écran.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:ChartState"><apiName>ChartState</apiName><shortdesc>
  Décrit l’état actuel d’un graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Décrit l’état actuel d’un graphique. Les implémentations de série peuvent examiner la valeur de Chart.state pour déterminer si le graphique affiche ou masque certaines données et générer le rendu en conséquence.
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.charts.chartClasses:ChartState:HIDING_DATA"><apiName>HIDING_DATA</apiName><shortdesc>
	  Le graphique fait actuellement l’objet de transitions visant à masquer les anciennes données de graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  Le graphique fait actuellement l’objet de transitions visant à masquer les anciennes données de graphique.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartState:NONE"><apiName>NONE</apiName><shortdesc>
	  Aucun état.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  Aucun état. Le graphique affiche simplement ses données.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartState:PREPARING_TO_HIDE_DATA"><apiName>PREPARING_TO_HIDE_DATA</apiName><shortdesc>
	  L’affichage des données dans le graphique a changé et il est sur le point de subir une transition visant à masquer les données actuelles.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  L’affichage des données dans le graphique a changé et il est sur le point de subir une transition visant à masquer les données actuelles.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartState:PREPARING_TO_SHOW_DATA"><apiName>PREPARING_TO_SHOW_DATA</apiName><shortdesc>
	  Les transitions visant à masquer les anciennes données du graphique ont abouti et le graphique est sur le point d’exécuter des transitions visant à afficher les nouvelles données.
	  
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  Les transitions visant à masquer les anciennes données du graphique ont abouti et le graphique est sur le point d’exécuter des transitions visant à afficher les nouvelles données.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartState:SHOWING_DATA"><apiName>SHOWING_DATA</apiName><shortdesc>
	  Le graphique fait actuellement l’objet de transitions visant à afficher les nouvelles données du graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>4</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  Le graphique fait actuellement l’objet de transitions visant à afficher les nouvelles données du graphique.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:HLOCSeriesBase"><apiName>HLOCSeriesBase</apiName><shortdesc>
  La classe HLOCSeriesBase est la classe de base des deux types de séries financières, HLOCSeries et CandlestickSeries.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.chartClasses:HLOCSeriesBase" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Classe utilisée par la série pour le rendu du marqueur de la série dans les légendes associées. Si ce style est <codeph>null</codeph>, la plupart des séries utilisent par défaut leur fonctionnalité de rendu itemRenderer comme habillage de marqueur de légende. Les classes utilisées comme marqueurs de légende doivent implémenter l’interface IFlexDisplayObject et éventuellement les interfaces ISimpleStyleClient et IDataRenderer. Si la classe utilisée comme marqueur de légende implémente l’interface IDataRenderer, la propriété data est affectée à une occurrence LegendData.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.chartClasses:HLOCSeriesBase" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Fabrique représentant la classe que la série utilisera pour représenter les différents éléments du graphique. Cette classe est instanciée une fois pour chaque élément du graphique. Les classes utilisées comme fonctionnalités de rendu itemRenderer doivent implémenter les interfaces IFlexDisplayObject, ISimpleStyleClient et IDataRenderer. L’objet chartItem rendu par l’occurrence d’habillage est affecté à la propriété <codeph>data</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IColumn</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe HLOCSeriesBase est la classe de base des deux types de séries financières, HLOCSeries et CandlestickSeries. La plupart des paramètres de comportement liés aux valeurs d’ouverture et de fermeture et aux valeurs supérieure et inférieure du graphique sont stockés dans cette classe.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:HLOCSeriesBase:HLOCSeriesBase"><apiName>HLOCSeriesBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:beginInterpolation"><apiName>beginInterpolation</apiName><shortdesc>
      
      Appelée par l’effet SeriesInterpolate pour initier un effet d’interpolation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Données dont la série a besoin pour réaliser l’interpolation.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>sourceRenderData</apiItemName><apiType value="Object"/><apiDesc>Données source entre lesquelles la série doit réaliser l’interpolation.
     
      </apiDesc></apiParam><apiParam><apiItemName>destRenderData</apiItemName><apiType value="Object"/><apiDesc>Données de destination entre lesquelles la série doit réaliser l’interpolation.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Appelée par l’effet SeriesInterpolate pour initier un effet d’interpolation. L’effet transmet les données source et les données de destination pour que la série puisse réaliser une interpolation entre ces données. L’effet transmet la valeur de retour de cette méthode de façon répétée à la méthode <codeph>interpolate()</codeph> de la série pour réaliser l’animation pendant toute la durée de l’effet. La série calcule les données nécessaires pour réaliser l’interpolation et les renvoie dans cette méthode.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:describeData"><apiName>describeData</apiName><shortdesc>
      
      
      Appelée par la classe DataTransform gouvernante pour obtenir une description des données représentées par cet élément IChartElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Tableau contenant les occurrences DataDescription qui décrivent les données affichées.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>Détermine l’axe dont les descriptions des données doivent être obtenues.
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>Champ de bits indiquant quelles valeurs de l’objet DataDescription sont prises en compte par cet axe. Les implémenteurs peuvent optimiser le calcul en calculant uniquement les champs nécessaires.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      Appelée par la classe DataTransform gouvernante pour obtenir une description des données représentées par cet élément IChartElement. Les implémenteurs remplissent et renvoient un tableau d’objets mx.charts.chartClasses.DataDescription pour garantir que leurs données sont correctement prises en compte par les axes générant automatiquement les valeurs à partir des données affichées (par exemple minimum, maximum, interval et unitSize). La plupart des types d’éléments renvoient un tableau contenant une seule description DataDescription. Les agrégats tels que BarSet et ColumnSet peuvent renvoyer plusieurs occurrences DataDescription décrivant les données affichées par leurs sous-éléments. Lorsque cette méthode est appelée, l’implémenteur décrit les données le long de l’axe indiqué par l’argument <codeph>dimension</codeph>. Cette fonction peut être appelée pour chaque axe pris en charge par le graphique conteneur.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:formatDataTip"><apiName>formatDataTip</apiName><shortdesc> 
      Génère une description sous forme de texte d’un objet ChartItem, conçue pour être affichée en tant qu’objet DataTip.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Objet DataTip de l’élément.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>hd</apiItemName><apiOperationClassifier>mx.charts:HitData</apiOperationClassifier><apiDesc>Objet HitData de l’objet ChartItem.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Génère une description sous forme de texte d’un objet ChartItem, conçue pour être affichée en tant qu’objet DataTip.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:getElementBounds"><apiName>getElementBounds</apiName><shortdesc>
      
      Remplit les propriétés elementBounds, bounds et visibleBounds d’une structure renderData générée par la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderData</apiItemName><apiType value="Object"/><apiDesc>Structure générée par la série.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Remplit les propriétés <codeph>elementBounds</codeph>, <codeph>bounds</codeph> et <codeph>visibleBounds</codeph> d’une structure renderData générée par la série. Les classes d’effet appellent cette méthode pour remplir ces champs utilisés pour l’implémentation de différents types d’effets. Les classes dérivées doivent implémenter cette méthode pour générer les limites des éléments de la série uniquement lorsque cela est nécessaire.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:getItemsInRegion"><apiName>getItemsInRegion</apiName><shortdesc>
      
      Obtient tous les éléments de la série qui se trouvent dans une région rectangulaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Tableau d’objets ChartItem qui se trouvent dans la région rectangulaire spécifiée.
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>r</apiItemName><apiType value="flash.geom:Rectangle"/><apiDesc>Objet Rectangle définissant la région.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Obtient tous les éléments de la série qui se trouvent dans une région rectangulaire. Appelez cette fonction pour déterminer quels éléments de la série se trouvent dans une région rectangulaire particulière.
      <p>Les différentes séries déterminent si leur élément de graphique se trouve ou non dans la région. Le point doit se trouver dans l’espace de coordonnées global.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:getMissingInterpolationValues"><apiName>getMissingInterpolationValues</apiName><shortdesc>
      
      Remplit les valeurs manquantes dans une structure d’interpolation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sourceProps</apiItemName><apiType value="Object"/><apiDesc>Objet contenant les valeurs source interpolées pour un élément spécifique. A la sortie de cette méthode, toutes les propriétés de l’objet doivent être associées à des valeurs autres que <codeph>NaN</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>srcCache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’éléments de graphique source interpolés.
     
      </apiDesc></apiParam><apiParam><apiItemName>destProps</apiItemName><apiType value="Object"/><apiDesc>Objet contenant les valeurs de destination interpolées pour un élément spécifique. A la sortie de cette méthode, toutes les propriétés de l’objet doivent être associées à des valeurs autres que <codeph>NaN</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>destCache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’éléments de graphique de destination interpolés.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index de l’élément mis en cache.  
     
      </apiDesc></apiParam><apiParam><apiItemName>customData</apiItemName><apiType value="Object"/><apiDesc>Données transmises par la série à la méthode <codeph>initializeInterpolationData()</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Remplit les valeurs manquantes dans une structure d’interpolation. Lorsqu’une série appelle la méthode <codeph>initializeInterpolationData()</codeph>, elle transmet des tableaux de valeurs source et de valeurs de destination pour l’interpolation. Si l’un ou l’autre de ces tableaux est incomplet, la série doit fournir des valeurs d’espace réservé adaptées pour l’interpolation. La manière dont ces valeurs d’espace réservé sont déterminées dépend du type de série. Les extendeurs de série doivent remplacer cette méthode pour fournir ces valeurs d’espace réservé.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:styleChanged"><apiName>styleChanged</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:updateData"><apiName>updateData</apiName><shortdesc>
      
      Appelée lorsque les données sous-jacentes représentées par la série ont été modifiées et doivent être rechargées à partir du fournisseur de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Appelée lorsque les données sous-jacentes représentées par la série ont été modifiées et doivent être rechargées à partir du fournisseur de données. Si vous implémentez des types de série personnalisés, vous devez remplacer cette méthode et charger toutes les données nécessaires au rendu de la série à partir du fournisseur de données. Vous devez également appeler la méthode <codeph>super.updateData()</codeph> dans la sous-classe. En règle générale, vous ne devez pas appeler cette méthode directement. En revanche, pour garantir que les données ont été mises à jour à tel ou tel endroit, appelez la méthode <codeph>validateData()</codeph> de la classe Series.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:updateFilter"><apiName>updateFilter</apiName><shortdesc>
      
      Appelée lorsque les données sous-jacentes représentées par la série doivent être filtrées par rapport aux plages de valeurs représentées par les axes de la transformation de données associée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Appelée lorsque les données sous-jacentes représentées par la série doivent être filtrées par rapport aux plages de valeurs représentées par les axes de la transformation de données associée. Cette situation peut se produire lorsque les données sous-jacentes ont été modifiées ou lorsque la plage de valeurs des axes associés a changé. Si vous implémentez un type de série personnalisé, vous devez remplacer cette méthode et filtrer les données hors plage en utilisant la méthode <codeph>filterCache()</codeph> des axes gérés par la transformation de données associée. La méthode <codeph>filterCache()</codeph> convertit les valeurs hors plage en valeurs <codeph>NaN</codeph>. Vous devez également appeler la méthode <codeph>super.updateFilter()</codeph> dans la sous-classe. En règle générale, vous ne devez pas appeler cette méthode directement. En revanche, si vous souhaitez garantir que les données ont été filtrées à tel ou tel endroit, appelez la méthode <codeph>validateTransform()</codeph> de la classe Series. En général, vous pouvez supposer que les méthodes <codeph>updateData()</codeph> et <codeph>updateMapping()</codeph> ont été appelées avant cette méthode, si nécessaire.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:updateMapping"><apiName>updateMapping</apiName><shortdesc>
      
      Appelée lorsque les données sous-jacentes représentées par la série doivent être mappées à des représentations numériques.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Appelée lorsque les données sous-jacentes représentées par la série doivent être mappées à des représentations numériques. Cette situation peut se produire lorsque les données sous-jacentes ont été modifiées ou lorsque les axes utilisés pour le rendu de la série ont fait l’objet de modifications significatives. Si vous implémentez une série personnalisée, vous devez remplacer cette méthode et convertir les données représentées en valeurs numériques, en utilisant la méthode <codeph>mapCache()</codeph> des axes gérés par la transformation de données associée. Vous devez également appeler la méthode <codeph>super.updateMapping()</codeph> dans la sous-classe. En règle générale, vous ne devez pas appeler cette méthode directement. En revanche, pour garantir que les données ont été mappées à tel ou tel endroit, appelez la méthode <codeph>validateData()</codeph> de la classe Series. En général, vous pouvez supposer que la méthode <codeph>updateData()</codeph> a été appelée avant cette méthode, si nécessaire.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:updateTransform"><apiName>updateTransform</apiName><shortdesc>
      
      Appelée lorsque les données sous-jacentes représentées par la série doivent être transformées en valeurs d’écran par les axes de la transformation de données associée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Appelée lorsque les données sous-jacentes représentées par la série doivent être transformées en valeurs d’écran par les axes de la transformation de données associée. Cette situation peut se produire lorsque les données sous-jacentes ont été modifiées, lorsque la plage de valeurs des axes associés a changé, ou encore lorsque la taille de la zone à l’écran a changé. Si vous implémentez un type de série personnalisé, vous devez remplacer cette méthode et transformer les données en utilisant la méthode <codeph>transformCache()</codeph> de la transformation de données associée. Vous devez également appeler la méthode <codeph>super.updateTransform()</codeph> dans la sous-classe. En règle générale, vous ne devez pas appeler cette méthode directement. En revanche, si vous souhaitez garantir que les données ont été filtrées à tel ou tel endroit, appelez la méthode <codeph>validateTransform()</codeph> de la classe Series. En général, vous pouvez supposer que les méthodes <codeph>updateData()</codeph>, <codeph>updateMapping()</codeph> et <codeph>updateFilter()</codeph> ont été appelées avant cette méthode, si nécessaire.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:closeField:get"><apiName>closeField</apiName><shortdesc>
      Spécifie le champ du fournisseur de données qui détermine la position de la valeur de fermeture de l’élément sur l’axe Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le champ du fournisseur de données qui détermine la position de la valeur de fermeture de l’élément sur l’axe Y.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:columnWidthRatio:get"><apiName>columnWidthRatio</apiName><shortdesc>
      Spécifie la largeur des éléments par rapport à la largeur des catégories.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.65.
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie la largeur des éléments par rapport à la largeur des catégories. La valeur <codeph>1</codeph> utilise l’intégralité de l’espace et la valeur <codeph>0.6</codeph> 60 % de l’espace disponible pour l’élément. En règle générale, vous ne devez pas définir cette propriété directement. La largeur réelle de l’élément correspond soit à la valeur de la propriété <codeph>columnWidthRatio</codeph>, soit à la valeur de <codeph>maxColumnWidth</codeph>, la plus petite des deux étant prise en compte.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:highField:get"><apiName>highField</apiName><shortdesc>
      Spécifie le champ du fournisseur de données qui détermine la position de la valeur supérieure de l’élément sur l’axe Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le champ du fournisseur de données qui détermine la position de la valeur supérieure de l’élément sur l’axe Y. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe X. Utilisez la classe LinearAxis ou CategoryAxis pour définir les propriétés de l’objet horizontalAxis en tant que balise enfant en langage MXML, ou pour créer un objet LinearAxis ou CategoryAxis en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      Sous-type d’objet ChartItem utilisé par cette série pour représenter les différents éléments.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Sous-type d’objet ChartItem utilisé par cette série pour représenter les différents éléments. Les sous-classes peuvent effectuer un remplacement et renvoyer une classe plus spécialisée si elles doivent stocker des informations supplémentaires dans les éléments.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:items:get"><apiName>items</apiName><shortdesc>
      
      Obtient tous les éléments présents dans la série après filtrage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Obtient tous les éléments présents dans la série après filtrage.
      <p>Les différentes séries déterminent la liste des éléments à renvoyer.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:legendData:get"><apiName>legendData</apiName><shortdesc>
      
      Tableau d’occurrences LegendData décrivant les éléments qui doivent s’afficher dans une légende représentant cette série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Tableau d’occurrences LegendData décrivant les éléments qui doivent s’afficher dans une légende représentant cette série. Les classes de série dérivées remplacent cet accesseur de lecture et renvoient des données de légende propres à leurs styles et à leur méthode de représentation des données. Bien que la plupart des types de séries renvoient une seule occurrence LegendData, certains d’entre eux (par exemple PieSeries et StackedSeries) renvoient plusieurs occurrences représentant différents éléments du tableau ou différentes manières de rendre les données.   
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:lowField:get"><apiName>lowField</apiName><shortdesc>
      Spécifie le champ du fournisseur de données qui détermine la position de la valeur inférieure de l’élément sur l’axe Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le champ du fournisseur de données qui détermine la position de la valeur inférieure de l’élément sur l’axe Y.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:maxColumnWidth:get"><apiName>maxColumnWidth</apiName><shortdesc>
      Spécifie la largeur des éléments, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Spécifie la largeur des éléments, en pixels. La largeur réelle de l’élément correspond soit à la valeur du style, soit à la valeur de la propriété <codeph>columnWidthRatio</codeph>, la plus petite des deux étant prise en compte. En règle générale, vous ne devez pas définir cette propriété directement : elle est affectée par le graphique conteneur. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:offset:get"><apiName>offset</apiName><shortdesc>
      Spécifie dans quelle mesure le centre des éléments doit être décalé par rapport au centre de l’espace disponible, selon la largeur des catégories.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Spécifie dans quelle mesure le centre des éléments doit être décalé par rapport au centre de l’espace disponible, selon la largeur des catégories. Si la valeur est <codeph>0</codeph>, les éléments sont centrés dans l’espace disponible. Définissez cette propriété sur <codeph>-50</codeph> pour centrer l’élément au début de l’espace disponible. En règle générale, vous ne devez pas définir cette propriété directement. Le contrôle du graphique conteneur gère cette valeur en fonction de la valeur de sa propriété <codeph>columnWidthRatio</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:openField:get"><apiName>openField</apiName><shortdesc>
      Spécifie le champ du fournisseur de données qui détermine la position de la valeur d’ouverture de l’élément sur l’axe Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le champ du fournisseur de données qui détermine la position de la valeur d’ouverture de l’élément sur l’axe Y.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      Sous-type de données ChartRenderData utilisé par cette série pour stocker toutes les données nécessaires au rendu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Sous-type de données ChartRenderData utilisé par cette série pour stocker toutes les données nécessaires au rendu. Les sous-classes peuvent effectuer un remplacement et renvoyer une classe plus spécialisée si elles doivent stocker des informations supplémentaires pour le rendu.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:protected:renderData:get"><apiName>renderData</apiName><shortdesc>
      
      Stocke les informations nécessaires au rendu de cette série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      Stocke les informations nécessaires au rendu de cette série.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe Y. Utilisez la classe LinearAxis ou CategoryAxis pour définir les propriétés de l’objet horizontalAxis en tant que balise enfant en langage MXML, ou pour créer un objet LinearAxis ou CategoryAxis en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:xField:get"><apiName>xField</apiName><shortdesc>
      Spécifie le champ du fournisseur de données qui détermine la position de l’élément sur l’axe X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le champ du fournisseur de données qui détermine la position de l’élément sur l’axe X. Si la valeur est une chaîne vide (<codeph>""</codeph>), Flex rend les colonnes dans l’ordre dans lequel elles apparaissent dans le fournisseur dataProvider.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:DataDescription"><apiName>DataDescription</apiName><shortdesc>
  La structure DataDescription est utilisée par les objets ChartElement pour indiquer les caractéristiques des données qu’ils représentent aux objets Axis qui génèrent automatiquement des valeurs à partir des données représentées dans le graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La structure DataDescription est utilisée par les objets ChartElement pour indiquer les caractéristiques des données qu’ils représentent aux objets Axis qui génèrent automatiquement des valeurs à partir des données représentées dans le graphique. Lorsqu’ils sont appelés, les objets ChartElement affichant des données doivent créer et renvoyer des objets DataDescription à partir de leur méthode <codeph>describeData()</codeph>.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:DataDescription:DataDescription"><apiName>DataDescription</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts.chartClasses:DataDescription:REQUIRED_BOUNDED_VALUES"><apiName>REQUIRED_BOUNDED_VALUES</apiName><shortdesc>
	  Indicateur de bit transmis par l’axe à la méthode describeData() d’un élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x2</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  Indicateur de bit transmis par l’axe à la méthode <codeph>describeData()</codeph> d’un élément. Si cet indicateur est défini, l’élément définit la propriété <codeph>boundedValues</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:REQUIRED_MIN_INTERVAL"><apiName>REQUIRED_MIN_INTERVAL</apiName><shortdesc>
	  Indicateur de bit transmis par l’axe à la méthode describeData() d’un élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x1</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  Indicateur de bit transmis par l’axe à la méthode <codeph>describeData()</codeph> d’un élément. Si cet indicateur est défini, l’élément définit la propriété <codeph>minInterval</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:REQUIRED_MIN_MAX"><apiName>REQUIRED_MIN_MAX</apiName><shortdesc>
	  Indicateur de bit transmis par l’axe à la méthode describeData() d’un élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x4</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  Indicateur de bit transmis par l’axe à la méthode <codeph>describeData()</codeph> d’un élément. Si cet indicateur est défini, l’élément définit les propriétés <codeph>DescribeData.min</codeph> et <codeph>DescribeData.max</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:REQUIRED_PADDING"><apiName>REQUIRED_PADDING</apiName><shortdesc>
	  Indicateur de bit transmis par l’axe à la méthode describeData() d’un élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x8</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  Indicateur de bit transmis par l’axe à la méthode <codeph>describeData()</codeph> d’un élément. Si cet indicateur est défini, l’élément définit la propriété <codeph>DescribeData.padding</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:boundedValues"><apiName>boundedValues</apiName><shortdesc> 
	  Tableau d’objets BoundedValue décrivant les données présentes dans l’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc> 
	  Tableau d’objets BoundedValue décrivant les données présentes dans l’élément. Les objets BoundedValue sont des points de données disposant d’un espace réservé autour du point de données dans la zone de données du graphique. Lorsque cela est demandé, un élément de graphique remplit cette propriété en utilisant les objets BoundedValue nécessaires pour faire en sorte qu’un espace suffisant soit visible dans la zone de données du graphique. Exemple : objet ColumnSeries qui a besoin de 20 pixels au-dessus de chaque colonne pour afficher un libellé de données.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:max"><apiName>max</apiName><shortdesc>
	  Valeur de données maximale affichée par l’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Valeur de données maximale affichée par l’élément.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:minInterval"><apiName>minInterval</apiName><shortdesc>
	  Intervalle minimal entre deux valeurs affichées par l’élément, en unités de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Intervalle minimal entre deux valeurs affichées par l’élément, en unités de données.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:min"><apiName>min</apiName><shortdesc>
	  Valeur de données minimale affichée par l’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Valeur de données minimale affichée par l’élément.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:padding"><apiName>padding</apiName><shortdesc>
	  Volume de la marge en unités de données dont l’élément a besoin au-delà de ses valeurs minimale et maximale pour afficher correctement les valeurs entières.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Volume de la marge en unités de données dont l’élément a besoin au-delà de ses valeurs minimale et maximale pour afficher correctement les valeurs entières.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:ChartBase"><apiName>ChartBase</apiName><shortdesc>
  La classe ChartBase relie l’architecture des composants Flex à l’architecture DualStyleObject.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/><styles><style inherit="no" name="showDataTipTargets" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Boolean">
<description>
  Détermine si des cibles doivent être affichées au-dessus des points de données lorsque la propriété <codeph>showDataTips</codeph> est définie sur true.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  Spécifie le nombre de pixels entre la bordure supérieure du graphique et sa zone de contenu.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  Spécifie le nombre de pixels entre la bordure inférieure du graphique et sa zone de contenu.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="maximumDataTipCount" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="int">
<description>
  Spécifie le nombre maximal d’objets DataTip qu’un graphique doit afficher. Si le nombre de points de données présents dans la plage de valeurs du graphique est supérieur au nombre autorisé par ce style, ils sont classés en fonction de la distance, le plus proche s’affichant en premier.
  
  <p>La valeur par défaut est NaN. Dans ce cas, tous les objets DataTip présents dans la plage de valeurs sont affichés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="itemSelectionColor" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="uint">
<description>
  Couleur d’un objet chartitem sélectionné dans le graphique.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="itemRollOverColor" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="uint">
<description>
  Couleur d’un objet chartitem survolé dans le graphique.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="itemDisabledColor" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="uint">
<description>
  Couleur d’un objet chartitem désactivé dans le graphique.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Spécifie le style de remplissage utilisé pour l’arrière-plan du graphique. Le remplissage peut être une valeur de couleur simple ou un objet implémentant l’interface mx.graphics.IFill.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dataTipRenderer" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Class">
<description>
  Spécifie la classe à utiliser pour rendre des objets DataTip. Cette classe doit implémenter les interfaces IFlexDisplayObject et IDataRenderer. Le graphique désigne la propriété <codeph>data</codeph> de l’objet DataTip personnalisé comme structure HitData décrivant le point de données décrit.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dataTipCalloutStroke" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Trait utilisé pour rendre la ligne de légende reliant la cible de l’objet DataTip à l’objet DataTip lui-même. Si cette valeur est définie sur <codeph>null</codeph>, aucun trait n’est tracé.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="String" inherit="no" name="chartSeriesStyles" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Array">
<description>
  Contient une liste de chaînes, chacune d’entre elles correspondant à un sélecteur de type CSS à utiliser comme style CSS par défaut pour une série. Chaque série du graphique trace un sélecteur de type CSS à partir de la liste contenue dans le style <codeph>chartSeriesStyles</codeph>. La première série utilise le premier sélecteur, la deuxième série le deuxième sélecteur et ainsi de suite. Les propriétés de style de ce sélecteur de type peuvent être remplacées en spécifiant une propriété <codeph>styleName</codeph> pour la série.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur (en pixels).
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut pour la plupart des contrôles est <codeph>left</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Pour ces composants, cette propriété est reconnue uniquement lorsque la valeur de la propriété <codeph>labelPlacement</codeph> est <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est pris en charge uniquement pour les polices FlashType incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en gras. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"bold"</codeph>. Pour LegendItem, la valeur par défaut est <codeph>"bold"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. La valeur par défaut est 10 pour tous les contrôles, à l’exception de ColorPicker. Pour le contrôle ColorPicker, la valeur par défaut est 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>. Cette valeur active la fonctionnalité de rendu FlashType si vous utilisez une police incorporée FlashType. Définissez cette propriété sur <codeph>"normal"</codeph> pour désactiver la fonctionnalité de rendu FlashType.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="uint">
<description>
  Couleur du texte du composant, libellé du composant inclus.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure droite du contrôle et le bord droit de sa zone de contenu.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure gauche du contrôle et le bord gauche de sa zone de contenu.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>Flex components inherit the following properties
  from the ChartBase class:</p>
   <pre>
  &lt;mx:<i>tagname</i>
    <strong>Properties</strong>
    allElements="<i>Array; No default</i>"
    annotationElements="<i>Array; No default</i>"
    backgroundElements="<i>Array; No default</i>"
    chartState="<i></i>"
    clipContent="false|true"
    dataProvider="<i>No default</i>"
    dataRegion"<i>No default</i>"
    dataTipFunction="<i>No default</i>"
    dataTipLayerIndex"<i>No default</i>"
    dataTipMode"<i>No default</i>"
    description"<i>No default</i>"
    dragEnabled="false|true"
    dragMoveEnabled="false|true"
    dropEnabled="false|true"
    labelElements"<i>No default</i>"
    legendData"<i>No default</i>"
    mouseSensitivity="5"
    selectedChartItem=<i>ChartItem; No default</i>"
    selectedChartItems=<i>Array; No default</i>"
    selectionMode="none|single|multiple"
    series="<i>No default</i>"
    seriesFilters"<i>No default</i>"
    showAllDataTips="true|false"
    showDataTips="true|false"
    transforms="<i>No default</i>"
    
    <strong>Styles</strong>
    chartSeriesStyles="<i>Style; No default</i>"
    dataTipCalloutStroke="<i>Stroke; No default</i>"
    dataTipRenderer="<i>Renderer; No default</i>"
    fill="<i>IFill; No default</i>"
    fontFamily="<i>Verdana</i>"
    fontSize="<i>10</i>"
    itemDisabledColor="<i>uint; No default</i>"
    itemRollOverColor="<i>uint; No default</i>"
    itemSelectionColor="<i>uint; No default</i>"
    maximumDataTipCount="NaN"
    paddingBottom="<i>No default</i>"
    paddingTop="<i>No default</i>"
    paddingLeft="<i>0</i>"
    paddingRight="<i>0</i>"
    showDataTipTargets="true|false"  
    
   <strong>Events</strong>
    change="<i>Event; No default</i>"
    itemClick="<i>Event; No default</i>"
    itemDoubleClick="<i>Event; No default</i>"
    itemMouseDown="<i>Event; No default</i>"
    itemMouseMove="<i>Event; No default</i>"
    itemMouseUp="<i>Event; No default</i>"
    itemRollOut="<i>Event; No default</i>"
    itemRollOver="<i>Event; No default</i>"
  &gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ChartBase relie l’architecture des composants Flex à l’architecture DualStyleObject. Elle étend la classe de base UIComponent de Flex, mais contient des classes DualStyleObject.
   <p>En règle générale, vous n’utilisez pas la classe ChartBase directement. En revanche, vous utilisez l’une de ses sous-classes, par exemple PlotChart ou BubbleChart. Elle joue le rôle de classe de base pour les types de graphiques courants fournis dans le package mx.charts.</p>
  
  <p>Cette classe définit un certain nombre de styles et de propriétés CSS qui permettent d’accéder facilement aux fonctionnalités courantes de la structure.</p>
  
  <p>La taille minimale d’un graphique est de 20 x 20 pixels. La taille maximale d’un graphique n’a pas de limite. La taille recommandée d’un graphique est de 400 x 400 pixels.</p>
  
  <p>Les objets ChartBase et les sous-classes viennent compléter les objets d’événement de souris standard par des données supplémentaires décrivant le point de données du graphique le plus proche du pointeur de la souris. L’objet d’événement des événements de souris contient une propriété supplémentaire, <codeph>hitData</codeph>, qui contient à son tour un objet HitData décrivant le point de données le plus proche. Pour plus d’informations sur le contenu de l’objet HitData, voir mx.charts.HitData.</p>
  
  <p>Les objets ChartBase prennent uniquement en compte les points de données qui se trouvent dans un certain rayon par rapport au pointeur de la souris. Vous pouvez définir ce rayon par le biais de la propriété <codeph>mouseSensitivity</codeph>. S’il n’existe aucun point de données dans le rayon défini par <codeph>mouseSensitivity</codeph>, la valeur de event.hitData est <codeph>null</codeph>.</p>
   </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#HitData"><linktext>mx.charts.HitData</linktext></link><link href="mx.charts.xml#CategoryAxis"><linktext>mx.charts.CategoryAxis</linktext></link><link href="mx.charts.xml#LinearAxis"><linktext>mx.charts.LinearAxis</linktext></link></related-links><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.ITEM_ROLL_OVER_itemRollOver"><apiName>itemRollOver</apiName><shortdesc>
  Distribué lorsqu’un nouveau point de données est détecté sous le pointeur de la souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.ITEM_ROLL_OVER</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un nouveau point de données est détecté sous le pointeur de la souris. Flex prend uniquement en compte les points de données qui se trouvent dans le rayon délimité par la propriété <codeph>mouseSensitivity</codeph>.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.ITEM_ROLL_OUT_itemRollOut"><apiName>itemRollOut</apiName><shortdesc>
  Distribué lorsque le point de données le plus proche du pointeur de la souris change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.ITEM_ROLL_OUT</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le point de données le plus proche du pointeur de la souris change. Flex prend uniquement en compte les points de données qui se trouvent dans le rayon délimité par la propriété <codeph>mouseSensitivity</codeph>.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.ITEM_MOUSE_UP_itemMouseUp"><apiName>itemMouseUp</apiName><shortdesc>
  Distribué lorsqu’un point de données se trouve sous le pointeur de la souris alors que le bouton de la souris est relâché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.ITEM_MOUSE_UP</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un point de données se trouve sous le pointeur de la souris alors que le bouton de la souris est relâché. Flex prend uniquement en compte les points de données qui se trouvent dans le rayon délimité par la propriété <codeph>mouseSensitivity</codeph>.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.ITEM_MOUSE_MOVE_itemMouseMove"><apiName>itemMouseMove</apiName><shortdesc>
  Distribué lorsque le pointeur de la souris est déplacé alors qu’il survole un point de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.ITEM_MOUSE_MOVE</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le pointeur de la souris est déplacé alors qu’il survole un point de données. Flex prend uniquement en compte les points de données qui se trouvent dans le rayon délimité par la propriété <codeph>mouseSensitivity</codeph>.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.ITEM_MOUSE_DOWN_itemMouseDown"><apiName>itemMouseDown</apiName><shortdesc>
  Distribué lorsqu’un point de données se trouve sous le pointeur de la souris alors que le bouton de la souris est relâché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.ITEM_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un point de données se trouve sous le pointeur de la souris alors que l’utilisateur appuie sur le bouton de la souris. Flex prend uniquement en compte les points de données qui se trouvent dans le rayon délimité par la propriété <codeph>mouseSensitivity</codeph>.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.ITEM_DOUBLE_CLICK_itemDoubleClick"><apiName>itemDoubleClick</apiName><shortdesc>
  Distribué lorsqu’un point de données se trouve sous le pointeur de la souris alors que l’utilisateur double clique sur le bouton de la souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.ITEM_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un point de données se trouve sous le pointeur de la souris alors que l’utilisateur double clique sur le bouton de la souris. Flex prend uniquement en compte les points de données qui se trouvent dans le rayon délimité par la propriété <codeph>mouseSensitivity</codeph>.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.MOUSE_CLICK_DATA_itemClick"><apiName>itemClick</apiName><shortdesc>
  Distribué lorsqu’un point de données se trouve sous le pointeur de la souris alors que l’utilisateur double clique sur le bouton de la souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.MOUSE_CLICK_DATA</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un point de données se trouve sous le pointeur de la souris alors que l’utilisateur double clique sur le bouton de la souris. Flex prend uniquement en compte les points de données qui se trouvent dans le rayon délimité par la propriété <codeph>mouseSensitivity</codeph>.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartEvent.CHART_DOUBLE_CLICK_chartDoubleClick"><apiName>chartDoubleClick</apiName><shortdesc>
  Distribué lorsqu’aucun point de données ne se trouve sous le pointeur de la souris alors que l’utilisateur double clique sur un graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartEvent.CHART_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’aucun point de données ne se trouve sous le pointeur de la souris alors que l’utilisateur double clique sur un graphique. Flex prend uniquement en compte les points de données qui se trouvent dans le rayon délimité par la propriété <codeph>mouseSensitivity</codeph>.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartEvent.CHART_CLICK_chartClick"><apiName>chartClick</apiName><shortdesc>
  Distribué lorsqu’aucun point de données ne se trouve sous le pointeur de la souris alors que l’utilisateur clique sur un graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartEvent.CHART_CLICK</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’aucun point de données ne se trouve sous le pointeur de la souris alors que l’utilisateur clique sur un graphique. Flex prend uniquement en compte les points de données qui se trouvent dans le rayon délimité par la propriété <codeph>mouseSensitivity</codeph>.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué lorsque la sélection change dans le graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la sélection change dans le graphique.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.charts.chartClasses:ChartBase:ChartBase"><apiName>ChartBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:ChartBase:protected:addDragData"><apiName>addDragData</apiName><shortdesc>
      Ajoute les éléments sélectionnés à l’objet DragSource dans le cadre d’une opération de glisser-déposer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>ds</apiItemName><apiType value="Object"/><apiDesc>Objet DragSource auquel les données sont ajoutées.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute les éléments sélectionnés à l’objet DragSource dans le cadre d’une opération de glisser-déposer. Vous pouvez remplacer cette méthode pour ajouter d’autres données à la source de l’opération de glissement.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:applySeriesSet"><apiName>applySeriesSet</apiName><shortdesc>
      Réalise un prétraitement de la série et des transformations en vue de l’affichage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Tableau de séries auquel est appliqué un ensemble de séries.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>seriesSet</apiItemName><apiType value="Array"/><apiDesc>Tableau de séries pour lesquelles un prétraitement doit être réalisé.
      </apiDesc></apiParam><apiParam><apiItemName>transform</apiItemName><apiOperationClassifier>mx.charts.chartClasses:DataTransform</apiOperationClassifier><apiDesc>Transformation utilisée par la série.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Réalise un prétraitement de la série et des transformations en vue de l’affichage. En général, vous ne devez pas appeler cette méthode directement. Cette méthode est en fait appelée automatiquement au cours du cycle <codeph>commitProperties()</codeph> du contrôle de graphique, lorsque la série a été invalidée par un appel de la méthode <codeph>invalidateSeries()</codeph>.
      <p>Par défaut, cette méthode appelle la méthode <codeph>customizeSeries()</codeph> une seule fois pour chaque série de l’ensemble. Les sous-classes de la classe Chart peuvent remplacer cette méthode pour ajouter une logique de personnalisation commune à toutes les séries de l’ensemble.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:clearSelection"><apiName>clearSelection</apiName><shortdesc>
      Désélectionne tous les éléments de graphique sélectionnés dans le contrôle de graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Désélectionne tous les éléments de graphique sélectionnés dans le contrôle de graphique. Définit la propriété <codeph>currentState</codeph> de tous les éléments de graphique du graphique sur <codeph>none</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:customizeSeries"><apiName>customizeSeries</apiName><shortdesc>
      Applique une personnalisation et un formatage par série aux séries du graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>seriesGlyph</apiItemName><apiOperationClassifier>mx.charts.chartClasses:Series</apiOperationClassifier><apiDesc>Série à personnaliser.
      </apiDesc></apiParam><apiParam><apiItemName>i</apiItemName><apiType value="uint"/><apiDesc>Index de la série dans le tableau de séries.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Applique une personnalisation et un formatage par série aux séries du graphique. Cette méthode est appelée une seule fois pour chaque série lorsque la série a été modifiée par un appel de la méthode <codeph>invalidateSeries()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:dragCompleteHandler"><apiName>dragCompleteHandler</apiName><shortdesc>
      Traite les événements de type DragEvent.DRAG_COMPLETE.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>Objet DragEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Traite les événements de type <codeph>DragEvent.DRAG_COMPLETE</codeph>. Cette méthode supprime l’élément du fournisser de données.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:dragDropHandler"><apiName>dragDropHandler</apiName><shortdesc>
      Traite les événements de type DragEvent.DRAG_DROP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>Objet DragEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Traite les événements de type <codeph>DragEvent.DRAG_DROP</codeph>. Cette méthode masque le résultat d’interface en appelant la méthode <codeph>hideDropFeedback()</codeph>.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:dragEnterHandler"><apiName>dragEnterHandler</apiName><shortdesc>
      Traite les événements de type DragEvent.DRAG_ENTER.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>Objet DragEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Traite les événements de type <codeph>DragEvent.DRAG_ENTER</codeph>. Cette méthode détermine si l’objet DragSource contient des éléments valides et utilise la méthode <codeph>showDropFeedback()</codeph> pour configurer la réponse de l’interface utilisateur.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:dragExitHandler"><apiName>dragExitHandler</apiName><shortdesc>
      Traite les événements de type DragEvent.DRAG_EXIT.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>Objet DragEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Traite les événements de type <codeph>DragEvent.DRAG_EXIT</codeph>. Cette méthode masque le résultat d’interface en appelant la méthode <codeph>hideDropFeedback()</codeph>.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:dragOverHandler"><apiName>dragOverHandler</apiName><shortdesc>
      Traite les événements de type DragEvent.DRAG_OVER.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>Objet DragEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Traite les événements de type <codeph>DragEvent.DRAG_OVER</codeph>. Cette méthode détermine si l’objet DragSource contient des éléments valides et utilise la méthode <codeph>showDropFeedback()</codeph> pour configurer la réponse de l’interface utilisateur.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:dragStartHandler"><apiName>dragStartHandler</apiName><shortdesc>
      Gestionnaire par défaut pour l’événement dragStart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>Objet DragEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gestionnaire par défaut pour l’événement <codeph>dragStart</codeph>.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:findDataPoints"><apiName>findDataPoints</apiName><shortdesc>
      Renvoie un tableau d’objets HitData décrivant le point de données le plus proche des coordonnées transmises à la méthode.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tableau d’objets HitData.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Coordonnée x par rapport à l’objet ChartBase.
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Coordonnée y par rapport à l’objet ChartBase.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie un tableau d’objets HitData décrivant le point de données le plus proche des coordonnées transmises à la méthode. Les arguments <codeph>x</codeph> et <codeph>y</codeph> doivent être des valeurs exprimées dans le système de coordonnées de l’objet ChartBase.
      <p>Lors de la recherche des points de données les plus proches, cette méthode respecte les limites spécifiées par la propriété <codeph>mouseSensitivity</codeph> de l’objet ChartBase.</p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.charts.xml#HitData"><linktext>mx.charts.HitData</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:getAllDataPoints"><apiName>getAllDataPoints</apiName><shortdesc>
      Renvoie un tableau d’objets HitData représentant les éléments de graphique présents dans les objets sous-jacents qui implémentent l’interface IChartElement2.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tableau d’objets HitData représentant les points de données.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie un tableau d’objets HitData représentant les éléments de graphique présents dans les objets sous-jacents qui implémentent l’interface IChartElement2.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:getFirstItem"><apiName>getFirstItem</apiName><shortdesc>
      Obtient le premier élément du graphique, en fonction des axes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet ChartItem correspondant.
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>Direction dans laquelle le premier élément doit être renvoyé. Valeurs possibles : <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> et <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Obtient le premier élément du graphique, en fonction des axes.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:getItemsInRegion"><apiName>getItemsInRegion</apiName><shortdesc>
      Obtient tous les éléments de graphique qui se trouvent dans la région rectangulaire définie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tableau d’objets ChartItem.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="flash.geom:Rectangle"/><apiDesc>Région rectangulaire.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Obtient tous les éléments de graphique qui se trouvent dans la région rectangulaire définie. Appelez cette méthode pour déterminer quels éléments de graphique se trouvent dans une région rectangulaire particulière.
      <p>Les différents types de graphiques déterminent si leur élément de graphique se trouve ou non dans la région. Le point doit se trouver dans l’espace de coordonnées global.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:getLastItem"><apiName>getLastItem</apiName><shortdesc>
      Obtient le dernier élément du graphique, en fonction des axes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet ChartItem correspondant.
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>Direction dans laquelle le dernier élément doit être renvoyé. Valeurs possibles : <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> et <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Obtient le dernier élément du graphique, en fonction des axes.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:getNextItem"><apiName>getNextItem</apiName><shortdesc>
      Obtient l’élément de graphique qui suit l’élément qui a le focus dans le graphique, en fonction des axes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet ChartItem correspondant.
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>Direction dans laquelle l’élément suivant doit être renvoyé. Valeurs possibles : <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> et <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Obtient l’élément de graphique qui suit l’élément qui a le focus dans le graphique, en fonction des axes. Si aucun élément de graphique n’est actuellement sélectionné, cette méthode renvoie le premier élément de la première série.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:getPreviousItem"><apiName>getPreviousItem</apiName><shortdesc>
      Obtient l’élément de graphique qui précède l’élément qui a le focus dans le graphique, en fonction des axes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet ChartItem correspondant.
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>Direction dans laquelle l’élément précédent doit être renvoyé. Valeurs possibles : <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> et <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Obtient l’élément de graphique qui précède l’élément qui a le focus dans le graphique, en fonction des axes. Si aucun élément de graphique n’est actuellement sélectionné, cette méthode renvoie le premier élément de la première série.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:hideData"><apiName>hideData</apiName><shortdesc>
      Signale au graphique que les données sous-jacentes affichées dans le graphique ont changé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Signale au graphique que les données sous-jacentes affichées dans le graphique ont changé. Les séries et éléments de graphique appellent cette fonction lorsque leur rendu a changé, afin de déclencher une exécution coordonnée des effets d’affichage et de masquage des données. En général, vous ne devez pas appeler cette méthode directement sur le graphique.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:hideDropFeedback"><apiName>hideDropFeedback</apiName><shortdesc>
      Masque l’indicateur de dépôt, qui signale qu’une opération de glisser-déposer est autorisée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>Objet DragEvent contenant des informations sur la position de la souris.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Masque l’indicateur de dépôt, qui signale qu’une opération de glisser-déposer est autorisée.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:invalidateChildOrder"><apiName>invalidateChildOrder</apiName><shortdesc>
      Signale au graphique que sa liste d’enfants a été modifiée et doit être réorganisée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Signale au graphique que sa liste d’enfants a été modifiée et doit être réorganisée. Les classes de graphique dérivées peuvent appeler cette méthode pour déclencher l’appel de la méthode interne <codeph>updateChildOrder()</codeph> du graphique au cours du prochain cycle <codeph>commitProperties()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      Déclenche un nouveau tracé du graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Déclenche un nouveau tracé du graphique. Appelez cette méthode lorsque vous ajoutez des séries ou des fournisseurs de données au graphique, ou lorsque vous modifiez ses séries et fournisseurs existants.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:invalidateSeriesStyles"><apiName>invalidateSeriesStyles</apiName><shortdesc>
      Déclenche un nouveau tracé du graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Déclenche un nouveau tracé du graphique. Appelez cette méthode lorsque vous modifiez les propriétés de style des séries du graphique.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:invalidateSeries"><apiName>invalidateSeries</apiName><shortdesc>
      Signale au graphique que son tableau de séries a été modifié et doit subir un nouveau traitement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Signale au graphique que son tableau de séries a été modifié et doit subir un nouveau traitement. Les classes de graphique dérivées peuvent appeler cette méthode pour déclencher l’appel de la méthode interne <codeph>updateSeries()</codeph> du graphique au cours du cycle <codeph>commitProperties()</codeph> suivant.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:legendDataChanged"><apiName>legendDataChanged</apiName><shortdesc>
      Distribue un nouvel événement LegendDataChanged.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Distribue un nouvel événement LegendDataChanged.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:positionAllDataTips"><apiName>positionAllDataTips</apiName><shortdesc>
      Définit la position des objets DataTip sur le graphique lorsque la propriété showAllDataTips est définie sur true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>hitSet</apiItemName><apiType value="Array"/><apiDesc>Tableau d’objets HitData.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit la position des objets DataTip sur le graphique lorsque la propriété <codeph>showAllDataTips</codeph> est définie sur <codeph>true</codeph>. Cette méthode permet d’éviter tout chevauchement entre plusieurs objets DataTip (si plusieurs d’entre eux sont visibles) ou entre un objet DataTip et un élément de données cible.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:positionDataTips"><apiName>positionDataTips</apiName><shortdesc>
      Définit la position des objets DataTip sur le graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Définit la position des objets DataTip sur le graphique. Cette méthode permet d’éviter tout chevauchement entre plusieurs objets DataTip (si plusieurs d’entre eux sont visibles) ou entre un objet DataTip et un élément de données cible.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:showDropFeedback"><apiName>showDropFeedback</apiName><shortdesc>
      Affiche un indicateur de dépôt sous le pointeur de la souris, pour signaler qu’une opération de glisser-déposer est autorisée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>Objet DragEvent contenant des informations sur la position du pointeur de la souris.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Affiche un indicateur de dépôt sous le pointeur de la souris, pour signaler qu’une opération de glisser-déposer est autorisée. L’indicateur de dépôt indique également où les éléments seront déposés.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:updateAllDataTips"><apiName>updateAllDataTips</apiName><shortdesc>
      Affiche tous les objets DataTip non interactifs si la propriété showAllDataTips est définie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Affiche tous les objets DataTip non interactifs si la propriété <codeph>showAllDataTips</codeph> est définie.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:ChartBase:HORIZONTAL"><apiName>HORIZONTAL</apiName><shortdesc>
      La valeur de cette constante est transmise aux méthodes telles que getNextItem() et getPrevItem().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontal</apiData><apiType value="String"/></apiValueDef><apiDesc>
      La valeur de cette constante est transmise aux méthodes telles que <codeph>getNextItem()</codeph> et <codeph>getPrevItem()</codeph>. Ces méthodes utilisent cette constante pour détermine l’élément ou la série à sélectionner lorsque l’utilisateur appuie sur une touche, par exemple la flèche gauche. Par exemple, si l’utilisateur appuie sur la touche Flèche gauche ou Flèche droite, la direction est définie sur « horizontal » (<codeph>ChartBase.HORIZONTAL</codeph>).
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:VERTICAL"><apiName>VERTICAL</apiName><shortdesc>
      La valeur de cette constante est transmise aux méthodes telles que getNextItem() et getPrevItem().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>vertical</apiData><apiType value="String"/></apiValueDef><apiDesc>
      La valeur de cette constante est transmise aux méthodes telles que <codeph>getNextItem()</codeph> et <codeph>getPrevItem()</codeph>. Ces méthodes utilisent cette constante pour détermine l’élément ou la série à sélectionner lorsque l’utilisateur appuie sur une touche, par exemple la flèche gauche. Par exemple, si l’utilisateur appuie sur la touche Haut ou Bas, la direction est définie sur « vertical » (<codeph>ChartBase.VERTICAL</codeph>).
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:protected:allElements"><apiName>allElements</apiName><shortdesc>
      Ensemble contenant tous les éléments de graphique affichés dans le graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
      Ensemble contenant tous les éléments de graphique affichés dans le graphique. Cet ensemble contient les séries, les séries secondaires, les éléments d’arrière-plan et les éléments d’annotation.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:dataTipFunction"><apiName>dataTipFunction</apiName><shortdesc>
      Spécifie une méthode de rappel utilisée pour générer des objets DataTip à partir des données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      Spécifie une méthode de rappel utilisée pour générer des objets DataTip à partir des données. Cette méthode doit présenter la signature suivante :
      <pre>
      function dataTipFunction(<i>hitData</i>:HitData):String
      </pre>
      <p>Cette méthode renvoie une chaîne affichée pour chaque point de données. Le texte peut comporter un formatage HTML. Le seul paramètre est un objet HitData décrivant le point de données.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:protected:labelElements"><apiName>labelElements</apiName><shortdesc>
      Ensemble des objets d’affichage représentant les libellés des éléments de graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
      Ensemble des objets d’affichage représentant les libellés des éléments de graphique. Certains types de séries, d’annotations et d’arrière-plans comportent des incrustations, par exemple des éléments et des légendes. Les éléments peuvent transmettre au graphique un objet d’affichage contenant les incrustations à placer par-dessus les autres éléments de graphique. Les implémenteurs de graphique peuvent accéder à ces objets d’incrustation dans le tableau <codeph>labelElements</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:mouseSensitivity"><apiName>mouseSensitivity</apiName><shortdesc>
      Spécifie la distance maximale entre le pointeur de la souris et le point de données, en pixels, pour que Flex considère qu’un point de données se trouve sous le pointeur lorsque celui-ci est déplacé au-dessus d’un graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>5</apiData><apiType value="Number"/><apiDefaultValue>5
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie la distance maximale entre le pointeur de la souris et le point de données, en pixels, pour que Flex considère qu’un point de données se trouve sous le pointeur lorsque celui-ci est déplacé au-dessus d’un graphique. Flex considère que les points de données dont la distance par rapport au pointeur de la souris est inférieure au nombre de pixels spécifié par <codeph>mouseSensitivity</codeph> se trouvent sous le pointeur de la souris. Cette valeur est également utilisée par la méthode <codeph>findDataPoints</codeph>.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:annotationElements:get"><apiName>annotationElements</apiName><shortdesc>
      Définit un tableau d’objets ChartElement qui apparaissent par-dessus les séries de données rendues par le graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Définit un tableau d’objets ChartElement qui apparaissent par-dessus les séries de données rendues par le graphique. Chaque élément du tableau doit étendre la classe mx.charts.DualStyleObject et implémenter l’interface IChartElement2.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:backgroundElements:get"><apiName>backgroundElements</apiName><shortdesc>
      Définit un tableau d’objets ChartElement d’arrière-plan qui apparaissent sous les séries de données rendues par le graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Définit un tableau d’objets ChartElement d’arrière-plan qui apparaissent sous les séries de données rendues par le graphique. Chaque élément du tableau doit étendre la classe mx.charts.DualStyleObject et implémenter l’interface IChartElement2.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:chartState:get"><apiName>chartState</apiName><shortdesc>
      Etat de transition actuel du graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
      Etat de transition actuel du graphique. Utilisez cette propriété pour déterminer si le graphique fait actuellement l’objet d’une transition visant à supprimer ses anciennes données ou à ajouter de nouvelles données, ou si au contraire toutes les transitions sont terminées, auquel cas le graphique affiche son jeu de données actuel. Pour connaître les valeurs possibles, voir mx.charts.chartClasses.ChartState.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:clipContent:get"><apiName>clipContent</apiName><shortdesc>
      Détermine si Flex doit écrêter le graphique en suivant la zone délimitée par les axes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Détermine si Flex doit écrêter le graphique en suivant la zone délimitée par les axes. Définissez cette propriété sur <codeph>false</codeph> pour écrêter le graphique. Définissez-la sur <codeph>true</codeph> pour empêcher tout écrêtage lors du rendu des données.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      Spécifie le fournisseur de données du graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Spécifie le fournisseur de données du graphique. Ce fournisseur de données est affecté aux séries de données rendues par le graphique. Pour rendre des séries de données hétérogènes dans un même graphique, utilisez la propriété <codeph>dataProvider</codeph> sur les différentes séries.
      
      <p>Cette propriété peut accepter un tableau ou tout objet implémentant l’interface IList ou ICollectionView.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:protected:dataRegion:get"><apiName>dataRegion</apiName><shortdesc>
      Zone du graphique utilisée pour afficher des données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      Zone du graphique utilisée pour afficher des données. Ce rectangle n’inclut pas les zones utilisées pour les gouttières, les lignes d’axe, les libellés et la marge.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:protected:dataTipLayerIndex:get"><apiName>dataTipLayerIndex</apiName><shortdesc>
      Index de l’enfant responsable du rendu des objets DataTip.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Index de l’enfant responsable du rendu des objets DataTip. Les classes dérivées qui ajoutent des éléments visuels au graphique doivent ajouter ces éléments sous ce calque.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:dataTipMode:get"><apiName>dataTipMode</apiName><shortdesc>
      Spécifie la manière dont Flex affiche les contrôles DataTip du graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Spécifie la manière dont Flex affiche les contrôles DataTip du graphique. Les contrôles DataTip sont semblables aux contrôles ToolTip, mais ils affichent une valeur correcte représentant le point de données du graphique le plus proche du pointeur de la souris.
     
      <p>Valeurs possibles de la propriété <codeph>dataTipMode</codeph> :
       <ul>
        <li><codeph>"single"</codeph> : les objets DataTip sont affichés pour le point de données le plus proche du pointeur de la souris.</li>
      
        <li><codeph>"multiple"</codeph> : les objets DataTip sont affichés pour tous les contrôles DataTip qui se trouvent à portée du pointeur de la souris. Vous pouvez définir la sensibilité du pointeur par le biais de la propriété <codeph>mouseSensitivity</codeph>.</li>
       </ul>
      </p>
     
      <p>Vous pouvez personnaliser les contrôles DataTip par le biais de la propriété <codeph>dataTipFunction</codeph>.</p>
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:description:get"><apiName>description</apiName><shortdesc>
      Courte description des données du graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Courte description des données du graphique. Lorsque l’accessibilité est activée, les lecteurs d’écran utilisent cette propriété pour décrire le graphique.
      <p>La valeur par défaut de cette chaîne est une chaîne vide. La valeur doit être affectée explicitement par le développeur et avoir une signification.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:dragEnabled:get"><apiName>dragEnabled</apiName><shortdesc>
      Détermine si vous pouvez faire glisser des éléments vers l’extérieur du graphique et les déposer sur d’autres contrôles.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Détermine si vous pouvez faire glisser des éléments vers l’extérieur du graphique et les déposer sur d’autres contrôles. Si la valeur est <codeph>true</codeph>, les opérations de glisser-déposer sont possibles pour ce graphique. Si la propriété <codeph>dropEnabled</codeph> est également définie sur <codeph>true</codeph>, vous pouvez faire glisser des éléments et les déposer dans le graphique pour les réorganiser.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:protected:dragImage:get"><apiName>dragImage</apiName><shortdesc>
      Obtient une occurrence de la classe qui affiche les éléments visuels au cours d’une opération de glisser-déposer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:IUIComponent"/><apiDefaultValue>mx.controls.chartClasses.ChartItemDragProxy
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Obtient une occurrence de la classe qui affiche les éléments visuels au cours d’une opération de glisser-déposer.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:dragMoveEnabled:get"><apiName>dragMoveEnabled</apiName><shortdesc>
      Indique quel curseur d’affichage doit être affiché en réponse à l’opération de glissement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique quel curseur d’affichage doit être affiché en réponse à l’opération de glissement. Si la valeur est <codeph>true</codeph>, que la valeur de la propriété <codeph>dragEnabled</codeph> est également <codeph>true</codeph> et que la touche Control n’est pas enfoncée, la valeur <codeph>moveCursor</codeph> s’affiche en réponse. Si la touche Control est enfoncée, la valeur <codeph>copyCursor</codeph> s’affiche en réponse. Si la valeur est <codeph>false</codeph> et que la valeur de la propriété <codeph>dragEnabled</codeph> est <codeph>true</codeph>, la valeur <codeph>copyCursor</codeph> s’affiche, que la touche Control soit ou non enfoncée.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:dropEnabled:get"><apiName>dropEnabled</apiName><shortdesc>
      Indicateur spécifiant si les éléments qui ont fait l’objet d’une opération de glissement peuvent ensuite être déposés sur le graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur spécifiant si les éléments qui ont fait l’objet d’une opération de glissement peuvent ensuite être déposés sur le graphique.
           <p>Si vous définissez cette propriété sur <codeph>true</codeph>, le graphique accepte tous les formats de données et suppose que les données qui ont fait l’objet du glissement correspondent au format de données du fournisseur de données. Pour vérifier explicitement le format de données des données qui font l’objet du glissement, vous devez traiter un ou plusieurs événements de glissement, tels que <codeph>dragOver</codeph>, puis appeler la méthode <codeph>preventDefault()</codeph> de l’objet DragEvent pour personnaliser la manière dont la classe de liste décide d’accepter les données en question.</p>
           <p>Lorsque la valeur de <codeph>dropEnabled</codeph> est <codeph>true</codeph>, Flex appelle automatiquement les méthodes <codeph>showDropFeedback()</codeph> et <codeph>hideDropFeedback()</codeph> pour afficher l’indicateur de dépôt.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:legendData:get"><apiName>legendData</apiName><shortdesc>
      Tableau d’éléments Legend.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="legendDataChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau d’éléments Legend.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:selectedChartItem:get"><apiName>selectedChartItem</apiName><shortdesc>
      Spécifie l’objet ChartItem sélectionné dans le graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.charts:ChartItem</apiValueClassifier></apiValueDef><apiDesc>
      Spécifie l’objet ChartItem sélectionné dans le graphique. Si plusieurs éléments sont sélectionnés, cette propriété spécifie l’élément sélectionné en dernier.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:selectedChartItems:get"><apiName>selectedChartItems</apiName><shortdesc>
      Spécifie un tableau contenant tous les objets ChartItem sélectionnés dans le graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Spécifie un tableau contenant tous les objets ChartItem sélectionnés dans le graphique.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:selectionMode:get"><apiName>selectionMode</apiName><shortdesc>
      Détermine si les objets ChartItem peuvent ou non être sélectionnés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>none
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Détermine si les objets ChartItem peuvent ou non être sélectionnés. Valeurs possibles : <codeph>none</codeph>, <codeph>single</codeph> ou <codeph>multiple</codeph>. Définissez cette propriété sur <codeph>none</codeph> pour empêcher la sélection des éléments de graphique. Définissez cette propriété sur <codeph>single</codeph> pour autoriser la sélection d’un seul élément à la fois. Définissez cette propriété sur <codeph>multiple</codeph> pour autoriser la sélection de plusieurs éléments de graphique.
      
      <P>Si vous définissez cette propriété sur <codeph>single</codeph> ou <codeph>multiple</codeph>, vous pouvez remplacer cette propriété pour une série en définissant la propriété <codeph>selectable</codeph> de la série sur <codeph>false</codeph>. Si vous définissez la propriété <codeph>selectionMode</codeph> sur <codeph>none</codeph>, les éléments de graphique ne pourront pas être sélectionnés, quelle que soit la valeur de la propriété <codeph>selectable</codeph> de la série.</P>
           </apiDesc></apiValueDetail><related-links><link href="mx.charts.xml#ChartItem"><linktext>mx.charts.ChartItem</linktext></link><link href="mx.charts.chartClasses.xml#Series"><linktext>mx.charts.chartClasses.Series</linktext></link></related-links></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:seriesFilters:get"><apiName>seriesFilters</apiName><shortdesc>
      Tableau de filtres appliqués à toutes les séries du graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau de filtres appliqués à toutes les séries du graphique. Affectez un tableau de filtres bitmap à cette propriété pour les appliquer simultanément à toutes les séries. Définissez la propriété <codeph>seriesFilter</codeph> sur un tableau vide pour effacer les filtres par défaut appliqués aux séries du graphique. Il est plus efficace d’affecter des filtres à la propriété <codeph>seriesFilters</codeph>, qui s’applique à toutes les séries, plutôt que de les affecter individuellement aux séries.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:series:get"><apiName>series</apiName><shortdesc>
      Tableau d’objets Series définissant les données du graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau d’objets Series définissant les données du graphique. Chaque graphique définit le type d’objets Series à utiliser pour remplir ce tableau. Par exemple, un contrôle ColumnChart suppose que le tableau contient des objets ColumnSeries. Certains graphiques acceptent tous les objets de type IChartElement2 dans le tableau, mais en général, chaque type de graphique n’accepte qu’un seul type d’objets.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:showAllDataTips:get"><apiName>showAllDataTips</apiName><shortdesc>
      Détermine si Flex affiche tous les contrôles DataTip du graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Détermine si Flex affiche tous les contrôles DataTip du graphique. Les contrôles DataTip sont semblables aux infos-bulles, mais ils affichent la valeur correcte représentant le point de données de graphique.
      
      <p>Différents éléments de graphique peuvent afficher différents styles de contrôles DataTip. Par exemple, un élément de graphique empilé peut afficher à la fois les valeurs de la colonne et le pourcentage de ces valeurs par rapport au total.</p>
           <p>Vous pouvez personnaliser les contrôles DataTip par le biais de la propriété <codeph>dataTipFunction</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:showDataTips:get"><apiName>showDataTips</apiName><shortdesc>
      Détermine si Flex affiche les contrôles DataTip du graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Détermine si Flex affiche les contrôles DataTip du graphique. Les contrôles DataTip sont semblables aux infos-bulles, mais ils affichent la valeur correcte représentant le point de données du graphique le plus proche du pointeur de la souris.
      
      <p>Différents éléments de graphique peuvent afficher différents styles de contrôles DataTip. Par exemple, un élément de graphique empilé peut afficher à la fois les valeurs de la colonne et le pourcentage de ces valeurs par rapport au total.</p>
           <p>Vous pouvez personnaliser les contrôles DataTip par le biais de la propriété <codeph>dataTipFunction</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:IChartElement2"><apiName>IChartElement2</apiName><shortdesc>
  L’interface IChartElement2 définit l’ensemble de base des propriétés et méthodes nécessaires pour qu’un objet UIComponent puisse être représenté dans l’espace de données d’un graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IChartElement</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IChartElement2 définit l’ensemble de base des propriétés et méthodes nécessaires pour qu’un objet UIComponent puisse être représenté dans l’espace de données d’un graphique. Tout composant affecté aux tableaux de série ou d’éléments backgroundElement ou annotationElement d’un graphique doit implémenter cette interface.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.charts.chartClasses:IChartElement2:mx.charts.chartClasses:IChartElement2:dataToLocal"><apiName>dataToLocal</apiName><shortdesc>
      Convertit un tuple de valeurs de données en coordonnée x-y à l’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Coordonnées relatives au graphique.
      
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>dataValues</apiItemName><apiType value="restParam"/><apiDesc>Valeurs de données à convertir en coordonnées.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Convertit un tuple de valeurs de données en coordonnée x-y à l’écran. Appelez cette fonction pour transformer des données à l’écran en utilisant la même transformation que pour des éléments individuels. Par exemple, si vous souhaitez créer une surbrillance personnalisée pour une région de données d’un graphique, vous pouvez utiliser cette fonction pour déterminer les coordonnées à l’écran de la plage de valeurs à prendre en compte.
      
      <p>Pour les éléments de graphique Cartesian, deux valeurs sont en général transmises. La première valeur correspond à l’axe horizontal et la deuxième à l’axe vertical.</p>
      
      <p>Dans le cas de graphiques polaires, la première valeur correspond à l’axe angulaire et la deuxième à l’axe radial.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IChartElement2:mx.charts.chartClasses:IChartElement2:getAllDataPoints"><apiName>getAllDataPoints</apiName><shortdesc>
      Renvoie un tableau d’objets HitData contenant les éléments présents dans tous les objets sous-jacents qui implémentent l’interface IChartElement2 et dont les objets dataTip doivent être affichés lorsque la propriété showAllDataTips du graphique est définie sur true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objets HitData décrivant les points de données.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie un tableau d’objets HitData contenant les éléments présents dans tous les objets sous-jacents qui implémentent l’interface <codeph>IChartElement2</codeph> et dont les objets dataTip doivent être affichés lorsque la propriété <codeph>showAllDataTips</codeph> du graphique est définie sur <codeph>true</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IChartElement2:mx.charts.chartClasses:IChartElement2:localToData"><apiName>localToData</apiName><shortdesc>
      Convertit une coordonnée à l’écran en un tuple de valeurs de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tuple de valeurs de données.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>pt</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Point à convertir.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Convertit une coordonnée à l’écran en un tuple de valeurs de données. Appelez cette fonction pour déterminer quelles sont les valeurs de données représentées par un point précis à l’écran.
      <p>Les différents types de graphiques déterminent la manière dont cette transformation est réalisée. Le point doit être relatif à l’espace de coordonnées du graphique.</p>
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.charts.chartClasses:PolarTransform"><apiName>PolarTransform</apiName><shortdesc>
  L’objet PolarTransform représente un ensemble d’axes utilisés pour mapper des valeurs de données à des coordonnées polaires angle/distance et vice-versa.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:DataTransform</apiBaseClassifier></apiClassifierDef><apiDesc>
  L’objet PolarTransform représente un ensemble d’axes utilisés pour mapper des valeurs de données à des coordonnées polaires angle/distance et vice-versa.  
 
  <p>Il n’est en général pas nécessaire d’agir sur l’objet PolarTransform. Les transformations sont créées automatiquement par les types de graphiques intégrés et utilisées par les séries que ces graphiques contiennent, de sorte qu’elles puissent transformer les données en coordonnées de rendu.</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:PolarTransform:PolarTransform"><apiName>PolarTransform</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:PolarTransform:setSize"><apiName>setSize</apiName><shortdesc>
      Définit la largeur et la hauteur utilisée par l’objet PolarTransform lors du calcul de l’origine et du rayon.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Largeur, en pixels, de l’objet PolarTransform.
      
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Hauteur, en pixels, de l’objet PolarTransform. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit la largeur et la hauteur utilisées par l’objet PolarTransform lors du calcul de l’origine et du rayon. Le graphique conteneur appelle cette méthode. En règle générale, vous ne devez pas appeler cette méthode directement. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarTransform:transformCache"><apiName>transformCache</apiName><shortdesc>
      
      Mappe à des coordonnées d’écran un ensemble de valeurs numériques représentant des coordonnées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’objets dont les champs contiennent les valeurs de données. C’est également dans ce tableau que la fonction stocke les valeurs numériques converties.
     
      </apiDesc></apiParam><apiParam><apiItemName>aField</apiItemName><apiType value="String"/><apiDesc>Champ dans lequel se trouvent les valeurs de données pour l’axe x.
     
      </apiDesc></apiParam><apiParam><apiItemName>aConvertedField</apiItemName><apiType value="String"/><apiDesc>Champ dans lequel se trouve la coordonnée d’écran x mappée.
     
      </apiDesc></apiParam><apiParam><apiItemName>rField</apiItemName><apiType value="String"/><apiDesc>Champ dans lequel se trouvent les valeurs de données pour l’axe y.
     
      </apiDesc></apiParam><apiParam><apiItemName>rConvertedField</apiItemName><apiType value="String"/><apiDesc>Champ dans lequel se trouve la coordonnée d’écran y mappée.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Mappe à des coordonnées d’écran un ensemble de valeurs numériques représentant des données. Cette méthode suppose que toutes les valeurs sont des nombres. Par conséquent, toute valeur non numérique doit au préalable être convertie à l’aide de la méthode <codeph>mapCache()</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:PolarTransform:ANGULAR_AXIS"><apiName>ANGULAR_AXIS</apiName><shortdesc>
      Chaîne représentant l’axe angulaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>a</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Chaîne représentant l’axe angulaire.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarTransform:RADIAL_AXIS"><apiName>RADIAL_AXIS</apiName><shortdesc>
      Chaîne représentant l’axe radial.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>r</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Chaîne représentant l’axe radial.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarTransform:origin:get"><apiName>origin</apiName><shortdesc>
      Origine de la transformation polaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Point"/></apiValueDef><apiDesc>
      Origine de la transformation polaire. Ce point est utilisé par des séries associées pour convertir des unités de données en coordonnées d’écran.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarTransform:radius:get"><apiName>radius</apiName><shortdesc>
      Rayon utilisé par la transformation pour convertir des unités de données en coordonnées polaires.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Rayon utilisé par la transformation pour convertir des unités de données en coordonnées polaires.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:DataTip"><apiName>DataTip</apiName><shortdesc>
  Le contrôle DataTip fournit aux utilisateurs du graphique des informations sur un point de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Color" inherit="yes" name="shadowColor" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="uint">
<description>
  Couleur intérieure du bas de l’habillage d’un bouton. Section de la bordure en trois dimensions. La valeur par défaut est <codeph>0xEEEEEE</codeph> (gris clair).
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure supérieure de l’objet DataTip et sa zone de contenu. La valeur par défaut est 0.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure inférieure de l’objet DataTip et sa zone de contenu. La valeur par défaut est 0.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  Style du cadre de sélection. Valeurs possibles : <codeph>"none"</codeph>, <codeph>"solid"</codeph>, <codeph>"inset"</codeph> et <codeph>"outset"</codeph>. La valeur par défaut est <codeph>"inset »</codeph>.
 
  <p>Remarque : le style <codeph>borderStyle</codeph> n’est pas pris en charge par le contrôle Button ni par le conteneur Panel. Pour créer un contrôle Panel à bordure continue, définissez la propriété <codeph>borderThickness</codeph>, puis, si vous le souhaitez, définissez la propriété <codeph>dropShadow</codeph> sur <codeph>false</codeph>.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="uint">
<description>
  Section noire d’une bordure à trois dimensions ou section colorée d’une bordure à deux dimensions. Les composants Button, CheckBox, ComboBox, MenuBar, NumericStepper, ProgressBar, RadioButton, ScrollBar, Slider et tous les composants prenant en charge le style <codeph>borderStyle</codeph> prennent également en charge ce style. La valeur par défaut dépend de la classe de composant. Si elle n’est pas remplacée pour la classe, il s’agit de <codeph>0xAAB3B3</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="uint">
<description>
  Couleur d’arrière-plan du composant. Vous pouvez choisir soit un arrière-plan de type <codeph>backgroundColor</codeph>, soit un arrière-plan de type <codeph>backgroundImage</codeph>, mais pas les deux. Sachez que certains composants, notamment les contrôles Button, ne sont pas dotés d’un arrière-plan, car leur fond est intégralement occupé par l’image du bouton ou un autre élément graphique. Le contrôle DataGrid ignore également ce style. La valeur par défaut est <codeph>undefined</codeph>. Lorsque ni ce style, ni le style backgroundImage ne sont définis, l’arrière-plan du contrôle est transparent.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur (en pixels).
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash10" type="Class">
<description>
  Classe implémentant l’occurrence IUITextField qui permet à ce composant de rendre le texte.
 
  <p>Elle peut être définie sur la classe mx.core.UITextField (pour utiliser la classe TextField classique intégrée à Flash Player) ou la classe mx.core.UIFTETextField (pour utiliser Text Layout Framework, qui permet d’améliorer le rendu du texte et d’obtenir notamment une mise en forme bidirectionnelle).</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut pour la plupart des contrôles est <codeph>left</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Pour ces composants, cette propriété est reconnue uniquement lorsque la valeur de la propriété <codeph>labelPlacement</codeph> est <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash10" type="String">
<description>
  Paramètres régionaux du texte affiché par ce composant. 
 
  <p>FTE et TLF utilisent ces paramètres régionaux pour mapper des caractères Unicode à des glyphes de police et rechercher des polices de rechange. </p>
 
  <p>Remarque : ce style s’applique uniquement lorsqu’un composant MX spécifie UIFTETextField comme classe <codeph>textFieldClass</codeph>.</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est pris en charge uniquement pour les polices anticrénelage avancées incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en gras. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"bold"</codeph>. Pour les contrôles Button, la valeur par défaut est <codeph>"bold »</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police anticrénelage avancée incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced »</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. La valeur par défaut est 10 pour tous les contrôles, à l’exception de ColorPicker. Pour le contrôle ColorPicker, la valeur par défaut est 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police anticrénelage avancée incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced »</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police anticrénelage avancée incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced »</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>. Cette valeur active l’anticrénelage avancé lorsque vous utilisez une police anticrénelage avancée. Définissez cette propriété sur <codeph>"normal"</codeph> pour désactiver l’anticrénelage avancé.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="uint">
<description>
  Couleur du texte du composant, libellé du composant inclus.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure droite du contrôle et le bord droit de sa zone de contenu.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure gauche du contrôle et le bord gauche de sa zone de contenu.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
 
  <p>La valeur par défaut est 2.</p>
  <p>La valeur par défaut du contrôle ComboBox est 0.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle DataTip fournit aux utilisateurs du graphique des informations sur un point de données. Lorsqu’un utilisateur déplace la souris au-dessus d’un élément graphique, le contrôle DataTip affiche un texte fournissant des informations sur l’élément. Vous pouvez utiliser des contrôles DataTip pour guider les utilisateurs lorsqu’ils utilisent l’application ou personnaliser ces contrôles pour fournir des fonctionnalités supplémentaires.
 
  <p>Pour activer des contrôles DataTip sur un graphique, définissez sa propriété <codeph>showDataTips</codeph> sur <codeph>true</codeph>.</p>
 
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.charts.chartClasses:DataTip_mx.events.FlexEvent.SHOW_show"><apiName>show</apiName><shortdesc>
  Distribué lorsque le composant devient visible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SHOW</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le composant devient visible.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:DataTip_mx.events.FlexEvent.HIDE_hide"><apiName>hide</apiName><shortdesc>
  Distribué lorsqu’un objet passe de l’état visible à l’état invisible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.HIDE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un objet passe de l’état visible à l’état invisible.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.charts.chartClasses:DataTip:DataTip"><apiName>DataTip</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:DataTip:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:DataTip:protected:measure"><apiName>measure</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:DataTip:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="mx.charts.chartClasses:DataTip:maxTipWidth"><apiName>maxTipWidth</apiName><shortdesc>
      Spécifie la largeur maximale du cadre de sélection des nouveaux contrôles DataTip, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>300</apiData><apiType value="Number"/><apiDefaultValue>300
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie la largeur maximale du cadre de sélection des nouveaux contrôles DataTip, en pixels. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataTip:data:get"><apiName>data</apiName><shortdesc>
      Structure HitData décrivant le point de données rendu par l’objet DataTip.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Structure HitData décrivant le point de données rendu par l’objet DataTip.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataTip:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:ChartItemDragProxy"><apiName>ChartItemDragProxy</apiName><shortdesc>
  Proxy de glissement par défaut utilisé lors du déplacement d’éléments à partir d’un contrôle de graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Proxy de glissement par défaut utilisé lors du déplacement d’éléments à partir d’un contrôle de graphique.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:ChartItemDragProxy:ChartItemDragProxy"><apiName>ChartItemDragProxy</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.charts.chartClasses:IColumn"><apiName>IColumn</apiName><shortdesc>
  Les éléments ChartElement qui peuvent être regroupés le long de l’axe vertical doivent implémenter cette interface.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Les éléments ChartElement qui peuvent être regroupés le long de l’axe vertical doivent implémenter cette interface. Tout élément implémentant cette interface peut être utilisé comme série enfant d’un élément ColumnSet dont la propriété <codeph>type</codeph> est définie sur « clustered ». Les classes ColumnSeries, HLOCSeries, CandleStickSeries et ColumnSet implémentent cette interface.
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.charts.chartClasses:IColumn:mx.charts.chartClasses:IColumn:columnWidthRatio:set"><apiName>columnWidthRatio</apiName><shortdesc>
	  Spécifie la largeur des éléments par rapport à la taille des catégories.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Spécifie la largeur des éléments par rapport à la taille des catégories. La valeur <codeph>1</codeph> utilise l’intégralité de l’espace et la valeur <codeph>0.6</codeph> 60 % de l’espace disponible pour l’élément. En règle générale, vous ne devez pas définir cette propriété directement. La classe gouvernante ColumnSet ou ColumnChart affecte implicitement cette valeur. La largeur réelle de l’élément correspond soit à la valeur de la propriété <codeph>columnWidthRatio</codeph>, soit à la valeur de <codeph>maxColumnWidth</codeph>, la plus petite des deux étant prise en compte.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IColumn:mx.charts.chartClasses:IColumn:maxColumnWidth:set"><apiName>maxColumnWidth</apiName><shortdesc>
	  Spécifie la largeur de tracé des éléments, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Spécifie la largeur de tracé des éléments, en pixels. La largeur réelle de l’élément correspond soit à la valeur de cette propriété, soit à la valeur de la propriété <codeph>columnWidthRatio</codeph>, la plus petite des deux étant prise en compte. En règle générale, vous ne devez pas définir cette propriété directement. L’objet ColumnSet ou ColumnChart affecte cette valeur. La largeur réelle de l’élément correspond soit à la valeur de la propriété <codeph>columnWidthRatio</codeph>, soit à la valeur de <codeph>maxColumnWidth</codeph>, la plus petite des deux étant prise en compte.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IColumn:mx.charts.chartClasses:IColumn:offset:set"><apiName>offset</apiName><shortdesc>
	  Spécifie dans quelle mesure le centre des éléments doit être décalé par rapport au centre de l’espace disponible, selon la taille des catégories.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/><apiDefaultValue>0
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Spécifie dans quelle mesure le centre des éléments doit être décalé par rapport au centre de l’espace disponible, selon la taille des catégories. La plage des valeurs est un pourcentage de la plage qui s’étend de <codeph>-100</codeph> à <codeph>100</codeph>. Définissez cette propriété sur <codeph>0</codeph> pour centrer les éléments dans l’espace. Définissez cette propriété sur <codeph>-50</codeph> pour centrer l’élément au début de l’espace disponible. En règle générale, vous ne devez pas définir cette propriété directement. L’objet ColumnSet ou ColumnChart affecte cette valeur.
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:StackedSeries"><apiName>StackedSeries</apiName><shortdesc>
  Les séries empilées servent de classe de base commune à toutes les séries d’ensemble d’empilement (BarSet, ColumnSet et AreaSet).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  Les séries empilées servent de classe de base commune à toutes les séries d’ensemble d’empilement (BarSet, ColumnSet et AreaSet). Une série empilée accepte un tableau d’éléments de sous-série et réalise les calculs pour les empiler verticalement, de sorte que chaque série rende la somme des données de la série précédente et de sa propre valeur. Cette classe n’est pas conçue pour être utilisée directement.  
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:StackedSeries:StackedSeries"><apiName>StackedSeries</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:StackedSeries:protected:buildSubSeries"><apiName>buildSubSeries</apiName><shortdesc>
      Traite le tableau de la sous-série en vue de l’affichage, si nécessaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Traite le tableau de la sous-série en vue de l’affichage, si nécessaire. Cette méthode garantit que toutes les sous-séries sont ajoutées en tant qu’enfants de cet ensemble d’empilement et réalise une personnalisation par série si nécessaire (par exemple, affectation de fournisseurs de données hérités ou de propriétés de regroupement).
      <p>Cette méthode est également chargée de signaler au graphique que la série a changé et que par conséquent, les styles implicites de la série doivent être réaffectés. Cette méthode est appelée automatiquement par l’ensemble d’empilement lorsque cela est nécessaire. Au lieu d’appeler cette méthode directement, envisagez plutôt d’appeler la méthode <codeph>invalidateSeries()</codeph>.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:StackedSeries:protected:customizeSeries"><apiName>customizeSeries</apiName><shortdesc> 
      Applique une personnalisation à une sous-série lors de la construction du comportement d’empilement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>g</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IChartElement</apiOperationClassifier><apiDesc>Elément de graphique à personnaliser.
      
      </apiDesc></apiParam><apiParam><apiItemName>i</apiItemName><apiType value="uint"/><apiDesc>Position de la sous-série dans le tableau de séries.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Applique une personnalisation à une sous-série lors de la construction du comportement d’empilement. Par défaut, cette méthode affecte les fournisseurs de données hérités à la sous-série. Les classes dérivées peuvent remplacer cette méthode pour appliquer une personnalisation plus poussée.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:StackedSeries:protected:formatDataTip"><apiName>formatDataTip</apiName><shortdesc>
      Fournit le texte personnalisé des objets DataTip.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Texte personnalisé de l’objet DataTip. La valeur par défaut est une chaîne vide. Vous devez remplacer cette méthode pour fournir un objet DataTip personnalisé.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>hitData</apiItemName><apiOperationClassifier>mx.charts:HitData</apiOperationClassifier><apiDesc>Objet hitData de la pile.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fournit le texte personnalisé des objets DataTip. Les ensembles d’empilement remplacent le texte DataTip des sous-séries qu’ils contiennent pour afficher des informations supplémentaires concernant le comportement d’empilement. Les classes dérivées doivent remplacer cette méthode pour définir du texte DataTip personnalisé.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:StackedSeries:protected:invalidateSeries"><apiName>invalidateSeries</apiName><shortdesc>
      Appelez cette méthode pour déclencher l’appel de la méthode buildSubSeries() lors du prochain appel de la méthode commitProperties().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Appelez cette méthode pour déclencher l’appel de la méthode <codeph>buildSubSeries()</codeph> lors du prochain appel de la méthode <codeph>commitProperties()</codeph>.  
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:StackedSeries:invalidateStacking"><apiName>invalidateStacking</apiName><shortdesc>
      Appelez cette méthode pour recommencer la génération des valeurs empilées lors du prochain appel de la méthode commitProperties().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Appelez cette méthode pour recommencer la génération des valeurs empilées lors du prochain appel de la méthode <codeph>commitProperties()</codeph>.  
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:StackedSeries:stack"><apiName>stack</apiName><shortdesc>
      Met à jour les données de la série et utilise les valeurs des données de la série empilées, de sorte que l’empilage puisse être effectué correctement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Met à jour les données de la série et utilise les valeurs des données de la série empilées, de sorte que l’empilage puisse être effectué correctement.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:StackedSeries:protected:updateStacking"><apiName>updateStacking</apiName><shortdesc>
      Réalise une itération sur les différentes sous-séries pour générer les valeurs empilées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Réalise une itération sur les différentes sous-séries pour générer les valeurs empilées.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:StackedSeries:protected:negTotalsByPrimaryAxis"><apiName>negTotalsByPrimaryAxis</apiName><shortdesc>
      Somme totale des valeurs négatives empilées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      Somme totale des valeurs négatives empilées. Cette propriété contient un dictionnaire dont les clés sont les valeurs représentées par la série enfant le long de l’axe principal (valeurs sur l’axe x pour un objet ColumnSeries, valeurs sur l’axe y pour un objet BarSeries), qui correspondent à la somme totale de toutes les valeurs négatives de série enfant relatives à cette clé.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:protected:posTotalsByPrimaryAxis"><apiName>posTotalsByPrimaryAxis</apiName><shortdesc>
      Somme totale des valeurs positives empilées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      Somme totale des valeurs positives empilées. Cette propriété contient un dictionnaire dont les clés sont les valeurs représentées par la série enfant le long de l’axe principal (valeurs sur l’axe x pour un objet ColumnSeries, valeurs sur l’axe y pour un objet BarSeries), qui correspondent à la somme totale de toutes les valeurs positives de série enfant relatives à cette clé.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:protected:stackedMaximum"><apiName>stackedMaximum</apiName><shortdesc>
      Somme maximale représentée par cette série empilée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Somme maximale représentée par cette série empilée.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:protected:stackedMinimum"><apiName>stackedMinimum</apiName><shortdesc>
      Somme minimale représentée par cette série empilée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Somme minimale représentée par cette série empilée.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:allowNegativeForStacked:get"><apiName>allowNegativeForStacked</apiName><shortdesc>
      La définition de cette propriété sur true n’pile valeurs positives et négatives séparément 
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      La définition de cette propriété sur true n’pile valeurs positives et négatives séparément 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe X. Utilisez la classe LinearAxis ou CategoryAxis pour définir les propriétés de l’objet horizontalAxis en tant que balise enfant en langage MXML, ou pour créer un objet LinearAxis ou CategoryAxis en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:series:get"><apiName>series</apiName><shortdesc>
      Tableau de sous-séries gérées par cet ensemble d’empilement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau de sous-séries gérées par cet ensemble d’empilement. Le rendu de ces séries dépend du comportement d’empilement de cet ensemble d’empilement, défini par la valeur de la propriété <codeph>type</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:type:get"><apiName>type</apiName><shortdesc>
      Comportement de regroupement de cette série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Comportement de regroupement de cette série. Toutes les séries d’empilement prennent en charge les valeurs <codeph>"overlaid »</codeph>, <codeph>"stacked »</codeph> et <codeph>"100% »</codeph>. Lorsque la valeur de la propriété <codeph>type</codeph> est <codeph>"overlaid »</codeph>, toutes les sous-séries sont rendues normalement et aucun comportement particulier n’est appliqué. Lorsque la valeur de la propriété <codeph>type</codeph> est <codeph>"stacked »</codeph>, chaque sous-série est rendue comme étant la somme de ses données et des valeurs de toutes les séries précédentes. Lorsque la valeur de la propriété <codeph>type</codeph> est <codeph>"100% »</codeph>, chaque sous-série est rendue comme la proportion qu’elle représente dans la somme totale de toutes les séries.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe Y. Utilisez la classe LinearAxis ou CategoryAxis pour définir les propriétés de l’objet horizontalAxis en tant que balise enfant en langage MXML, ou pour créer un objet LinearAxis ou CategoryAxis en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:BoundedValue"><apiName>BoundedValue</apiName><shortdesc>
  Une valeur limitée permet de représenter un point de données qu’un élément de graphique doit rendre à l’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Une valeur limitée permet de représenter un point de données qu’un élément de graphique doit rendre à l’écran. Les éléments ChartElement transmettent les valeurs BoundedValue décrivant leurs données à un objet Axis. L’axe calcule des plages de valeurs générées automatiquement. Une valeur BoundedValue encapsule la valeur du point de données dans une dimension particulière, ainsi que la marge (en pixels) dont un objet ChartElement doit disposer au-dessus ou en dessous de la valeur pour la rendre. Les différentes surfaces d’un graphique à surfaces, par exemple, transmettent leurs données en incluant les marges, de manière à adapter la taille des surfaces. Un graphique à colonnes peut transmettre une marge sur l’axe Y pour laisser la place à un libellé à rendre au-dessus du graphique.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:BoundedValue:BoundedValue"><apiName>BoundedValue</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Valeur à rendre.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>lowerMargin</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Marge inférieure.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>upperMargin</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Marge supérieure.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Constructeur.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts.chartClasses:BoundedValue:lowerMargin"><apiName>lowerMargin</apiName><shortdesc>
	  Marge nécessaire sous la valeur pour permettre un rendu correct, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Marge nécessaire sous la valeur pour permettre un rendu correct, en pixels.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:BoundedValue:upperMargin"><apiName>upperMargin</apiName><shortdesc> 
	  Marge nécessaire au-dessus de la valeur pour permettre un rendu correct, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
	  Marge nécessaire au-dessus de la valeur pour permettre un rendu correct, en pixels.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:BoundedValue:value"><apiName>value</apiName><shortdesc>
	  Valeur à rendre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Valeur à rendre.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:ChartLabel"><apiName>ChartLabel</apiName><shortdesc>
  Trace des libellés de données sur des contrôles de graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Trace des libellés de données sur des contrôles de graphique.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:ChartLabel:ChartLabel"><apiName>ChartLabel</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:ChartLabel:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:ChartLabel:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:ChartLabel:protected:measure"><apiName>measure</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:ChartLabel:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
	  </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="mx.charts.chartClasses:ChartLabel:data:get"><apiName>data</apiName><shortdesc>
	  Définit le contenu du libellé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
	  Définit le contenu du libellé.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:PolarDataCanvas"><apiName>PolarDataCanvas</apiName><shortdesc>
 La classe PolarDataCanvas permet aux utilisateurs de faire appel à des API graphiques en utilisant des coordonnées de données au lieu de coordonnées d’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IDataCanvas</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:ChartElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 La classe PolarDataCanvas permet aux utilisateurs de faire appel à des API graphiques en utilisant des coordonnées de données au lieu de coordonnées d’écran.
 
 <p>La région de tracé du dessin est définie par les propriétés <codeph>radialAxis</codeph> et <codeph>angularAxis</codeph>, si celles-ci sont spécifiées. Si cela n’est pas le cas, les axes par défaut du graphique sont pris en compte pour calculer la région de tracé du dessin.</p>
 
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:PolarDataCanvas:PolarDataCanvas"><apiName>PolarDataCanvas</apiName><shortdesc>
     Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
     Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:addChildAt"><apiName>addChildAt</apiName><shortdesc>
     
     Ajoute une occurrence DisplayObject enfant à cette occurrence DisplayObjectContainer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Occurrence DisplayObject transmise au paramètre <codeph>child</codeph>.
     
     </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Occurrence DisplayObject à ajouter en tant qu’enfant à cette occurrence DisplayObjectContainer.
     
     </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Position d’index à laquelle l’enfant est ajouté. Si vous spécifiez une position d’index actuellement occupée, l’objet enfant associé à cette position et toutes les positions supérieures sont décalés d’une position vers le haut dans la liste d’enfants. 
         
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
     Ajoute une occurrence DisplayObject enfant à cette occurrence DisplayObjectContainer. L’enfant est placé à la position d’index spécifiée. La position d’index 0 représente la fin (le bas) de la liste d’affichage pour cet objet DisplayObjectContainer.
     
     <p>Si vous ajoutez un objet enfant qui est déjà doté d’un autre conteneur d’objet d’affichage en tant que parent, il est supprimé de la liste d’enfants de cet autre conteneur d’objet d’affichage. </p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:addChild"><apiName>addChild</apiName><shortdesc>
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:addDataChild"><apiName>addDataChild</apiName><shortdesc>
     Cette méthode ajoute un objet DisplayObject comme enfant au dessin actuel.
     
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>        Occurrence DisplayObject à ajouter comme enfant au dessin actuel.
     </apiDesc></apiParam><apiParam><apiItemName>angleLeft</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>    Coordonnée angulaire gauche de l’enfant, en coordonnées de données.
     </apiDesc></apiParam><apiParam><apiItemName>radialTop</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>    Coordonnée radiale supérieure de l’enfant, en coordonnées de données.
     </apiDesc></apiParam><apiParam><apiItemName>angleRight</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>   Coordonnée angulaire droite de l’enfant, en coordonnées de données.
     </apiDesc></apiParam><apiParam><apiItemName>radialBottom</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc> Coordonnée radiale inférieure de l’enfant, en coordonnées de données.
     </apiDesc></apiParam><apiParam><apiItemName>angleCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>  Coordonnée angulaire centrale de l’enfant, en coordonnées de données.
     </apiDesc></apiParam><apiParam><apiItemName>radialCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc> Coordonnée radiale centrale de l’enfant, en coordonnées de données.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     Cette méthode ajoute un objet <codeph>DisplayObject</codeph> comme enfant au dessin actuel.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:beginBitmapFill"><apiName>beginBitmapFill</apiName><shortdesc>
     Remplit une zone de tracé en utilisant une image bitmap.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bitmap</apiItemName><apiType value="flash.display:BitmapData"/><apiDesc>Image bitmap transparente ou opaque qui contient les bits à afficher. 
     
     </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>Angle spécifiant l’emplacement du remplissage. 
     
     </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>Distance, en pixels, du centre du graphique au remplissage.
     
     </apiDesc></apiParam><apiParam><apiItemName>matrix</apiItemName><apiType value="flash.geom:Matrix"/><apiData>null</apiData><apiDesc>Objet matrix (appartenant à la classe flash.geom.Matrix), qui permet de définir les transformations de l’image bitmap.
     
     </apiDesc></apiParam><apiParam><apiItemName>repeat</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, l’image bitmap se reproduit pour former un motif. Si la valeur est <codeph>false</codeph>, l’image bitmap ne se répète pas et les bords de l’image sont utilisés pour tout remplissage qui dépasse l’image.
     
     </apiDesc></apiParam><apiParam><apiItemName>smooth</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Si la valeur est <codeph>false</codeph>, les images bitmap agrandies sont rendues en appliquant un algorithme d’approximation et ont un aspect pixélisé. Si la valeur est <codeph>true</codeph>, les images bitmap agrandies sont rendues avec un algorithme bilinéaire. Les rendus qui résultent de l’utilisation de l’algorithme d’approximation sont plus rapides. 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Remplit une zone de tracé en utilisant une image bitmap. Les coordonnées sont exprimées par rapport aux propriétés <codeph>angularAxis</codeph> ou <codeph>radialAxis</codeph> du dessin.
     
     <p>Les paramètres et la syntaxe de cette méthode sont identiques à ceux de la méthode <codeph>beginBitmapFill()</codeph> de la classe flash.display.Graphics.</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/beginBitmapFill()"><linktext>flash.display.Graphics.beginBitmapFill()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:beginFill"><apiName>beginFill</apiName><shortdesc conref="flash.display.Graphics#beginFill()">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>color</apiItemName><apiType value="uint"/></apiParam><apiParam><apiItemName>alpha</apiItemName><apiType value="Number"/><apiData>1</apiData></apiParam></apiOperationDef><apiDesc conref="flash.display.Graphics#beginFill()">
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Graphics.xml"><linktext>flash.display.Graphics</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:clear"><apiName>clear</apiName><shortdesc>
     Efface le dessin.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     Efface le dessin.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:curveTo"><apiName>curveTo</apiName><shortdesc>
     Trace une courbe entre la position actuelle et la position (anchorX, anchorY), en utilisant le style de trait actuel et le point de contrôle spécifié par les coordonnées (controlX, controlY).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controlAngle</apiItemName><apiType value="any"/><apiDesc>L’angle qui spécifie la position du point de contrôle.  
     
     </apiDesc></apiParam><apiParam><apiItemName>controlRadial</apiItemName><apiType value="any"/><apiDesc>Distance, en pixels, du centre du graphique au point de contrôle. 
     
     </apiDesc></apiParam><apiParam><apiItemName>anchorAngle</apiItemName><apiType value="any"/><apiDesc>L’angle qui spécifie la position du point d’ancrage.   
     
     </apiDesc></apiParam><apiParam><apiItemName>anchorRadial</apiItemName><apiType value="any"/><apiDesc>Distance, en pixels, du centre du graphique au point de contrôle.  
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Trace une courbe entre la position actuelle et la position (anchorX, anchorY), en utilisant le style de trait actuel et le point de contrôle spécifié par les coordonnées (controlX, controlY). Les coordonnées transmises à cette méthode sont exprimées en données de graphique et non en coordonnées d’écran.
     
     <p>Les paramètres et la syntaxe de cette méthode sont identiques à ceux de la méthode <codeph>curveTo()</codeph> de la classe flash.display.Graphics.</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/curveTo()"><linktext>flash.display.Graphics.curveTo()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:describeData"><apiName>describeData</apiName><shortdesc>
     
      
      Appelée par la classe DataTransform gouvernante pour obtenir une description des données représentées par cet élément IChartElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Tableau contenant les occurrences DataDescription qui décrivent les données affichées.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>Détermine l’axe dont les descriptions des données doivent être obtenues.
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>Champ de bits indiquant quelles valeurs de l’objet DataDescription sont prises en compte par cet axe. Les implémenteurs peuvent optimiser le calcul en calculant uniquement les champs nécessaires.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      
      Appelée par la classe DataTransform gouvernante pour obtenir une description des données représentées par cet élément IChartElement. Les implémenteurs remplissent et renvoient un tableau d’objets mx.charts.chartClasses.DataDescription pour garantir que leurs données sont correctement prises en compte par les axes générant automatiquement les valeurs à partir des données affichées (par exemple minimum, maximum, interval et unitSize). La plupart des types d’éléments renvoient un tableau contenant une seule description DataDescription. Les agrégats tels que BarSet et ColumnSet peuvent renvoyer plusieurs occurrences DataDescription décrivant les données affichées par leurs sous-éléments. Lorsque cette méthode est appelée, l’implémenteur décrit les données le long de l’axe indiqué par l’argument <codeph>dimension</codeph>. Cette fonction peut être appelée pour chaque axe pris en charge par le graphique conteneur.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:drawCircle"><apiName>drawCircle</apiName><shortdesc>
     Dessine un cercle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>angle</apiItemName><apiType value="any"/><apiDesc>L’angle qui spécifie la position du centre du cercle.  
     
     </apiDesc></apiParam><apiParam><apiItemName>radial</apiItemName><apiType value="any"/><apiDesc>Distance, en pixels, du centre du graphique au point de contrôle. 
     
     </apiDesc></apiParam><apiParam><apiItemName>radius</apiItemName><apiType value="Number"/><apiDesc>Rayon du cercle (en pixels). 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Dessine un cercle. Vous devez définir le remplissage et/ou le style de ligne avant d’appeler la méthode <codeph>drawCircle()</codeph>, à l’aide de la méthode <codeph>linestyle()</codeph>, <codeph>lineGradientStyle()</codeph>, <codeph>beginFill()</codeph>, <codeph>beginGradientFill()</codeph> ou <codeph>beginBitmapFill()</codeph>. Les coordonnées sont exprimées en données et non en coordonnées d’écran.
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/drawCircle()"><linktext>flash.display.Graphics.drawCircle()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:drawEllipse"><apiName>drawEllipse</apiName><shortdesc>
     Dessine une ellipse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>angleLeft</apiItemName><apiType value="any"/><apiDesc>Angle spécifiant l’emplacement du coin supérieur gauche du cadre de délimitation de l’ellipse. 
     
     </apiDesc></apiParam><apiParam><apiItemName>radialTop</apiItemName><apiType value="any"/><apiDesc>Distance, en pixels, du centre du graphique à l’emplacement du coin supérieur gauche du cadre de délimitation de l’ellipse. 
     
     </apiDesc></apiParam><apiParam><apiItemName>angleRight</apiItemName><apiType value="any"/><apiDesc>Angle spécifiant l’emplacement de l’angle inférieur droit du cadre de délimitation de l’ellipse. 
     
     </apiDesc></apiParam><apiParam><apiItemName>radialBottom</apiItemName><apiType value="any"/><apiDesc>Distance, en pixels, du centre du graphique à l’emplacement de l’angle inférieur droit du cadre de délimitation de l’ellipse. 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Dessine une ellipse. Vous devez définir le remplissage et/ou le style de ligne avant d’appeler la méthode <codeph>drawEllipse()</codeph>, à l’aide de la méthode <codeph>linestyle()</codeph>, <codeph>lineGradientStyle()</codeph>, <codeph>beginFill()</codeph>, <codeph>beginGradientFill()</codeph> ou <codeph>beginBitmapFill()</codeph>. Les coordonnées sont exprimées en données et non en coordonnées d’écran.
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/drawEllipse()"><linktext>flash.display.Graphics.drawEllipse()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:drawRect"><apiName>drawRect</apiName><shortdesc>
     Dessine un rectangle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>angleLeft</apiItemName><apiType value="any"/><apiDesc>Angle spécifiant l’emplacement du coin supérieur gauche du rectangle. 
     
     </apiDesc></apiParam><apiParam><apiItemName>radialTop</apiItemName><apiType value="any"/><apiDesc>Distance, en pixels, du centre du graphique à l’emplacement du coin supérieur gauche du rectangle. 
     
     </apiDesc></apiParam><apiParam><apiItemName>angleRight</apiItemName><apiType value="any"/><apiDesc>Angle spécifiant l’emplacement de l’angle inférieur droit de l’objet Rectangle. 
     
     </apiDesc></apiParam><apiParam><apiItemName>radialBottom</apiItemName><apiType value="any"/><apiDesc>Distance, en pixels, du centre du graphique à l’emplacement de l’angle inférieur droit de l’objet Rectangle. 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Dessine un rectangle. Vous devez définir le remplissage et/ou le style de ligne avant d’appeler la méthode <codeph>drawRect()</codeph>, à l’aide de la méthode <codeph>linestyle()</codeph>, <codeph>lineGradientStyle()</codeph>, <codeph>beginFill()</codeph>, <codeph>beginGradientFill()</codeph> ou <codeph>beginBitmapFill()</codeph>. Les coordonnées sont exprimées en données et non en coordonnées d’écran.
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/drawRect()"><linktext>flash.display.Graphics.drawRect()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:drawRoundedRect"><apiName>drawRoundedRect</apiName><shortdesc>
     Dessine un rectangle arrondi.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>angleLeft</apiItemName><apiType value="any"/><apiDesc>Angle spécifiant l’emplacement du coin supérieur gauche du rectangle. 
     
     </apiDesc></apiParam><apiParam><apiItemName>radialTop</apiItemName><apiType value="any"/><apiDesc>Distance, en pixels, du centre du graphique à l’emplacement du coin supérieur gauche du rectangle. 
     
     </apiDesc></apiParam><apiParam><apiItemName>angleRight</apiItemName><apiType value="any"/><apiDesc>Angle spécifiant l’emplacement de l’angle inférieur droit de l’objet Rectangle. 
     
     </apiDesc></apiParam><apiParam><apiItemName>radialBottom</apiItemName><apiType value="any"/><apiDesc>Distance, en pixels, du centre du graphique à l’emplacement de l’angle inférieur droit de l’objet Rectangle. 
     
     </apiDesc></apiParam><apiParam><apiItemName>cornerRadius</apiItemName><apiType value="Number"/><apiDesc>Rayon des angles (en pixel).
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Dessine un rectangle arrondi. Vous devez définir le remplissage et/ou le style de ligne avant d’appeler la méthode <codeph>drawRoundRect()</codeph>, à l’aide de la méthode <codeph>linestyle()</codeph>, <codeph>lineGradientStyle()</codeph>, <codeph>beginFill()</codeph>, <codeph>beginGradientFill()</codeph> ou <codeph>beginBitmapFill()</codeph>. Les coordonnées sont exprimées en données et non en coordonnées d’écran.
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/drawRoundedRect()"><linktext>flash.display.Graphics.drawRoundedRect()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:endFill"><apiName>endFill</apiName><shortdesc conref="flash.display.Graphics#endFill()"> 
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="flash.display.Graphics#endFill()"> 
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Graphics.xml"><linktext>flash.display.Graphics</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      Signale au dessin que les données sous-jacentes du fournisseur dataProvider ont changé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Renvoie la valeur <codeph>true</codeph> si les données ont changé.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Signale au dessin que les données sous-jacentes du fournisseur dataProvider ont changé. Cette fonction déclenchera l’appel des méthodes <codeph>updateMapping()</codeph> et <codeph>updateTransform()</codeph> lors du prochain appel de la méthode <codeph>commitProperties()</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:lineStyle"><apiName>lineStyle</apiName><shortdesc>
     Spécifie un style de ligne que Flash utilisera lors des appels suivants d’autres méthodes Graphics (telles que lineTo() ou drawCircle()) associées à l’objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>thickness</apiItemName><apiType value="Number"/><apiDesc>Un entier qui indique l’épaisseur de la ligne en points ; les valeurs disponibles sont comprises entre 0 et 255. Si aucun nombre n’est spécifié, ou si le paramètre n’est pas défini, aucune ligne n’est dessinée. Si une valeur inférieure à 0 est transmise, la valeur par défaut est de 0. 0 correspond à l’épaisseur minimale et 255 à l’épaisseur maximale. Si la valeur transmise est supérieure à 255, la valeur par défaut est de 255. 
     
     </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>Valeur hexadécimale de la couleur de la ligne (par exemple, rouge correspond à 0xFF0000, bleu à 0x0000FF, etc.). Si aucune valeur n’est indiquée, la valeur par défaut correspond à 0x000000 (noir). 
     
     </apiDesc></apiParam><apiParam><apiItemName>alpha</apiItemName><apiType value="Number"/><apiData>1.0</apiData><apiDesc>Un nombre qui indique la valeur alpha de la couleur de la ligne. Les valeurs valides vont de 0 à 1. Si aucune valeur n’est indiquée, la valeur par défaut est de 1 (uni). Si la valeur est inférieure à 0, la valeur par défaut est de 0. Si la valeur est supérieure à 1, la valeur par défaut est de 1.
     
     </apiDesc></apiParam><apiParam><apiItemName>pixelHinting</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Valeur booléenne qui permet d’ajouter des indices supplémentaires de lissage des pixels. Cette valeur affecte à la fois la position des ancres de courbe et la taille du trait. Avec <codeph>pixelHinting</codeph> défini sur true, les largeurs de lignes sont réglées sur des largeurs de pixels entières. Si <codeph>pixelHinting</codeph> est défini sur false, les courbes et les lignes droites risquent de ne pas être continues.
     
     </apiDesc></apiParam><apiParam><apiItemName>scaleMode</apiItemName><apiType value="String"/><apiData>normal</apiData><apiDesc>Valeur de la classe flash.display.LineScaleMode qui spécifie le mode d’échelle à utiliser.
     
     <ul>
       <li>Propriété <codeph>LineScaleMode.NORMAL</codeph> : redimensionne toujours l’épaisseur du traitlorsque l’objet est redimensionné (valeur par défaut).</li>
       <li>Propriété <codeph>LineScaleMode.NONE</codeph> : ne redimensionne jamais l’épaisseur du trait.</li>
       <li>Propriété <codeph>LineScaleMode.VERTICAL</codeph> : n’ajuste pas l’épaisseur du trait si l’objet est redimensionné uniquement de manière verticale. </li>
       <li>Propriété <codeph>LineScaleMode.HORIZONTAL</codeph> : n’ajuste pas l’épaisseur du trait si l’objet est redimensionné uniquement de manière horizontale. </li>
     </ul>
     
     </apiDesc></apiParam><apiParam><apiItemName>caps</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Valeur de la classe flash.display.CapsStyle qui spécifie le type d’extrémité au bout des lignes. Les valeurs possibles sont les suivantes : <codeph>CapsStyle.NONE</codeph>, <codeph>CapsStyle.ROUND</codeph> et <codeph>CapsStyle.SQUARE</codeph>. En l’absence de valeur, utilisez des extrémités rondes. 
     
     </apiDesc></apiParam><apiParam><apiItemName>joints</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Valeur de la classe flash.display.JointStyle qui spécifie le type d’apparence de liaison utilisé dans les angles. Les valeurs possibles sont les suivantes : <codeph>JointStyle.BEVEL</codeph>, <codeph>JointStyle.MITER</codeph> et <codeph>JointStyle.ROUND</codeph>. En l’absence de valeurs, utilisez des extrémités rondes. 
     
     </apiDesc></apiParam><apiParam><apiItemName>miterLimit</apiItemName><apiType value="Number"/><apiData>3</apiData><apiDesc>Nombre qui indique la limite à laquelle une pointe est coupée. Les valeurs disponibles sont comprises entre 1 et 255 (et les valeurs qui excèdent cette plage sont arrondies à 1 ou 255). Cette valeur n’est utilisée que si jointStyle est défini sur « miter ». La valeur <codeph>miterLimit</codeph> représente la longueur maximale d’une pointe au-delà du point où les lignes se rencontrent pour former une liaison. La valeur exprime un facteur de l’épaisseur de la ligne. Par exemple, avec un facteur <codeph>miterLimit</codeph> de 2,5 et une valeur d’épaisseur de 10 pixels, la pointe est coupée à 25 pixels. 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Spécifie un style de trait que Flash utilisera lors des appels suivants d’autres méthodes Graphics (telles que <codeph>lineTo()</codeph> ou <codeph>drawCircle()</codeph>) associées à l’objet.
     
     <p>Les paramètres et la syntaxe de cette méthode sont identiques à ceux de la méthode <codeph>lineStyle()</codeph> de la classe flash.display.Graphics.</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/lineStyle()"><linktext>flash.display.Graphics.lineStyle()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:lineTo"><apiName>lineTo</apiName><shortdesc>
     Trace une ligne en utilisant le style de trait actuel à partir de la position de dessin actuelle jusqu’à (angle, radial) : la position de dessin actuelle est ensuite réglée sur (angle, radial).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>angle</apiItemName><apiType value="any"/><apiDesc>Angle de la position du dessin.
     
     </apiDesc></apiParam><apiParam><apiItemName>radial</apiItemName><apiType value="any"/><apiDesc>Distance, en pixels, du centre du graphique à la position du dessin. 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Trace une ligne en utilisant le style de trait actuel à partir de la position de dessin actuelle jusqu’à (angle, radial) : la position de dessin actuelle est ensuite réglée sur (angle, radial). Si l’objet d’affichage dans lequel vous effectuez le traçage possède un contenu créé à l’aide des outils de dessin Flash, les appels de la méthode <codeph>lineTo()</codeph> sont tracés sous le contenu. Si vous appelez <codeph>lineTo()</codeph> avant d’appeler la méthode moveTo(), la position de dessin par défaut prend la valeur (0, 0). Si l’un des paramètres n’est pas spécifié, cette méthode échoue et la position de dessin actuelle n’est pas modifiée. Les coordonnées sont exprimées en données et non en coordonnées d’écran.
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/lineTo()"><linktext>flash.display.Graphics.lineTo()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:mappingChanged"><apiName>mappingChanged</apiName><shortdesc>
     
      Appelée lorsque le mappage d’un ou de plusieurs axes change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     
      Appelée lorsque le mappage d’un ou de plusieurs axes change. L’objet DataTransform affecté à cet objet ChartElement appelle cette méthode dès qu’un des axes qu’il représente est modifié.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:moveTo"><apiName>moveTo</apiName><shortdesc>
     Déplace la position de dessin actuelle vers (angle, radial).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>angle</apiItemName><apiType value="any"/><apiDesc>Angle de la position du dessin.
     
     </apiDesc></apiParam><apiParam><apiItemName>radial</apiItemName><apiType value="any"/><apiDesc>Distance, en pixels, du centre du graphique à la position du dessin. 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Déplace la position de dessin actuelle vers (angle, radial). Si l’un des paramètres n’est pas spécifié, cette méthode échoue et la position de dessin actuelle n’est pas modifiée. Les coordonnées sont exprimées en données et non en coordonnées d’écran.
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/moveTo()"><linktext>flash.display.Graphics.moveTo()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:removeAllChildren"><apiName>removeAllChildren</apiName><shortdesc>
     Supprime tous les enfants de données (occurrences DisplayObject) du dessin.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     Supprime tous les enfants de données (occurrences DisplayObject) du dessin.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:removeChildAt"><apiName>removeChildAt</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:removeChild"><apiName>removeChild</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:protected:stripNaNs"><apiName>stripNaNs</apiName><shortdesc>
      Supprime les éléments du cache indiqué dont la valeur de la propriété field est NaN.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Cache de données de l’objet PolarDataCanvas.
      
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>Valeur de la propriété <codeph>field</codeph> de l’élément. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime les éléments du cache indiqué dont la valeur de la propriété <codeph>field</codeph> est <codeph>NaN</codeph>. Les classes dérivées peuvent appeler cette méthode à partir de leur implémentation de la méthode <codeph>updateFilter()</codeph> pour supprimer les objets ChartItem qui ont été filtrés par les axes.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:updateDataChild"><apiName>updateDataChild</apiName><shortdesc>
     Met à jour la position d’un enfant en fonction du dessin actuel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>        Occurrence DisplayObject à ajouter comme enfant au dessin actuel.
     </apiDesc></apiParam><apiParam><apiItemName>angleLeft</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>    Coordonnée angulaire gauche de l’enfant, en coordonnées de données.
     </apiDesc></apiParam><apiParam><apiItemName>radialTop</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>    Coordonnée radiale supérieure de l’enfant, en coordonnées de données.
     </apiDesc></apiParam><apiParam><apiItemName>angleRight</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>   Coordonnée angulaire droite de l’enfant, en coordonnées de données.
     </apiDesc></apiParam><apiParam><apiItemName>radialBottom</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc> Coordonnée radiale inférieure de l’enfant, en coordonnées de données.
     </apiDesc></apiParam><apiParam><apiItemName>angleCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>  Coordonnée angulaire centrale de l’enfant, en coordonnées de données.
     </apiDesc></apiParam><apiParam><apiItemName>radialCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc> Coordonnée radiale centrale de l’enfant, en coordonnées de données.
     
     <p>Par exemple :
     <pre>
          var lbl:Label = new Label();
          lbl.text = "Last Month";
          canvas.addChild(lbl);
          canvas.updateDataChild(lbl,200,20);
     </pre>
     </p>
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     Met à jour la position d’un enfant en fonction du dessin actuel.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:protected:updateFilter"><apiName>updateFilter</apiName><shortdesc>
      Appelée lorsque les données sous-jacentes représentées par le dessin doivent être filtrées par rapport aux plages de valeurs représentées par les axes de la transformation de données associée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Appelée lorsque les données sous-jacentes représentées par le dessin doivent être filtrées par rapport aux plages de valeurs représentées par les axes de la transformation de données associée. Cette situation peut se produire lorsque les données sous-jacentes ont été modifiées ou lorsque la plage de valeurs des axes associés a changé. 
      
      <p>Si vous implémentez un type de dessin personnalisé, vous devez remplacer cette méthode et filtrer les données hors plage en utilisant la méthode <codeph>filterCache()</codeph> des axes gérés par la transformation de données associée. La méthode <codeph>filterCache()</codeph> convertit les valeurs hors plage en valeurs <codeph>NaN</codeph>. Vous devez également appeler la méthode <codeph>super.updateFilter()</codeph> dans la sous-classe. </p>
      
      <p>En règle générale, vous ne devez pas appeler cette méthode directement. En revanche, si vous souhaitez garantir que les données ont été filtrées à tel ou tel endroit, appelez la méthode <codeph>validateTransform()</codeph> de la classe PolarDataCanvas. </p>
      
      <p>En général, vous pouvez supposer que les méthodes <codeph>updateData()</codeph> et <codeph>updateMapping()</codeph> ont été appelées avant cette méthode, si nécessaire.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:protected:validateData"><apiName>validateData</apiName><shortdesc>
      Appelle les méthodes updateMapping() et updateFilter() du dessin lorsque cela est nécessaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Appelle les méthodes <codeph>updateMapping()</codeph> et <codeph>updateFilter()</codeph> du dessin lorsque cela est nécessaire. Cette méthode est appelée automatiquement par le dessin à partir de la méthode <codeph>commitProperties()</codeph>, si nécessaire, mais un dessin dérivé peut l’appeler explicitement à une heure explicite si les valeurs générées sont nécessaires. 
      
      <p>Les opérations de chargement et de mappage des données sur les axes sont conçues pour être acceptées par les axes à tout moment. Vous pouvez appeler cette méthode explicitement en toute sécurité, à tout moment.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:protected:validateTransform"><apiName>validateTransform</apiName><shortdesc>
      Appelle la méthode updateTransform() du dessin lorsque cela est nécessaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc><codeph>true</codeph> si les données sous-jacentes du fournisseur de données ont changé ; <codeph>false</codeph> dans le cas contraire.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Appelle la méthode <codeph>updateTransform()</codeph> du dessin lorsque cela est nécessaire. Cette méthode est appelée automatiquement par le dessin au cours de la méthode <codeph>commitProperties()</codeph>, si nécessaire, mais un dessin dérivé peut l’appeler explicitement à une heure explicite si les valeurs générées sont nécessaires. Les opérations de filtrage et de transformation des données s’appuient sur des valeurs spécifiques calculées par les axes, qui dépendent quant à elles des données affichées dans le graphique. Le fait d’appeler cette fonction au mauvais moment peut entraîner l’exécution d’opérations supplémentaires lorsque ces valeurs sont mises à jour.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:PolarDataCanvas:angularAxis:get"><apiName>angularAxis</apiName><shortdesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe X. Utilisez la classe LinearAxis ou CategoryAxis pour définir les propriétés de l’objet angularAxis en tant que balise enfant en langage MXML, ou pour créer un objet LinearAxis ou CategoryAxis en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarDataCanvas:includeInRanges:get"><apiName>includeInRanges</apiName><shortdesc>
     Si la valeur est true, la plage de valeurs calculée du graphique est affectée par ce dessin.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     Si la valeur est <codeph>true</codeph>, la plage de valeurs calculée du graphique est affectée par ce dessin.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarDataCanvas:radialAxis:get"><apiName>radialAxis</apiName><shortdesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe Y. Utilisez la classe LinearAxis ou CategoryAxis pour définir les propriétés de l’axe angulaire en tant que balise enfant en langage MXML, ou pour créer un objet LinearAxis ou CategoryAxis en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarDataCanvas:dataTransform:set"><apiName>dataTransform</apiName><shortdesc>
      
      Objet DataTransform auquel l’élément est associé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:DataTransform</apiValueClassifier></apiValueDef><apiDesc>
      
      Objet DataTransform auquel l’élément est associé. Un objet DataTransform représente une association entre un ensemble d’éléments et un ensemble d’objets d’axe, utilisée pour convertir ces éléments d’espace de données en coordonnées d’écran et vice-versa. Un élément de graphique utilise l’objet DataTransform qui lui est associé pour calculer comment rendre ses données.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:IDataCanvas"><apiName>IDataCanvas</apiName><shortdesc>
  Cette interface est à usage interne uniquement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Cette interface est à usage interne uniquement.  
  
  </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="mx.charts.chartClasses:AxisBase"><apiName>AxisBase</apiName><shortdesc>
  La classe AxisBase sert de classe de base aux différents types d’axes pris en charge dans Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>Flex components inherit the following properties
  from the AxisBase class:</p>
 
  <pre>
  &lt;mx:<i>tagname</i>
    displayName="<i>No default</i>"
    title="<i>No default</i>"
  &gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe AxisBase sert de classe de base aux différents types d’axes pris en charge dans Flex. 
 
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:AxisBase:AxisBase"><apiName>AxisBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:AxisBase:dataChanged"><apiName>dataChanged</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#dataChanged()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#dataChanged()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:AxisBase:protected:describeData"><apiName>describeData</apiName><shortdesc>
      Appelée par la classe DataTransform gouvernante pour obtenir une description des données représentées par cet élément IChartElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Tableau d’objets BoundedValue contenant les occurrences DataDescription qui décrivent les données affichées.
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>Champ de bits indiquant quelles valeurs de l’objet DataDescription sont prises en compte par cet axe. Les implémenteurs peuvent optimiser le calcul en calculant uniquement les champs nécessaires.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée par la classe DataTransform gouvernante pour obtenir une description des données représentées par cet élément IChartElement. Les implémenteurs remplissent et renvoient un tableau d’objets mx.charts.chartClasses.DataDescription pour garantir que leurs données sont correctement prises en compte par les axes générant automatiquement les valeurs à partir des données affichées (par exemple minimum, maximum, interval et unitSize). La plupart des types d’éléments renvoient un tableau contenant une seule description DataDescription. Les agrégats tels que BarSet et ColumnSet peuvent renvoyer plusieurs occurrences DataDescription décrivant les données affichées par leurs sous-éléments. Lorsque cette méthode est appelée, l’implémenteur décrit les données le long de l’axe indiqué par l’argument <codeph>dimension</codeph>. Cette fonction peut être appelée pour chaque axe pris en charge par le graphique conteneur.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.charts.chartClasses.xml#BoundedValue"><linktext>mx.charts.chartClasses.BoundedValue</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:AxisBase:registerDataTransform"><apiName>registerDataTransform</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#registerDataTransform()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transform</apiItemName><apiOperationClassifier>mx.charts.chartClasses:DataTransform</apiOperationClassifier><apiDesc>Transformation DataTransform à enregistrer.
     
      </apiDesc></apiParam><apiParam><apiItemName>dimensionName</apiItemName><apiType value="String"/><apiDesc>Nom de la dimension.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#registerDataTransform()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:AxisBase:unregisterDataTransform"><apiName>unregisterDataTransform</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#unregisterDataTransform()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transform</apiItemName><apiOperationClassifier>mx.charts.chartClasses:DataTransform</apiOperationClassifier><apiDesc>Transformation DataTransform à désenregistrer.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#unregisterDataTransform()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:AxisBase:displayName:get"><apiName>displayName</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#displayName">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.charts.chartClasses.IAxis#displayName">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:AxisBase:title:get"><apiName>title</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#title">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.charts.chartClasses.IAxis#title">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:AxisBase:unitSize:get"><apiName>unitSize</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#unitSize">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.charts.chartClasses.IAxis#unitSize">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:AxisBase:chartDataProvider:set"><apiName>chartDataProvider</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#chartDataProvider">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.charts.chartClasses.IAxis#chartDataProvider">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:RenderData"><apiName>RenderData</apiName><shortdesc>
  Les structures RenderData sont utilisées par les éléments de graphique pour stocker toutes les valeurs et données pertinentes nécessaires pour procéder au rendu du graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Les structures RenderData sont utilisées par les éléments de graphique pour stocker toutes les valeurs et données pertinentes nécessaires pour procéder au rendu du graphique. Le fait de stocker des valeurs dans une structure séparée permet aux éléments de graphique de découpler leur rendu lorsque cela est nécessaire, à partir des propriétés et données qui leur ont été affectées. Cette fonction est utilisée par les effets de graphique ; les effets tels que SeriesInterpolate remplacent les valeurs temporaires calculées à partir des structures renderData précédentes et futures. Les effets tels que SeriesSlide et SeriesZoom remplacent les structures RenderData temporaires par des valeurs calculées pour rendre correctement l’effet.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:RenderData:RenderData"><apiName>RenderData</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Liste des objets ChartItem représentant les éléments présents dans le fournisseur <codeph>dataProvider</codeph> de la série.
     
      </apiDesc></apiParam><apiParam><apiItemName>filteredCache</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Liste des objets ChartItem représentant les éléments présents dans l’objet <codeph>dataProvider</codeph> de la série après filtrage.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:RenderData:clone"><apiName>clone</apiName><shortdesc>
      Crée une copie des données de rendu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Nouvelle copie de l’objet RenderData.
      
      </apiDesc><apiOperationClassifier>mx.charts.chartClasses:RenderData</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Crée une copie des données de rendu. Dans la nouvelle copie, les propriétés qui font référence à d’autres objets font référence aux mêmes objets que les propriétés d’origine.
      
      <p>Si vous créez une sous-classe pour cette classe, vous devez remplacer cette méthode.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:RenderData:bounds"><apiName>bounds</apiName><shortdesc>
      Limites de tous les éléments qu’une série affiche à l’écran, dans le système de coordonnées de la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      Limites de tous les éléments qu’une série affiche à l’écran, dans le système de coordonnées de la série. Cette valeur est utilisée par les différents effets au cours du rendu. Une série remplit cette valeur lorsque l’effet appelle la méthode <codeph>getElementBounds()</codeph>. Sauf demande particulière, il n’est pas nécessaire que la série remplisse ce champ.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:RenderData:cache"><apiName>cache</apiName><shortdesc>
      Liste des objets ChartItem représentant les éléments présents dans le fournisseur dataProvider de la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      Liste des objets ChartItem représentant les éléments présents dans le fournisseur <codeph>dataProvider</codeph> de la série.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:RenderData:elementBounds"><apiName>elementBounds</apiName><shortdesc>
      Tableau de rectangles décrivant les limites des objets ChartItem de la série, dans le système de coordonnées de la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau de rectangles décrivant les limites des objets ChartItem de la série, dans le système de coordonnées de la série. Les effets utilisent ce tableau pour générer le rendu de l’effet. Un effet appelle la méthode <codeph>getElementBounds()</codeph>, ce qui provoque le remplissage de cette valeur par la série. Sauf demande particulière, il n’est pas nécessaire que la série remplisse ce champ. Les effets modifient ce tableau pour modifier les positions actuelles des éléments pendant toute la durée de l’effet. Si cette valeur est remplie dans l’objet <codeph>renderData</codeph> de la série, celle-ci réalise son propre rendu en fonction des rectangles et non en fonction des données de la série.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:RenderData:filteredCache"><apiName>filteredCache</apiName><shortdesc>
      Liste des objets ChartItem représentant les éléments présents dans l’objet dataProvider de la série après filtrage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      Liste des objets ChartItem représentant les éléments présents dans l’objet <codeph>dataProvider</codeph> de la série après filtrage.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:RenderData:visibleRegion"><apiName>visibleRegion</apiName><shortdesc>
      Rectangle décrivant la plage de coordonnées qu’une série peut afficher à l’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      Rectangle décrivant la plage de coordonnées qu’une série peut afficher à l’écran. Cette valeur est utilisée par les différents effets au cours du rendu. Un effet appelle la méthode <codeph>getElementBounds()</codeph> pour remplir cette valeur. Sauf demande particulière, il n’est pas nécessaire que la série remplisse ce champ. Si la valeur reste <codeph>null</codeph>, les effets supposent que la région visible d’un élément correspond au cadre de sélection de l’élément lui-même (0, 0, width, height), défini par rapport à l’élément.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:RenderData:length:get"><apiName>length</apiName><shortdesc>
      Nombre d’éléments représentés dans ces données de rendu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
      Nombre d’éléments représentés dans ces données de rendu. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:NumericAxis"><apiName>NumericAxis</apiName><shortdesc>
  La classe NumericAxis joue le rôle de classe de base commune pour les types d’axes représentant une plage de valeurs continue, délimitée par une valeur minimale et une valeur maximale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IAxis</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:AxisBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe NumericAxis joue le rôle de classe de base commune pour les types d’axes représentant une plage de valeurs continue, délimitée par une valeur minimale et une valeur maximale. Les classes LinearAxis, LogAxis et DateTimeAxis intégrées étendent toutes cette classe de base.
  
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#DateTimeAxis"><linktext>mx.charts.DateTimeAxis</linktext></link><link href="mx.charts.xml#LinearAxis"><linktext>mx.charts.LinearAxis</linktext></link><link href="mx.charts.xml#LogAxis"><linktext>mx.charts.LogAxis</linktext></link></related-links><apiConstructor id="mx.charts.chartClasses:NumericAxis:NumericAxis"><apiName>NumericAxis</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:NumericAxis:protected:adjustMinMax"><apiName>adjustMinMax</apiName><shortdesc>
      Ajuste la plage de valeurs générée ou affectée des libellés de l’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>minValue</apiItemName><apiType value="Number"/><apiDesc>Valeur calculée minimale.
      </apiDesc></apiParam><apiParam><apiItemName>maxValue</apiItemName><apiType value="Number"/><apiDesc>Valeur calculée maximale.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajuste la plage de valeurs générée ou affectée des libellés de l’axe. Cette méthode est appelée au cours du cycle de mise à jour de l’axe. Les sous-classes peuvent remplacer cette méthode pour traiter de façon particulière ces valeurs. Par défaut, aucun ajustement n’est réalisé sur la plage de valeurs.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:protected:buildLabelCache"><apiName>buildLabelCache</apiName><shortdesc>
      Remplit la propriété labelCache en utilisant les libellés qui représentent les valeurs actuelles de l’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>true si les libellés ont été régénérés.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Remplit la propriété <codeph>labelCache</codeph> en utilisant les libellés qui représentent les valeurs actuelles de l’axe. Les sous-classes doivent implémenter cette fonction. Cette fonction est appelée à de nombreuses reprises et vous devez par conséquent vérifier que la valeur de la propriété <codeph>labelCache</codeph> est <codeph>null</codeph> avant de procéder aux calculs.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:protected:buildMinorTickCache"><apiName>buildMinorTickCache</apiName><shortdesc>
      Crée un tableau de positions pour le tableau de graduations secondaires généré par cet axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Tableau de positions comprises entre 0 et 1, qui représentent les points auxquels des graduations secondaires sont rendues, entre les valeurs minimale et maximale de l’axe.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Crée un tableau de positions pour le tableau de graduations secondaires généré par cet axe. Les sous-classes doivent implémenter cette fonction. Cette fonction est appelée automatiquement par la classe NumericAxis. Il est recommandé d’accéder à la propriété <codeph>minorTicks</codeph> plutôt que d’appeler directement cette fonction.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:filterCache"><apiName>filterCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#filterCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’objets à partir duquel les valeurs converties sont lues et dans lequel elles sont stockées.
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>Champ des objets du tableau de cache qui contient les valeurs préfiltrées.
     
      </apiDesc></apiParam><apiParam><apiItemName>filteredField</apiItemName><apiType value="String"/><apiDesc>Champ des objets du tableau de cache dans lequel les valeurs filtrées doivent être stockées.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#filterCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:formatForScreen"><apiName>formatForScreen</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#formatForScreen()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>Texte de l’objet DataTip.
      
      </apiDesc></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Valeur à convertir en chaîne. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#formatForScreen()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:getLabelEstimate"><apiName>getLabelEstimate</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#getLabelEstimate()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier><apiDesc>Tableau d’objets AxisLabel.
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#getLabelEstimate()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:getLabels"><apiName>getLabels</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#getLabels()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier><apiDesc>Tableau d’objets AxisLabel.
      
      </apiDesc></apiReturn><apiParam><apiItemName>minimumAxisLength</apiItemName><apiType value="Number"/><apiDesc>Longeur minimale de l’axe, en pixels. L’axe peut être plus court que cette valeur, mais pas plus long.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#getLabels()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:protected:guardMinMax"><apiName>guardMinMax</apiName><shortdesc>
      Protège la plage vis-à-vis des valeurs non valides pour ce type d’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>null si aucun ajustement n’est nécessaire ou tableau contenant les valeurs ajustées au format <codeph>[min,max]</codeph>.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>min</apiItemName><apiType value="Number"/><apiDesc>Valeur calculée minimale.
      </apiDesc></apiParam><apiParam><apiItemName>max</apiItemName><apiType value="Number"/><apiDesc>Valeur calculée maximale.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Protège la plage vis-à-vis des valeurs non valides pour ce type d’axe. Cette fonction est appelée au cours du cycle de mise à jour de l’axe, pour éviter la génération de plages non valides. Les sous-classes peuvent remplacer cette classe et définir une logique adaptée à leur type d’axe.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:protected:invalidateCache"><apiName>invalidateCache</apiName><shortdesc>
      Invalide les libellés et graduations mis en cache représentant les valeurs de cet axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Invalide les libellés et graduations mis en cache représentant les valeurs de cet axe. Les classes dérivées doivent appeler cette fonction chaque fois que des valeurs utilisées dans le calcul des libellés et des graduations changent.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:invertTransform"><apiName>invertTransform</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#invertTransform()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>Objet contenant la valeur transformée.
      
      </apiDesc></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Limite de l’axe. La valeur de ce paramètre doit être comprise entre 0 et 1, 0 représentant la limite minimale de l’axe et 1 sa limite maximale.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#invertTransform()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:mapCache"><apiName>mapCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#mapCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’objets à partir duquel les valeurs converties sont lues et dans lequel elles sont stockées.
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>Champ des objets du tableau de cache qui contient les valeurs préconverties.
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>Champ des objets du tableau de cache dans lequel les valeurs converties doivent être stockées.
     
      </apiDesc></apiParam><apiParam><apiItemName>indexValues</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>La valeur de ce paramètre est <codeph>true</codeph> si les valeurs mappées sont des valeurs d’index et <codeph>false</codeph> s’il s’agit de valeurs de données naturelles.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#mapCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:preferDropLabels"><apiName>preferDropLabels</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#preferDropLabels()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> si les libellés peuvent être omis sans perte de données, <codeph>false</codeph> dans le cas contraire. 
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#preferDropLabels()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:reduceLabels"><apiName>reduceLabels</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#reduceLabels()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier><apiDesc>Nouvel ensemble de libellés résolvant le chevauchement en réduisant le nombre de libellés.
      
      </apiDesc></apiReturn><apiParam><apiItemName>intervalStart</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>Début de l’intervalle de chevauchement des libellés.
     
      </apiDesc></apiParam><apiParam><apiItemName>intervalEnd</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>Fin de l’intervalle de chevauchement des libellés.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#reduceLabels()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:transformCache"><apiName>transformCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#transformCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’objets à partir duquel les valeurs mappées sont lues et dans lequel elles sont stockées.
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>Champ des objets du tableau de cache qui contient les valeurs prémappées.
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>Champ des objets du tableau de cache dans lequel les valeurs mappées doivent être stockées.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#transformCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:update"><apiName>update</apiName><shortdesc>
      
      Met à jour le graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Met à jour le graphique. Cette méthode peut être appelée plusieurs fois par image. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:NumericAxis:protected:assignedMaximum"><apiName>assignedMaximum</apiName><shortdesc>
      Valeur maximale affectée explicitement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Valeur maximale affectée explicitement. Si aucune valeur n’a été affectée, la valeur est <codeph>NaN</codeph>. En règle générale, les calculs doivent être réalisés à l’aide du champ <codeph>computedMaximum</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:assignedMinimum"><apiName>assignedMinimum</apiName><shortdesc>
      Valeur minimale affectée explicitement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Valeur minimale affectée explicitement. Si aucune valeur n’a été affectée, la valeur est <codeph>NaN</codeph>. En règle générale, les calculs doivent être réalisés à l’aide du champ <codeph>computedMinimum</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:computedInterval"><apiName>computedInterval</apiName><shortdesc>
      Intervalle calculé représenté par cet axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Intervalle calculé représenté par cet axe. La propriété <codeph>computedInterval</codeph> est utilisée par les classes AxisRenderer et Gridlines pour déterminer où les graduations et lignes de la grille doivent être rendues. La classe de base NumericAxis surveille les modifications apportées à ce champ pour déterminer s’il est nécessaire de rendre à nouveau le graphique. Les classes dérivées sont chargées de calculer la valeur de ce champ.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:computedMaximum"><apiName>computedMaximum</apiName><shortdesc>
      Valeur calculée maximale représentée par cet axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Valeur calculée maximale représentée par cet axe. Si l’utilisateur a explicitement affecté une valeur maximale, les valeurs des propriétés <codeph>computedMaximum</codeph> et <codeph>assignedMaximum</codeph> sont en général identiques. Dans le cas contraire, la valeur <codeph>computedMaximum</codeph> est générée à partir des valeurs représentées dans le graphique.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:computedMinimum"><apiName>computedMinimum</apiName><shortdesc>
      Valeur calculée minimale représentée par cet axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Valeur calculée minimale représentée par cet axe. Si l’utilisateur a explicitement affecté une valeur minimale, les valeurs des propriétés <codeph>computedMinimum</codeph> et <codeph>assignedMinimum</codeph> sont en général identiques. Dans le cas contraire, la valeur <codeph>computedMinimum</codeph> est générée à partir des valeurs représentées dans le graphique.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:labelCache"><apiName>labelCache</apiName><shortdesc>
      Ensemble le plus récent d’objets AxisLabel générés pour représenter cet axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      Ensemble le plus récent d’objets AxisLabel générés pour représenter cet axe. La valeur de cette propriété est <codeph>null</codeph> si l’axe a été modifié et nécessite de nouveaux libellés. Pour vérifier que la valeur de la propriété <codeph>labelCache</codeph> est correcte, appelez la méthode <codeph>buildLabelCache()</codeph> avant d’accéder à la propriété <codeph>labelCache</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:labelMaximum"><apiName>labelMaximum</apiName><shortdesc>
      Valeur maximale à laquelle un libellé peut être placé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Valeur maximale à laquelle un libellé peut être placé. Après avoir calculé une valeur minimale ajustée, de nombreux types d’axes élargissent la plage de valeurs de l’axe pour accueillir les artefacts de rendu supplémentaires du graphique, par exemple les libellés et les bordures. Cette valeur représente la valeur maximale du graphique <i>avant</i> l’ajustement prévu pour ces artefacts. Généralement, les axes génèrent des libellés pour faire en sorte que ce soit cette valeur qui dispose d’un libellé et non la valeur maximale ajustée de l’axe.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:labelMinimum"><apiName>labelMinimum</apiName><shortdesc>
      Valeur minimale à laquelle un libellé peut être placé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Valeur minimale à laquelle un libellé peut être placé. Après avoir calculé une valeur minimale ajustée, de nombreux types d’axes élargissent la plage de valeurs de l’axe pour accueillir les artefacts de rendu supplémentaires du graphique, par exemple les libellés et les bordures. Cette valeur représente la valeur minimale du graphique <i>avant</i> l’ajustement prévu pour ces artefacts. Généralement, les axes génèrent des libellés pour faire en sorte que ce soit cette valeur qui dispose d’un libellé et non la valeur minimale ajustée de l’axe.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:minorTickCache"><apiName>minorTickCache</apiName><shortdesc>
      Ensemble le plus récent de graduations secondaires générées pour représenter cet axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      Ensemble le plus récent de graduations secondaires générées pour représenter cet axe. La valeur de cette propriété peut être <codeph>null</codeph> si l’axe a été modifié et nécessite de nouveaux libellés et de nouvelles graduations. Utilisez l’accesseur public <codeph>minorTicks</codeph> pour créer à la demande les graduations secondaires.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:autoAdjust:get"><apiName>autoAdjust</apiName><shortdesc>
      Détermine si Flex doit arrondir les valeurs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Détermine si Flex doit arrondir les valeurs. Si la valeur est <codeph>false</codeph>, Flex n’arrondit pas les valeurs définies par les propriétés <codeph>minimum</codeph> et <codeph>maximum</codeph> et ne modifie pas les valeurs <codeph>minimum</codeph> et <codeph>maximum</codeph> par défaut.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:baseAtZero:get"><apiName>baseAtZero</apiName><shortdesc>
      Détermine si Flex doit essayer de conserver les valeurs minimum et maximum à zéro.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Détermine si Flex doit essayer de conserver les valeurs <codeph>minimum</codeph> et <codeph>maximum</codeph> à zéro. Si toutes les valeurs de l’axe sont positives, la valeur minimale de l’axe est zéro. Si toutes les valeurs de l’axe sont négatives, la valeur maximale de l’axe est zéro.  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:baseline:get"><apiName>baseline</apiName><shortdesc>
      Valeur minimale calculée de l’axe, si cette valeur est supérieure à 0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Valeur minimale calculée de l’axe, si cette valeur est supérieure à 0. Si la valeur maximale est inférieure ou égale à 0, la propriété <codeph>baseline</codeph> correspond à la valeur maximale calculée. Si aucune des valeurs n’est supérieure à 0, la valeur de la propriété <codeph>baseline</codeph> est 0.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:dataDescriptions:get"><apiName>dataDescriptions</apiName><shortdesc>
      Tableau de structures DataDescription décrivant les données représentées par le graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau de structures DataDescription décrivant les données représentées par le graphique. Un axe peut utiliser cette propriété pour générer des valeurs pour certaines propriétés, par exemple sa plage de valeurs.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:direction:get"><apiName>direction</apiName><shortdesc>
 	  Détermine la direction dans laquelle l’axe est rendu. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"normal"
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
 	  Détermine la direction dans laquelle l’axe est rendu. Les valeurs possibles sont<codeph> normal </codeph>et <codeph>inversé</codeph>. Toutes les classes dérivées doivent veiller à la façon dont min et max sont définis en fonction de la<codeph> direction </codeph>. Toutes les séries doivent veiller à la façon dont elles sont rendues, en fonction de la<codeph> direction</codeph> de leur axe sous-jacent. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Appelé pour formater les valeurs d’axe à afficher en tant que libellés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Appelé pour formater les valeurs d’axe à afficher en tant que libellés. La fonction <codeph>labelFunction</codeph> présente la signature suivante :
      <pre>
      function <i>function_name</i>(<i>labelValue</i>:Object, <i>previousValue</i>:Object, <i>axis</i>:IAxis):String { ... }
      </pre>
      
      <p>Si vous connaissez les types de données que votre fonction formatera, vous pouvez spécifier un type explicite pour les paramètres <codeph>labelValue</codeph> et <codeph>previousValue</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:minorTicks:get"><apiName>minorTicks</apiName><shortdesc>
      Tableau de graduations secondaires générées pour représenter cet axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau de graduations secondaires générées pour représenter cet axe.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:padding:get"><apiName>padding</apiName><shortdesc>
      Spécifie la marge que Flex doit ajouter aux valeurs minimale et maximale calculées de l’axe lors du rendu des valeurs à l’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Spécifie la marge que Flex doit ajouter aux valeurs minimale et maximale calculées de l’axe lors du rendu des valeurs à l’écran.  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:parseFunction:get"><apiName>parseFunction</apiName><shortdesc> 
      Spécifie une fonction parseFunction permettant de personnaliser la manière dont les valeurs rendues par le graphique sont converties en valeurs numériques.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> 
      Spécifie une fonction <codeph>parseFunction</codeph> permettant de personnaliser la manière dont les valeurs rendues par le graphique sont converties en valeurs numériques. Une fonction <codeph>parseFunction</codeph> personnalisée est transmise en tant que valeur de données et doit renvoyer un nombre correspondant, représentant la même valeur. Par défaut, cette classe utilise la fonction ECMA <codeph>parseFloat()</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:requiredDescribedFields:get"><apiName>requiredDescribedFields</apiName><shortdesc>
      Champs de la structure DescribeData concernés par cet axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
      Champs de la structure DescribeData concernés par cet axe.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:ticks:get"><apiName>ticks</apiName><shortdesc>
      Tableau des graduations de l’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau des graduations de l’axe.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:IStackable"><apiName>IStackable</apiName><shortdesc>
  L’interface IStackable peut être implémentée par toutes les séries empilables.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IStackable peut être implémentée par toutes les séries empilables. Les sous-séries affectées aux ensembles d’empilement (ColumnSet, BarSet, AreaSet) doivent implémenter cette interface lors de l’empilement.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.charts.chartClasses:IStackable:mx.charts.chartClasses:IStackable:stack"><apiName>stack</apiName><shortdesc>
	  Empile la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Valeur maximale de la série nouvellement empilée.	 
	  
	  </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>stackedXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Contient les valeurs de base d’empilement de la série. Les clés du dictionnaire correspondent aux valeurs y et leurs valeurs aux valeurs x.
	  
	  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable</apiOperationClassifier><apiDesc>Elément précédent dans la pile. Par exemple, si l’élément est de même type, vous pouvez utiliser l’accès à cette propriété pour éviter une double opération lors du rendu.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Empile la série. Normalement, une série implémente la méthode <codeph>updateData()</codeph> pour charger ses données à partir du fournisseur de données. Cependant, une série d’empilement réalise certaines opérations spéciales, car ses valeurs ne sont pas nécessairement stockées dans son fournisseur de données. Ses valeurs correspondent à la somme des valeurs stockées dans le fournisseur de données et des valeurs chargées par l’objet empilé.
	  <p>Une série d’empilement personnalisée implémente la méthode <codeph>stack()</codeph> en chargeant ses données à partir du fournisseur de données, en les ajoutant aux valeurs de base stockées dans le dictionnaire pour obtenir les valeurs réelles à utiliser pour le rendu, et en remplaçant les valeurs du dictionnaire par les nouvelles valeurs additionnées.</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:IStackable:mx.charts.chartClasses:IStackable:stacker:get"><apiName>stacker</apiName><shortdesc>
	  Classe StackedSeries associée à cette série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:StackedSeries</apiValueClassifier></apiValueDef><apiDesc>
	  Classe StackedSeries associée à cette série. La propriété stacker gère le comportement d’empilement de la série.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IStackable:mx.charts.chartClasses:IStackable:stackTotals:set"><apiName>stackTotals</apiName><shortdesc>
	  Totaux de pile pour la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
	  Totaux de pile pour la série.
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:IBar"><apiName>IBar</apiName><shortdesc>
  L’interface IBar peut être implémentée par toutes les séries qui peuvent être regroupées verticalement, par exemple BarSeries.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IBar peut être implémentée par toutes les séries qui peuvent être regroupées verticalement, par exemple BarSeries. Les sous-séries affectées à un type de série BarSet doivent implémenter cette interface.
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.charts.chartClasses:IBar:mx.charts.chartClasses:IBar:barWidthRatio:set"><apiName>barWidthRatio</apiName><shortdesc>
	  Spécifie la largeur de rendu des éléments par rapport à la largeur des catégories.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Spécifie la largeur de rendu des éléments par rapport à la largeur des catégories. La valeur <codeph>1</codeph> utilise l’intégralité de l’espace et la valeur <codeph>0.6</codeph> 60 % de l’espace disponible pour la catégorie. En règle générale, vous ne devez pas définir cette propriété directement. La classe gouvernante BarSet ou BarChart affecte implicitement cette valeur. La taille réelle correspond soit à la valeur de la propriété <codeph>barWidthRatio</codeph>, soit à la valeur de <codeph>maxbarWidth</codeph>, la plus petite des deux étant prise en compte
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IBar:mx.charts.chartClasses:IBar:maxBarWidth:set"><apiName>maxBarWidth</apiName><shortdesc>
	  Spécifie la largeur de tracé des éléments, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Spécifie la largeur de tracé des éléments, en pixels. La largeur réelle de l’élément correspond soit à la valeur du style, soit à la valeur de la propriété <codeph>barWidthRatio</codeph>, la plus petite des deux étant prise en compte. En règle générale, vous ne devez pas définir cette propriété directement. Les objets BarSet ou BarChart affectent cette valeur.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IBar:mx.charts.chartClasses:IBar:offset:set"><apiName>offset</apiName><shortdesc>
	  Spécifie dans quelle mesure le centre des éléments doit être décalé par rapport au centre de l’espace disponible, selon la taille des catégories.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/><apiDefaultValue>0
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Spécifie dans quelle mesure le centre des éléments doit être décalé par rapport au centre de l’espace disponible, selon la taille des catégories. La plage des valeurs est un pourcentage de la plage qui s’étend de <codeph>-100</codeph> à <codeph>100</codeph>. Définissez cette propriété sur <codeph>0</codeph> pour centrer les éléments dans l’espace. Définissez cette propriété sur <codeph>-50</codeph> pour centrer l’élément au début de l’espace disponible. En règle générale, vous ne devez pas définir cette propriété directement. Les objets BarSet ou BarChart affectent cette valeur.
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:AxisLabelSet"><apiName>AxisLabelSet</apiName><shortdesc>
  Une classe AxisLabelSet représente les données de libellés et de graduations générées par une implémentation de l’interface IAxis.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Une classe AxisLabelSet représente les données de libellés et de graduations générées par une implémentation de l’interface IAxis.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:AxisLabelSet:AxisLabelSet"><apiName>AxisLabelSet</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts.chartClasses:AxisLabelSet:accurate"><apiName>accurate</apiName><shortdesc>
      Lorsque cette propriété est renvoyée par la méthode getLabelEstimate(), elle est définie sur true si l’estimation représente de façon précise les libellés finaux à rendre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Lorsque cette propriété est renvoyée par la méthode <codeph>getLabelEstimate()</codeph>, elle est définie sur <codeph>true</codeph> si l’estimation représente de façon précise les libellés finaux à rendre. Dans les autres contextes, cette propriété n’est pas pertinente.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:AxisLabelSet:labels"><apiName>labels</apiName><shortdesc>
      Tableau d’objets AxisLabel représentant les valeurs de l’axe chargé de la génération.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau d’objets AxisLabel représentant les valeurs de l’axe chargé de la génération.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:AxisLabelSet:minorTicks"><apiName>minorTicks</apiName><shortdesc>
      Tableau de valeurs comprises entre 0 et 1, indiquant où les graduations secondaires doivent être placées le long de l’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau de valeurs comprises entre 0 et 1, indiquant où les graduations secondaires doivent être placées le long de l’axe.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:AxisLabelSet:ticks"><apiName>ticks</apiName><shortdesc>
      Tableau de valeurs comprises entre 0 et 1, indiquant où les graduations doivent être placées le long de l’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau de valeurs comprises entre 0 et 1, indiquant où les graduations doivent être placées le long de l’axe.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:CartesianDataCanvas"><apiName>CartesianDataCanvas</apiName><shortdesc>
 Cette classe permet d’ajouter des éléments graphiques à l’aide d’une API graphique (lignes, ellipses et autres formes).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataChildren"/></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:CartesianDataCanvas&gt;</code> tag inherits all the
  properties of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:CartesianDataCanvas
    <strong>Properties</strong>
    dataChildren="<i>No default</i>"
    horizontalAxis="<i>No default</i>"
    includeInRanges="<i>false</i>"
    verticalAxis="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IDataCanvas</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:ChartElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 Cette classe permet d’ajouter des éléments graphiques à l’aide d’une API graphique (lignes, ellipses et autres formes). Les valeurs transmises à l’API graphique sont exprimées en coordonnées de données et non en coordonnées d’écran. Vous pouvez également ajouter des objets DisplayObject au dessin, comme vous le feriez pour ajouter des enfants à des conteneurs.
 
 <p>La région de tracé du dessin est déterminée par les propriétés <codeph>verticalAxis</codeph> et <codeph>horizontalAxis</codeph>, si celles-ci sont spécifiées. Si cela n’est pas le cas, le dessin utilise les axes par défaut du graphique pour calculer la région de tracé.</p>
 
 <p>Les coordonnées de données transmises en tant que paramètres aux API de tracé peuvent être les valeurs réelles de la coordonnée de données ou un objet de type <codeph>CartesianCanvasValue</codeph>, qui peut contenir une valeur de coordonnée de données et un décalage, exprimé en pixels.</p>
 
 </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:CartesianDataCanvas:CartesianDataCanvas"><apiName>CartesianDataCanvas</apiName><shortdesc>
     Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
     Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:addChildAt"><apiName>addChildAt</apiName><shortdesc>
     
     Ajoute une occurrence DisplayObject enfant à cette occurrence DisplayObjectContainer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Occurrence DisplayObject transmise au paramètre <codeph>child</codeph>.
     
     </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Occurrence DisplayObject à ajouter en tant qu’enfant à cette occurrence DisplayObjectContainer.
     
     </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Position d’index à laquelle l’enfant est ajouté. Si vous spécifiez une position d’index actuellement occupée, l’objet enfant associé à cette position et toutes les positions supérieures sont décalés d’une position vers le haut dans la liste d’enfants. 
         
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
     Ajoute une occurrence DisplayObject enfant à cette occurrence DisplayObjectContainer. L’enfant est placé à la position d’index spécifiée. La position d’index 0 représente la fin (le bas) de la liste d’affichage pour cet objet DisplayObjectContainer.
     
     <p>Si vous ajoutez un objet enfant qui est déjà doté d’un autre conteneur d’objet d’affichage en tant que parent, il est supprimé de la liste d’enfants de cet autre conteneur d’objet d’affichage. </p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:addChild"><apiName>addChild</apiName><shortdesc>
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:addDataChild"><apiName>addDataChild</apiName><shortdesc>
     Ajoute l’objet d’affichage spécifié au dessin actuel en tant qu’enfant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>    Objet d’affichage à ajouter comme enfant au dessin actuel.
     </apiDesc></apiParam><apiParam><apiItemName>left</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>     Coordonnée x gauche de l’enfant <codeph>child</codeph>, en coordonnées de données.
     </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>      Coordonnée y supérieure de l’enfant <codeph>child</codeph>, en coordonnées de données.
     </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>    Coordonnée x droite de l’enfant <codeph>child</codeph>, en coordonnées de données.
     </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>   Coordonnée y inférieure de l’enfant <codeph>child</codeph>, en coordonnées de données.
     </apiDesc></apiParam><apiParam><apiItemName>hCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>  Coordonnée x centrale de l’enfant <codeph>child</codeph>, en coordonnées de données.
     </apiDesc></apiParam><apiParam><apiItemName>vCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>  Coordonnée y centrale de l’enfant <codeph>child</codeph>, en coordonnées de données.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     Ajoute l’objet d’affichage spécifié au dessin actuel en tant qu’enfant.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:beginBitmapFill"><apiName>beginBitmapFill</apiName><shortdesc>
     Remplit une zone de tracé en utilisant une image bitmap.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bitmap</apiItemName><apiType value="flash.display:BitmapData"/><apiDesc>Image bitmap transparente ou opaque qui contient les bits à afficher. 
     
     </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>Coordonnée x du remplissage.
     
     </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>Coordonnée y du remplissage.
     
     </apiDesc></apiParam><apiParam><apiItemName>matrix</apiItemName><apiType value="flash.geom:Matrix"/><apiData>null</apiData><apiDesc>Objet matrix (appartenant à la classe flash.geom.Matrix), qui permet de définir les transformations de l’image bitmap.
     
     </apiDesc></apiParam><apiParam><apiItemName>repeat</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, l’image bitmap se reproduit pour former un motif. Si la valeur est <codeph>false</codeph>, l’image bitmap ne se répète pas et les bords de l’image sont utilisés pour tout remplissage qui dépasse l’image.
     
     </apiDesc></apiParam><apiParam><apiItemName>smooth</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Si la valeur est <codeph>false</codeph>, les images bitmap agrandies sont rendues en appliquant un algorithme d’approximation et ont un aspect pixélisé. Si la valeur est <codeph>true</codeph>, les images bitmap agrandies sont rendues avec un algorithme bilinéaire. Les rendus qui résultent de l’utilisation de l’algorithme d’approximation sont plus rapides. 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Remplit une zone de tracé en utilisant une image bitmap. Les coordonnées transmises à cette méthode sont exprimées par rapport aux axes horizontal et vertical du dessin.
     
     <p>Les paramètres et la syntaxe de cette méthode sont identiques à ceux de la méthode <codeph>beginBitmapFill()</codeph> de la classe flash.display.Graphics.</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/beginBitmapFill()"><linktext>flash.display.Graphics.beginBitmapFill()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:beginFill"><apiName>beginFill</apiName><shortdesc conref="flash.display.Graphics#beginFill()">
     Remarque : à l’exception des méthodes beginGradientFill() et beginShaderFill(), les informations suivantes de la méthode beginFill de la classe flash.display.Graphics s’appliquent à cette méthode :
      
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>color</apiItemName><apiType value="uint"/></apiParam><apiParam><apiItemName>alpha</apiItemName><apiType value="Number"/><apiData>1</apiData></apiParam></apiOperationDef><apiDesc conref="flash.display.Graphics#beginFill()">
     <i>Remarque : à l’exception des méthodes <codeph>beginGradientFill()</codeph> et <codeph>beginShaderFill()</codeph>, les informations suivantes de la méthode <codeph>beginFill()</codeph> de la classe <codeph>flash.display.Graphics </codeph> s’appliquent à cette méthode.</i>
      
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Graphics.xml"><linktext>flash.display.Graphics</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:clear"><apiName>clear</apiName><shortdesc conref="flash.display.Graphics#clear()">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="flash.display.Graphics#clear()">
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Graphics.xml"><linktext>flash.display.Graphics</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:curveTo"><apiName>curveTo</apiName><shortdesc>
     Trace une courbe entre la position actuelle et la position (anchorX, anchorY), en utilisant le style de trait actuel et le point de contrôle spécifié par les coordonnées (controlX, controlY).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controlX</apiItemName><apiType value="any"/><apiDesc>Coordonnée x du point de contrôle. 
     
     </apiDesc></apiParam><apiParam><apiItemName>controlY</apiItemName><apiType value="any"/><apiDesc>Coordonnée y du point de contrôle.
     
     </apiDesc></apiParam><apiParam><apiItemName>anchorX</apiItemName><apiType value="any"/><apiDesc>Coordonnée x du point d’ancrage. 
     
     </apiDesc></apiParam><apiParam><apiItemName>anchorY</apiItemName><apiType value="any"/><apiDesc>Coordonnée y du point d’ancrage.  
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Trace une courbe entre la position actuelle et la position (anchorX, anchorY), en utilisant le style de trait actuel et le point de contrôle spécifié par les coordonnées (controlX, controlY). Les coordonnées transmises à cette méthode sont exprimées en données de graphique et non en coordonnées d’écran.
     
     <p>Les paramètres et la syntaxe de cette méthode sont identiques à ceux de la méthode <codeph>curveTo()</codeph> de la classe flash.display.Graphics.</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/curveTo()"><linktext>flash.display.Graphics.curveTo()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:dataToLocal"><apiName>dataToLocal</apiName><shortdesc>
      
      
      Convertit un tuple de valeurs de données en coordonnée x-y à l’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Coordonnées relatives au graphique.
      
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>dataValues</apiItemName><apiType value="restParam"/><apiDesc>Valeurs de données à convertir en coordonnées.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      Convertit un tuple de valeurs de données en coordonnée x-y à l’écran. Appelez cette fonction pour transformer des données à l’écran en utilisant la même transformation que pour des éléments individuels. Par exemple, si vous souhaitez créer une surbrillance personnalisée pour une région de données d’un graphique, vous pouvez utiliser cette fonction pour déterminer les coordonnées à l’écran de la plage de valeurs à prendre en compte.
      
      <p>Pour les éléments de graphique Cartesian, deux valeurs sont en général transmises. La première valeur correspond à l’axe horizontal et la deuxième à l’axe vertical.</p>
      
      <p>Dans le cas de graphiques polaires, la première valeur correspond à l’axe angulaire et la deuxième à l’axe radial.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:describeData"><apiName>describeData</apiName><shortdesc>
     
      
      Appelée par la classe DataTransform gouvernante pour obtenir une description des données représentées par cet élément IChartElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Tableau contenant les occurrences DataDescription qui décrivent les données affichées.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>Détermine l’axe dont les descriptions des données doivent être obtenues.
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>Champ de bits indiquant quelles valeurs de l’objet DataDescription sont prises en compte par cet axe. Les implémenteurs peuvent optimiser le calcul en calculant uniquement les champs nécessaires.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      
      Appelée par la classe DataTransform gouvernante pour obtenir une description des données représentées par cet élément IChartElement. Les implémenteurs remplissent et renvoient un tableau d’objets mx.charts.chartClasses.DataDescription pour garantir que leurs données sont correctement prises en compte par les axes générant automatiquement les valeurs à partir des données affichées (par exemple minimum, maximum, interval et unitSize). La plupart des types d’éléments renvoient un tableau contenant une seule description DataDescription. Les agrégats tels que BarSet et ColumnSet peuvent renvoyer plusieurs occurrences DataDescription décrivant les données affichées par leurs sous-éléments. Lorsque cette méthode est appelée, l’implémenteur décrit les données le long de l’axe indiqué par l’argument <codeph>dimension</codeph>. Cette fonction peut être appelée pour chaque axe pris en charge par le graphique conteneur.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:drawCircle"><apiName>drawCircle</apiName><shortdesc>
     Dessine un cercle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="any"/><apiDesc>Emplacement x du centre du cercle (en pixels).  
     
     </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="any"/><apiDesc>Emplacement y du centre du cercle (en pixels). 
     
     </apiDesc></apiParam><apiParam><apiItemName>radius</apiItemName><apiType value="Number"/><apiDesc>Rayon du cercle (en pixels). 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Dessine un cercle. Vous devez définir le remplissage et/ou le style de ligne avant d’appeler la méthode <codeph>drawCircle()</codeph>, à l’aide de la méthode <codeph>linestyle()</codeph>, <codeph>lineGradientStyle()</codeph>, <codeph>beginFill()</codeph>, <codeph>beginGradientFill()</codeph> ou <codeph>beginBitmapFill()</codeph>. Les coordonnées transmises à cette méthode sont exprimées en données de graphique et non en coordonnées d’écran.
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Graphics.xml"><linktext>flash.display.Graphics</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:drawEllipse"><apiName>drawEllipse</apiName><shortdesc>
     Dessine une ellipse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>left</apiItemName><apiType value="any"/><apiDesc>Emplacement x de l’angle supérieur gauche du cadre de délimitation de l’ellipse.
     
     </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="any"/><apiDesc>Emplacement y de l’angle supérieur gauche du cadre de délimitation de l’ellipse.
     
     </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="any"/><apiDesc>Emplacement x de l’angle inférieur droit du cadre de délimitation de l’ellipse.
     
     </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="any"/><apiDesc>Emplacement y de l’angle inférieur droit du cadre de délimitation de l’ellipse.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Dessine une ellipse. Vous devez définir le remplissage et/ou le style de ligne avant d’appeler la méthode <codeph>drawEllipse()</codeph>, à l’aide de la méthode <codeph>linestyle()</codeph>, <codeph>lineGradientStyle()</codeph>, <codeph>beginFill()</codeph>, <codeph>beginGradientFill()</codeph> ou <codeph>beginBitmapFill()</codeph>. Les coordonnées transmises à cette méthode sont exprimées en données de graphique et non en coordonnées d’écran.
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/drawEllipse()"><linktext>flash.display.Graphics.drawEllipse()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:drawRect"><apiName>drawRect</apiName><shortdesc>
     Dessine un rectangle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>left</apiItemName><apiType value="any"/><apiDesc>Emplacement x de l’angle supérieur gauche du rectangle.
     
     </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="any"/><apiDesc>Emplacement y de l’angle supérieur gauche du rectangle.
     
     </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="any"/><apiDesc>Emplacement x de l’angle inférieur droit du rectangle.
     
     </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="any"/><apiDesc>Emplacement y de l’angle inférieur droit du rectangle.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Dessine un rectangle. Vous devez définir le remplissage et/ou le style de ligne avant d’appeler la méthode <codeph>drawRect()</codeph>, à l’aide de la méthode <codeph>linestyle()</codeph>, <codeph>lineGradientStyle()</codeph>, <codeph>beginFill()</codeph>, <codeph>beginGradientFill()</codeph> ou <codeph>beginBitmapFill()</codeph>. Les coordonnées transmises à cette méthode sont exprimées en données de graphique et non en coordonnées d’écran.
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/drawRect()"><linktext>flash.display.Graphics.drawRect()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:drawRoundedRect"><apiName>drawRoundedRect</apiName><shortdesc>
     Dessine un rectangle arrondi.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>left</apiItemName><apiType value="any"/><apiDesc>Emplacement x de l’angle supérieur gauche du rectangle.
     
     </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="any"/><apiDesc>Emplacement y de l’angle supérieur gauche du rectangle.
     
     </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="any"/><apiDesc>Emplacement x de l’angle inférieur droit du rectangle.
     
     </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="any"/><apiDesc>Emplacement y de l’angle inférieur droit du rectangle.
     
     </apiDesc></apiParam><apiParam><apiItemName>cornerRadius</apiItemName><apiType value="Number"/><apiDesc>Rayon des angles (en pixel).
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Dessine un rectangle arrondi. Vous devez définir le remplissage et/ou le style de ligne avant d’appeler la méthode <codeph>drawRoundRect()</codeph>, à l’aide de la méthode <codeph>linestyle()</codeph>, <codeph>lineGradientStyle()</codeph>, <codeph>beginFill()</codeph>, <codeph>beginGradientFill()</codeph> ou <codeph>beginBitmapFill()</codeph>. Les coordonnées transmises à cette méthode sont exprimées en données de graphique et non en coordonnées d’écran.
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/drawRoundRect()"><linktext>flash.display.Graphics.drawRoundRect()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:endFill"><apiName>endFill</apiName><shortdesc conref="flash.display.Graphics#endFill()"> 
     Remarque : à l’exception de la méthode beginGradientFill(), les informations suivantes de la méthode endFill() de la classe flash.display.Graphics s’appliquent à cette méthode :
     
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="flash.display.Graphics#endFill()"> 
     <i>Remarque : à l’exception de la méthode <codeph>beginGradientFill()</codeph>, les informations suivantes de la méthode <codeph>endFill()</codeph> de la classe <codeph>flash.display.Graphics</codeph> s’appliquent à cette méthode :</i>
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Graphics.xml"><linktext>flash.display.Graphics</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      Signale au dessin que les données sous-jacentes du fournisseur de données ont changé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc><codeph>true</codeph> si les données du fournisseur de données ont changé.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Signale au dessin que les données sous-jacentes du fournisseur de données ont changé. Cette méthode déclenchera l’appel des méthodes <codeph>updateMapping()</codeph> et <codeph>updateTransform()</codeph> lors du prochain appel de la méthode <codeph>commitProperties()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:lineStyle"><apiName>lineStyle</apiName><shortdesc>
     Spécifie un style de ligne que Flash utilisera lors des appels suivants d’autres méthodes Graphics (telles que lineTo() ou drawCircle()) associées à l’objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>thickness</apiItemName><apiType value="Number"/><apiDesc>Un entier qui indique l’épaisseur de la ligne en points ; les valeurs disponibles sont comprises entre 0 et 255. Si aucun nombre n’est spécifié, ou si le paramètre n’est pas défini, aucune ligne n’est dessinée. Si une valeur inférieure à 0 est transmise, la valeur par défaut est de 0. 0 correspond à l’épaisseur minimale et 255 à l’épaisseur maximale. Si la valeur transmise est supérieure à 255, la valeur par défaut est de 255. 
     
     </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>Valeur hexadécimale de la couleur de la ligne (par exemple, rouge correspond à 0xFF0000, bleu à 0x0000FF, etc.). Si aucune valeur n’est indiquée, la valeur par défaut correspond à 0x000000 (noir). 
     
     </apiDesc></apiParam><apiParam><apiItemName>alpha</apiItemName><apiType value="Number"/><apiData>1.0</apiData><apiDesc>Un nombre qui indique la valeur alpha de la couleur de la ligne. Les valeurs valides vont de 0 à 1. Si aucune valeur n’est indiquée, la valeur par défaut est de 1 (uni). Si la valeur est inférieure à 0, la valeur par défaut est de 0. Si la valeur est supérieure à 1, la valeur par défaut est de 1.
     
     </apiDesc></apiParam><apiParam><apiItemName>pixelHinting</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Valeur booléenne qui permet d’ajouter des indices supplémentaires de lissage des pixels. Cette valeur affecte à la fois la position des ancres de courbe et la taille du trait. Avec <codeph>pixelHinting</codeph> défini sur true, les largeurs de lignes sont réglées sur des largeurs de pixels entières. Si <codeph>pixelHinting</codeph> est défini sur false, les courbes et les lignes droites risquent de ne pas être continues.
     
     </apiDesc></apiParam><apiParam><apiItemName>scaleMode</apiItemName><apiType value="String"/><apiData>normal</apiData><apiDesc>Valeur de la classe flash.display.LineScaleMode qui spécifie le mode d’échelle à utiliser.
     
     <ul>
       <li>Propriété <codeph>LineScaleMode.NORMAL</codeph> : redimensionne toujours l’épaisseur du traitlorsque l’objet est redimensionné (valeur par défaut).</li>
       <li>Propriété <codeph>LineScaleMode.NONE</codeph> : ne redimensionne jamais l’épaisseur du trait.</li>
       <li>Propriété <codeph>LineScaleMode.VERTICAL</codeph> : n’ajuste pas l’épaisseur du trait si l’objet est redimensionné uniquement de manière verticale. </li>
       <li>Propriété <codeph>LineScaleMode.HORIZONTAL</codeph> : n’ajuste pas l’épaisseur du trait si l’objet est redimensionné uniquement de manière horizontale. </li>
     </ul>
     
     </apiDesc></apiParam><apiParam><apiItemName>caps</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Valeur de la classe flash.display.CapsStyle qui spécifie le type d’extrémité au bout des lignes. Les valeurs possibles sont les suivantes : <codeph>CapsStyle.NONE</codeph>, <codeph>CapsStyle.ROUND</codeph> et <codeph>CapsStyle.SQUARE</codeph>. En l’absence de valeur, utilisez des extrémités rondes. 
     
     </apiDesc></apiParam><apiParam><apiItemName>joints</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Valeur de la classe flash.display.JointStyle qui spécifie le type d’apparence de liaison utilisé dans les angles. Les valeurs possibles sont les suivantes : <codeph>JointStyle.BEVEL</codeph>, <codeph>JointStyle.MITER</codeph> et <codeph>JointStyle.ROUND</codeph>. En l’absence de valeurs, utilisez des extrémités rondes. 
     
     </apiDesc></apiParam><apiParam><apiItemName>miterLimit</apiItemName><apiType value="Number"/><apiData>3</apiData><apiDesc>Nombre qui indique la limite à laquelle une pointe est coupée. Les valeurs disponibles sont comprises entre 1 et 255 (et les valeurs qui excèdent cette plage sont arrondies à 1 ou 255). Cette valeur n’est utilisée que si jointStyle est défini sur « miter ». La valeur <codeph>miterLimit</codeph> représente la longueur maximale d’une pointe au-delà du point où les lignes se rencontrent pour former une liaison. La valeur exprime un facteur de l’épaisseur de la ligne. Par exemple, avec un facteur <codeph>miterLimit</codeph> de 2,5 et une valeur d’épaisseur de 10 pixels, la pointe est coupée à 25 pixels. 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Spécifie un style de trait que Flash utilisera lors des appels suivants d’autres méthodes Graphics (telles que <codeph>lineTo()</codeph> ou <codeph>drawCircle()</codeph>) associées à l’objet.
     
     <p>Les paramètres et la syntaxe de cette méthode sont identiques à ceux de la méthode <codeph>lineStyle()</codeph> de la classe flash.display.Graphics.</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/lineStyle()"><linktext>flash.display.Graphics.lineStyle()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:lineTo"><apiName>lineTo</apiName><shortdesc>
     Trace une ligne en utilisant le style de trait actuel à partir de la position de dessin actuelle jusqu’à (x, y) ; la position de dessin actuelle est ensuite définie sur (x, y).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="any"/><apiDesc>Coordonnée x de la position du dessin.
     
     </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="any"/><apiDesc>Coordonnée y de la position du dessin. 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Trace une ligne en utilisant le style de trait actuel à partir de la position de dessin actuelle jusqu’à (x, y) ; la position de dessin actuelle est ensuite définie sur (x, y). Si l’objet d’affichage dans lequel vous effectuez le traçage possède un contenu créé à l’aide des outils de dessin Flash, les appels de la méthode <codeph>lineTo()</codeph> sont tracés sous le contenu. Si vous appelez <codeph>lineTo()</codeph> avant d’appeler la méthode moveTo(), la position de dessin par défaut prend la valeur (0, 0). Si l’un des paramètres n’est pas spécifié, cette méthode échoue et la position de dessin actuelle n’est pas modifiée. Les coordonnées sont exprimées en données et non en coordonnées d’écran. Les coordonnées transmises à cette méthode sont exprimées en données de graphique et non en coordonnées d’écran.
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/lineTo()"><linktext>flash.display.Graphics.lineTo()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:localToData"><apiName>localToData</apiName><shortdesc>
      
      
      Convertit une coordonnée à l’écran en un tuple de valeurs de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Tuple de valeurs de données.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>v</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Point à convertir.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      Convertit une coordonnée à l’écran en un tuple de valeurs de données. Appelez cette fonction pour déterminer quelles sont les valeurs de données représentées par un point précis à l’écran.
      <p>Les différents types de graphiques déterminent la manière dont cette transformation est réalisée. Le point doit être relatif à l’espace de coordonnées du graphique.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:mappingChanged"><apiName>mappingChanged</apiName><shortdesc>
     
      Appelée lorsque le mappage d’un ou de plusieurs axes change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     
      Appelée lorsque le mappage d’un ou de plusieurs axes change. L’objet DataTransform affecté à cet objet ChartElement appelle cette méthode dès qu’un des axes qu’il représente est modifié.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:moveTo"><apiName>moveTo</apiName><shortdesc>
     Déplace la position de dessin actuelle vers (x, y).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="any"/><apiDesc>Coordonnée x de la position du dessin.
     
     </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="any"/><apiDesc>Coordonnée y de la position du dessin. 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Déplace la position de dessin actuelle vers (x, y). Si l’un des paramètres n’est pas spécifié, cette méthode échoue et la position de dessin actuelle n’est pas modifiée. Les coordonnées transmises à cette méthode sont exprimées en données de graphique et non en coordonnées d’écran.
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/moveTo()"><linktext>flash.display.Graphics.moveTo()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:removeAllChildren"><apiName>removeAllChildren</apiName><shortdesc>
     Supprime tous les enfants de données (occurrences DisplayObject) du dessin.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     Supprime tous les enfants de données (occurrences DisplayObject) du dessin.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:removeChildAt"><apiName>removeChildAt</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:removeChild"><apiName>removeChild</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:protected:stripNaNs"><apiName>stripNaNs</apiName><shortdesc>
      Supprime les éléments du cache indiqué dont la valeur de la propriété field est NaN.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Un tableau d'objets 
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>Propriété <codeph>field</codeph> à tester.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime les éléments du cache indiqué dont la valeur de la propriété <codeph>field</codeph> est <codeph>NaN</codeph>. Les classes dérivées peuvent appeler cette méthode à partir de leur implémentation de la méthode updateFilter() pour supprimer les objets ChartItem qui ont été filtrés par les axes.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:updateDataChild"><apiName>updateDataChild</apiName><shortdesc>
     Met à jour la position d’un enfant en fonction du dessin actuel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>    Objet d’affichage à mettre à jour.
     </apiDesc></apiParam><apiParam><apiItemName>left</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>     Coordonnée x gauche de l’enfant, en coordonnées de données.
     </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>      Coordonnée y supérieure de l’enfant, en coordonnées de données.
     </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>    Coordonnée x droite de l’enfant, en coordonnées de données.
     </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>   Coordonnée y inférieure de l’enfant, en coordonnées de données.
     </apiDesc></apiParam><apiParam><apiItemName>hCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>  Coordonnée x centrale de l’enfant, en coordonnées de données.
     </apiDesc></apiParam><apiParam><apiItemName>vCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>  Coordonnée y centrale de l’enfant, en coordonnées de données.
     
     <p>Par exemple :
     <pre>
          var lbl:Label = new Label();
          lbl.text = "Last Month";
          canvas.addChild(lbl);
          canvas.updateDataChild(lbl,"Feb",200);
     </pre>
     </p>
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     Met à jour la position d’un enfant en fonction du dessin actuel.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:protected:updateFilter"><apiName>updateFilter</apiName><shortdesc>
      Appelée lorsque les données sous-jacentes représentées par le dessin doivent être filtrées par rapport aux plages de valeurs représentées par les axes de la transformation de données associée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Appelée lorsque les données sous-jacentes représentées par le dessin doivent être filtrées par rapport aux plages de valeurs représentées par les axes de la transformation de données associée. Cette situation peut se produire lorsque les données sous-jacentes ont été modifiées ou lorsque la plage de valeurs des axes associés a changé. Si vous implémentez un type de dessin personnalisé, vous devez remplacer cette méthode et filtrer les données hors plage en utilisant la méthode <codeph>filterCache()</codeph> des axes gérés par la transformation de données associée. La méthode <codeph>filterCache()</codeph> convertit les valeurs hors plage en valeurs <codeph>NaN</codeph>. Vous devez également appeler la méthode <codeph>super.updateFilter()</codeph> dans la sous-classe. En règle générale, vous ne devez pas appeler cette méthode directement. En revanche, si vous souhaitez garantir que les données ont été filtrées à tel ou tel endroit, appelez la méthode <codeph>validateTransform()</codeph> de la classe CartesianDataCanvas. En général, vous pouvez supposer que les méthodes <codeph>updateData()</codeph> et <codeph>updateMapping()</codeph> ont été appelées avant cette méthode, si nécessaire.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:protected:validateData"><apiName>validateData</apiName><shortdesc>
      Appelle les méthodes updateMapping() et updateFilter() du dessin lorsque cela est nécessaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Appelle les méthodes <codeph>updateMapping()</codeph> et <codeph>updateFilter()</codeph> du dessin lorsque cela est nécessaire. Cette méthode est appelée automatiquement par le dessin à partir de la méthode <codeph>commitProperties()</codeph>, si nécessaire, mais un dessin dérivé peut l’appeler explicitement à une heure explicite si les valeurs générées sont nécessaires. Les opérations de chargement et de mappage des données sur les axes sont conçues pour être acceptées par les axes à tout moment. Vous pouvez appeler cette méthode explicitement en toute sécurité, à tout moment.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:protected:validateTransform"><apiName>validateTransform</apiName><shortdesc>
      Appelle la méthode updateTransform() du dessin lorsque cela est nécessaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Renvoie <codeph>true</codeph> si <codeph>updateTransform()</codeph> a été appelée. Sinon, la valeur <codeph>false</codeph> est renvoyée.
     
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Appelle la méthode <codeph>updateTransform()</codeph> du dessin lorsque cela est nécessaire. Cette méthode est appelée automatiquement par le dessin au cours de la méthode <codeph>commitProperties()</codeph>, si nécessaire, mais un dessin dérivé peut l’appeler explicitement à une heure explicite si les valeurs générées sont nécessaires. Les opérations de filtrage et de transformation des données s’appuient sur des valeurs spécifiques calculées par les axes, qui dépendent quant à elles des données affichées dans le graphique. Le fait d’appeler cette fonction au mauvais moment peut entraîner l’exécution d’opérations supplémentaires lorsque ces valeurs sont mises à jour.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:CartesianDataCanvas:dataChildren:get"><apiName>dataChildren</apiName><shortdesc>
     Tableau d’objets enfant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
     Tableau d’objets enfant.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianDataCanvas:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe X. Utilisez la classe LinearAxis ou CategoryAxis pour définir les propriétés de l’axe horizontal en tant que balise enfant en langage MXML, ou pour créer un objet LinearAxis ou CategoryAxis en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianDataCanvas:includeInRanges:get"><apiName>includeInRanges</apiName><shortdesc>
     Si la valeur est true, la plage de valeurs calculée du graphique est affectée par ce dessin.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     Si la valeur est <codeph>true</codeph>, la plage de valeurs calculée du graphique est affectée par ce dessin.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianDataCanvas:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe Y. Utilisez la classe LinearAxis ou CategoryAxis pour définir les propriétés de l’axe vertical en tant que balise enfant en langage MXML, ou pour créer un objet LinearAxis ou CategoryAxis en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianDataCanvas:dataTransform:set"><apiName>dataTransform</apiName><shortdesc>
      
      Objet DataTransform auquel l’élément est associé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:DataTransform</apiValueClassifier></apiValueDef><apiDesc>
      
      Objet DataTransform auquel l’élément est associé. Un objet DataTransform représente une association entre un ensemble d’éléments et un ensemble d’objets d’axe, utilisée pour convertir ces éléments d’espace de données en coordonnées d’écran et vice-versa. Un élément de graphique utilise l’objet DataTransform qui lui est associé pour calculer comment rendre ses données.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:IAxis"><apiName>IAxis</apiName><shortdesc>
  La classe IAxis est une interface abstraite permettant de définir les propriétés de libellé, de graduation et de positionnement de données d’un axe de graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  La classe IAxis est une interface abstraite permettant de définir les propriétés de libellé, de graduation et de positionnement de données d’un axe de graphique.
 
  <p>Les classes implémentent cette interface pour fournir des fonctionnalités de définition de plage de valeurs.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#CategoryAxis"><linktext>mx.charts.CategoryAxis</linktext></link><link href="mx.charts.xml#LinearAxis"><linktext>mx.charts.LinearAxis</linktext></link></related-links><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:dataChanged"><apiName>dataChanged</apiName><shortdesc> 
      Déclenche des événements qui signalent à l’objet de plage de valeurs que les données du graphique ont changé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
      Déclenche des événements qui signalent à l’objet de plage de valeurs que les données du graphique ont changé.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:filterCache"><apiName>filterCache</apiName><shortdesc>
      Filtre un ensemble de valeurs de type arbitraire pour produire un ensemble de nombres qui peuvent être mappés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’objets à partir duquel les valeurs converties sont lues et dans lequel elles sont stockées.
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>Champ des objets du tableau de cache qui contient les valeurs préfiltrées.
     
      </apiDesc></apiParam><apiParam><apiItemName>filteredString</apiItemName><apiType value="String"/><apiDesc>Champ des objets du tableau de cache dans lequel les valeurs filtrées doivent être stockées.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Filtre un ensemble de valeurs de type arbitraire pour produire un ensemble de nombres qui peuvent être mappés.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:formatForScreen"><apiName>formatForScreen</apiName><shortdesc>
      Formate les valeurs pour les afficher dans des objets DataTip.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Texte de l’objet DataTip.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Valeur à convertir en chaîne. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Formate les valeurs pour les afficher dans des objets DataTip. Renvoie une chaîne lisible par l’utilisateur.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:getLabelEstimate"><apiName>getLabelEstimate</apiName><shortdesc>
      Détermine la plage de valeurs permettant d’estimer les libellés d’axe appropriés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tableau d’objets AxisLabel.
      
      </apiDesc><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Détermine la plage de valeurs permettant d’estimer les libellés d’axe appropriés. L’axe appelle presque immédiatement la méthode <codeph>getLabels()</codeph> pour obtenir les valeurs réelles. L’axe utilise les valeurs estimées pour ajuster les marges du graphique. Par conséquent, si les libellés estimés et les libellés réels (renvoyés par la méthode <codeph>getLabels()</codeph>) diffèrent, les libellés sont mis à l’échelle pour que leur taille soit adaptée au graphique.
     
      <p>Pour renvoyer une estimation, un axe a besoin uniquement des libellés minimal et maximal. Si l’ensemble de libellés est relativement statique et ne dépend pas de la taille des axes rendus à l’écran, un axe peut renvoyer l’intégralité de l’ensemble de libellés à partir de cette fonction et marquer l’estimation comme étant exacte.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:getLabels"><apiName>getLabels</apiName><shortdesc>
      Obtient le texte des libellés rendus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tableau d’objets AxisLabel.
      
      </apiDesc><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier></apiReturn><apiParam><apiItemName>minimumAxisLength</apiItemName><apiType value="Number"/><apiDesc>Longeur minimale de l’axe, en pixels. L’axe peut être plus court que cette valeur, mais pas plus long.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Obtient le texte des libellés rendus. Lorsque Flex appelle cette méthode, l’axe a déjà déterminé la longueur minimale du libellé.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:invertTransform"><apiName>invertTransform</apiName><shortdesc>
      Mappe une position le long de l’axe à une valeur de données numérique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet contenant la valeur transformée.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Limite de l’axe. La valeur de ce paramètre doit être comprise entre 0 et 1, 0 représentant la limite minimale de l’axe et 1 sa limite maximale.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Mappe une position le long de l’axe à une valeur de données numérique.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:mapCache"><apiName>mapCache</apiName><shortdesc>
      Convertit un ensemble de valeurs de type arbitraire en un ensemble de nombres qui peuvent être transformés en coordonnées d’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’objets à partir duquel les valeurs converties sont lues et dans lequel elles sont stockées.
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>Champ des objets du tableau de cache qui contient les valeurs préconverties.
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>Champ des objets du tableau de cache dans lequel les valeurs converties doivent être stockées.
     
      </apiDesc></apiParam><apiParam><apiItemName>indexValues</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>La valeur de ce paramètre est <codeph>true</codeph> si les valeurs mappées sont des valeurs d’index et <codeph>false</codeph> s’il s’agit de valeurs de données naturelles.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Convertit un ensemble de valeurs de type arbitraire en un ensemble de nombres qui peuvent être transformés en coordonnées d’écran.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:preferDropLabels"><apiName>preferDropLabels</apiName><shortdesc> 
      Détermine la manière dont l’axe traite les libellés qui se chevauchent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si les libellés peuvent être omis sans perte de données, <codeph>false</codeph> dans le cas contraire. 
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> 
      Détermine la manière dont l’axe traite les libellés qui se chevauchent. En général, les plages de valeurs numériques renvoient <codeph>true</codeph>, au contraire des plages de valeurs distinctes. Vous pouvez remplacer cette propriété en la définissant directement sur l’axe.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:reduceLabels"><apiName>reduceLabels</apiName><shortdesc>
      Appelée lorsqu’un objet AxisRenderer est incapable de rendre correctement les libellés sans chevauchement et qu’il souhaite que l’objet Axis réduise l’ensemble de libellés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Nouvel ensemble de libellés résolvant le chevauchement en réduisant le nombre de libellés.
      
      </apiDesc><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier></apiReturn><apiParam><apiItemName>intervalStart</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>Début de l’intervalle de chevauchement des libellés.
     
      </apiDesc></apiParam><apiParam><apiItemName>intervalEnd</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>Fin de l’intervalle de chevauchement des libellés.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée lorsqu’un objet AxisRenderer est incapable de rendre correctement les libellés sans chevauchement et qu’il souhaite que l’objet Axis réduise l’ensemble de libellés. Les deux libellés qui se chevauchent sont transmis à la méthode.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:registerDataTransform"><apiName>registerDataTransform</apiName><shortdesc>
      Chaque transformation DataTransform qui utilise un axe s’enregistre auprès de cet axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transform</apiItemName><apiOperationClassifier>mx.charts.chartClasses:DataTransform</apiOperationClassifier><apiDesc>Transformation DataTransform à enregistrer.
     
      </apiDesc></apiParam><apiParam><apiItemName>dimensionName</apiItemName><apiType value="String"/><apiDesc>Nom de la dimension.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Chaque transformation DataTransform qui utilise un axe s’enregistre auprès de cet axe. L’axe est chargé d’informer la transformation lorsque ses valeurs pertinentes changent. Il doit également obtenir les valeurs auprès de la transformation lorsqu’il souhaite générer automatiquement des valeurs minimale et maximale.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:transformCache"><apiName>transformCache</apiName><shortdesc>
      Mappe à l’espace d’écran un ensemble de valeurs issues de l’espace de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’objets à partir duquel les valeurs mappées sont lues et dans lequel elles sont stockées.
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>Champ des objets du tableau de cache qui contient les valeurs prémappées.
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>Champ des objets du tableau de cache dans lequel les valeurs mappées doivent être stockées.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Mappe à l’espace d’écran un ensemble de valeurs issues de l’espace de données.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:unregisterDataTransform"><apiName>unregisterDataTransform</apiName><shortdesc>
      Chaque transformation DataTransform qui utilise un axe s’enregistre auprès de cet axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transform</apiItemName><apiOperationClassifier>mx.charts.chartClasses:DataTransform</apiOperationClassifier><apiDesc>Transformation DataTransform à désenregistrer.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Chaque transformation DataTransform qui utilise un axe s’enregistre auprès de cet axe. L’axe est chargé d’informer la transformation lorsque ses valeurs pertinentes changent. Il doit également obtenir les valeurs auprès de la transformation lorsqu’il souhaite générer automatiquement des valeurs minimale et maximale.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:update"><apiName>update</apiName><shortdesc>
      Met à jour le graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Met à jour le graphique. Cette méthode peut être appelée plusieurs fois par image. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:baseline:get"><apiName>baseline</apiName><shortdesc>
      Position de la ligne de base de l’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Position de la ligne de base de l’axe. Certaines séries telles que ColumnSeries ou AreaSeries utilisent cette valeur pour définir la base d’une région remplie lorsqu’aucune valeur minimale n’est spécifiée.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:displayName:get"><apiName>displayName</apiName><shortdesc> 
      Nom de l’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc> 
      Nom de l’axe. Si cette valeur est définie, Flex utilise ce nom pour formater des contrôles DataTip.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:title:get"><apiName>title</apiName><shortdesc>
      Texte du titre affiché le long de l’axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Texte du titre affiché le long de l’axe.  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:unitSize:get"><apiName>unitSize</apiName><shortdesc>
      Taille d’une unité de données représentée par cet axe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Taille d’une unité de données représentée par cet axe. Cette valeur est utilisée par différents types de séries pour faciliter le rendu. La classe ColumnSeries, par exemple, utilise cette valeur pour déterminer la largeur de rendu des colonnes. Les différents types d’axes renvoient des valeurs différentes, qui dépendent parfois des données représentées. La classe DateTimeAxis, par exemple, peut renvoyer le nombre de millisecondes écoulées en un jour ou une année, en fonction des données rendues dans le graphique. Cette valeur dépendant de la collecte des données représentées, les séries personnalisées ne peuvent pas supposer que cette valeur est exacte dans leurs méthodes <codeph>updateData()</codeph> ou <codeph>updateMapping()</codeph>. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:chartDataProvider:set"><apiName>chartDataProvider</apiName><shortdesc>
      Fournisseur de données affecté au graphique conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Object"/></apiValueDef><apiDesc>
      Fournisseur de données affecté au graphique conteneur. Les types d’axes basés sur un fournisseur de données peuvent choisir d’hériter ou non du fournisseur de données associé au graphique conteneur. Si un axe est commun à plusieurs graphiques, la valeur de cette propriété est <codeph>undefined</codeph> (il s’agit la plupart du temps du dernier fournisseur de données affecté à l’un des graphiques associés).
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:PolarChart"><apiName>PolarChart</apiName><shortdesc>
  Le contrôle PolarChart sert de classe de base pour les graphiques circulaires utilisant des coordonnées polaires.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:ChartBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle PolarChart sert de classe de base pour les graphiques circulaires utilisant des coordonnées polaires.
  
  <p>La taille minimale d’un graphique est de 20,20 pixels. </p>
  <p>La taille maximale d’un graphique n’a pas de limite. </p>
  <p>La taille recommandée d’un graphique est de 400,400 pixels. </p>
  
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#CategoryAxis"><linktext>mx.charts.CategoryAxis</linktext></link><link href="mx.charts.xml#LinearAxis"><linktext>mx.charts.LinearAxis</linktext></link><link href="mx.charts.chartClasses.xml#ChartBase"><linktext>mx.charts.chartClasses.ChartBase</linktext></link></related-links><apiConstructor id="mx.charts.chartClasses:PolarChart:PolarChart"><apiName>PolarChart</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:PolarChart:getFirstItem"><apiName>getFirstItem</apiName><shortdesc>
      
      Obtient le premier élément du graphique, en fonction des axes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Objet ChartItem correspondant.
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>Direction dans laquelle le premier élément doit être renvoyé. Valeurs possibles : <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> et <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Obtient le premier élément du graphique, en fonction des axes.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarChart:getLastItem"><apiName>getLastItem</apiName><shortdesc>
      
      Obtient le dernier élément du graphique, en fonction des axes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Objet ChartItem correspondant.
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>Direction dans laquelle le dernier élément doit être renvoyé. Valeurs possibles : <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> et <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Obtient le dernier élément du graphique, en fonction des axes.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarChart:getNextItem"><apiName>getNextItem</apiName><shortdesc>
      
      Obtient l’élément de graphique qui suit l’élément qui a le focus dans le graphique, en fonction des axes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Objet ChartItem correspondant.
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>Direction dans laquelle l’élément suivant doit être renvoyé. Valeurs possibles : <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> et <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Obtient l’élément de graphique qui suit l’élément qui a le focus dans le graphique, en fonction des axes. Si aucun élément de graphique n’est actuellement sélectionné, cette méthode renvoie le premier élément de la première série.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarChart:getPreviousItem"><apiName>getPreviousItem</apiName><shortdesc>
      
      Obtient l’élément de graphique qui précède l’élément qui a le focus dans le graphique, en fonction des axes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Objet ChartItem correspondant.
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>Direction dans laquelle l’élément précédent doit être renvoyé. Valeurs possibles : <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> et <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Obtient l’élément de graphique qui précède l’élément qui a le focus dans le graphique, en fonction des axes. Si aucun élément de graphique n’est actuellement sélectionné, cette méthode renvoie le premier élément de la première série.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarChart:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="mx.charts.chartClasses:PolarChart:angularAxis:get"><apiName>angularAxis</apiName><shortdesc>
      Objet d’axe utilisé pour mapper des valeurs de données à un angle compris entre 0 et 2 PI.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Objet d’axe utilisé pour mapper des valeurs de données à un angle compris entre 0 et 2 PI. Par défaut, il s’agit d’un axe linéaire dont la propriété <codeph>autoAdjust</codeph> est définie sur <codeph>false</codeph>. Par conséquent, les valeurs des données sont mappées de façon uniforme autour du graphique.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarChart:protected:dataRegion:get"><apiName>dataRegion</apiName><shortdesc>
      
      Zone du graphique utilisée pour afficher des données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      
      Zone du graphique utilisée pour afficher des données. Ce rectangle n’inclut pas les zones utilisées pour les gouttières, les lignes d’axe, les libellés et la marge.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarChart:radialAxis:get"><apiName>radialAxis</apiName><shortdesc>
      Objet d’axe utilisé pour mapper les valeurs de données à une distance radiale entre le centre et le bord extérieur du graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Objet d’axe utilisé pour mapper les valeurs de données à une distance radiale entre le centre et le bord extérieur du graphique. Par défaut, il s’agit d’un axe linéaire dont la propriété <codeph>autoAdjust</codeph> est définie sur <codeph>false</codeph>. Par conséquent, les valeurs de données sont mappées uniformément de l’intérieur vers l’extérieur du graphique. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:CartesianChart"><apiName>CartesianChart</apiName><shortdesc>
  La classe CartesianChart est une classe de base pour les types de graphiques courants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style arrayType="String" inherit="no" name="verticalAxisStyleNames" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Array">
<description>
  Tableau de sélecteurs de classe définissant les propriétés de style des axes verticaux.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="String" inherit="no" name="horizontalAxisStyleNames" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Array">
<description>
  Tableau de sélecteurs de classe définissant les propriétés de style des axes horizontaux.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="gutterTop" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  Taille de la région située entre le haut de la zone de données du graphique et le haut du contrôle de graphique, en pixels.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="gutterRight" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  Taille de la région située entre le côté droit de la zone de données du graphique et l’extérieur du contrôle de graphique, en pixels.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="gutterLeft" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  Taille de la région située entre le côté gauche de la zone de données du graphique et le côté gauche du contrôle de graphique, en pixels.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="gutterBottom" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  Taille de la région située entre le bas de la zone de données du graphique et le bas du contrôle de graphique, en pixels.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="gridLinesStyleName" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  Sélecteur de classe définissant les propriétés de style des lignes de la grille par défaut. Si vous définissez explicitement la propriété <codeph>backgroundElements</codeph> du graphique, cette valeur est ignorée.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="axisTitleStyleName" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  Nom du sélecteur de classe CSS à utiliser pour le formatage des titres des axes.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur (en pixels).
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut pour la plupart des contrôles est <codeph>left</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Pour ces composants, cette propriété est reconnue uniquement lorsque la valeur de la propriété <codeph>labelPlacement</codeph> est <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est pris en charge uniquement pour les polices FlashType incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en gras. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"bold"</codeph>. Pour LegendItem, la valeur par défaut est <codeph>"bold"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. La valeur par défaut est 10 pour tous les contrôles, à l’exception de ColorPicker. Pour le contrôle ColorPicker, la valeur par défaut est 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété est prise en compte uniquement si vous utilisez une police FlashType incorporée et que la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>. Cette valeur active la fonctionnalité de rendu FlashType si vous utilisez une police incorporée FlashType. Définissez cette propriété sur <codeph>"normal"</codeph> pour désactiver la fonctionnalité de rendu FlashType.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="uint">
<description>
  Couleur du texte du composant, libellé du composant inclus.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:CartesianChart&gt;</code> tag inherits all the
  properties of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:CartesianChart
    <strong>Properties</strong>
    computedGutters="<i>No default</i>"
    dataRegion="<i>Rectangle; no default</i>"
    horizontalAxis="<i>Axis; no default</i>"
    horizontalAxisRatio=".33"
    horizontalAxisRenderers="<i>Array; no default</i>"
    selectedChartItems="<i>Array; no default</i>"
    verticalAxis="<i>Axis; no default</i>"
    verticalAxisRatio=".33"
    verticalAxisRenderers="<i>Array; no default</i>"
   
    <strong>Styles</strong>  
    axisTitleStyleName="<i>Style; no default</i>"
    gridLinesStyleName="<i>Style; no default</i>"
    gutterBottom="<i>No default</i>"
    gutterLeft="<i>No default</i>"
    gutterRight="<i>No default</i>"
    gutterTop="<i>No default</i>"
    horizontalAxisStyleNames=<i>Array; no default</i>"
    verticalAxisStyleNames = <i>Array; no default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:ChartBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe CartesianChart est une classe de base pour les types de graphiques courants. La classe CartesianChart définit le comportement de mise en forme par défaut des graphiques standard rectangulaires à deux dimensions.
   </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#CategoryAxis"><linktext>mx.charts.CategoryAxis</linktext></link><link href="mx.charts.xml#LinearAxis"><linktext>mx.charts.LinearAxis</linktext></link><link href="mx.charts.chartClasses.xml#ChartBase"><linktext>mx.charts.chartClasses.ChartBase</linktext></link></related-links><apiConstructor id="mx.charts.chartClasses:CartesianChart:CartesianChart"><apiName>CartesianChart</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:CartesianChart:getFirstItem"><apiName>getFirstItem</apiName><shortdesc>
      
      Obtient le premier élément du graphique, en fonction des axes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Objet ChartItem correspondant.
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>Direction dans laquelle le premier élément doit être renvoyé. Valeurs possibles : <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> et <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Obtient le premier élément du graphique, en fonction des axes.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianChart:getLastItem"><apiName>getLastItem</apiName><shortdesc>
      
      Obtient le dernier élément du graphique, en fonction des axes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Objet ChartItem correspondant.
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>Direction dans laquelle le dernier élément doit être renvoyé. Valeurs possibles : <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> et <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Obtient le dernier élément du graphique, en fonction des axes.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianChart:getNextItem"><apiName>getNextItem</apiName><shortdesc>
      
      Obtient l’élément de graphique qui suit l’élément qui a le focus dans le graphique, en fonction des axes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Objet ChartItem correspondant.
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>Direction dans laquelle l’élément suivant doit être renvoyé. Valeurs possibles : <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> et <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Obtient l’élément de graphique qui suit l’élément qui a le focus dans le graphique, en fonction des axes. Si aucun élément de graphique n’est actuellement sélectionné, cette méthode renvoie le premier élément de la première série.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianChart:getPreviousItem"><apiName>getPreviousItem</apiName><shortdesc>
      
      Obtient l’élément de graphique qui précède l’élément qui a le focus dans le graphique, en fonction des axes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Objet ChartItem correspondant.
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>Direction dans laquelle l’élément précédent doit être renvoyé. Valeurs possibles : <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> et <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Obtient l’élément de graphique qui précède l’élément qui a le focus dans le graphique, en fonction des axes. Si aucun élément de graphique n’est actuellement sélectionné, cette méthode renvoie le premier élément de la première série.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianChart:styleChanged"><apiName>styleChanged</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianChart:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="mx.charts.chartClasses:CartesianChart:horizontalAxisRatio"><apiName>horizontalAxisRatio</apiName><shortdesc>
      Détermine la limite de hauteur de l’axe horizontal.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0.33</apiData><apiType value="Number"/><apiDefaultValue>0.33.
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Détermine la limite de hauteur de l’axe horizontal. La limite correspond au produit de la largeur des axes et de ce rapport.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:verticalAxisRatio"><apiName>verticalAxisRatio</apiName><shortdesc>
      Détermine la limite de largeur de l’axe vertical.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0.33</apiData><apiType value="Number"/><apiDefaultValue>0.33.
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Détermine la limite de largeur de l’axe vertical. La limite correspond au produit de la largeur des axes et de ce rapport.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:computedGutters:get"><apiName>computedGutters</apiName><shortdesc>
      Taille actuelle calculée des gouttières de l’objet CartesianChart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      Taille actuelle calculée des gouttières de l’objet CartesianChart. Les gouttières représentent la zone qui se trouve entre la marge et la zone de données du graphique, où les titres et les axes sont rendus. Par défaut, les gouttières sont calculées de manière dynamique. Vous pouvez définir des valeurs explicites par le biais des styles de gouttière. Les gouttières sont calculées de manière à s’adapter aux modifications du graphique lors de la validation par la classe LayoutManager.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:protected:dataRegion:get"><apiName>dataRegion</apiName><shortdesc>
      
      Zone du graphique utilisée pour afficher des données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      
      Zone du graphique utilisée pour afficher des données. Ce rectangle n’inclut pas les zones utilisées pour les gouttières, les lignes d’axe, les libellés et la marge.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:horizontalAxisRenderers:get"><apiName>horizontalAxisRenderers</apiName><shortdesc>
      Spécifie la manière dont les données sont affichées le long de l’axe x d’un graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Spécifie la manière dont les données sont affichées le long de l’axe x d’un graphique. Utilisez la classe AxisRenderer pour définir les propriétés de horizontalAxisRenderer en tant que balise enfant en langage MXML, ou pour créer un objet AxisRenderer en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe X. Utilisez la classe LinearAxis ou CategoryAxis pour définir les propriétés de l’objet horizontalAxis en tant que balise enfant en langage MXML, ou pour créer un objet LinearAxis ou CategoryAxis en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:selectedChartItems:get"><apiName>selectedChartItems</apiName><shortdesc>
      Tableau contenant les objets ChartItem sélectionnés dans le graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau contenant les objets ChartItem sélectionnés dans le graphique. Il contient les objets ChartItem sélectionnés de toutes les séries du graphique.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:verticalAxisRenderers:get"><apiName>verticalAxisRenderers</apiName><shortdesc>
      Spécifie la manière dont les données sont affichées le long de l’axe y d’un graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Spécifie la manière dont les données sont affichées le long de l’axe y d’un graphique. Utilisez la classe AxisRenderer pour définir les propriétés de verticalAxisRenderer en tant que balise enfant en langage MXML, ou pour créer un objet AxisRenderer en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Définit les libellés, les graduations et la position des données des éléments de l’axe Y. Utilisez la classe LinearAxis ou CategoryAxis pour définir les propriétés de l’axe horizontal en tant que balise enfant en langage MXML, ou pour créer un objet LinearAxis ou CategoryAxis en langage ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:Series"><apiName>Series</apiName><shortdesc>
  La classe Series est la classe de base des classes qui permettent de spécifier la série de données d’un contrôle de graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><effects><effect event="showData" name="showDataEffect" owner="mx.charts.chartClasses:Series">
<description>
  Définit l’effet utilisé par Flex lors du déplacement des données actuelles vers leur position finale à l’écran.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="hideData" name="hideDataEffect" owner="mx.charts.chartClasses:Series">
<description>
  Définit l’effet utilisé par Flex lorsque les données actuelles sont masquées dans la vue.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect></effects></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:ChartElement</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe Series est la classe de base des classes qui permettent de spécifier la série de données d’un contrôle de graphique. Utilisez les sous-classes de la classe Series avec le contrôle de graphique associé. Vous pouvez utiliser une classe Series pour spécifier le motif de remplissage et les caractéristiques de trait des éléments de graphique associés à la série de données. 
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:Series:Series"><apiName>Series</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:Series:beginInterpolation"><apiName>beginInterpolation</apiName><shortdesc>
      Appelée par l’effet SeriesInterpolate pour initier un effet d’interpolation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Données dont la série a besoin pour réaliser l’interpolation.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>sourceRenderData</apiItemName><apiType value="Object"/><apiDesc>Données source entre lesquelles la série doit réaliser l’interpolation.
     
      </apiDesc></apiParam><apiParam><apiItemName>destRenderData</apiItemName><apiType value="Object"/><apiDesc>Données de destination entre lesquelles la série doit réaliser l’interpolation.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée par l’effet SeriesInterpolate pour initier un effet d’interpolation. L’effet transmet les données source et les données de destination pour que la série puisse réaliser une interpolation entre ces données. L’effet transmet la valeur de retour de cette méthode de façon répétée à la méthode <codeph>interpolate()</codeph> de la série pour réaliser l’animation pendant toute la durée de l’effet. La série calcule les données nécessaires pour réaliser l’interpolation et les renvoie dans cette méthode.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:cacheDefaultValues"><apiName>cacheDefaultValues</apiName><shortdesc>
      Met en cache les valeurs stockées dans la propriété measureName issue des éléments dataProvider d’origine dans la propriété fieldName de l’élément de graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc><codeph>false</codeph> si la valeur de la propriété <codeph>measureName</codeph> est null ou une chaîne vide, <codeph>true</codeph> dans le cas contraire.     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>measureName</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété d’élément de graphique dont la valeur doit être définie par une valeur issue du fournisseur dataProvider, en fonction de la propriété <codeph>fieldName</codeph>. Par exemple, la valeur de <codeph>measureName</codeph> peut être xValue, yValue, xNumber, yNumber, etc., à condition qu’il s’agisse de propriétés de l’élément de graphique.
      
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’éléments de graphique.
      
      </apiDesc></apiParam><apiParam><apiItemName>fieldName</apiItemName><apiType value="String"/><apiDesc>Libellé (dans l’élément du fournisseur de données) dont la valeur doit être utilisée pour définir la propriété <codeph>measureName</codeph> de l’élément de graphique. Par exemple, si le fournisseur de données contient un élément tel que <codeph>{Pays:"France", médailles:10}</codeph>, la valeur de <codeph>fieldName</codeph> peut être « Pays » ou « médailles ».
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Met en cache les valeurs stockées dans la propriété <codeph>measureName</codeph> issue des éléments dataProvider d’origine dans la propriété <codeph>fieldName</codeph> de l’élément de graphique. Si la valeur de la propriété <codeph>measureName</codeph> est <codeph>null</codeph> ou une chaîne vide, cette méthode suppose que les éléments du fournisseur de données d’origine sont des valeurs brutes et les met en cache. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:cacheIndexValues"><apiName>cacheIndexValues</apiName><shortdesc>
      Met en cache les valeurs stockées dans la propriété measureName issue des éléments dataProvider d’origine dans la propriété fieldName de l’élément de graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc><codeph>false</codeph> si la valeur de la propriété <codeph>measureName</codeph> est null ou une chaîne vide, <codeph>true</codeph> dans le cas contraire.     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>measureName</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété d’élément de graphique dont la valeur doit être définie par une valeur issue du fournisseur dataProvider, en fonction de la propriété <codeph>fieldName</codeph>. Par exemple, la valeur de <codeph>measureName</codeph> peut être xValue, yValue, xNumber, yNumber, etc., à condition qu’il s’agisse de propriétés de l’élément de graphique.
      
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’éléments de graphique.
      
      </apiDesc></apiParam><apiParam><apiItemName>fieldName</apiItemName><apiType value="String"/><apiDesc>Libellé (dans l’élément du fournisseur de données) dont la valeur doit être utilisée pour définir la propriété <codeph>measureName</codeph> de l’élément de graphique. Par exemple, si le fournisseur de données contient un élément tel que <codeph>{Pays:"France", médailles:10}</codeph>, la valeur de <codeph>fieldName</codeph> peut être « Pays » ou « médailles ».
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Met en cache les valeurs stockées dans la propriété <codeph>measureName</codeph> issue des éléments dataProvider d’origine dans la propriété <codeph>fieldName</codeph> de l’élément de graphique. Si la valeur de la propriété <codeph>measureName</codeph> est <codeph>null</codeph> ou une chaîne vide, cette méthode stocke l’index des éléments dans la propriété <codeph>fieldName</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:cacheNamedValues"><apiName>cacheNamedValues</apiName><shortdesc>
      Met en cache les valeurs stockées dans la propriété measureName issue des éléments dataProvider d’origine dans la propriété fieldName de l’élément de graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc><codeph>false</codeph> si la valeur de la propriété <codeph>measureName</codeph> est null ou une chaîne vide, <codeph>true</codeph> dans le cas contraire.     
     
     </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>measureName</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété d’élément de graphique dont la valeur doit être définie par une valeur issue du fournisseur dataProvider, en fonction de la propriété <codeph>fieldName</codeph>. Par exemple, la valeur de <codeph>measureName</codeph> peut être xValue, yValue, xNumber, yNumber, etc., à condition qu’il s’agisse de propriétés de l’élément de graphique.
      
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’éléments de graphique.
      
      </apiDesc></apiParam><apiParam><apiItemName>fieldName</apiItemName><apiType value="String"/><apiDesc>Libellé (dans l’élément du fournisseur de données) dont la valeur doit être utilisée pour définir la propriété <codeph>measureName</codeph> de l’élément de graphique. Par exemple, si le fournisseur de données contient un élément tel que <codeph>{Pays:"France", médailles:10}</codeph>, la valeur de <codeph>fieldName</codeph> peut être « Pays » ou « médailles ».
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Met en cache les valeurs stockées dans la propriété <codeph>measureName</codeph> issue des éléments dataProvider d’origine dans la propriété <codeph>fieldName</codeph> de l’élément de graphique.  
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:claimStyles"><apiName>claimStyles</apiName><shortdesc conref="mx.charts.chartClasses.IChartElement#claimStyles()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="uint"/><apiDesc>Nouvelle valeur de <codeph>firstAvailable</codeph> après récupération des styles (par exemple, <codeph>firstAvailable</codeph> + <i>N</i>).
      
      </apiDesc></apiReturn><apiParam><apiItemName>styles</apiItemName><apiType value="Array"/><apiDesc>Tableau de styles à récupérer.
     
      </apiDesc></apiParam><apiParam><apiItemName>firstAvailable</apiItemName><apiType value="uint"/><apiDesc>Premier sélecteur de style à récupérer dans le tableau.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IChartElement#claimStyles()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:defaultFilterFunction"><apiName>defaultFilterFunction</apiName><shortdesc>
      Cette opération est nécessaire si vous ne réglez pas de fonction personnalisée en tant que fonction filterFunction de la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Un tableau d'objets 
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Un tableau d'objets 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Cette opération est nécessaire si vous ne réglez pas de fonction personnalisée en tant que fonction filterFunction de la série. Chaque série individuelle doit la remplacer.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:dragStartHandler"><apiName>dragStartHandler</apiName><shortdesc>
      Gestionnaire par défaut pour l’événement dragStart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>Objet DragEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gestionnaire par défaut pour l’événement <codeph>dragStart</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:endInterpolation"><apiName>endInterpolation</apiName><shortdesc>
      Appelée par l’effet SeriesInterpolate pour mettre fin à un effet d’interpolation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>interpolationData</apiItemName><apiType value="Object"/><apiDesc>Objet définissant les données source (pour l’effet <codeph>show</codeph>), qui représentent l’état de la série au début de l’effet, ainsi que les données de destination (pour l’effet <codeph>hide</codeph>), qui représentent l’état de la série à la fin de l’effet.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée par l’effet SeriesInterpolate pour mettre fin à un effet d’interpolation. L’effet utilise cette méthode pour terminer l’interpolation et nettoyer l’éventuel état temporaire associé à l’effet.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:extractMinInterval"><apiName>extractMinInterval</apiName><shortdesc>
      Extrait la valeur minimale, la valeur maximale et éventuellement l’intervalle minimal à partir d’un tableau d’objets ChartItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’éléments de graphique.
      
      </apiDesc></apiParam><apiParam><apiItemName>measureName</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété d’élément de graphique dont la valeur doit être définie par une valeur issue du fournisseur dataProvider, en fonction de la propriété <codeph>fieldName</codeph>. Par exemple, la valeur de <codeph>measureName</codeph> peut être xValue, yValue, xNumber, yNumber, etc., à condition qu’il s’agisse de propriétés de l’élément de graphique.
      
      </apiDesc></apiParam><apiParam><apiItemName>desc</apiItemName><apiOperationClassifier>mx.charts.chartClasses:DataDescription</apiOperationClassifier><apiDesc>Objet DataDescription de la série. Cette propriété contient les valeurs limitées de la série, telles que <codeph>min</codeph>, <codeph>max</codeph> et <codeph>minInterval</codeph>.    
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Extrait la valeur minimale, la valeur maximale et éventuellement l’intervalle minimal à partir d’un tableau d’objets ChartItem. Les classes dérivées peuvent appeler cette méthode à partie de leurs implémentations de la méthode <codeph>describeData()</codeph> pour remplir les détails de la structure DataDescription.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:extractMinMax"><apiName>extractMinMax</apiName><shortdesc>
      Extrait la valeur minimale, la valeur maximale et éventuellement l’intervalle minimal à partir d’un tableau d’objets ChartItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’éléments de graphique.
      
      </apiDesc></apiParam><apiParam><apiItemName>measureName</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété d’élément de graphique dont la valeur doit être définie par une valeur issue du fournisseur dataProvider, en fonction de la propriété <codeph>fieldName</codeph>. Par exemple, la valeur de <codeph>measureName</codeph> peut être xValue, yValue, xNumber, yNumber, etc., à condition qu’il s’agisse de propriétés de l’élément de graphique.
      
      </apiDesc></apiParam><apiParam><apiItemName>desc</apiItemName><apiOperationClassifier>mx.charts.chartClasses:DataDescription</apiOperationClassifier><apiDesc>Objet DataDescription de la série. Cette propriété contient les valeurs limitées de la série, telles que <codeph>min</codeph>, <codeph>max</codeph> et <codeph>minInterval</codeph>.
      
      </apiDesc></apiParam><apiParam><apiItemName>calculateInterval</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Détermine si la valeur <codeph>minInterval</codeph> de la propriété <codeph>desc</codeph> de l’objet DataDescription doit être extraite en utilisant les objets ChartItem de la propriété <codeph>cache</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Extrait la valeur minimale, la valeur maximale et éventuellement l’intervalle minimal à partir d’un tableau d’objets ChartItem. Les classes dérivées peuvent appeler cette méthode à partie de leurs implémentations de la méthode <codeph>describeData()</codeph> pour remplir les détails de la structure DataDescription.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:getAxis"><apiName>getAxis</apiName><shortdesc>
      En général, vous extrayez l’occurrence Axis directement par le biais d’une propriété nommée, telle que horizontalAxis, verticalAxis ou radiusAxis dans le cas d’une série de type Cartesian.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Occurrence Axis correspondant à une dimension particulière du graphique.
      
      </apiDesc><apiOperationClassifier>mx.charts.chartClasses:IAxis</apiOperationClassifier></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>Dimension dont vous souhaitez obtenir l’axe.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      En général, vous extrayez l’occurrence Axis directement par le biais d’une propriété nommée, telle que <codeph>horizontalAxis</codeph>, <codeph>verticalAxis</codeph> ou <codeph>radiusAxis</codeph> dans le cas d’une série de type Cartesian.
      
      <p>Il s’agit d’un accesseur de bas niveau.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:getElementBounds"><apiName>getElementBounds</apiName><shortdesc>
      Remplit les propriétés elementBounds, bounds et visibleBounds d’une structure renderData générée par la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderData</apiItemName><apiType value="Object"/><apiDesc>Structure générée par la série.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Remplit les propriétés <codeph>elementBounds</codeph>, <codeph>bounds</codeph> et <codeph>visibleBounds</codeph> d’une structure renderData générée par la série. Les classes d’effet appellent cette méthode pour remplir ces champs utilisés pour l’implémentation de différents types d’effets. Les classes dérivées doivent implémenter cette méthode pour générer les limites des éléments de la série uniquement lorsque cela est nécessaire.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:getItemsInRegion"><apiName>getItemsInRegion</apiName><shortdesc>
      Obtient tous les éléments de la série qui se trouvent dans une région rectangulaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tableau d’objets ChartItem qui se trouvent dans la région rectangulaire spécifiée.
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>r</apiItemName><apiType value="flash.geom:Rectangle"/><apiDesc>Objet Rectangle définissant la région.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Obtient tous les éléments de la série qui se trouvent dans une région rectangulaire. Appelez cette fonction pour déterminer quels éléments de la série se trouvent dans une région rectangulaire particulière.
      <p>Les différentes séries déterminent si leur élément de graphique se trouve ou non dans la région. Le point doit se trouver dans l’espace de coordonnées global.</p>
      
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.geom.Rectangle.xml"><linktext>flash.geom.Rectangle</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:getMissingInterpolationValues"><apiName>getMissingInterpolationValues</apiName><shortdesc>
      Remplit les valeurs manquantes dans une structure d’interpolation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sourceProps</apiItemName><apiType value="Object"/><apiDesc>Objet contenant les valeurs source interpolées pour un élément spécifique. A la sortie de cette méthode, toutes les propriétés de l’objet doivent être associées à des valeurs autres que <codeph>NaN</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>srcCache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’éléments de graphique source interpolés.
     
      </apiDesc></apiParam><apiParam><apiItemName>destProps</apiItemName><apiType value="Object"/><apiDesc>Objet contenant les valeurs de destination interpolées pour un élément spécifique. A la sortie de cette méthode, toutes les propriétés de l’objet doivent être associées à des valeurs autres que <codeph>NaN</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>destCache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’éléments de graphique de destination interpolés.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Index de l’élément mis en cache.  
     
      </apiDesc></apiParam><apiParam><apiItemName>customData</apiItemName><apiType value="Object"/><apiDesc>Données transmises par la série à la méthode <codeph>initializeInterpolationData()</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Remplit les valeurs manquantes dans une structure d’interpolation. Lorsqu’une série appelle la méthode <codeph>initializeInterpolationData()</codeph>, elle transmet des tableaux de valeurs source et de valeurs de destination pour l’interpolation. Si l’un ou l’autre de ces tableaux est incomplet, la série doit fournir des valeurs d’espace réservé adaptées pour l’interpolation. La manière dont ces valeurs d’espace réservé sont déterminées dépend du type de série. Les extendeurs de série doivent remplacer cette méthode pour fournir ces valeurs d’espace réservé.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:getRenderDataForTransition"><apiName>getRenderDataForTransition</apiName><shortdesc>
      Capture les états antérieur et postérieur de la série en vue de l’animation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Copie des données nécessaires pour représenter les données de la série.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Détermine si l’effet demande une description des données masquées ou des nouvelles données affichées.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Capture les états antérieur et postérieur de la série en vue de l’animation. En général, cette méthode est appelée par les classes d’effets.
     
      <p>Si vous implémentez un type de série personnalisé, il n’est généralement pas nécessaire de remplacer cette méthode. En revanche, vous devez remplacer l’accesseur <codeph>renderData()</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:initializeInterpolationData"><apiName>initializeInterpolationData</apiName><shortdesc>
      Méthode d’assistance permettant d’implémenter l’effet d’interpolation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Structure de données pouvant être transmise à la méthode <codeph>applyInterpolation()</codeph>.
     
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>srcCache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’objets dont les champs contiennent les valeurs de départ de l’interpolation.
     
      </apiDesc></apiParam><apiParam><apiItemName>dstCache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’objets dont les champs contiennent les valeurs de fin de l’interpolation.
     
      </apiDesc></apiParam><apiParam><apiItemName>iProps</apiItemName><apiType value="Object"/><apiDesc>Table de hachage dont les clés identifient les noms des propriétés du cache à interpoler.
     
      </apiDesc></apiParam><apiParam><apiItemName>cacheType</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Classe à instancier pour accueillir les valeurs delta calculées pour l’interpolation. La valeur est généralement <codeph>null</codeph>, auquel cas un objet générique est utilisé.
     
      </apiDesc></apiParam><apiParam><apiItemName>customData</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Objet contenant les données propres à la série. Lorsque le processus d’initialisation rencontre une valeur manquante, il appelle la méthode <codeph>getMissingInterpolationValues()</codeph> de la série pour remplir la valeur manquante. Ces données personnalisées sont transmises à cette méthode et peuvent être utilisées pour transmettre des paramètres arbitraires.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Méthode d’assistance permettant d’implémenter l’effet d’interpolation. Une série personnalisée peut appeler cette méthode à partir de sa méthode <codeph>beginInterpolation()</codeph> pour initialiser une structure de données afin d’interpoler un ensemble arbitraire de propriétés numériques pendant la durée de l’effet. Vous pouvez transmettre cette structure de données à la méthode utilitaire <codeph>applyInterpolation()</codeph> pour modifier effectivement les valeurs lors de l’appel de lé méthode <codeph>interpolate()</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:interpolate"><apiName>interpolate</apiName><shortdesc>
      Appelée par l’effet SeriesInterpolate pour progresser dans l’interpolation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>interpolationValues</apiItemName><apiType value="Array"/><apiDesc>Tableau de nombres compris entre 0 et 1, où le <i>n</i>ième nombre indique le pourcentage d’interpolation de la <i>n</i>ième valeur de la série de données entre les valeurs de début et de fin.
     
      </apiDesc></apiParam><apiParam><apiItemName>interpolationData</apiItemName><apiType value="Object"/><apiDesc>Données renvoyées par la méthode <codeph>beginInterpolation()</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée par l’effet SeriesInterpolate pour progresser dans l’interpolation. L’effet appelle cette méthode une fois par image, jusqu’à la fin de l’interpolation. La série doit utiliser les paramètres pour rendre les valeurs interpolées. Par défaut, la série suppose que <codeph>interpolationData</codeph> est une structure de données renvoyée par la méthode <codeph>initializeInterpolationData()</codeph> et la transmet à la méthode <codeph>applyInterpolation()</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      Signale à la série que les données sous-jacentes du fournisseur de données ont changé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, cette méthode déclenche l’appel des méthodes de mise à jour.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Signale à la série que les données sous-jacentes du fournisseur de données ont changé. Cette fonction déclenche l’appel des méthodes <codeph>updateData()</codeph>, <codeph>updateMapping()</codeph>, <codeph>updateFilter()</codeph> et <codeph>updateTransform()</codeph> lors du prochain appel de la méthode <codeph>commitProperties()</codeph>. Si des effets de données sont affectés à des éléments du graphique, cette méthode déclenche également les effets d’affichage et de masquage.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:invalidateFilter"><apiName>invalidateFilter</apiName><shortdesc>
      Signale à la série que le filtre de données par rapport aux axes a changé et doit être recalculé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, cette méthode déclenche l’appel des méthodes de mise à jour.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Signale à la série que le filtre de données par rapport aux axes a changé et doit être recalculé. L’appel de cette méthode déclenchera l’appel des méthodes <codeph>updateFilter()</codeph> et <codeph>updateTransform()</codeph> lors du prochain appel de la méthode <codeph>commitProperties()</codeph>. Si des effets de données sont affectés à des éléments du graphique, cette méthode déclenche également les effets d’affichage et de masquage.
           
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:invalidateMapping"><apiName>invalidateMapping</apiName><shortdesc>
      Signale à la série que le mappage des données à des valeurs numériques a changé et doit être recalculé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, cette méthode déclenche l’appel des méthodes de mise à jour.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Signale à la série que le mappage des données à des valeurs numériques a changé et doit être recalculé. L’appel de cette fonction déclenche l’appel des méthodes <codeph>updateMapping()</codeph>, <codeph>updateFilter()</codeph> et <codeph>updateTransform()</codeph> lors du prochain appel de la méthode <codeph>commitProperties()</codeph>. Si des effets de données sont affectés à des éléments du graphique, cette méthode déclenche également les effets d’affichage et de masquage.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:invalidateTransform"><apiName>invalidateTransform</apiName><shortdesc>
      Signale à la série que la transformation des données en coordonnées d’écran a changé et doit être recalculée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, cette méthode déclenche l’appel des méthodes de mise à jour.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Signale à la série que la transformation des données en coordonnées d’écran a changé et doit être recalculée. L’appel de cette fonction déclenchera l’appel de la méthode <codeph>updateTransform()</codeph> lors du prochain appel de la méthode <codeph>commitProperties()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:invalidateTransitions"><apiName>invalidateTransitions</apiName><shortdesc>
      Signale à la série que l’affichage des données a subi une modification importante.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Signale à la série que l’affichage des données a subi une modification importante. Cette méthode déclenche les effets ShowData et HideData éventuellement définis.  
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:legendDataChanged"><apiName>legendDataChanged</apiName><shortdesc>
      Met à jour les éléments Legend en distribuant un événement LegendDataChanged lorsque le nom d’affichage de la série change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Met à jour les éléments Legend en distribuant un événement LegendDataChanged lorsque le nom d’affichage de la série change.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:Series:setAxis"><apiName>setAxis</apiName><shortdesc>
      Affecte une occurrence Axis à une dimension spécifique du graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>Dimension du graphique à laquelle vous souhaitez affecter l’axe.
      
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IAxis</apiOperationClassifier><apiDesc>Axe auquel la dimension du graphique doit être affectée.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Affecte une occurrence Axis à une dimension spécifique du graphique. En général, vous définissez l’occurrence Axis directement par le biais d’une propriété nommée, telle que <codeph>horizontalAxis</codeph>, <codeph>verticalAxis</codeph> ou <codeph>radiusAxis</codeph> dans le cas d’une série de type Cartesian.
      
      <p>Il s’agit d’un accesseur de bas niveau.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:stripNaNs"><apiName>stripNaNs</apiName><shortdesc>
      Supprime les éléments du cache indiqué dont la valeur de la propriété field est NaN.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’éléments de graphique.
      
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>Propriété field dans laquelle un élément doit être supprimé.
      
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime les éléments du cache indiqué dont la valeur de la propriété <codeph>field</codeph> est <codeph>NaN</codeph>. Les classes dérivées peuvent appeler cette méthode à partir de leur implémentation de la méthode <codeph>updateFilter()</codeph> pour supprimer les objets ChartItem qui ont été filtrés par les axes.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:stylesInitialized"><apiName>stylesInitialized</apiName><shortdesc>
      Appelle la méthode legendDataChanged().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Appelle la méthode <codeph>legendDataChanged()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:updateData"><apiName>updateData</apiName><shortdesc>
      Appelée lorsque les données sous-jacentes représentées par la série ont été modifiées et doivent être rechargées à partir du fournisseur de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Appelée lorsque les données sous-jacentes représentées par la série ont été modifiées et doivent être rechargées à partir du fournisseur de données. Si vous implémentez des types de série personnalisés, vous devez remplacer cette méthode et charger toutes les données nécessaires au rendu de la série à partir du fournisseur de données. Vous devez également appeler la méthode <codeph>super.updateData()</codeph> dans la sous-classe. En règle générale, vous ne devez pas appeler cette méthode directement. En revanche, pour garantir que les données ont été mises à jour à tel ou tel endroit, appelez la méthode <codeph>validateData()</codeph> de la classe Series.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:updateFilter"><apiName>updateFilter</apiName><shortdesc>
      Appelée lorsque les données sous-jacentes représentées par la série doivent être filtrées par rapport aux plages de valeurs représentées par les axes de la transformation de données associée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Appelée lorsque les données sous-jacentes représentées par la série doivent être filtrées par rapport aux plages de valeurs représentées par les axes de la transformation de données associée. Cette situation peut se produire lorsque les données sous-jacentes ont été modifiées ou lorsque la plage de valeurs des axes associés a changé. Si vous implémentez un type de série personnalisé, vous devez remplacer cette méthode et filtrer les données hors plage en utilisant la méthode <codeph>filterCache()</codeph> des axes gérés par la transformation de données associée. La méthode <codeph>filterCache()</codeph> convertit les valeurs hors plage en valeurs <codeph>NaN</codeph>. Vous devez également appeler la méthode <codeph>super.updateFilter()</codeph> dans la sous-classe. En règle générale, vous ne devez pas appeler cette méthode directement. En revanche, si vous souhaitez garantir que les données ont été filtrées à tel ou tel endroit, appelez la méthode <codeph>validateTransform()</codeph> de la classe Series. En général, vous pouvez supposer que les méthodes <codeph>updateData()</codeph> et <codeph>updateMapping()</codeph> ont été appelées avant cette méthode, si nécessaire.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:updateMapping"><apiName>updateMapping</apiName><shortdesc>
      Appelée lorsque les données sous-jacentes représentées par la série doivent être mappées à des représentations numériques.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Appelée lorsque les données sous-jacentes représentées par la série doivent être mappées à des représentations numériques. Cette situation peut se produire lorsque les données sous-jacentes ont été modifiées ou lorsque les axes utilisés pour le rendu de la série ont fait l’objet de modifications significatives. Si vous implémentez une série personnalisée, vous devez remplacer cette méthode et convertir les données représentées en valeurs numériques, en utilisant la méthode <codeph>mapCache()</codeph> des axes gérés par la transformation de données associée. Vous devez également appeler la méthode <codeph>super.updateMapping()</codeph> dans la sous-classe. En règle générale, vous ne devez pas appeler cette méthode directement. En revanche, pour garantir que les données ont été mappées à tel ou tel endroit, appelez la méthode <codeph>validateData()</codeph> de la classe Series. En général, vous pouvez supposer que la méthode <codeph>updateData()</codeph> a été appelée avant cette méthode, si nécessaire.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:updateTransform"><apiName>updateTransform</apiName><shortdesc>
      Appelée lorsque les données sous-jacentes représentées par la série doivent être transformées en valeurs d’écran par les axes de la transformation de données associée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Appelée lorsque les données sous-jacentes représentées par la série doivent être transformées en valeurs d’écran par les axes de la transformation de données associée. Cette situation peut se produire lorsque les données sous-jacentes ont été modifiées, lorsque la plage de valeurs des axes associés a changé, ou encore lorsque la taille de la zone à l’écran a changé. Si vous implémentez un type de série personnalisé, vous devez remplacer cette méthode et transformer les données en utilisant la méthode <codeph>transformCache()</codeph> de la transformation de données associée. Vous devez également appeler la méthode <codeph>super.updateTransform()</codeph> dans la sous-classe. En règle générale, vous ne devez pas appeler cette méthode directement. En revanche, si vous souhaitez garantir que les données ont été filtrées à tel ou tel endroit, appelez la méthode <codeph>validateTransform()</codeph> de la classe Series. En général, vous pouvez supposer que les méthodes <codeph>updateData()</codeph>, <codeph>updateMapping()</codeph> et <codeph>updateFilter()</codeph> ont été appelées avant cette méthode, si nécessaire.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:validateData"><apiName>validateData</apiName><shortdesc>
      Appelle les méthodes updateData() et updateMapping() de la série lorsque cela est nécessaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Appelle les méthodes <codeph>updateData()</codeph> et <codeph>updateMapping()</codeph> de la série lorsque cela est nécessaire. Cette méthode est appelée automatiquement par la série à partir de la méthode <codeph>commitProperties()</codeph>, si nécessaire, mais une série dérivée peut l’appeler explicitement à une heure explicite si les valeurs générées sont nécessaires. Les opérations de chargement et de mappage des données sur les axes sont conçues pour être acceptées par les axes à tout moment. Vous pouvez appeler cette méthode explicitement en toute sécurité, à tout moment.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:validateTransform"><apiName>validateTransform</apiName><shortdesc>
      Appelle les méthodes updateFilter() et updateTransform() de la série lorsque cela est nécessaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Appelle les méthodes <codeph>updateFilter()</codeph> et <codeph>updateTransform()</codeph> de la série lorsque cela est nécessaire. Cette méthode est appelée automatiquement par la série au cours de la méthode <codeph>commitProperties()</codeph>, si nécessaire, mais une série dérivée peut l’appeler explicitement à une heure explicite si les valeurs générées sont nécessaires. Les opérations de filtrage et de transformation des données s’appuient sur des valeurs spécifiques calculées par les axes, qui dépendent quant à elles des données affichées dans le graphique. Le fait d’appeler cette fonction au mauvais moment peut entraîner l’exécution d’opérations supplémentaires lorsque ces valeurs sont mises à jour.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:Series:dataFunction:get"><apiName>dataFunction</apiName><shortdesc>
     Spécifie une méthode renvoyant la valeur à utiliser pour placer l’élément de graphique actuel dans la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Spécifie une méthode renvoyant la valeur à utiliser pour placer l’élément de graphique actuel dans la série. Lorsque cette propriété est définie, la valeur de retour de la fonction de données personnalisée est prioritaire par rapport aux autres propriétés associées, telles que <codeph>xField</codeph> et <codeph>yField</codeph> pour les objets AreaSeries, BarSeries, BubbleSeries, ColumnSeries, LineSeries et PlotSeries. Pour un objet BubbleSeries, la valeur de retour est prioritaire par rapport à la propriété <codeph>radiusField</codeph>. Pour un objet PieSeries, la valeur de retour est prioritaire par rapport à la propriété <codeph>field</codeph>.     
     
     <p>La fonction <codeph>dataFunction</codeph> personnalisée d’une série présente la signature suivante :
      
     <pre>
     <i>function_name</i> (series:Series, item:Object, fieldName:String):Object { ... }
     </pre>
     
     <codeph>series</codeph> correspond à la série actuelle qui utilise cette fonction <codeph>dataFunction</codeph>. <codeph>item</codeph> correspond à l’élément dans le fournisseur de données. <codeph>fieldName</codeph> correspond au champ à remplir dans l’élément de graphique actuel. Cette fonction renvoie un objet.
     </p>
     
     <p>La propriété <codeph>dataFunction</codeph> est en général utilisée pour accéder aux champs d’un fournisseur de données qui ne constituent pas des valeurs scalaires et qui sont imbriqués dans le fournisseur de données. Par exemple, les données ci-dessous nécessitent une fonction de données pour accéder aux champs du fournisseur de données d’un graphique :</p>
      
      <pre>
      {month: "Aug", close: {High:45.87,Low:12.2}, open:25.19}
      </pre>
      
     <p>L’exemple suivant renvoie une valeur de ce fournisseur de données :</p>
       
     <pre>
     public function myDataFunction(series:Series, item:Object, fieldName:String):Object {
          if (fieldName == 'yValue')
              return(item.close.High);
          else if (fieldName == "xValue")
              return(item.month);
          else
              return null;
     }     
     </pre>
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:dataTipItems:get"><apiName>dataTipItems</apiName><shortdesc>
      Tableau d’éléments de graphique pour lesquels des objets DataTip doivent être affichés de manière non interactive dans le graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau d’éléments de graphique pour lesquels des objets DataTip doivent être affichés de manière non interactive dans le graphique.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:displayName:get"><apiName>displayName</apiName><shortdesc>
      Nom de la série à présenter à l’utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Nom de la série à présenter à l’utilisateur. Cette propriété est utilisée pour représenter la série dans les libellés visibles par l’utilisateur, tels que les objets DataTip.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:filterDataValues:get"><apiName>filterDataValues</apiName><shortdesc>
      Si la propriété filterFunction est définie, les propriétés filterDataValues et filterData sont ignorés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Si la propriété <codeph>filterFunction </codeph>est définie,<codeph> les propriétés filterDataValues</codeph> et<codeph> filterData</codeph> sont ignorées. Si la propriété <codeph>filterDataValues</codeph> est définie sur<codeph> aucun</codeph>, la série ne filtre pas ses données avant de les afficher. Si la propriété <codeph>filterDataValue</codeph> est définie sur <codeph>null</codeph>, la série filtre les données telles que <codeph>null</codeph>, <codeph>indéfini</codeph>, ou <codeph>NaN</codeph> avant de les afficher. Si cette propriété est définie sur <codeph>OutsideRange</codeph>, la série filtre ses données telles que <codeph>null</codeph>, <codeph>indéfini</codeph>, ou <codeph>NaN</codeph>, ainsi que les valeurs situées hors de la plage des axes du graphique. Si vous savez que toutes les données de la série sont valides, vous pouvez la définir sur<codeph>aucun</codeph> pour améliorer la performance.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:filterData:get"><apiName>filterData</apiName><shortdesc>
      Si la propriété filterFunction ou filterValues est définie, la propriété filterData est ignorée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Si la propriété <codeph>filterFunction</codeph> ou <codeph>filterDataValues</codeph> est définie, <codeph> la propriété filterData</codeph> est ignorée. <codeph>true</codeph> si la série filtre les données avant de les afficher. Si une série rend des données contenant des valeurs manquantes (<codeph>null</codeph>, <codeph>undefined</codeph> ou <codeph>NaN</codeph>, par exemple) ou des valeurs qui se trouvent en dehors de la plage de valeurs des axes du graphique, cette propriété doit être définie sur <codeph>true</codeph> (valeur par défaut). Si vous savez que toutes les données de la série sont valides, vous pouvez la définir sur <codeph>false</codeph> pour améliorer les performances.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:filterFunction:get"><apiName>filterFunction</apiName><shortdesc>
     Spécifie une méthode qui renvoie le tableau d’éléments graphiques dans les séries à afficher.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Spécifie une méthode qui renvoie le tableau d’éléments graphiques dans les séries à afficher. Si cette propriété est définie, la valeur de renvoie de la fonction de filtre personnalisée a la priorité sur les propriétés <codeph>filterDataValues</codeph> et <codeph>filterData</codeph>. Cependant, si la valeur renvoyée est null, les propriétés <codeph>filterdataValues</codeph> et <codeph>filterData</codeph> sont préférées dans cet ordre.  
     
     <p>La fonction <codeph>filterFunction</codeph> contient les signatures suivantes :
      
     <pre>
     <i>function_name</i> (cache:Array):Array { ... }
     </pre>
     
     <codeph>Cache </codeph>est une référence au tableau d’éléments de graphique à filtrer. Cette fonction renvoie un tableau d’éléments de graphique à afficher. 
     </p>
      
     </apiDesc><example>
     <pre>
     public function myFilterFunction(cache:Array):Array {
          var filteredCache:Array=[];
          var n:int = cache.length;  
          for(var i:int = 0; i &lt; n; i++)
          {
              var item:ColumnSeriesItem = ColumnSeriesItem(cache[i]);
              if(item.yNumber > 0 &amp;&amp; item.yNumber &lt; 700)
              {
                  filteredCache.push(item);
              }
          }
          return filteredCache;
     }
     </pre>
     
     <p>
      Si vous spécifiez une fonction de filtre personnalisée pour la série de votre graphique et que vous souhaitez filtrer les valeurs null ou les valeurs en dehors de la plage des axes, vous devez les filtrer manuellement, en utilisant la fonction de filtre personnalisé. Les propriétés <codeph>filterDatavalues</codeph> ou <codeph>filterData</codeph> ne peuvent pas être utilisées.
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:interactive:get"><apiName>interactive</apiName><shortdesc>
      Détermine si des objets DataTip doivent s’afficher lorsque les utilisateurs agissent sur les données de graphique affichées à l’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Détermine si des objets DataTip doivent s’afficher lorsque les utilisateurs agissent sur les données de graphique affichées à l’écran. Définissez cette propriété sur <codeph>false</codeph> pour empêcher la série d’afficher des objets DataTip ou de générer des données liées aux interactions de l’utilisateur.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:items:get"><apiName>items</apiName><shortdesc>
      Obtient tous les éléments présents dans la série après filtrage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Obtient tous les éléments présents dans la série après filtrage.
      <p>Les différentes séries déterminent la liste des éléments à renvoyer.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:legendData:get"><apiName>legendData</apiName><shortdesc>
      Tableau d’occurrences LegendData décrivant les éléments qui doivent s’afficher dans une légende représentant cette série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau d’occurrences LegendData décrivant les éléments qui doivent s’afficher dans une légende représentant cette série. Les classes de série dérivées remplacent cet accesseur de lecture et renvoient des données de légende propres à leurs styles et à leur méthode de représentation des données. Bien que la plupart des types de séries renvoient une seule occurrence LegendData, certains d’entre eux (par exemple PieSeries et StackedSeries) renvoient plusieurs occurrences représentant différents éléments du tableau ou différentes manières de rendre les données.   
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:protected:renderData:get"><apiName>renderData</apiName><shortdesc>
      Stocke les informations nécessaires au rendu de cette série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Stocke les informations nécessaires au rendu de cette série.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:selectable:get"><apiName>selectable</apiName><shortdesc>
      Détermine si une série peut ou non être sélectionnée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Détermine si une série peut ou non être sélectionnée.
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      Index de l’élément sélectionné dans le fournisseur de données de la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Index de l’élément sélectionné dans le fournisseur de données de la série. Si plusieurs éléments sont sélectionnés, cette propriété désigne l’élément sélectionné en dernier. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:selectedIndices:get"><apiName>selectedIndices</apiName><shortdesc>
      Tableau contenant les index des éléments sélectionnés dans le fournisseur de données de la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau contenant les index des éléments sélectionnés dans le fournisseur de données de la série.
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:selectedItem:get"><apiName>selectedItem</apiName><shortdesc>
      Elément de graphique sélectionné dans la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts:ChartItem</apiValueClassifier></apiValueDef><apiDesc>
      Elément de graphique sélectionné dans la série. Si plusieurs éléments sont sélectionnés, cette propriété désigne l’élément sélectionné en dernier. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:selectedItems:get"><apiName>selectedItems</apiName><shortdesc>
      Tableau des éléments de graphique sélectionnés dans la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau des éléments de graphique sélectionnés dans la série.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:transitionRenderData:get"><apiName>transitionRenderData</apiName><shortdesc>
      Structure de données de rendu transmise par une transition en cours.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Structure de données de rendu transmise par une transition en cours. Lorsqu’un effet de série est conçu pour être appliqué sur une série, il commence par capturer l’état actuel de la série en demandant ses données de rendu. La transition modifie les données de rendu pour créer l’effet souhaité et renvoie la structure à la série en vue de l’affichage. Si la valeur de la propriété <codeph>transitionRenderData</codeph> n’est pas <codeph>null</codeph>, la série utilise son contenu pour mettre à jour l’affichage.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:dataTransform:set"><apiName>dataTransform</apiName><shortdesc>
      
      Objet DataTransform auquel l’élément est associé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:DataTransform</apiValueClassifier></apiValueDef><apiDesc>
      
      Objet DataTransform auquel l’élément est associé. Un objet DataTransform représente une association entre un ensemble d’éléments et un ensemble d’objets d’axe, utilisée pour convertir ces éléments d’espace de données en coordonnées d’écran et vice-versa. Un élément de graphique utilise l’objet DataTransform qui lui est associé pour calculer comment rendre ses données.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:GraphicsUtilities"><apiName>GraphicsUtilities</apiName><shortdesc>
  Ensemble d’utilitaires internes de rendu graphique, utilisés par les différentes classes de graphique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Ensemble d’utilitaires internes de rendu graphique, utilisés par les différentes classes de graphique.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.charts.chartClasses:GraphicsUtilities:colorFromFill"><apiName>colorFromFill</apiName><shortdesc>
	  Convertit une valeur de remplissage en couleur unie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Valeur de couleur représentant le remplissage.
	  
	  </apiDesc><apiType value="uint"/></apiReturn><apiParam><apiItemName>f</apiItemName><apiType value="Object"/><apiDesc>Objet Fill à partir duquel une couleur doit être extraite.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Convertit une valeur de remplissage en couleur unie. Cette méthode est commode pour extraire d’un objet Fill la valeur de couleur qui se rapproche le plus du remplissage à l’écran.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:GraphicsUtilities:drawArc"><apiName>drawArc</apiName><shortdesc>
	  Trace un arc dans l’objet Graphics cible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>g</apiItemName><apiType value="flash.display:Graphics"/><apiDesc>Objet Graphics dans lequel l’arc doit être tracé.
	 </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Origine horizontale de l’arc.
	 </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Origine verticale de l’arc.
	 </apiDesc></apiParam><apiParam><apiItemName>startAngle</apiItemName><apiType value="Number"/><apiDesc>Angle de départ de l’arc, en radians.
	 </apiDesc></apiParam><apiParam><apiItemName>arc</apiItemName><apiType value="Number"/><apiDesc>Ouverture de l’angle de l’arc, en radians.
	 </apiDesc></apiParam><apiParam><apiItemName>radius</apiItemName><apiType value="Number"/><apiDesc> Rayon horizontal de l’arc, en pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>yRadius</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>Rayon vertical de l’arc, en pixels. Si cette valeur n’est pas spécifiée, elle est considérée comme étant égale à celle du rayon.
	 </apiDesc></apiParam><apiParam><apiItemName>continueFlag</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Détermine si la routine doit ou non replacer la plume graphique sur le début de l’arc avant de réaliser le tracé. Définissez cette propriété sur <codeph>true</codeph> pour continuer à tracer une ligne déjà commencée.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Trace un arc dans l’objet Graphics cible.  
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:GraphicsUtilities:drawPolyLine"><apiName>drawPolyLine</apiName><shortdesc>
	  Trace une ligne qui relie les points de données, en utilisant l’une des différentes formes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>g</apiItemName><apiType value="flash.display:Graphics"/><apiDesc>    Objet Graphics dans lequel l’arc doit être tracé.
	 </apiDesc></apiParam><apiParam><apiItemName>pts</apiItemName><apiType value="Array"/><apiDesc>  Tableau de points de données définissant la ligne.
	 </apiDesc></apiParam><apiParam><apiItemName>start</apiItemName><apiType value="int"/><apiDesc>Index du premier point à utiliser pour tracer la ligne, dans le tableau <codeph>pts</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>end</apiItemName><apiType value="int"/><apiDesc>  Index du dernier point à utiliser pour tracer la ligne, dernier point exclu.
	 </apiDesc></apiParam><apiParam><apiItemName>hProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété définissant la position horizontale des points de la ligne dans les objets du tableau <codeph>pts</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>vProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété définissant la position verticale des points de la ligne dans les objets du tableau <codeph>pts</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>stroke</apiItemName><apiType value="mx.graphics:IStroke"/><apiDesc>Trait utilisé pour le rendu de la ligne.
	 </apiDesc></apiParam><apiParam><apiItemName>form</apiItemName><apiType value="Object"/><apiDesc> Forme utilisée pour le rendu de la ligne. Valeurs possibles : « segment », « horizontal », « vertical », « step », « reverseStep » et « curve ». Ces formes sont similaires à celles de la propriété <codeph>form</codeph> de la classe LineSeries.
	 </apiDesc></apiParam><apiParam><apiItemName>moveToStart</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Détermine s’il faut commencer ou non par replacer la plume sur le début de la ligne avant de réaliser le tracé. Transmettez la valeur <codeph>false</codeph> pour utiliser cette fonction dans le but de prolonger une ligne en cours.
 	  
 	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Trace une ligne qui relie les points de données, en utilisant l’une des différentes formes.  
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:GraphicsUtilities:fillFromStyle"><apiName>fillFromStyle</apiName><shortdesc>
	  Convertit une valeur de style en objet Fill.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Objet IFill correspondant.
	  
	  </apiDesc><apiType value="mx.graphics:IFill"/></apiReturn><apiParam><apiItemName>v</apiItemName><apiType value="Object"/><apiDesc>Valeur à convertir en objet Fill.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Convertit une valeur de style en objet Fill. Cette méthode est commode pour convertir une valeur affectée par le biais de styles en objet Fill pouvant être utilisé pour remplir une zone à l’écran. Si la valeur est numérique, cette fonction la convertit en une couleur SolidColor correspondante.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:GraphicsUtilities:fillRect"><apiName>fillRect</apiName><shortdesc>
	  Remplit un rectangle en utilisant les objets IFill et IStroke fournis.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>g</apiItemName><apiType value="flash.display:Graphics"/><apiDesc>Objet Graphics dans lequel l’arc doit être tracé.
	 </apiDesc></apiParam><apiParam><apiItemName>left</apiItemName><apiType value="Number"/><apiDesc>Côté gauche du rectangle à remplir.
	 </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="Number"/><apiDesc>Haut du rectangle à remplir.
	 </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="Number"/><apiDesc>Côté droit du rectangle à remplir.
	 </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="Number"/><apiDesc>Bas du rectangle à remplir.
	 </apiDesc></apiParam><apiParam><apiItemName>fill</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Objet IFill à utiliser pour remplir le rectangle. Définissez ce paramètre sur null pour tracer un rectangle sans utiliser d’objet Fill.
	 </apiDesc></apiParam><apiParam><apiItemName>ls</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Objet Stroke à utiliser pour tracer le rectangle. Définissez ce paramètre sur null pour tracer un rectangle sans utiliser d’objet Stroke.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Remplit un rectangle en utilisant les objets IFill et IStroke fournis. Cette fonction utilitaire remplit le rectangle fourni dans l’objet Graphics en utilisant les objets Fill et Stroke fournis. Si aucun objet Stroke n’est spécifié, le rectangle est rempli sans bordure. Si aucun objet Fill n’est spécifié, le rectangle est tracé sans remplissage.
	 
	 	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:GraphicsUtilities:setLineStyle"><apiName>setLineStyle</apiName><shortdesc>
	  Applique les valeurs d’un objet Stroke à l’objet Graphics fourni.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>g</apiItemName><apiType value="flash.display:Graphics"/><apiDesc>Objet Graphics à modifier.
	 </apiDesc></apiParam><apiParam><apiItemName>ls</apiItemName><apiType value="mx.graphics:IStroke"/><apiDesc>Occurrence IStroke à appliquer. Définissez cette propriété sur <codeph>null</codeph> pour que le rendu n’utilise pas d’objet Stroke.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Applique les valeurs d’un objet Stroke à l’objet Graphics fourni. Cette fonction utilitaire applique l’objet Stroke transmis ou efface le style de ligne de l’objet Graphics spécifié si le paramètre <codeph>ls</codeph> est défini sur <codeph>null</codeph>.
	 
	 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.charts.chartClasses:DateRangeUtilities"><apiName>DateRangeUtilities</apiName><shortdesc>
 Ensemble d’utilitaires de date désactivée, utilisés par la classe DateTimeAxis.
  
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Ensemble d’utilitaires de date désactivée, utilisés par la classe DateTimeAxis.
  
  </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="mx.charts.chartClasses:IStackable2"><apiName>IStackable2</apiName><shortdesc>
  L’interface IStackable2 peut être implémentée par toutes les séries empilables.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IStackable</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IStackable2 peut être implémentée par toutes les séries empilables. Les sous-séries affectées aux ensembles d’empilement (ColumnSet, BarSet, AreaSet) doivent implémenter cette interface lors de l’empilement, si elles peuvent être amenées à afficher des valeurs négatives lors de cet empilement.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.charts.chartClasses:IStackable2:mx.charts.chartClasses:IStackable2:stackAll"><apiName>stackAll</apiName><shortdesc>
  Empile la série.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet représentant les valeurs maximale et minimale de la série nouvellement empilée.	 
  
  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>stackedPosXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Contient les valeurs de base d’empilement de la série. Les clés du dictionnaire correspondent aux valeurs x et leurs valeurs aux valeurs x positives.
 
  </apiDesc></apiParam><apiParam><apiItemName>stackedNegXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Contient les valeurs de base d’empilement de la série. Les clés du dictionnaire correspondent aux valeurs x et leurs valeurs aux valeurs y négatives.
  
  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable2</apiOperationClassifier><apiDesc>Elément précédent dans la pile. Par exemple, si l’élément est de même type, vous pouvez utiliser l’accès à cette propriété pour éviter une double opération lors du rendu.
  
  </apiDesc></apiParam></apiOperationDef><apiDesc>
  Empile la série. Normalement, une série implémente la méthode <codeph>updateData()</codeph> pour charger ses données à partir du fournisseur de données. Cependant, une série d’empilement réalise certaines opérations spéciales, car ses valeurs ne sont pas nécessairement stockées dans son fournisseur de données. Ses valeurs correspondent à la somme des valeurs stockées dans le fournisseur de données et des valeurs chargées par l’objet empilé.
  <p>Une série d’empilement personnalisée implémente la méthode <codeph>stack()</codeph> en chargeant ses données à partir du fournisseur de données, en les ajoutant aux valeurs de base stockées dans le dictionnaire pour obtenir les valeurs réelles à utiliser pour le rendu, et en remplaçant les valeurs du dictionnaire par les nouvelles valeurs additionnées.</p>
  
  </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.charts.chartClasses:ChartElement"><apiName>ChartElement</apiName><shortdesc>
  La classe ChartElement est la classe de base des éléments de graphique visuels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IChartElement2</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:DualStyleObject</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ChartElement est la classe de base des éléments de graphique visuels.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:ChartElement:ChartElement"><apiName>ChartElement</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:ChartElement:addChildAt"><apiName>addChildAt</apiName><shortdesc>
     Ajoute une occurrence DisplayObject enfant à cette occurrence DisplayObjectContainer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Occurrence DisplayObject transmise au paramètre <codeph>child</codeph>.
     
     </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Occurrence DisplayObject à ajouter en tant qu’enfant à cette occurrence DisplayObjectContainer.
     
     </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Position d’index à laquelle l’enfant est ajouté. Si vous spécifiez une position d’index actuellement occupée, l’objet enfant associé à cette position et toutes les positions supérieures sont décalés d’une position vers le haut dans la liste d’enfants. 
         
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     Ajoute une occurrence DisplayObject enfant à cette occurrence DisplayObjectContainer. L’enfant est placé à la position d’index spécifiée. La position d’index 0 représente la fin (le bas) de la liste d’affichage pour cet objet DisplayObjectContainer.
     
     <p>Si vous ajoutez un objet enfant qui est déjà doté d’un autre conteneur d’objet d’affichage en tant que parent, il est supprimé de la liste d’enfants de cet autre conteneur d’objet d’affichage. </p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:addChild"><apiName>addChild</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:chartStateChanged"><apiName>chartStateChanged</apiName><shortdesc>
      
      Appelée par le graphique conteneur pour indiquer que l’état actuel du graphique a changé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>oldState</apiItemName><apiType value="uint"/><apiDesc>Entier représentant l’état précédent.
     
      </apiDesc></apiParam><apiParam><apiItemName>v</apiItemName><apiType value="uint"/><apiDesc>Entier représentant le nouvel état.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Appelée par le graphique conteneur pour indiquer que l’état actuel du graphique a changé. Les éléments d’implémentation doivent répondre à cette méthode pour synchroniser les modifications apportées aux données affichées par l’élément.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:claimStyles"><apiName>claimStyles</apiName><shortdesc>
      
      Appelée par le graphique pour autoriser les éléments associés à récupérer les sélecteurs de style de son tableau chartSeriesStyles.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Nouvelle valeur de <codeph>firstAvailable</codeph> après récupération des styles (par exemple, <codeph>firstAvailable</codeph> + <i>N</i>).
      
      </apiDesc><apiType value="uint"/></apiReturn><apiParam><apiItemName>styles</apiItemName><apiType value="Array"/><apiDesc>Tableau de styles à récupérer.
     
      </apiDesc></apiParam><apiParam><apiItemName>firstAvailable</apiItemName><apiType value="uint"/><apiDesc>Premier sélecteur de style à récupérer dans le tableau.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Appelée par le graphique pour autoriser les éléments associés à récupérer les sélecteurs de style de son tableau chartSeriesStyles. Chaque graphique dispose de son propre ensemble de sélecteurs, qui sont implicitement affectés aux éléments contenus qui les demandent. L’implémentation de cette fonction offre à un élément la possibilité de récupérer des éléments de cet ensemble, si nécessaire. Un élément qui nécessite <i>N</i> sélecteurs de style récupère les valeurs comprises entre <codeph>styles[firstAvailable]</codeph> et <codeph>styles[firstAvailable + <i>N</i> - 1]</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:collectTransitions"><apiName>collectTransitions</apiName><shortdesc>
      
      Appelée par le graphique conteneur pour collecter les transitions lues par un élément particulier lorsque l’état du graphique change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>chartState</apiItemName><apiType value="Number"/><apiDesc>Etat auquel le graphique lance la lecture des nouvelles transitions.
     
      </apiDesc></apiParam><apiParam><apiItemName>transitions</apiItemName><apiType value="Array"/><apiDesc>Tableau de transition à ajouter à la liste des transitions devant être lues par le graphique.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Appelée par le graphique conteneur pour collecter les transitions lues par un élément particulier lorsque l’état du graphique change. Le graphique collecte les transitions de tous les éléments et s’assure qu’elles sont lues en parallèle. Il attend que toutes les transitions soient terminées avant de passer à un autre état. Les implémenteurs doivent ajouter toutes les transitions nécessaires à la fin du paramètre Array des transitions.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:protected:createDataID"><apiName>createDataID</apiName><shortdesc>
      Crée un ID unique pour représenter le point dataPoint à des fins de comparaison.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>ID du point dataPoint, unique au niveau de l’application.
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>dataPointID</apiItemName><apiType value="Number"/><apiDesc>ID actuel du point dataPoint.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Crée un ID unique pour représenter le point dataPoint à des fins de comparaison. Les classes dérivées peuvent appeler cette fonction en utilisant un ID de point de données unique localement, afin de générer un ID unique au niveau de l’application.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:protected:dataChanged"><apiName>dataChanged</apiName><shortdesc>
      Signale que les données sous-jacentes représentées par l’élément ont changé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Signale que les données sous-jacentes représentées par l’élément ont changé. Appelez cette méthode chaque fois que les données affichées par la série ou l’élément changent. Elles permettent aux axes associés de mettre à jour leurs plages de valeurs si cela est nécessaire.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:dataToLocal"><apiName>dataToLocal</apiName><shortdesc>
      
      Convertit un tuple de valeurs de données en coordonnée x-y à l’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Coordonnées relatives au graphique.
      
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>dataValues</apiItemName><apiType value="restParam"/><apiDesc>Valeurs de données à convertir en coordonnées.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Convertit un tuple de valeurs de données en coordonnée x-y à l’écran. Appelez cette fonction pour transformer des données à l’écran en utilisant la même transformation que pour des éléments individuels. Par exemple, si vous souhaitez créer une surbrillance personnalisée pour une région de données d’un graphique, vous pouvez utiliser cette fonction pour déterminer les coordonnées à l’écran de la plage de valeurs à prendre en compte.
      
      <p>Pour les éléments de graphique Cartesian, deux valeurs sont en général transmises. La première valeur correspond à l’axe horizontal et la deuxième à l’axe vertical.</p>
      
      <p>Dans le cas de graphiques polaires, la première valeur correspond à l’axe angulaire et la deuxième à l’axe radial.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:describeData"><apiName>describeData</apiName><shortdesc>
      
      Appelée par la classe DataTransform gouvernante pour obtenir une description des données représentées par cet élément IChartElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tableau contenant les occurrences DataDescription qui décrivent les données affichées.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>Détermine l’axe dont les descriptions des données doivent être obtenues.
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>Champ de bits indiquant quelles valeurs de l’objet DataDescription sont prises en compte par cet axe. Les implémenteurs peuvent optimiser le calcul en calculant uniquement les champs nécessaires.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Appelée par la classe DataTransform gouvernante pour obtenir une description des données représentées par cet élément IChartElement. Les implémenteurs remplissent et renvoient un tableau d’objets mx.charts.chartClasses.DataDescription pour garantir que leurs données sont correctement prises en compte par les axes générant automatiquement les valeurs à partir des données affichées (par exemple minimum, maximum, interval et unitSize). La plupart des types d’éléments renvoient un tableau contenant une seule description DataDescription. Les agrégats tels que BarSet et ColumnSet peuvent renvoyer plusieurs occurrences DataDescription décrivant les données affichées par leurs sous-éléments. Lorsque cette méthode est appelée, l’implémenteur décrit les données le long de l’axe indiqué par l’argument <codeph>dimension</codeph>. Cette fonction peut être appelée pour chaque axe pris en charge par le graphique conteneur.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:findDataPoints"><apiName>findDataPoints</apiName><shortdesc> 
      Trouve le point de données le plus proche représenté par l’élément qui se trouve sous les coordonnées spécifiées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tableau de HitData.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Coordonnée X.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Coordonnée Y.
     
      </apiDesc></apiParam><apiParam><apiItemName>sensitivity2</apiItemName><apiType value="Number"/><apiDesc>Nombre maximal de pixels séparant le pointeur des coordonnées exactes pour qu’il puisse être considéré comme étant « sous » ces coordonnées. Cette propriété est identique à la valeur de la propriété mouseSensitivity du contrôle de graphique.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Trouve le point de données le plus proche représenté par l’élément qui se trouve sous les coordonnées spécifiées.
     
      <p>Cette méthode renvoie un tableau de structures HitData décrivant les points de données de la plage. Certains éléments ChartElement individuels peuvent choisir de renvoyer un seul point dataPoint s’il est garanti que ces points dataPoint ne se chevauchent pas.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:getAllDataPoints"><apiName>getAllDataPoints</apiName><shortdesc>
      Renvoie un tableau d’objets HitData contenant les éléments présents dans les éléments ChartElement dont les objets dataTip doivent être affichés lorsque la propriété showAllDataTips du graphique est définie sur true.
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objets HitData décrivant les points de données.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie un tableau d’objets HitData contenant les éléments présents dans les éléments ChartElement dont les objets dataTip doivent être affichés lorsque la propriété <codeph>showAllDataTips</codeph> du graphique est définie sur <codeph>true</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:localToData"><apiName>localToData</apiName><shortdesc>
      
      Convertit une coordonnée à l’écran en un tuple de valeurs de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tuple de valeurs de données.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>pt</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Point à convertir.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Convertit une coordonnée à l’écran en un tuple de valeurs de données. Appelez cette fonction pour déterminer quelles sont les valeurs de données représentées par un point précis à l’écran.
      <p>Les différents types de graphiques déterminent la manière dont cette transformation est réalisée. Le point doit être relatif à l’espace de coordonnées du graphique.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:mappingChanged"><apiName>mappingChanged</apiName><shortdesc>
      Appelée lorsque le mappage d’un ou de plusieurs axes change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Appelée lorsque le mappage d’un ou de plusieurs axes change. L’objet DataTransform affecté à cet objet ChartElement appelle cette méthode dès qu’un des axes qu’il représente est modifié.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:protected:processNewDataProvider"><apiName>processNewDataProvider</apiName><shortdesc> 
      Appelée lorsqu’un nouveau fournisseur dataProvider est affecté à l’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Fournisseur de données. Il s’agit généralement d’une classe Array, ArrayCollection, XMLList, XMLListCollection ou d’une classe similaire.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Appelée lorsqu’un nouveau fournisseur dataProvider est affecté à l’élément. Les sous-classes peuvent remplacer le comportement par défaut et en définir un autre lorsqu’un nouveau fournisseur dataProvider est affecté. Cette méthode est appelée soit lorsque la propriété <codeph>dataProvider</codeph> est définie, soit lorsque la propriété <codeph>chartDataProvider</codeph> est définie et qu’aucun fournisseur dataProvider spécifique n’a été affecté directement.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:ChartElement:protected:cursor"><apiName>cursor</apiName><shortdesc>
      Chaque objet ChartElement possède un curseur associé à son fournisseur dataProvider, utilisé en interne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="mx.collections:IViewCursor"/></apiValueDef><apiDesc>
      Chaque objet ChartElement possède un curseur associé à son fournisseur dataProvider, utilisé en interne. Les objets ChartElement sont les propriétaires exclusifs de ce curseur et peuvent supposer qu’aucun autre code ne modifiera la position.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartElement:protected:chart:get"><apiName>chart</apiName><shortdesc>
      Fait référence au composant de graphique contenant cet élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.charts.chartClasses:ChartBase</apiValueClassifier></apiValueDef><apiDesc>
      Fait référence au composant de graphique contenant cet élément.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartElement:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      Fournisseur de données affecté à cet élément spécifique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Fournisseur de données affecté à cet élément spécifique. Généralement, les éléments héritent du fournisseur dataProvider du graphique conteneur. Cependant, certains éléments individuels peuvent le remplacer par un fournisseur dataProvider spécifique.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartElement:dataTransform:get"><apiName>dataTransform</apiName><shortdesc>
      Objet DataTransform auquel l’élément est associé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:DataTransform</apiValueClassifier></apiValueDef><apiDesc>
      Objet DataTransform auquel l’élément est associé. Un objet DataTransform représente une association entre un ensemble d’éléments et un ensemble d’objets d’axe, utilisée pour convertir ces éléments d’espace de données en coordonnées d’écran et vice-versa. Un élément de graphique utilise l’objet DataTransform qui lui est associé pour calculer comment rendre ses données.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartElement:labelContainer:get"><apiName>labelContainer</apiName><shortdesc>
      
      Objet DisplayObject affichant les libellés rendus par cet élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      
      Objet DisplayObject affichant les libellés rendus par cet élément. Dans la plupart des cas, les libellés affichés dans la zone de données d’un graphique sont rendus par-dessus les autres éléments, au lieu d’être entrelacés avec les données. Si un élément d’implémentation dispose de libellés à afficher, il peut les placer dans un objet Sprite et les renvoyer comme valeur de la propriété <codeph>labelContainer</codeph>. Les graphiques conteneurs rendent les propriétés labelContainer de tous les éléments inclus et les placent dans la zone de données, au-dessus des autres éléments.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartElement:chartDataProvider:set"><apiName>chartDataProvider</apiName><shortdesc>
      Fournisseur de données affecté au graphique conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Object"/></apiValueDef><apiDesc>
      Fournisseur de données affecté au graphique conteneur. Les types d’éléments peuvent choisir d’hériter du fournisseur de données du graphique conteneur si cela est nécessaire ou autoriser les développeurs à affecter spécifiquement des fournisseurs de données à l’élément. Tous les éléments ne dépendent pas obligatoirement d’un fournisseur de données.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:DataTransform"><apiName>DataTransform</apiName><shortdesc>
  L’objet DataTransform représente une partie de graphique contenant des glyphes. Il peut transformer des valeurs en coordonnées d’écran et vice-versa.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  L’objet DataTransform représente une partie de graphique contenant des glyphes. Il peut transformer des valeurs en coordonnées d’écran et vice-versa. Chaque objet DataTransform contient un axe horizontal, un axe vertical et un ensemble de glyphes à rendre (arrière-plan, données et incrustation).  
  
  <p>Un graphique peut théoriquement contenir plusieurs objets DataTransform superposés. Vous pouvez ainsi afficher un graphique dans lequel plusieurs jeux de données utilisant différentes plages de valeurs sont rendus dans une même zone. Supposons que vous souhaitez afficher les recettes mensuelles et comparer cette valeur au nombre de produits vendus. Si les recettes sont généralement exprimées en millions et le nombre de produits vendus en milliers, il est difficile de rendre ces valeurs de façon efficace en utilisant une même plage de valeurs. En utilisant plusieurs objets DataTransform pour réaliser une incrustation et rendre les valeurs à l’aide de plages différentes, l’utilisateur final peut comparer l’évolution des valeurs.</p>
 
  <p>Un graphique peut contenir un seul ensemble d’objets DataTransform.</p>
  
  <p>La plupart du temps, vous utiliserez l’objet ChartBase, qui masque l’existence de l’objet DataTransform entre le graphique et les objets de glyphe et d’axe qu’il contient. Si vous créez vos propres objets ChartElement, vous devez comprendre les méthodes de la classe DataTransform pour implémenter correctement leur élément.</p>
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.charts.chartClasses:DataTransform_mx.events.FlexEvent.TRANSFORM_CHANGE_transformChange"><apiName>transformChange</apiName><shortdesc>
  Distribué lorsque la transformation d’un espace de données en espace d’écran a changé, généralement parce que les axes réalisant la transformation ont été modifiés ou parce qu’une taille a été affectée à la transformation de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.TRANSFORM_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la transformation d’un espace de données en espace d’écran a changé, généralement parce que les axes réalisant la transformation ont été modifiés ou parce qu’une taille a été affectée à la transformation de données.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.charts.chartClasses:DataTransform:DataTransform"><apiName>DataTransform</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:DataTransform:dataChanged"><apiName>dataChanged</apiName><shortdesc>
      Signale à l’objet DataTransform qu’une partie des données sous-jacentes représentées dans le graphique a changé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Signale à l’objet DataTransform qu’une partie des données sous-jacentes représentées dans le graphique a changé. En général, l’objet DataTransform ne dispose d’aucune information sur la source des données sous-jacentes représentées par le graphique. Par conséquent, les glyphes doivent appeler cette méthode lorsque leurs données changent, de sorte que l’objet DataTransform puisse calculer à nouveau les échelles de plage de valeurs, en fonction des données. L’objet DataTransform n’est <b>pas</b> invalidé pour autant, car il n’est pas certain que les données aient réellement changé. Les objets d’axe (ou de plage de valeurs) doivent déclencher un événement d’invalidation.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:DataTransform:describeData"><apiName>describeData</apiName><shortdesc>
      Collecte les valeurs affichées importantes pour tous les éléments associés à cette transformation de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tableau d’objets BoundedValue.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>Dimension pour laquelle des valeurs doivent être collectées.
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>Définit les données requises par cette transformation.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Collecte les valeurs affichées importantes pour tous les éléments associés à cette transformation de données. Les occurrences d’axe appellent cette méthode pour collecter les valeurs qu’elles doivent prendre en compte pour générer automatiquement les plages de valeurs appropriées. Cette méthode renvoie un tableau d’objets BoundedValue.
      
      <p>Pour collecter les valeurs importantes pour l’axe horizontal d’un objet CartesianTransform, transmettez la valeur 0. Pour collecter les valeurs pour l’axe vertical, transmettez la valeur 1.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:DataTransform:getAxis"><apiName>getAxis</apiName><shortdesc>
      Extrait l’occurrence d’axe chargée de transformer la dimension de données spécifiée par le paramètre dimension.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Occurrence d’axe.
      
      </apiDesc><apiOperationClassifier>mx.charts.chartClasses:IAxis</apiOperationClassifier></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>Dimension dont l’axe est chargé de transformer les données.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Extrait l’occurrence d’axe chargée de transformer la dimension de données spécifiée par le paramètre <codeph>dimension</codeph>. Si aucun axe n’a été affecté précédemment, un axe par défaut est créé. L’axe par défaut de toutes les dimensions est un objet LinearAxis dont la propriété <codeph>autoAdjust</codeph> est définie sur <codeph>false</codeph>. 
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.charts.xml#LinearAxis"><linktext>mx.charts.LinearAxis</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:DataTransform:invertTransform"><apiName>invertTransform</apiName><shortdesc>
      Transforme les coordonnées x et y en une valeur à deux dimensions dans l’espace de données, par rapport au système de coordonnées DataTransform.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tableau contenant les valeurs transformées.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiType value="restParam"/><apiDesc>Positions x et y (dans cet ordre).
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Transforme les coordonnées x et y en une valeur à deux dimensions dans l’espace de données, par rapport au système de coordonnées DataTransform.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:DataTransform:setAxis"><apiName>setAxis</apiName><shortdesc>
      Affecte une occurrence d’axe à une dimension spécifique de la transformation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>Dimension de la transformation.
      </apiDesc></apiParam><apiParam><apiItemName>v</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IAxis</apiOperationClassifier><apiDesc>Occurrence d’axe cible.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Affecte une occurrence d’axe à une dimension spécifique de la transformation. Les objets d’axe sont affectés par l’objet de graphique conteneur.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:DataTransform:transformCache"><apiName>transformCache</apiName><shortdesc>
      Mappe à des coordonnées d’écran un ensemble de valeurs numériques représentant des coordonnées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>Tableau d’objets dont les champs contiennent les valeurs de données. C’est également dans ce tableau que la fonction stocke les valeurs numériques converties.
     
      </apiDesc></apiParam><apiParam><apiItemName>xField</apiItemName><apiType value="String"/><apiDesc>Champ dans lequel se trouvent les valeurs de données pour l’axe x.
     
      </apiDesc></apiParam><apiParam><apiItemName>xConvertedField</apiItemName><apiType value="String"/><apiDesc>Champ dans lequel se trouve la coordonnée d’écran x mappée.
     
      </apiDesc></apiParam><apiParam><apiItemName>yField</apiItemName><apiType value="String"/><apiDesc>Champ dans lequel se trouvent les valeurs de données pour l’axe y.
     
      </apiDesc></apiParam><apiParam><apiItemName>yConvertedField</apiItemName><apiType value="String"/><apiDesc>Champ dans lequel se trouve la coordonnée d’écran y mappée.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Mappe à des coordonnées d’écran un ensemble de valeurs numériques représentant des données. Cette méthode suppose que toutes les valeurs sont des nombres. Par conséquent, toute valeur non numérique doit au préalable être convertie à l’aide de la méthode <codeph>mapCache()</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:DataTransform:axes:get"><apiName>axes</apiName><shortdesc>
      Ensemble d’axes associé à cette transformation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Ensemble d’axes associé à cette transformation.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataTransform:elements:get"><apiName>elements</apiName><shortdesc>
      Eléments associés à cette transformation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Eléments associés à cette transformation. Ce tableau contient les éléments d’arrière-plan, de série et d’incrustation associés à la transformation. Cette valeur est affectée par l’objet de graphique conteneur.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:DualStyleObject"><apiName>DualStyleObject</apiName><shortdesc>
  La classe DualStyleObject sert de classe de base aux composants qui ont besoin d’affecter des sélecteurs de classe à l’extérieur du contrôle du développeur client.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  <p><b>Common MXML Syntax Inherited from DualStyleObject</b></p>
  
  <p>Flex components inherit the following properties
  from the DualStyleObject class:</p>
 
  <pre>
  &lt;mx:<i>tagname</i>
    internalStyleName="<i>Style; No default</i>"
  &gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe DualStyleObject sert de classe de base aux composants qui ont besoin d’affecter des sélecteurs de classe à l’extérieur du contrôle du développeur client. Les occurrences DualStyleObject disposent de deux propriétés styleName : la propriété styleName standard et la propriété supplémentaire internalStyleName. Un composant peut affecter la propriété internalStyleName si cela est nécessaire et laisser le développeur client affecter la propriété styleName.
 
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:DualStyleObject:DualStyleObject"><apiName>DualStyleObject</apiName><shortdesc> 
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts.chartClasses:DualStyleObject:internalStyleName:get"><apiName>internalStyleName</apiName><shortdesc>
      Nom du sélecteur de classe dont cette occurrence hérite de la valeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Nom du sélecteur de classe dont cette occurrence hérite de la valeur. Le niveau de priorité de la propriété <codeph>internalStyleName</codeph> est inférieur au niveau de priorité du sélecteur <codeph>styleName</codeph>.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>