<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.charts.chartClasses"><apiName>mx.charts.chartClasses</apiName><apiDetail/><apiClassifier id="mx.charts.chartClasses:CartesianCanvasValue"><apiName>CartesianCanvasValue</apiName><shortdesc>
     データキャンバス上のオブジェクトの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
     データキャンバス上のオブジェクトの位置を定義します。 このクラスには、CartesianDataCanvas クラスでピクセル座標の計算に使用される、データ座標およびオプションのオフセットがあります。
     
     </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.chartClasses.xml#CartesianDataCanvas"><linktext>mx.charts.chartClasses.CartesianDataCanvas</linktext></link></related-links><apiConstructor id="mx.charts.chartClasses:CartesianCanvasValue:CartesianCanvasValue"><apiName>CartesianCanvasValue</apiName><shortdesc>
         コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>ポイントのデータ座標です。
         </apiDesc></apiParam><apiParam><apiItemName>offset</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc><codeph>value</codeph> で指定されたデータ座標のオフセット（ピクセル単位）です。
          
          </apiDesc></apiParam></apiConstructorDef><apiDesc>
         コンストラクターです。
         
         </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.charts.chartClasses:IAxisRenderer"><apiName>IAxisRenderer</apiName><shortdesc>
  IAxis クラスは、ラベル、目盛り、データ位置のプロパティをグラフの軸に対して定義する抽象インターフェイスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IAxis クラスは、ラベル、目盛り、データ位置のプロパティをグラフの軸に対して定義する抽象インターフェイスです。
 
  <p>クラスはこのインターフェイスの実装により、範囲を定義する機能を提供します。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#CategoryAxis"><linktext>mx.charts.CategoryAxis</linktext></link><link href="mx.charts.xml#LinearAxis"><linktext>mx.charts.LinearAxis</linktext></link></related-links><apiOperation id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:adjustGutters"><apiName>adjustGutters</apiName><shortdesc>
      レイアウトを調整し、渡されたふち取りが中に収まるようにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>ふち取りのサイズを定義する矩形で、調整を含みます。
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>workingGutters</apiItemName><apiType value="flash.geom:Rectangle"/><apiDesc>調整するふち取りを定義します。
     
      </apiDesc></apiParam><apiParam><apiItemName>adjustable</apiItemName><apiType value="Object"/><apiDesc>4 つのブール型プロパティ（left=true/false、top=true/false、right=true/false、および bottom=true/false）により構成されます。これらのプロパティは、軸レンダラーが各ふち取りをさらに調整できるかどうかを示します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      レイアウトを調整し、渡されたふち取りが中に収まるようにします。このメソッドは、周りを囲むグラフにより呼び出され、ふち取りと対応するデータ領域のサイズを決定します。 このメソッドにより、AxisRenderer では、新しいふち取りに基づいてレイアウトを計算し、必要に応じてふち取りを調整できるようになります。 ふち取りが調整可能な場合、軸レンダラーはふち取りを内側へ (より太く) 調整できますが、外側へ (より細く) は調整できません。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:chartStateChanged"><apiName>chartStateChanged</apiName><shortdesc>
      周りを囲むグラフの現在の状態が変更されたことを示すために、そのグラフによって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>oldState</apiItemName><apiType value="uint"/><apiDesc>前の状態を表す整数です。
     
      </apiDesc></apiParam><apiParam><apiItemName>v</apiItemName><apiType value="uint"/><apiDesc>新しい状態を表す整数です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      周りを囲むグラフの現在の状態が変更されたことを示すために、そのグラフによって呼び出されます。 エレメントの実装では、このメソッドに応答してエレメントで表示されるデータの変更と同期させる必要があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:axis:get"><apiName>axis</apiName><shortdesc>
      このレンダラーに関連付けられた軸オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      このレンダラーに関連付けられた軸オブジェクトです。 このプロパティは周りを囲むグラフによって管理されるため、明示的に設定しないでください。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:gutters:get"><apiName>gutters</apiName><shortdesc>
      axisRenderer と周りのグラフの側面との間隔の大きさです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      axisRenderer と周りのグラフの側面との間隔の大きさです。 このプロパティはグラフによって自動的に割り当てられるため、直接割り当てないでください。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:horizontal:get"><apiName>horizontal</apiName><shortdesc>
      軸レンダラーが水平軸として使用されている場合は true です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      軸レンダラーが水平軸として使用されている場合は <codeph>true</codeph> です。 このプロパティは周りの CartesianChart によって管理されるため、直接設定しないでください。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:minorTicks:get"><apiName>minorTicks</apiName><shortdesc>
      軸に沿った小さな目盛りの描画位置を指定する配列を含みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      軸に沿った小さな目盛りの描画位置を指定する配列を含みます。 各配列エレメントには、0 から 1 までの値が含まれています。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:placement:get"><apiName>placement</apiName><shortdesc>
      グラフで axisRenderer が表示される側です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      グラフで axisRenderer が表示される側です。 有効な値は、垂直軸レンダラーでは <codeph>"left"</codeph> と <codeph>"right"</codeph>、水平軸レンダラーでは <codeph>"top"</codeph> と <codeph>"bottom"</codeph> です。 デフォルトでは、1 番目の軸が左と上に、2 番目の軸が右と下に配置されます。 CartesianCharts は自動的に、2 番目の軸が 1 番目の軸の反対側にあることが保証されます。例えば、1 番目の垂直軸を明示的に右に配置すると、2 番目の垂直軸は左に配置されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:ticks:get"><apiName>ticks</apiName><shortdesc>
      軸に沿った目盛りの描画位置を指定する配列を含みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      軸に沿った目盛りの描画位置を指定する配列を含みます。 各配列エレメントには、0 から 1 までの値が含まれています。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:heightLimit:set"><apiName>heightLimit</apiName><shortdesc>
      軸レンダラーがグラフから取得するスペースの最大値（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      軸レンダラーがグラフから取得するスペースの最大値（ピクセル単位）です。 デフォルトでは、軸レンダラーは、グラフ内でそのすべてのラベルをフルサイズでレンダリングするために必要なだけのスペースを取得します。 heightLimit が設定されている場合は、軸の合計サイズが heightLimit より必ず小さくなるよう、AxisRenderer はラベルのサイズを削減します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:otherAxes:set"><apiName>otherAxes</apiName><shortdesc>
      軸の配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Array"/></apiValueDef><apiDesc>
      軸の配列です。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:IChartElement"><apiName>IChartElement</apiName><shortdesc>
  IChartElement には、グラフのデータ領域に表すために UIComponent で必要とされるプロパティとメソッドの基本セットが定義されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IChartElement には、グラフのデータ領域に表すために UIComponent で必要とされるプロパティとメソッドの基本セットが定義されます。 グラフの系列、backgroundElements、または annotationElements の配列に割り当てられたコンポーネントには、このインターフェイスを実装する必要があります。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:chartStateChanged"><apiName>chartStateChanged</apiName><shortdesc>
      周りを囲むグラフの現在の状態が変更されたことを示すために、そのグラフによって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>oldState</apiItemName><apiType value="uint"/><apiDesc>前の状態を表す整数です。
     
      </apiDesc></apiParam><apiParam><apiItemName>v</apiItemName><apiType value="uint"/><apiDesc>新しい状態を表す整数です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      周りを囲むグラフの現在の状態が変更されたことを示すために、そのグラフによって呼び出されます。 エレメントの実装では、このメソッドに応答してエレメントで表示されるデータの変更と同期させる必要があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:claimStyles"><apiName>claimStyles</apiName><shortdesc>
      関連付けられたエレメントで chartSeriesStyles の配列からスタイルセレクターを要求できるようにするために、グラフによって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>スタイル (<codeph>firstAvailable</codeph> + <i>N</i> など) の要求後の、<codeph>firstAvailable</codeph> の新しい値です。
      
      </apiDesc><apiType value="uint"/></apiReturn><apiParam><apiItemName>styles</apiItemName><apiType value="Array"/><apiDesc>要求するスタイルの配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>firstAvailable</apiItemName><apiType value="uint"/><apiDesc>要求する配列にある最初のスタイルセレクターです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      関連付けられたエレメントで chartSeriesStyles の配列からスタイルセレクターを要求できるようにするために、グラフによって呼び出されます。 各グラフには、セレクターを必要とするグラフのエレメントに暗黙的に割り当てられる、関連付けられたセレクターのセットがあります。 この関数を実装すると、必要に応じて、エレメントがこのセットからエレメントに "要求" を行うことができます。 <i>N</i> スタイルセレクターを必要とするエレメントは、<codeph>styles[firstAvailable]</codeph> から <codeph>styles[firstAvailable + <i>N</i> - 1]</codeph> までの値を要求します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:collectTransitions"><apiName>collectTransitions</apiName><shortdesc>
      周りを囲むグラフの状態が変更されたときに、特定のエレメントで再生する可能性のあるすべてのトランジションを収集するために、そのグラフによって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>chartState</apiItemName><apiType value="Number"/><apiDesc>グラフによって新しいトランジションが再生される状態です。
     
      </apiDesc></apiParam><apiParam><apiItemName>transitions</apiItemName><apiType value="Array"/><apiDesc>グラフの再生するトランジションのリストに追加するトランジションの配列です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      周りを囲むグラフの状態が変更されたときに、特定のエレメントで再生する可能性のあるすべてのトランジションを収集するために、そのグラフによって呼び出されます。 グラフでは、すべてのエレメントからトランジションが収集され、これらがパラレルに再生されます。 グラフは、すべてのトランジションが完了した後で次の状態に進みます。 インプリメンタによって、トランジション配列パラメーターに必要なトランジションが追加される必要があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:describeData"><apiName>describeData</apiName><shortdesc>
      この IChartElement で表されるデータの記述を取得するために、管理する DataTransform によって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>表示されるデータを記述する DataDescription インスタンスを含む Array です。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>データの記述を取得する軸を特定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>特定の軸で管理される DataDescription オブジェクトの値を示すビットフィールドです。 インプリメンタによって必要なフィールドを計算する方法でのみ最適化できます。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      この IChartElement で表されるデータの記述を取得するために、管理する DataTransform によって呼び出されます。 インプリメンタによって mx.charts.chartClasses.DataDescription オブジェクトの配列が入力されて返され、表示データ（minimum、maximum、interval、unitSize など）から値を自動生成するすべての軸に沿ってこれらのデータが正確に記述されることが保証されます。 ほとんどのエレメントタイプでは、1 つの DataDescription を含む配列が返されます。 BarSet や ColumnSet などのエレメントを集約します。それらのサブエレメントによって表示されるデータを記述する複数の DataDescription インスタンスを返すことがあります。 呼び出されると、インプリメンタによって <codeph>dimension</codeph> パラメーターで指定された軸に沿ってデータが記述されます。 この関数は、グラフによってサポートされる軸ごとに呼び出される場合があります。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.charts.chartClasses.xml#DataDescription"><linktext>mx.charts.chartClasses.DataDescription</linktext></link><link href="mx.charts.chartClasses.xml#DataTransform"><linktext>mx.charts.chartClasses.DataTransform</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:findDataPoints"><apiName>findDataPoints</apiName><shortdesc>
      メソッドに渡された座標に最も近いデータポイントを表す HitData オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>sensitivity2</codeph> のピクセル値内で最も近いデータポイントを表す HitData オブジェクトです。
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>ChartBase オブジェクトを基準にした x 座標です。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>ChartBase オブジェクトを基準にした y 座標です。
      
      </apiDesc></apiParam><apiParam><apiItemName>sensitivity2</apiItemName><apiType value="Number"/><apiDesc>x/y 座標からのデータポイントの最大距離です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      メソッドに渡された座標に最も近いデータポイントを表す HitData オブジェクトを返します。 <codeph>x</codeph> および <codeph>y</codeph> の引数は、Element の座標系の値である必要があります。 このメソッドは、近くにあるデータポイントを探す際に、<codeph>sensitivity2</codeph> パラメーターで指定された制限に準拠します。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.charts.xml#HitData"><linktext>mx.charts.HitData</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:mappingChanged"><apiName>mappingChanged</apiName><shortdesc>
      エレメントに対して、関連付けられた軸のデータマッピングが変更されたことを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      エレメントに対して、関連付けられた軸のデータマッピングが変更されたことを示します。 インプリメンタによって、キャッシュされたデータの処理と再レンダリングが適切に行われる必要があります。 この関数は、関連付けられた DataTransform によって必要な場合に自動的に呼び出されます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:labelContainer:get"><apiName>labelContainer</apiName><shortdesc>
      このエレメントでレンダリングされるラベルを表示する DisplayObject です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      このエレメントでレンダリングされるラベルを表示する DisplayObject です。 ほとんどの場合、グラフのデータ領域に表示されるラベルは、データに埋め込まれるのではなく、すべてのエレメントの一番上にレンダリングされます。 実装するエレメントに表示するラベルがある場合は、Sprite オブジェクトにラベルを配置して、このオブジェクトを <codeph>labelContainer</codeph> プロパティの値として返すことができます。 周りを囲むグラフによって、すべての囲まれたエレメントから labelContainer がレンダリングされ、他のすべてのエレメントよりも上にあるデータ領域に配置されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:chartDataProvider:set"><apiName>chartDataProvider</apiName><shortdesc>
      周りを囲むグラフに割り当てられたデータプロバイダーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Object"/></apiValueDef><apiDesc>
      周りを囲むグラフに割り当てられたデータプロバイダーです。 エレメントタイプでは、必要に応じて周りを囲むグラフからデータプロバイダーを継承するか、または開発者がエレメントに特定のデータプロバイダーを割り当てるかを選択することができます。 すべてのエレメントが、データプロバイダーによって提供されるとは限りません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:dataTransform:set"><apiName>dataTransform</apiName><shortdesc>
      エレメントでデータとスクリーン座標間のマッピングに使用する DataTransform オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiValueClassifier>mx.charts.chartClasses:DataTransform</apiValueClassifier></apiValueDef><apiDesc>
      エレメントでデータとスクリーン座標間のマッピングに使用する DataTransform オブジェクトです。 このプロパティは、周りを囲むグラフによって割り当てられます。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:LegendData"><apiName>LegendData</apiName><shortdesc>
  LegendData 構造体は、自動生成の凡例に表示する必要があるアイテムを表すためにグラフによって使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  LegendData 構造体は、自動生成の凡例に表示する必要があるアイテムを表すためにグラフによって使用されます。 グラフの <codeph>legendData</codeph> プロパティには、凡例内のアイテムごとに LegendData オブジェクトの 1 つの配列が定義されます。 
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:LegendData:LegendData"><apiName>LegendData</apiName><shortdesc>
	  コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  コンストラクターです。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts.chartClasses:LegendData:aspectRatio"><apiName>aspectRatio</apiName><shortdesc>
	  凡例マーカーのサイズと配置を決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  凡例マーカーのサイズと配置を決定します。 この値を設定した場合、LegendItem はマーカーの幅と高さが必ずこの値に一致するようにします。 設定していない場合（<codeph>NaN</codeph>）は、凡例アイテムによって適切なデフォルトの幅と高さが選択されます。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:LegendData:element"><apiName>element</apiName><shortdesc>
	  この凡例アイテムを生成したグラフアイテムです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.charts.chartClasses:IChartElement</apiValueClassifier></apiValueDef><apiDesc>
	  この凡例アイテムを生成したグラフアイテムです。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:LegendData:label"><apiName>label</apiName><shortdesc>
	  凡例アイテムに表示される系列またはアイテムを識別するテキストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  凡例アイテムに表示される系列またはアイテムを識別するテキストです。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:LegendData:marker"><apiName>marker</apiName><shortdesc>
	  表示される系列またはアイテムに凡例アイテムを関連付ける視覚的なインジケーターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:IFlexDisplayObject"/></apiValueDef><apiDesc>
	  表示される系列またはアイテムに凡例アイテムを関連付ける視覚的なインジケーターです。 この DisplayObject が LegendItem に子として追加されます。 
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:InstanceCache"><apiName>InstanceCache</apiName><shortdesc>
  InstanceCache は、n オブジェクトインスタンスのセットを作成し、管理するタスクを制御するユーティリティです。対象となる n オブジェクトインスタンスは頻繁に変わります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  InstanceCache は、<i/>n オブジェクトインスタンスのセットを作成し、管理するタスクを制御するユーティリティです。対象となる n オブジェクトインスタンスは頻繁に変わります。<i/>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:InstanceCache:InstanceCache"><apiName>InstanceCache</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="Object"/><apiDesc>構築するオブジェクトのタイプです。 Class または IFactory のいずれかです。
     
      </apiDesc></apiParam><apiParam><apiItemName>parent</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>新しいインスタンスを追加することができる任意の DisplayObject です。
     
      </apiDesc></apiParam><apiParam><apiItemName>insertPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>親が持つ子のリスト中で、インスタンスを追加する場所です。 子リストの最後に子を追加するには、-1 に設定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>moduleFactory</apiItemName><apiType value="mx.core:IFlexModuleFactory"/><apiData>null</apiData><apiDesc>埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時のコンテキストです。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts.chartClasses:InstanceCache:creationCallback"><apiName>creationCallback</apiName><shortdesc>
      新しいインスタンスが追加されたときに呼び出されるコールバックです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      新しいインスタンスが追加されたときに呼び出されるコールバックです。 このコールバックには、次のシグネチャがあります。
      <pre>
      function creationCallback(<i>newInstance</i>:Object, <i>cache</i>:InstanceCache):void;
      </pre>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:discard"><apiName>discard</apiName><shortdesc> 
      不要なインスタンスを破棄するかどうかを決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef><apiDesc> 
      不要なインスタンスを破棄するかどうかを決定します。 <codeph>true</codeph> に設定すると、キャッシュカウントが減少したときに余分なエレメントが破棄されます。 別の値を設定した場合は、余分なエレメントが別のキャッシュに保持され、キャッシュカウントが増加したときに再使用されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:hide"><apiName>hide</apiName><shortdesc>
      不要なインスタンスを非表示にするかどうかを決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      不要なインスタンスを非表示にするかどうかを決定します。 <codeph>true</codeph> に設定すると、余分な各エレメントで <codeph>visible</codeph> プロパティが、キャッシュカウントが減少したときには <codeph>false</codeph> に、キャッシュカウントが増加したときには <codeph>true</codeph> に設定されます。
      
      <p>このプロパティは、ファクトリにより DisplayObjects が生成されるときにのみ有効です。 他のファクトリタイプの場合、このプロパティを <codeph>true</codeph> に設定するとランタイムエラーが発生します。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:remove"><apiName>remove</apiName><shortdesc>
      不要なインスタンスをその親から削除するかどうかを決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      不要なインスタンスをその親から削除するかどうかを決定します。 <codeph>true</codeph> に設定すると、キャッシュカウントが減少したときに、余分な各エレメントの親で <codeph>removeChild()</codeph> メソッドが呼び出されます。
      
      <p>このプロパティは、ファクトリにより DisplayObjects が生成されるときにのみ有効です。 他のファクトリタイプの場合、このプロパティを <codeph>true</codeph> に設定するとランタイムエラーが発生します。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:count:get"><apiName>count</apiName><shortdesc>
      キャッシュに現在、必要なアイテム数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      キャッシュに現在、必要なアイテム数です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:factory:get"><apiName>factory</apiName><shortdesc>
      キャッシュするオブジェクトのタイプを生成するファクトリです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/></apiValueDef><apiDesc>
      キャッシュするオブジェクトのタイプを生成するファクトリです。 これに割り当てると、現在のすべてのインスタンスが破棄されて、正しいタイプの新しいインスタンスが再作成されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:format:get"><apiName>format</apiName><shortdesc>
      作成されたインスタンスのいずれかに適用される TextFormat です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.text:TextFormat"/></apiValueDef><apiDesc>
      作成されたインスタンスのいずれかに適用される TextFormat です。 設定された場合、このフォーマットが、作成されたあらゆるインスタンスのコンテンツに現在のデフォルトフォーマットとして適用されます。 このプロパティは、ファクトリにより TextField インスタンスが生成される場合にのみ有効です。  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:instances:get"><apiName>instances</apiName><shortdesc>
      キャッシュされたインスタンスの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      キャッシュされたインスタンスの配列です。 この配列の中には、現在要求されているもの以外にもインスタンスが存在する場合があります。 この配列の長さではなく、インスタンスキャッシュの <codeph>count</codeph> プロパティを確認する必要があります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:properties:get"><apiName>properties</apiName><shortdesc>
      新しいインスタンスに割り当てるプロパティのハッシュマップです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      新しいインスタンスに割り当てるプロパティのハッシュマップです。 このハッシュマップ内のキーと値の各ペアが、作成された各インスタンスに割り当てられます。 プロパティハッシュマップは設定時に、既存のあらゆるインスタンスに割り当てられます。
      
      <p>ハッシュマップ内の値のクローンは作成されません。オブジェクト値はすべてのインスタンスにより共有されます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:insertPosition:set"><apiName>insertPosition</apiName><shortdesc> 
      親が持つ子のリスト中のインスタンスの位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="int"/></apiValueDef><apiDesc> 
      親が持つ子のリスト中のインスタンスの位置です。 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:CartesianTransform"><apiName>CartesianTransform</apiName><shortdesc>
  CartesianTransform オブジェクトは、x/y 直交座標へのデータ値のマッピングおよびその逆のマッピングに使用される軸のセットを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:DataTransform</apiBaseClassifier></apiClassifierDef><apiDesc>
  CartesianTransform オブジェクトは、x/y 直交座標へのデータ値のマッピングおよびその逆のマッピングに使用される軸のセットを表します。
 
  <p>通常、各自のアプリケーションでグラフを使用する場合は、CartesianTransform オブジェクトを操作する必要はありません。 変換は、組み込みまれたグラフタイプによって自動的に作成され、それに含まれる系列によってレンダリング座標にデータを変換するために使用されます。</p> 
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:CartesianTransform:CartesianTransform"><apiName>CartesianTransform</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:CartesianTransform:invertTransform"><apiName>invertTransform</apiName><shortdesc> 
      DataTransform 座標系に対応する x 座標と y 座標をデータ領域の 2 次元値に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>変換された値を保持する配列です。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiType value="restParam"/><apiDesc>x 座標と y 座標です (この順序で示されます)。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      DataTransform 座標系に対応する x 座標と y 座標をデータ領域の 2 次元値に変換します。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianTransform:transformCache"><apiName>transformCache</apiName><shortdesc>
      データを表す数値のセットをスクリーン座標にマッピングします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>それぞれのフィールドにデータ値が格納されたオブジェクトの配列です。 また、この関数によって変換された数値が保存される場所でもあります。
     
      </apiDesc></apiParam><apiParam><apiItemName>xField</apiItemName><apiType value="String"/><apiDesc>x 軸のデータ値が保存されるフィールドです。
     
      </apiDesc></apiParam><apiParam><apiItemName>xConvertedField</apiItemName><apiType value="String"/><apiDesc>マッピングされた x スクリーン座標が保存されるフィールドです。
     
      </apiDesc></apiParam><apiParam><apiItemName>yField</apiItemName><apiType value="String"/><apiDesc>y 軸のデータ値が保存されるフィールドです。
     
      </apiDesc></apiParam><apiParam><apiItemName>yConvertedField</apiItemName><apiType value="String"/><apiDesc>マッピングされた y スクリーン座標が保存されるフィールドです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      データを表す数値のセットをスクリーン座標にマッピングします。 このメソッドでは、値はすべて数値と見なされるので、数値以外の値は <codeph>mapCache()</codeph> メソッドで変換されている必要があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:CartesianTransform:HORIZONTAL_AXIS"><apiName>HORIZONTAL_AXIS</apiName><shortdesc>
      水平軸を表すストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>h</apiData><apiType value="String"/></apiValueDef><apiDesc>
      水平軸を表すストリングです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianTransform:VERTICAL_AXIS"><apiName>VERTICAL_AXIS</apiName><shortdesc>
      垂直軸を表すストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>v</apiData><apiType value="String"/></apiValueDef><apiDesc>
      垂直軸を表すストリングです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianTransform:pixelHeight:set"><apiName>pixelHeight</apiName><shortdesc>
      CartesianTransform で表されるデータ領域の高さ（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
      CartesianTransform で表されるデータ領域の高さ（ピクセル単位）です。 このプロパティは、レイアウト時にグラフによって明示的に設定されます。 CartesianTransform では、このプロパティを使用してデータ値をスクリーン座標にマッピングします。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianTransform:pixelWidth:set"><apiName>pixelWidth</apiName><shortdesc>
      CartesianTransform で表されるデータ領域の幅（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
      CartesianTransform で表されるデータ領域の幅（ピクセル単位）です。 このプロパティは、レイアウト時にグラフによって明示的に設定されます。 CartesianTransform では、このプロパティを使用してデータ値をスクリーン座標にマッピングします。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:ChartState"><apiName>ChartState</apiName><shortdesc>
  グラフの現在の状態を記述します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  グラフの現在の状態を記述します。 系列の実装によって Chart.state 値を調べて、グラフにデータが表示されるかどうか、および対応するレンダリングの方法を判別できます。
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.charts.chartClasses:ChartState:HIDING_DATA"><apiName>HIDING_DATA</apiName><shortdesc>
	  グラフでは現在、古いグラフデータを非表示にするトランジションが実行されています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  グラフでは現在、古いグラフデータを非表示にするトランジションが実行されています。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartState:NONE"><apiName>NONE</apiName><shortdesc>
	  状態がありません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  状態がありません。 グラフには、そのデータのみが表示されます。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartState:PREPARING_TO_HIDE_DATA"><apiName>PREPARING_TO_HIDE_DATA</apiName><shortdesc>
	  グラフのデータの表示が変更されており、現在のデータを非表示にするトランジションが開始されようとしています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  グラフのデータの表示が変更されており、現在のデータを非表示にするトランジションが開始されようとしています。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartState:PREPARING_TO_SHOW_DATA"><apiName>PREPARING_TO_SHOW_DATA</apiName><shortdesc>
	  グラフでは、古いデータを非表示にするトランジションがすべて終了し、新しいデータを表示するトランジションを実行する準備が行われています。
	  
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  グラフでは、古いデータを非表示にするトランジションがすべて終了し、新しいデータを表示するトランジションを実行する準備が行われています。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartState:SHOWING_DATA"><apiName>SHOWING_DATA</apiName><shortdesc>
	  グラフでは現在、新しいグラフデータを表示するトランジションが実行されています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>4</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  グラフでは現在、新しいグラフデータを表示するトランジションが実行されています。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:HLOCSeriesBase"><apiName>HLOCSeriesBase</apiName><shortdesc>
  HLOCSeriesBase は、2 つの財務系列タイプ HLOCSeries および CandlestickSeries の基本クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.chartClasses:HLOCSeriesBase" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列が、関連する凡例にマーカーをレンダリングする場合に使用するクラスです。 このスタイルが <codeph>null</codeph> の場合、ほとんどの系列ではデフォルトで itemRenderer が凡例マーカースキンとして使用されます。 凡例マーカーとして使用するクラスには、IFlexDisplayObject インターフェイスを実装する必要があるだけでなく、オプションで ISimpleStyleClient インターフェイスおよび IDataRenderer インターフェイスを実装することもできます。 凡例マーカーとして使用するクラスに IDataRenderer インターフェイスを実装すると、データプロパティに LegendData インスタンスが割り当てられます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.chartClasses:HLOCSeriesBase" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列がグラフに個々のアイテムを表現する場合に使用するクラスとなるファクトリです。 このクラスは、グラフ内のエレメントごとに 1 回インスタンス化されます。 itemRenderer として使用するクラスには、IFlexDisplayObject、ISimpleStyleClient、IDataRenderer の各インターフェイスを実装する必要があります。 <codeph>data</codeph> プロパティには、スキンインスタンスがレンダリングする chartItem が割り当てられます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IColumn</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  HLOCSeriesBase は、2 つの財務系列タイプ HLOCSeries および CandlestickSeries の基本クラスです。 グラフの始値、終値、高値、安値に関連するほとんどのビヘイビアーは、このクラスに属します。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:HLOCSeriesBase:HLOCSeriesBase"><apiName>HLOCSeriesBase</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:beginInterpolation"><apiName>beginInterpolation</apiName><shortdesc>
      
      補間エフェクトを開始するために SeriesInterpolate エフェクトによって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>系列が補間を実行するために必要なデータです。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>sourceRenderData</apiItemName><apiType value="Object"/><apiDesc>補間を行う範囲の系列のソースデータです。
     
      </apiDesc></apiParam><apiParam><apiItemName>destRenderData</apiItemName><apiType value="Object"/><apiDesc>補間を行う範囲の系列の宛先データです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      補間エフェクトを開始するために SeriesInterpolate エフェクトによって呼び出されます。 このエフェクトは、補間する範囲の系列のソースと宛先のデータを渡します。エフェクトは、このメソッドの戻り値を系列の <codeph>interpolate()</codeph> メソッドに繰り返し渡すことによって、このエフェクトの間のアニメーションを更新します。 系列は補間を実行するために必要なデータを算出し、それをこのメソッドに戻します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:describeData"><apiName>describeData</apiName><shortdesc>
      
      
      この IChartElement で表されるデータの記述を取得するために、管理する DataTransform によって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>表示されるデータを記述する DataDescription インスタンスを含む Array です。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>データの記述を取得する軸を特定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>特定の軸で管理される DataDescription オブジェクトの値を示すビットフィールドです。 インプリメンタによって必要なフィールドを計算する方法でのみ最適化できます。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      この IChartElement で表されるデータの記述を取得するために、管理する DataTransform によって呼び出されます。 インプリメンタによって mx.charts.chartClasses.DataDescription オブジェクトの配列が入力されて返され、表示データ（minimum、maximum、interval、unitSize など）から値を自動生成するすべての軸に沿ってこれらのデータが正確に記述されることが保証されます。 ほとんどのエレメントタイプでは、1 つの DataDescription を含む配列が返されます。 BarSet や ColumnSet などのエレメントを集約します。それらのサブエレメントによって表示されるデータを記述する複数の DataDescription インスタンスを返すことがあります。 呼び出されると、インプリメンタによって <codeph>dimension</codeph> パラメーターで指定された軸に沿ってデータが記述されます。 この関数は、グラフによってサポートされる軸ごとに呼び出される場合があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:formatDataTip"><apiName>formatDataTip</apiName><shortdesc> 
      ChartItem についてデータヒントとして表示するのに適したテキスト説明を生成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>アイテムの DataTip です。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>hd</apiItemName><apiOperationClassifier>mx.charts:HitData</apiOperationClassifier><apiDesc>ChartItem に対する HitData です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      ChartItem についてデータヒントとして表示するのに適したテキスト説明を生成します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:getElementBounds"><apiName>getElementBounds</apiName><shortdesc>
      
      この系列で生成された renderData 構造の elementBounds、bounds および visibleBounds の各プロパティに値を入力します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderData</apiItemName><apiType value="Object"/><apiDesc>この系列によって生成される構造です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      この系列で生成された renderData 構造の <codeph>elementBounds</codeph>、<codeph>bounds</codeph> および <codeph>visibleBounds</codeph> の各プロパティに値を入力します。 エフェクトクラスは、様々なエフェクトタイプの実装に使用される各フィールドに値を入力するためにこのメソッドを呼び出します。 要求されたときにのみ系列のアイテムの境界を生成するには、派生クラスにこのメソッドを実装する必要があります。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:getItemsInRegion"><apiName>getItemsInRegion</apiName><shortdesc>
      
      系列の矩形領域内にあるすべてのアイテムを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>指定された矩形領域内にある ChartItem オブジェクトの配列です。
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>r</apiItemName><apiType value="flash.geom:Rectangle"/><apiDesc>領域を定義する Rectangle オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      系列の矩形領域内にあるすべてのアイテムを取得します。 この関数は、どのアイテムが系列内で特定の矩形領域にあるかを判断するために呼び出します。
      <p>個々の系列によって、それぞれのグラフアイテムが領域の下にあるかどうかが決まります。 ポイントは、グローバルな座標空間内にある必要があります。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:getMissingInterpolationValues"><apiName>getMissingInterpolationValues</apiName><shortdesc>
      
      補間構造内の欠損値を埋めます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sourceProps</apiItemName><apiType value="Object"/><apiDesc>特定のアイテムについて補間されるソース値の入ったオブジェクトです。 このメソッドが終了するとき、このオブジェクトのすべてのプロパティ値は <codeph>NaN</codeph> 値ではなくなります。
     
      </apiDesc></apiParam><apiParam><apiItemName>srcCache</apiItemName><apiType value="Array"/><apiDesc>補間されるグラフアイテムのソースの配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>destProps</apiItemName><apiType value="Object"/><apiDesc>特定のアイテムについて補間される宛先値の入ったオブジェクトです。 このメソッドが終了するとき、このオブジェクトのすべてのプロパティ値は <codeph>NaN</codeph> 値ではなくなります。
     
      </apiDesc></apiParam><apiParam><apiItemName>destCache</apiItemName><apiType value="Array"/><apiDesc>補間されるグラフアイテムの宛先の配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>キャッシュに入れられるアイテムのインデックスです。  
     
      </apiDesc></apiParam><apiParam><apiItemName>customData</apiItemName><apiType value="Object"/><apiDesc>系列が <codeph>initializeInterpolationData()</codeph> メソッドに渡したデータです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      補間構造内の欠損値を埋めます。 系列が <codeph>initializeInterpolationData()</codeph> メソッドを呼び出す場合、補間のためのソースと宛先の値の配列を渡します。 これらの 2 つの配列のいずれかが不完全である場合、系列は補間のための "適切な" プレースホルダーを提供する必要があります。 これらのプレースホルダーーが決定される方法は、系列のタイプに固有です。 系列エクステンダーは、このメソッドをオーバーライドして、これらのプレースホルダー値を提供する必要があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:styleChanged"><apiName>styleChanged</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:updateData"><apiName>updateData</apiName><shortdesc>
      
      このメソッドは、系列が表す基になるデータが変更され、データプロバイダーから再ロードする必要がある場合に呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      このメソッドは、系列が表す基になるデータが変更され、データプロバイダーから再ロードする必要がある場合に呼び出されます。 カスタム系列タイプを実装する場合、このメソッドをオーバーライドして、系列をレンダリングするのに必要なすべてのデータをそのデータプロバイダーからロードする必要があります。 さらに、<codeph>super.updateData()</codeph> メソッドは必ずサブクラス内で呼び出す必要があります。 通常、このメソッドは直接呼び出さないでください。 その代わりに、データが特定の時点で確実に更新されるようにするために、系列クラスの <codeph>validateData()</codeph> メソッドを呼び出してください。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:updateFilter"><apiName>updateFilter</apiName><shortdesc>
      
      系列が表す基になるデータに、関連するデータ変換の軸によって表される範囲に対するフィルターを適用する必要がある場合に呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      系列が表す基になるデータに、関連するデータ変換の軸によって表される範囲に対するフィルターを適用する必要がある場合に呼び出されます。 これは、基になるデータが変更されたか、関連する軸の範囲が変更されたことが原因で生じる場合があります。 カスタム系列タイプを実装する場合、このメソッドをオーバーライドし、関連するデータ変換によって管理される軸の <codeph>filterCache()</codeph> メソッドを使用して範囲外のデータを除外する必要があります。 <codeph>filterCache()</codeph> メソッドは、範囲外の値を <codeph>NaN</codeph> に変換します。 <codeph>super.updateFilter()</codeph> メソッドは必ずサブクラス内で呼び出す必要があります。 一般に、このメソッドは直接呼び出さないでください。 その代わり、指定された時点でデータにフィルターが確実に適用されるようにする必要がある場合、Series クラスの <codeph>validateTransform()</codeph> メソッドを呼び出します。 通常、必要な場合には、このメソッドの前に <codeph>updateData()</codeph> メソッドおよび <codeph>updateMapping()</codeph> メソッドが呼び出されていると想定できます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:updateMapping"><apiName>updateMapping</apiName><shortdesc>
      
      このメソッドは、系列が表す基になるデータを数値表現にマッピングする必要がある場合に呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      このメソッドは、系列が表す基になるデータを数値表現にマッピングする必要がある場合に呼び出されます。 これは、基になるデータが変更されたか、系列をレンダリングするのに使用された軸が何らかの方法で変更されたことが原因で生じる場合があります。 カスタム系列を実装する場合、このメソッドをオーバーライドし、表されているデータを、関連するデータ変換によって管理されている軸の <codeph>mapCache()</codeph> メソッドを使用して数値に変換する必要があります。 さらに、<codeph>super.updateMapping()</codeph> メソッドは必ずサブクラス内で呼び出す必要があります。 一般に、このメソッドは直接呼び出さないでください。 その代わりに、データが特定の時点で確実にマップされるようにするために、系列クラスの <codeph>validateData()</codeph> メソッドを呼び出してください。 通常、必要な場合には、このメソッドの前に <codeph>updateData()</codeph> メソッドが呼び出されていると想定できます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:updateTransform"><apiName>updateTransform</apiName><shortdesc>
      
      系列が表す基になるデータを、関連するデータ変換の軸によってスクリーン値に変換する必要がある場合に呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      系列が表す基になるデータを、関連するデータ変換の軸によってスクリーン値に変換する必要がある場合に呼び出されます。 これは、基になるデータが変更されたか、関連する軸の範囲が変更されたか、画面上の領域のサイズが変更されたことが原因で生じる場合があります。 カスタム系列タイプを実装する場合、このメソッドをオーバーライドして、関連するデータ変換の <codeph>transformCache()</codeph> メソッドを使用してデータを変換する必要があります。 <codeph>super.updateTransform()</codeph> メソッドは必ずサブクラス内で呼び出す必要があります。 一般に、このメソッドは直接呼び出さないでください。 その代わり、指定された時点でデータにフィルターが確実に適用されるようにする必要がある場合、Series クラスの <codeph>valiateTransform()</codeph> メソッドを呼び出します。 一般的に、必要な場合には、このメソッドの前に <codeph>updateData()</codeph> メソッド、<codeph>updateMapping()</codeph> メソッド、および <codeph>updateFilter()</codeph> メソッドが呼び出されていると想定できます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:closeField:get"><apiName>closeField</apiName><shortdesc>
      エレメントの終値の y 軸位置を決定するデータプロバイダーのフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      エレメントの終値の y 軸位置を決定するデータプロバイダーのフィールドを指定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:columnWidthRatio:get"><apiName>columnWidthRatio</apiName><shortdesc>
      カテゴリの幅を基準にしてエレメントの幅を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.65.
      
      </apiDefaultValue></apiValueDef><apiDesc>
      カテゴリの幅を基準にしてエレメントの幅を指定します。 値が <codeph>1</codeph> の場合は領域全体が使用され、<codeph>0.6</codeph> の場合はエレメントの使用可能領域の 60% が使用されます。 通常、このプロパティを直接設定することはありません。 実際のエレメントの幅には、<codeph>columnWidthRatio</codeph> プロパティと <codeph>maxColumnWidth</codeph> プロパティの値のうち小さい方が使用されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:highField:get"><apiName>highField</apiName><shortdesc>
      エレメントの高値の y 軸位置を決定するデータプロバイダーのフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      エレメントの高値の y 軸位置を決定するデータプロバイダーのフィールドを指定します。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      x 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      x 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。 LinearAxis クラスまたは CategoryAxis クラスのいずれかを使用すると、horizontalAxis のプロパティを MXML の子タグとして設定したり、ActionScript で LinearAxis オブジェクトまたは CategoryAxis オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      この系列が個々のアイテムを表現する場合に使用する ChartItem のサブタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      この系列が個々のアイテムを表現する場合に使用する ChartItem のサブタイプです。 アイテムにさらに情報を格納する必要がある場合には、サブクラスでオーバーライドし、さらに特化したクラスを返すことができます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:items:get"><apiName>items</apiName><shortdesc>
      
      フィルター適用後に系列内にあるすべてのアイテムを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      フィルター適用後に系列内にあるすべてのアイテムを取得します。
      <p>個々の系列によって、返されるアイテムのリストが決まります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:legendData:get"><apiName>legendData</apiName><shortdesc>
      
      この系列の凡例に示されるアイテムを記述した LegendData インスタンスの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      この系列の凡例に示されるアイテムを記述した LegendData インスタンスの配列です。 派生系列クラスはこの getter をオーバーライドするものであり、それぞれのクラスのスタイルおよびデータ表現メソッドに固有の凡例データを返します。 ほとんどの系列タイプが LegendData インスタンスを 1 つだけ返すのに対して、PieSeries や StackedSeries などの系列タイプのように、配列内の個別のアイテムを示す複数のインスタンスを返すものやいくつもの方法でデータをレンダリングするものもあります。   
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:lowField:get"><apiName>lowField</apiName><shortdesc>
      エレメントの安値の y 軸位置を決定するデータプロバイダーのフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      エレメントの安値の y 軸位置を決定するデータプロバイダーのフィールドを指定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:maxColumnWidth:get"><apiName>maxColumnWidth</apiName><shortdesc>
      エレメントの幅をピクセル単位で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      エレメントの幅をピクセル単位で指定します。 実際のエレメントの幅には、このスタイルと <codeph>columnWidthRatio</codeph> プロパティの値のうち小さい方が使用されます。 通常、この値を直接設定することはありません。この値は、周りを囲むグラフによって割り当てられます。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:offset:get"><apiName>offset</apiName><shortdesc>
      カテゴリの幅を基準に使用可能な領域の中心からエレメントの中心をどのくらい離すかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      カテゴリの幅を基準に使用可能な領域の中心からエレメントの中心をどのくらい離すかを指定します。 デフォルト値の <codeph>0</codeph> では、エレメントは領域の中央に配置されます。 このプロパティの値を <codeph>-50</codeph> に設定すると、エレメントは使用可能な領域の開始位置の中央に配置されます。 通常、このプロパティを直接設定することはありません。 この値は、周りを囲むグラフのコントロールが <codeph>columnWidthRatio</codeph> プロパティの値に基づいて管理します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:openField:get"><apiName>openField</apiName><shortdesc>
      エレメントの始値の y 軸位置を決定する、データプロバイダーのフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      エレメントの始値の y 軸位置を決定する、データプロバイダーのフィールドを指定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      この系列がレンダリングに必要な全データを格納する場合に使用する ChartRenderData のサブタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      この系列がレンダリングに必要な全データを格納する場合に使用する ChartRenderData のサブタイプです。 レンダリング用にさらに情報を格納する必要がある場合には、サブクラスでオーバーライドし、さらに特化したクラスを返すことができます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:protected:renderData:get"><apiName>renderData</apiName><shortdesc>
      
      この系列のレンダリングに必要な情報を格納します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      この系列のレンダリングに必要な情報を格納します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      y 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      y 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。 LinearAxis クラスまたは CategoryAxis クラスのいずれかを使用すると、horizontalAxis のプロパティを MXML の子タグとして設定したり、ActionScript で LinearAxis オブジェクトまたは CategoryAxis オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:xField:get"><apiName>xField</apiName><shortdesc>
      エレメントの x 軸位置を決定するデータプロバイダーのフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      エレメントの x 軸位置を決定するデータプロバイダーのフィールドを指定します。 空のストリング（<codeph>""</codeph>）に設定されている場合、エレメントは dataProvider に表示される順序でレンダリングされます。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:DataDescription"><apiName>DataDescription</apiName><shortdesc>
  DataDescription 構造体は、表すデータの特徴を Axis オブジェクトに記述するために ChartElements によって使用され、このオブジェクトによりグラフに表示されたデータから値が自動生成されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  DataDescription 構造体は、表すデータの特徴を Axis オブジェクトに記述するために ChartElements によって使用され、このオブジェクトによりグラフに表示されたデータから値が自動生成されます。 データを表示する ChartElements は呼び出されたときに、<codeph>describeData()</codeph> メソッドから DataDescriptions を構築し、返す必要があります。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:DataDescription:DataDescription"><apiName>DataDescription</apiName><shortdesc>
	  コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  コンストラクターです。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts.chartClasses:DataDescription:REQUIRED_BOUNDED_VALUES"><apiName>REQUIRED_BOUNDED_VALUES</apiName><shortdesc>
	  軸により、エレメントの describeData() メソッドに渡されたビットフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x2</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  軸により、エレメントの <codeph>describeData()</codeph> メソッドに渡されたビットフラグです。 このフラグが設定されている場合、エレメントは <codeph>boundedValues</codeph> プロパティを設定します。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:REQUIRED_MIN_INTERVAL"><apiName>REQUIRED_MIN_INTERVAL</apiName><shortdesc>
	  軸により、エレメントの describeData() メソッドに渡されたビットフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x1</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  軸により、エレメントの <codeph>describeData()</codeph> メソッドに渡されたビットフラグです。 このフラグが設定されている場合、エレメントは <codeph>minInterval</codeph> プロパティを設定します。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:REQUIRED_MIN_MAX"><apiName>REQUIRED_MIN_MAX</apiName><shortdesc>
	  軸により、エレメントの describeData() メソッドに渡されたビットフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x4</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  軸により、エレメントの <codeph>describeData()</codeph> メソッドに渡されたビットフラグです。 このフラグが設定されている場合、エレメントは <codeph>DescribeData.min</codeph> プロパティおよび <codeph>DescribeData.max</codeph> プロパティを設定します。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:REQUIRED_PADDING"><apiName>REQUIRED_PADDING</apiName><shortdesc>
	  軸により、エレメントの describeData() メソッドに渡されたビットフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x8</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  軸により、エレメントの <codeph>describeData()</codeph> メソッドに渡されたビットフラグです。 このフラグが設定されている場合、エレメントは <codeph>DescribeData.padding</codeph>  プロパティを設定します。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:boundedValues"><apiName>boundedValues</apiName><shortdesc> 
	  エレメント内のデータを記述する BoundedValue オブジェクトの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc> 
	  エレメント内のデータを記述する BoundedValue オブジェクトの配列です。 BoundedValues は、グラフのデータ領域内のデータポイントの周りで追加のスペースを予約するデータポイントです。 要求された場合、グラフエレメントは、BoundedValues がグラフのデータ領域で十分なスペースが可視になるようにするために必要なものをすべてこのプロパティに入力します。 例えば、データラベルを表示するには、各列の上に 20 ピクセルを必要とする ColumnSeries が使用されます。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:max"><apiName>max</apiName><shortdesc>
	  エレメントにより表示される最大データ値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  エレメントにより表示される最大データ値です。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:minInterval"><apiName>minInterval</apiName><shortdesc>
	  データ単位内で、エレメントにより表示された任意の 2 個の値の間の最小の間隔です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  データ単位内で、エレメントにより表示された任意の 2 個の値の間の最小の間隔です。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:min"><apiName>min</apiName><shortdesc>
	  エレメントにより表示される最小データ値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  エレメントにより表示される最小データ値です。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:padding"><apiName>padding</apiName><shortdesc>
	  データ単位内のスペースの量です。すべての値を正しく表示するために、エレメントはその最小値 / 最大値の他に、このスペースを必要とします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  データ単位内のスペースの量です。すべての値を正しく表示するために、エレメントはその最小値 / 最大値の他に、このスペースを必要とします。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:ChartBase"><apiName>ChartBase</apiName><shortdesc>
  ChartBase クラスは、Flex のコンポーネントアーキテクチャと DualStyleObject アーキテクチャの間のリンクです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/><styles><style inherit="no" name="showDataTipTargets" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Boolean">
<description>
  <codeph>showDataTips</codeph> が true に設定されているときに、データポイント上にターゲットを表示するかどうかを指定します。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  グラフの上の境界とそのコンテンツ領域との間隔をピクセル数で指定します。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  グラフの下の境界とそのコンテンツ領域との間隔をピクセル数で指定します。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="maximumDataTipCount" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="int">
<description>
  1 つのグラフで表示されるデータヒントの最大数を指定します。 このスタイルにより許可されている数より多いデータポイントがグラフの範囲内にある場合は、距離により優先順位が付けられ、最も近いものが最初に表示されます。
  
  <p>デフォルト値は NaN であり、範囲内のあらゆるデータヒントが表示されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="itemSelectionColor" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="uint">
<description>
  グラフ内の選択された chartItem の色です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="itemRollOverColor" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="uint">
<description>
  グラフ内の rolledOver chartItem の色です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="itemDisabledColor" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="uint">
<description>
  グラフ内の無効な chartItem の色です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  グラフの背景に使用される塗りのスタイルを指定します。 塗りには単純なカラー値、または mx.graphics.IFill インターフェイスを実装するオブジェクトを指定できます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dataTipRenderer" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Class">
<description>
  データヒントのレンダリングに使用するクラスを指定します。 このクラスは、IFlexDisplayObject インターフェイスおよび IDataRenderer インターフェイスを実装する必要があります。 グラフにより、カスタムデータヒントの <codeph>data</codeph> プロパティが割り当てられます。これは、記述するデータポイントを示す HitData 構造体となります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dataTipCalloutStroke" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  データヒントターゲットからヒントまでのコールアウトの線のレンダリングに使用する Stroke オブジェクトです。 <codeph>null</codeph> に設定すると、線が描画されません。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="String" inherit="no" name="chartSeriesStyles" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Array">
<description>
  ストリングのリストが含まれており、それぞれのストリングはデータ系列のデフォルトの CSS スタイルとして使用される CSS タイプセレクターに対応します。 グラフ内の各データ系列は、<codeph>chartSeriesStyles</codeph> スタイルに格納されているリストから CSS タイプセレクターを描画します。 最初のデータ系列は最初のセレクターを、2 番目の系列は 2 番目のセレクターを使用し、以下も同様です。 タイプセレクター内のスタイルプロパティは、データ系列に <codeph>styleName</codeph> プロパティを指定することによりオーバーライドできます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセット（ピクセル単位）です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 可能な値は、<codeph>"none"</codeph> および <codeph>"underline"</codeph> です。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="String">
<description>
  コンテナ内のテキストの整列。 可能な値は <codeph>"left"</codeph>、<codeph>"right"</codeph>、または <codeph>"center"</codeph> です。
 
  <p>ほとんどのコントロールのデフォルト値は <codeph>left</codeph> です。 Button、LinkButton、および AccordionHeader コンポーネントの場合、デフォルト値は <codeph>"center"</codeph> です。 これらのコンポーネントでは、このプロパティは <codeph>labelPlacement</codeph> プロパティが <codeph>"left"</codeph> または <codeph>"right"</codeph> に設定されている場合にのみ認識されます。 <codeph>labelPlacement</codeph> が <codeph>"top"</codeph> または <codeph>"bottom"</codeph> に設定されている場合は、テキストおよびアイコンが中央に配置されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  各文字間に表示される追加のピクセル数。 正の値を指定すると文字間隔が通常より広くなり、負の値を指定すると文字間隔が通常より狭くなります。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Boolean">
<description>
  カーニングが有効（<codeph>true</codeph>) か無効（<codeph>false</codeph>）かを示すブール値です。カーニングでは、読みやすくするために、特定の文字ペア間の間隔を調整します。ただし、カーニングは見出しを大きなフォントにする場合など、必要な場合に限って使用してください。 カーニングは、埋め込み FlashType フォントに対してのみサポートされています。 Verdana や、Courier New などの等幅フォントなど、特定のフォントではカーニングはサポートされていません。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"bold"</codeph> です。 LegendItem のデフォルトは <codeph>"bold"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>thickness</codeph> プロパティを設定します。 このプロパティは字形のエッジの太さを指定します。 可能な値は -200 から 200 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルは、システムフォントには影響を与えません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"italic"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 ColorPicker コントロール以外のすべてのコントロールのデフォルト値は 10 です。 ColorPicker コントロールのデフォルト値は 11 です。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>sharpness</codeph> プロパティを設定します。 このプロパティは字形のエッジのシャープネスを指定します。 可能な値は -400 から 400 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="String">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>gridFitType</codeph> プロパティを設定します。 可能な値は、<codeph>"none"</codeph>（<codeph>flash.text.GridFitType.NONE</codeph>）、<codeph>"pixel"</codeph>（<codeph>flash.text.GridFitType.PIXEL</codeph>）、および <codeph>"subpixel"</codeph>（<codeph>flash.text.GridFitType.SUBPIXEL</codeph>）です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="String">
<description>
  使用するフォントの名前です。 完全な CSS 実装と異なり、カンマ区切りリストはサポートされません。 任意のフォントファミリ名を使用できます。 汎用フォント名を指定した場合、適切なデバイスフォントに置換されます。
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="String">
<description>
  内部 TextField の <codeph>antiAliasType</codeph> プロパティを設定します。 可能な値は、<codeph>"normal"</codeph>（<codeph>flash.text.AntiAliasType.NORMAL</codeph>）および <codeph>"advanced"</codeph>（<codeph>flash.text.AntiAliasType.ADVANCED</codeph>）です。 
  
  <p>デフォルト値は <codeph>"advanced"</codeph> です。この場合、埋め込み FlashType フォントを使用していれば FlashType レンダラーが有効になります。 FlashType レンダラーを無効にするには、<codeph>"normal"</codeph> に設定してください。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
  
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="uint">
<description>
  コンポーネントが無効な場合のテキストの色です。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="uint">
<description>
  コンポーネントのラベルを含めたコンポーネント内のテキストの色です。
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  コントロールの右の境界とコンテンツ領域の右端との間のピクセル数です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  コントロールの左の境界とコンテンツ領域の左端との間のピクセル数です。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>Flex components inherit the following properties
  from the ChartBase class:</p>
   <pre>
  &lt;mx:<i>tagname</i>
    <strong>Properties</strong>
    allElements="<i>Array; No default</i>"
    annotationElements="<i>Array; No default</i>"
    backgroundElements="<i>Array; No default</i>"
    chartState="<i></i>"
    clipContent="false|true"
    dataProvider="<i>No default</i>"
    dataRegion"<i>No default</i>"
    dataTipFunction="<i>No default</i>"
    dataTipLayerIndex"<i>No default</i>"
    dataTipMode"<i>No default</i>"
    description"<i>No default</i>"
    dragEnabled="false|true"
    dragMoveEnabled="false|true"
    dropEnabled="false|true"
    labelElements"<i>No default</i>"
    legendData"<i>No default</i>"
    mouseSensitivity="5"
    selectedChartItem=<i>ChartItem; No default</i>"
    selectedChartItems=<i>Array; No default</i>"
    selectionMode="none|single|multiple"
    series="<i>No default</i>"
    seriesFilters"<i>No default</i>"
    showAllDataTips="true|false"
    showDataTips="true|false"
    transforms="<i>No default</i>"
    
    <strong>Styles</strong>
    chartSeriesStyles="<i>Style; No default</i>"
    dataTipCalloutStroke="<i>Stroke; No default</i>"
    dataTipRenderer="<i>Renderer; No default</i>"
    fill="<i>IFill; No default</i>"
    fontFamily="<i>Verdana</i>"
    fontSize="<i>10</i>"
    itemDisabledColor="<i>uint; No default</i>"
    itemRollOverColor="<i>uint; No default</i>"
    itemSelectionColor="<i>uint; No default</i>"
    maximumDataTipCount="NaN"
    paddingBottom="<i>No default</i>"
    paddingTop="<i>No default</i>"
    paddingLeft="<i>0</i>"
    paddingRight="<i>0</i>"
    showDataTipTargets="true|false"  
    
   <strong>Events</strong>
    change="<i>Event; No default</i>"
    itemClick="<i>Event; No default</i>"
    itemDoubleClick="<i>Event; No default</i>"
    itemMouseDown="<i>Event; No default</i>"
    itemMouseMove="<i>Event; No default</i>"
    itemMouseUp="<i>Event; No default</i>"
    itemRollOut="<i>Event; No default</i>"
    itemRollOver="<i>Event; No default</i>"
  &gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  ChartBase クラスは、Flex のコンポーネントアーキテクチャと DualStyleObject アーキテクチャの間のリンクです。 ChartBase クラスは Flex UIComponent の基本クラスを拡張しますが、DualStyleObject の各クラスは ChartBase クラスに含まれています。
   <p>通常、ChartBase クラスを直接使用することはありません。代わりに、そのサブクラス（PlotChart または BubbleChart など）の 1 つを使用します。 このクラスは、mx.charts パッケージで提供される一般的なグラフタイプの基本クラスとして機能します。</p>
  
  <p>このクラスは、フレームワークの一般的な機能に簡単にアクセスするための CSS スタイルおよび CSS プロパティの数を定義します。</p>
  
  <p>グラフの最小サイズは 20 × 20 ピクセルです。 グラフの最大サイズに制限はありません。 グラフの推奨サイズは 400 × 400 ピクセルです。</p>
  
  <p>ChartBase オブジェクトおよびそのサブクラスは、グラフ内でマウスポインターから最も近いデータポイントを表す追加のデータを提供することで、通常のマウスイベントオブジェクトを拡張します。 マウスイベントのイベントオブジェクトには追加のプロパティである <codeph>hitData</codeph> が含まれています。このプロパティには最も近いデータポイントを表す HitData オブジェクトが含まれています。 HitData オブジェクトの内容の詳細については、mx.charts.HitData を参照してください。</p>
  
  <p>ChartBase オブジェクトは、マウスポインターから一定の範囲内にあるデータポイントのみを考慮します。 この半径は、<codeph>mouseSensitivity</codeph> プロパティを使用して設定できます。 <codeph>mouseSensitivity</codeph> 半径内にデータポイントがない場合、event.hitData は <codeph>null</codeph> になります。</p>
   </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#HitData"><linktext>mx.charts.HitData</linktext></link><link href="mx.charts.xml#CategoryAxis"><linktext>mx.charts.CategoryAxis</linktext></link><link href="mx.charts.xml#LinearAxis"><linktext>mx.charts.LinearAxis</linktext></link></related-links><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.ITEM_ROLL_OVER_itemRollOver"><apiName>itemRollOver</apiName><shortdesc>
  マウスポインターの下に新しいデータポイントが見つかると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.ITEM_ROLL_OVER</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  マウスポインターの下に新しいデータポイントが見つかると送出されます。 <codeph>mouseSensitivity</codeph> プロパティで指定された半径内のデータポイントのみが考慮されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.ITEM_ROLL_OUT_itemRollOut"><apiName>itemRollOut</apiName><shortdesc>
  マウスポインターから最も近いデータポイントが変わると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.ITEM_ROLL_OUT</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  マウスポインターから最も近いデータポイントが変わると送出されます。 <codeph>mouseSensitivity</codeph> プロパティで指定された半径内のデータポイントのみが考慮されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.ITEM_MOUSE_UP_itemMouseUp"><apiName>itemMouseUp</apiName><shortdesc>
  マウスのボタンを離したときにマウスポインターの下にデータポイントが見つかると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.ITEM_MOUSE_UP</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  マウスのボタンを離したときにマウスポインターの下にデータポイントが見つかると送出されます。 <codeph>mouseSensitivity</codeph> プロパティで指定された半径内のデータポイントのみが考慮されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.ITEM_MOUSE_MOVE_itemMouseMove"><apiName>itemMouseMove</apiName><shortdesc>
  マウスがデータポイント上にあるときにマウスポインターが移動すると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.ITEM_MOUSE_MOVE</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  マウスがデータポイント上にあるときにマウスポインターが移動すると送出されます。 <codeph>mouseSensitivity</codeph> プロパティで指定された半径内のデータポイントのみが考慮されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.ITEM_MOUSE_DOWN_itemMouseDown"><apiName>itemMouseDown</apiName><shortdesc>
  マウスのボタンを押したときにマウスポインターの下にデータポイントが見つかると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.ITEM_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  マウスのボタンを押したときにマウスポインターの下にデータポイントが見つかると送出されます。 <codeph>mouseSensitivity</codeph> プロパティで指定された半径内のデータポイントのみが考慮されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.ITEM_DOUBLE_CLICK_itemDoubleClick"><apiName>itemDoubleClick</apiName><shortdesc>
  マウスをダブルクリックしたときにマウスポインターの下にデータポイントが見つかると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.ITEM_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  マウスをダブルクリックしたときにマウスポインターの下にデータポイントが見つかると送出されます。 <codeph>mouseSensitivity</codeph> プロパティで指定された半径内のデータポイントのみが考慮されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.MOUSE_CLICK_DATA_itemClick"><apiName>itemClick</apiName><shortdesc>
  マウスをクリックしたときにマウスポインターの下にデータポイントが見つかると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.MOUSE_CLICK_DATA</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  マウスをクリックしたときにマウスポインターの下にデータポイントが見つかると送出されます。 <codeph>mouseSensitivity</codeph> プロパティで指定された半径内のデータポイントのみが考慮されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartEvent.CHART_DOUBLE_CLICK_chartDoubleClick"><apiName>chartDoubleClick</apiName><shortdesc>
  グラフ上でマウスをダブルクリックしたときにマウスポインターの下にデータポイントが見つからない場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartEvent.CHART_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  グラフ上でマウスをダブルクリックしたときにマウスポインターの下にデータポイントが見つからない場合に送出されます。 <codeph>mouseSensitivity</codeph> プロパティで指定された半径内のデータポイントのみが考慮されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartEvent.CHART_CLICK_chartClick"><apiName>chartClick</apiName><shortdesc>
  グラフ上でマウスをクリックしたときにマウスポインターの下にデータポイントが見つからない場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartEvent.CHART_CLICK</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  グラフ上でマウスをクリックしたときにマウスポインターの下にデータポイントが見つからない場合に送出されます。 <codeph>mouseSensitivity</codeph> プロパティで指定された半径内のデータポイントのみが考慮されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  グラフ内の選択が変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  グラフ内の選択が変更されたときに送出されます。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.charts.chartClasses:ChartBase:ChartBase"><apiName>ChartBase</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:ChartBase:protected:addDragData"><apiName>addDragData</apiName><shortdesc>
      選択したアイテムをドラッグ &amp; ドロップ操作の一部として DragSource オブジェクトに追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>ds</apiItemName><apiType value="Object"/><apiDesc>データが追加される DragSource オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      選択したアイテムをドラッグ &amp; ドロップ操作の一部として DragSource オブジェクトに追加します。 このメソッドをオーバーライドして、他のデータをドラッグソースに追加することができます。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:applySeriesSet"><apiName>applySeriesSet</apiName><shortdesc>
      系列を前処理し、表示用に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>系列セットを適用した系列の配列です。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>seriesSet</apiItemName><apiType value="Array"/><apiDesc>事前処理する系列の配列です。
      </apiDesc></apiParam><apiParam><apiItemName>transform</apiItemName><apiOperationClassifier>mx.charts.chartClasses:DataTransform</apiOperationClassifier><apiDesc>系列によって使用される変換です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      系列を前処理し、表示用に変換します。 通常、このメソッドを直接呼び出すことはありません。 代わりに、グラフコントロールの <codeph>commitProperties()</codeph> サイクルの間に <codeph>invalidateSeries()</codeph> メソッドの呼び出しによって系列が無効化されると、このメソッドが自動的に呼び出されます。
      <p>デフォルトでは、セット内の各系列につき一度ずつ、<codeph>customizeSeries()</codeph> メソッドが呼び出されます。Chart サブクラスはこのメソッドをオーバーライドして、系列セット全体に適用できるカスタマイズロジックを追加することができます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:clearSelection"><apiName>clearSelection</apiName><shortdesc>
      グラフコントロール内の選択されたすべてのグラフアイテムを選択解除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      グラフコントロール内の選択されたすべてのグラフアイテムを選択解除します。 グラフ内のすべてのグラフアイテムの <codeph>currentState</codeph> プロパティを、<codeph>none</codeph> に設定します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:customizeSeries"><apiName>customizeSeries</apiName><shortdesc>
      グラフの系列に、系列ごとのカスタマイズおよびフォーマットを適用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>seriesGlyph</apiItemName><apiOperationClassifier>mx.charts.chartClasses:Series</apiOperationClassifier><apiDesc>カスタマイズする系列です。
      </apiDesc></apiParam><apiParam><apiItemName>i</apiItemName><apiType value="uint"/><apiDesc>系列配列の系列のインデックスです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      グラフの系列に、系列ごとのカスタマイズおよびフォーマットを適用します。このメソッドは、<codeph>invalidateSeries()</codeph> メソッドの呼び出しによって系列が変更されると、各系列につき一度ずつ呼び出されます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:dragCompleteHandler"><apiName>dragCompleteHandler</apiName><shortdesc>
      DragEvent.DRAG_COMPLETE タイプのイベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>DragEvent オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>DragEvent.DRAG_COMPLETE</codeph> タイプのイベントを処理します。 このメソッドは、データプロバイダーからアイテムを削除します。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:dragDropHandler"><apiName>dragDropHandler</apiName><shortdesc>
      DragEvent.DRAG_DROP タイプのイベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>DragEvent オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>DragEvent.DRAG_DROP</codeph> タイプのイベントを処理します。 このメソッドは、<codeph>hideDropFeedback()</codeph> メソッドを呼び出して、UI フィードバックを非表示にします。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:dragEnterHandler"><apiName>dragEnterHandler</apiName><shortdesc>
      DragEvent.DRAG_ENTER タイプのイベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>DragEvent オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>DragEvent.DRAG_ENTER</codeph> タイプのイベントを処理します。 このメソッドは、DragSource オブジェクトに有効なエレメントが格納されているかどうかを判別し、<codeph>showDropFeedback()</codeph> メソッドを使用して UI フィードバックを設定します。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:dragExitHandler"><apiName>dragExitHandler</apiName><shortdesc>
      DragEvent.DRAG_EXIT タイプのイベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>DragEvent オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>DragEvent.DRAG_EXIT</codeph> タイプのイベントを処理します。 このメソッドは、<codeph>hideDropFeedback()</codeph> メソッドを呼び出して、UI フィードバックを非表示にします。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:dragOverHandler"><apiName>dragOverHandler</apiName><shortdesc>
      DragEvent.DRAG_OVER タイプのイベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>DragEvent オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>DragEvent.DRAG_OVER</codeph> タイプのイベントを処理します。 このメソッドは、DragSource オブジェクトに有効なエレメントが格納されているかどうかを判別し、<codeph>showDropFeedback()</codeph> メソッドを使用して UI フィードバックを設定します。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:dragStartHandler"><apiName>dragStartHandler</apiName><shortdesc>
      dragStart イベントのデフォルトハンドラーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>DragEvent オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>dragStart</codeph> イベントのデフォルトハンドラーです。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:findDataPoints"><apiName>findDataPoints</apiName><shortdesc>
      メソッドに渡された座標に最も近いデータポイントを表す HitData オブジェクトの配列を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>HitData オブジェクトの配列です。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>ChartBase オブジェクトを基準にした x 座標です。
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>ChartBase オブジェクトを基準にした y 座標です。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      メソッドに渡された座標に最も近いデータポイントを表す HitData オブジェクトの配列を返します。 <codeph>x</codeph> および <codeph>y</codeph> の引数は、ChartBase オブジェクトの座標系の値である必要があります。
      <p>このメソッドは、近くにあるデータポイントを探す際に、ChartBase オブジェクトの <codeph>mouseSensitivity</codeph> プロパティで指定された制限に準拠します。</p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.charts.xml#HitData"><linktext>mx.charts.HitData</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:getAllDataPoints"><apiName>getAllDataPoints</apiName><shortdesc>
      IChartElement2 インターフェイスを実装する、基になるオブジェクト内のグラフアイテムを表す HitData オブジェクトの配列を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>データポイントを表す HitData オブジェクトの配列です。
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      IChartElement2 インターフェイスを実装する、基になるオブジェクト内のグラフアイテムを表す HitData オブジェクトの配列を返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:getFirstItem"><apiName>getFirstItem</apiName><shortdesc>
      グラフ内の最初のアイテム（軸に対して）を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>対応する ChartItem オブジェクトです。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>最初のアイテムを返す必要がある方向。可能な値は、<codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> および <codeph>ChartBase.NAVIGATE_VERTICAL</codeph> です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      グラフ内の最初のアイテム（軸に対して）を取得します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:getItemsInRegion"><apiName>getItemsInRegion</apiName><shortdesc>
      定義された矩形領域内にあるすべてのグラフアイテムを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>ChartItem オブジェクトの配列です。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="flash.geom:Rectangle"/><apiDesc>矩形領域です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      定義された矩形領域内にあるすべてのグラフアイテムを取得します。 このメソッドは、どのグラフアイテムが特定の矩形領域の下にあるかを判断するために呼び出します。
      <p>個々のグラフタイプによって、それぞれのグラフアイテムが領域の下にあるかどうかが決まります。 ポイントは、グローバルな座標空間内にある必要があります。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:getLastItem"><apiName>getLastItem</apiName><shortdesc>
      グラフ内の最後のグラフアイテム（軸に対して）を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>対応する ChartItem オブジェクトです。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>最終アイテムを返す必要がある方向。可能な値は、<codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> および <codeph>ChartBase.NAVIGATE_VERTICAL</codeph> です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      グラフ内の最後のグラフアイテム（軸に対して）を取得します。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:getNextItem"><apiName>getNextItem</apiName><shortdesc>
      グラフ内で、現在フォーカスがあるアイテムの隣（軸に対して）のグラフアイテムを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>対応する ChartItem オブジェクトです。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>次のアイテムを返す必要がある方向。可能な値は、<codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> および <codeph>ChartBase.NAVIGATE_VERTICAL</codeph> です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      グラフ内で、現在フォーカスがあるアイテムの隣（軸に対して）のグラフアイテムを取得します。 現在グラフアイテムが選択されていない場合、このメソッドは最初の系列の最初のアイテムを返します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:getPreviousItem"><apiName>getPreviousItem</apiName><shortdesc>
      グラフ内で、現在フォーカスがあるアイテムの前（軸に対して）のグラフアイテムを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>対応する ChartItem オブジェクトです。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>前のアイテムを返す必要がある方向。可能な値は、<codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> および <codeph>ChartBase.NAVIGATE_VERTICAL</codeph> です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      グラフ内で、現在フォーカスがあるアイテムの前（軸に対して）のグラフアイテムを取得します。 現在グラフアイテムが選択されていない場合、このメソッドは最初の系列の最初のアイテムを返します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:hideData"><apiName>hideData</apiName><shortdesc>
      グラフに表示されている、基になるデータが変更されたことをグラフに通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      グラフに表示されている、基になるデータが変更されたことをグラフに通知します。 データエフェクトの表示と非表示の調整実行をトリガーするためにグラフの系列およびエレメントのレンダリングが変更されると、それらグラフの系列およびエレメントによって、この関数が呼び出されます。 通常、このメソッドはグラフ上で直接呼び出さないでください。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:hideDropFeedback"><apiName>hideDropFeedback</apiName><shortdesc>
      ドラッグ＆ドロップ操作が可能であることを示すドロップインジケーターを非表示にします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>マウスの位置に関する情報を格納している DragEvent オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ドラッグ＆ドロップ操作が可能であることを示すドロップインジケーターを非表示にします。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:invalidateChildOrder"><apiName>invalidateChildOrder</apiName><shortdesc>
      グラフの子リストが変更され、順序変更が必要であることをグラフに通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      グラフの子リストが変更され、順序変更が必要であることをグラフに通知します。 派生グラフクラスはこのメソッドを呼び出して、グラフの内部の <codeph>updateChildOrder()</codeph> メソッドの呼び出しを、次の <codeph>commitProperties()</codeph> サイクルでトリガーすることができます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      グラフの再描画をトリガーします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      グラフの再描画をトリガーします。 このメソッドは、グラフの系列またはデータプロバイダーを追加または変更するときに呼び出します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:invalidateSeriesStyles"><apiName>invalidateSeriesStyles</apiName><shortdesc>
      グラフの再描画をトリガーします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      グラフの再描画をトリガーします。 このメソッドは、グラフの系列のスタイルプロパティを変更するときに呼び出します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:invalidateSeries"><apiName>invalidateSeries</apiName><shortdesc>
      グラフの系列配列が変更され、再処理が必要であることをグラフに通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      グラフの系列配列が変更され、再処理が必要であることをグラフに通知します。 派生グラフクラスはこのメソッドを呼び出して、グラフの内部の <codeph>updateSeries()</codeph> メソッドの呼び出しを、次の <codeph>commitProperties()</codeph> サイクルでトリガーすることができます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:legendDataChanged"><apiName>legendDataChanged</apiName><shortdesc>
      新しい LegendDataChanged イベントを送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      新しい LegendDataChanged イベントを送出します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:positionAllDataTips"><apiName>positionAllDataTips</apiName><shortdesc>
      showAllDataTips プロパティが true に設定されている場合、グラフ上の DataTip オブジェクトの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>hitSet</apiItemName><apiType value="Array"/><apiDesc>HitData オブジェクトの配列です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>showAllDataTips</codeph> プロパティが <codeph>true</codeph> に設定されている場合、グラフ上の DataTip オブジェクトの位置を定義します。 このメソッドにより、DataTips が互いに、またはそのターゲットデータアイテムと重複することが確実に防止されます（複数の DataTips が可視の場合）。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:positionDataTips"><apiName>positionDataTips</apiName><shortdesc>
      グラフ上の DataTip オブジェクトの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      グラフ上の DataTip オブジェクトの位置を定義します。 このメソッドにより、DataTip オブジェクトが互いに、またはそのターゲットデータアイテムと重複することが確実に防止されます（複数の DataTip オブジェクトが可視の場合）。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:showDropFeedback"><apiName>showDropFeedback</apiName><shortdesc>
      マウスポインターの下にドロップインジケーターを表示して、ドラッグ＆ドロップ操作が可能であることを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>マウスポインターの位置に関する情報を格納している DragEvent オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      マウスポインターの下にドロップインジケーターを表示して、ドラッグ＆ドロップ操作が可能であることを示します。 ドロップインジケーターはアイテムのドロップ先も示します。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:updateAllDataTips"><apiName>updateAllDataTips</apiName><shortdesc>
      showAllDataTips が設定されている場合、非インタラクティブなデータヒントをすべて表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      <codeph>showAllDataTips</codeph> が設定されている場合、非インタラクティブなデータヒントをすべて表示します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:ChartBase:HORIZONTAL"><apiName>HORIZONTAL</apiName><shortdesc>
      この定数の値は、getNextItem() や getPrevItem() などのメソッドに渡されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontal</apiData><apiType value="String"/></apiValueDef><apiDesc>
      この定数の値は、<codeph>getNextItem()</codeph> や <codeph>getPrevItem()</codeph> などのメソッドに渡されます。これらのメソッドは、この定数を使用して、ユーザーが左矢印などのキーを押したときにどのアイテムまたは系列を選択するかを決定します。例えば、左矢印キーまたは右矢印キーが押された場合、方向は "horizontal"（<codeph>ChartBase.HORIZONTAL</codeph>）に設定されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:VERTICAL"><apiName>VERTICAL</apiName><shortdesc>
      この定数の値は、getNextItem() や getPrevItem() などのメソッドに渡されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>vertical</apiData><apiType value="String"/></apiValueDef><apiDesc>
      この定数の値は、<codeph>getNextItem()</codeph> や <codeph>getPrevItem()</codeph> などのメソッドに渡されます。これらのメソッドは、この定数を使用して、ユーザーが左矢印などのキーを押したときにどのアイテムまたは系列を選択するかを決定します。例えば、上矢印キーまたは下矢印キーが押された場合、方向は "vertical"（<codeph>ChartBase.VERTICAL</codeph>）に設定されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:protected:allElements"><apiName>allElements</apiName><shortdesc>
      グラフ内に表示される全グラフエレメントのセットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
      グラフ内に表示される全グラフエレメントのセットです。 このセットには、系列、2 番目の系列、背景エレメントおよび注釈エレメントが含まれます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:dataTipFunction"><apiName>dataTipFunction</apiName><shortdesc>
      値からデータヒントを生成するために使用されるコールバックメソッドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      値からデータヒントを生成するために使用されるコールバックメソッドを指定します。 このメソッドのシグネチャは、次のとおりです。
      <pre>
      function dataTipFunction(<i>hitData</i>:HitData):String
      </pre>
      <p>このメソッドは、各データポイントに表示するストリングを返します。 テキストには HTML フォーマットも使用できます。 唯一のパラメーターは、データポイントを記述する HitData オブジェクトです。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:protected:labelElements"><apiName>labelElements</apiName><shortdesc>
      グラフエレメントのラベルを表す表示オブジェクトのセットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
      グラフエレメントのラベルを表す表示オブジェクトのセットです。 系列、注釈および背景のタイプの中には、エレメントやコールアウトなどのオーバーレイを含むものがあります。 エレメントは、オーバーレイを含む表示オブジェクトをグラフに渡して、他のすべてのグラフエレメントの前面に表示されるようにすることができます。 グラフを実装するユーザーは、<codeph>labelElements</codeph> 配列にあるこれらのオーバーレイオブジェクトにアクセスできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:mouseSensitivity"><apiName>mouseSensitivity</apiName><shortdesc>
      マウスポインターをグラフ上で移動させたときに、データポイントがマウスポインターの下にあると Flex で判断するための距離をピクセル単位で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>5</apiData><apiType value="Number"/><apiDefaultValue>5
      
      </apiDefaultValue></apiValueDef><apiDesc>
      マウスポインターをグラフ上で移動させたときに、データポイントがマウスポインターの下にあると Flex で判断するための距離をピクセル単位で指定します。 Flex では、<codeph>mouseSensitivity</codeph> で指定したピクセル値の範囲内にあるデータポイントはすべてマウスポインターの下にあるものと見なされます。 この値は <codeph>findDataPoints</codeph> メソッドでも使用されます。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:annotationElements:get"><apiName>annotationElements</apiName><shortdesc>
      グラフによってレンダリングされるデータ系列の一番上に表示される ChartElement オブジェクトの配列を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      グラフによってレンダリングされるデータ系列の一番上に表示される ChartElement オブジェクトの配列を設定します。 配列内の各アイテムは、mx.charts.DualStyleObject クラスを拡張し、IChartElement2 インターフェイスを実装する必要があります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:backgroundElements:get"><apiName>backgroundElements</apiName><shortdesc>
      グラフによってレンダリングされるデータ系列の一番下に表示される背景 ChartElement オブジェクトの配列を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      グラフによってレンダリングされるデータ系列の一番下に表示される背景 ChartElement オブジェクトの配列を設定します。 配列内の各アイテムは、mx.charts.DualStyleObject クラスを拡張し、IChartElement2 インターフェイスを実装する必要があります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:chartState:get"><apiName>chartState</apiName><shortdesc>
      グラフの現在のトランジションステートです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
      グラフの現在のトランジションステートです。 このプロパティは、グラフが古いデータを現在トランジションで廃棄中であるか、新しいデータをトランジションで取り込み中であるか、あるいはすべてのトランジションを完了して現在のデータセットを表示中であるかを判別するために使用します。 可能な値は、mx.charts.chartClasses.ChartState の一覧を参照してください。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:clipContent:get"><apiName>clipContent</apiName><shortdesc>
      軸で割り当てられている領域に合わせてグラフを切り取るかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      軸で割り当てられている領域に合わせてグラフを切り取るかどうかを指定します。 グラフを切り取る場合は <codeph>false</codeph> に設定します。 データをレンダリングしたときにグラフが切り取られないようにする場合は、<codeph>true</codeph> に設定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      グラフのデータプロバイダーを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      グラフのデータプロバイダーを指定します。 グラフによってレンダリングされるデータ系列には、このデータプロバイダーが割り当てられます。 同じグラフ内に異種のデータ系列をレンダリングする場合は、それぞれの系列の <codeph>dataProvider</codeph> プロパティを使用してください。
      
      <p>このプロパティは配列のほか、IList インターフェイスまたは ICollectionView インターフェイスを実装する他のすべてのオブジェクトも受け入れます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:protected:dataRegion:get"><apiName>dataRegion</apiName><shortdesc>
      データを表示するのに使用されるグラフの領域です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      データを表示するのに使用されるグラフの領域です。 この矩形には、ふち取り、軸線とラベル、および追加スペースに使用される領域は含まれません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:protected:dataTipLayerIndex:get"><apiName>dataTipLayerIndex</apiName><shortdesc>
      データヒントのレンダリングを行う子のインデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      データヒントのレンダリングを行う子のインデックスです。 可視エレメントをグラフに追加する派生クラスは、このレイヤーの下に追加する必要があります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:dataTipMode:get"><apiName>dataTipMode</apiName><shortdesc>
      Flex による、グラフの DataTip コントロールの表示方法を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Flex による、グラフの DataTip コントロールの表示方法を指定します。 DataTip コントロールは ToolTip コントロールに似ていますが、マウスポインターから最も近いグラフのデータポイントを表す適切な値が表示されるという点で異なります。
     
      <p><codeph>dataTipMode</codeph> の可能な値は、次のとおりです。
       <ul>
        <li><codeph>"single"</codeph> - マウスカーソルに最も近いデータポイントにデータヒントが表示されます。</li>
      
        <li><codeph>"multiple"</codeph> - マウスカーソルの範囲内の任意の DataTip コントロールに対してデータヒントが表示されます。 感度は <codeph>mouseSensitivity</codeph> プロパティで調節できます。</li>
       </ul>
      </p>
     
      <p>DataTip コントロールは、<codeph>dataTipFunction</codeph> プロパティを使用してカスタマイズできます。</p>
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:description:get"><apiName>description</apiName><shortdesc>
      グラフのデータの簡単な説明です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      グラフのデータの簡単な説明です。 アクセシビリティが有効になっている場合、スクリーンリーダーはこのプロパティを使用してグラフを説明します。
      <p>このストリングのデフォルトは空のストリングで、これが意味を持つためには開発者が明示的に割り当てる必要があります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:dragEnabled:get"><apiName>dragEnabled</apiName><shortdesc>
      このグラフの外にアイテムをドラッグして他のコントロールにドロップできるかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このグラフの外にアイテムをドラッグして他のコントロールにドロップできるかどうかを示します。 <codeph>true</codeph> の場合、グラフのドラッグ操作は有効です。<codeph>dropEnabled</codeph> プロパティも <codeph>true</codeph> の場合には、アイテムを順序変更するために、アイテムをドラッグしてこのグラフ内にドロップすることができます。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:protected:dragImage:get"><apiName>dragImage</apiName><shortdesc>
      ドラッグ＆ドロップ操作中にビジュアルオブジェクトを表示するクラスのインスタンスを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:IUIComponent"/><apiDefaultValue>mx.controls.chartClasses.ChartItemDragProxy
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ドラッグ＆ドロップ操作中にビジュアルオブジェクトを表示するクラスのインスタンスを取得します。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:dragMoveEnabled:get"><apiName>dragMoveEnabled</apiName><shortdesc>
      ドラッグのフィードバックとして表示する表示カーソルを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ドラッグのフィードバックとして表示する表示カーソルを示します。 このプロパティが <codeph>true</codeph> かつ <codeph>dragEnabled</codeph> プロパティが <codeph>true</codeph> で、Ctrl キーが押されていない場合は、フィードバックとして <codeph>moveCursor</codeph> が表示されます。 Ctrl キーが押されている場合は、<codeph>copyCursor</codeph> が表示されます。 このプロパティが <codeph>false</codeph> で <codeph>dragEnabled</codeph> プロパティが <codeph>true</codeph> の場合、Ctrl キーが押されているかどうかにかかわらず、<codeph>copyCursor</codeph> が表示されます。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:dropEnabled:get"><apiName>dropEnabled</apiName><shortdesc>
      ドラッグしたアイテムをグラフにドロップできるかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ドラッグしたアイテムをグラフにドロップできるかどうかを示すフラグです。
           <p>このプロパティを <codeph>true</codeph> に設定した場合、グラフはすべてのデータ形式を受け入れ、ドラッグ対象のデータがデータプロバイダー内のデータ形式と一致することを想定します。ドラッグ対象のデータの形式を明示的にチェックする場合は、1 つまたは複数のドラッグイベント（<codeph>dragOver</codeph> など）を処理し、リストクラスがドロップされたデータを受け入れる方法をカスタマイズするために、DragEvent の <codeph>preventDefault()</codeph> メソッドを呼び出す必要があります。</p>
           <p><codeph>dropEnabled</codeph> を <codeph>true</codeph> に設定すると、<codeph>showDropFeedback()</codeph> メソッドと <codeph>hideDropFeedback()</codeph> メソッドが自動的に呼び出されてドロップインジケーターが表示されます。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:legendData:get"><apiName>legendData</apiName><shortdesc>
      凡例アイテムの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="legendDataChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      凡例アイテムの配列です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:selectedChartItem:get"><apiName>selectedChartItem</apiName><shortdesc>
      グラフ内の選択された ChartItem を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.charts:ChartItem</apiValueClassifier></apiValueDef><apiDesc>
      グラフ内の選択された ChartItem を指定します。 複数のアイテムが選択されている場合、このプロパティは最も新しく選択されたアイテムを指定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:selectedChartItems:get"><apiName>selectedChartItems</apiName><shortdesc>
      グラフ内の選択されたすべての ChartItem オブジェクトの配列を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      グラフ内の選択されたすべての ChartItem オブジェクトの配列を指定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:selectionMode:get"><apiName>selectionMode</apiName><shortdesc>
      ChartItem オブジェクトが選択可能であるかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>none
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ChartItem オブジェクトが選択可能であるかどうかを指定します。 可能な値は <codeph>none</codeph>、<codeph>single</codeph>、または <codeph>multiple</codeph> です。 グラフアイテムが選択されることを防ぐには、<codeph>none</codeph> に設定します。 一度に 1 つのアイテムのみを選択可能にするには、<codeph>single</codeph> に設定します。 一度に複数のグラフアイテムを選択可能にするには、<codeph>multiple</codeph> に設定します。
      
      <P>これを <codeph>single</codeph> または <codeph>multiple</codeph> に設定した場合、系列の <codeph>selectable</codeph> プロパティの値を <codeph>false</codeph> に設定すれば、系列ごとにこれをオーバーライドできます。 <codeph>selectionMode</codeph> プロパティの値を <codeph>none</codeph> に設定した場合、系列の <codeph>selectable</codeph> プロパティの値に関わらず、グラフアイテムは選択できなくなります。</P>
           </apiDesc></apiValueDetail><related-links><link href="mx.charts.xml#ChartItem"><linktext>mx.charts.ChartItem</linktext></link><link href="mx.charts.chartClasses.xml#Series"><linktext>mx.charts.chartClasses.Series</linktext></link></related-links></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:seriesFilters:get"><apiName>seriesFilters</apiName><shortdesc>
      グラフ内のすべての系列に適用されるフィルターの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      グラフ内のすべての系列に適用されるフィルターの配列です。 複数のビットマップフィルターをすべての系列に一度に適用するには、このプロパティにそれらのフィルターの配列を割り当ててください。 グラフの系列のデフォルトのフィルターをクリアするには、<codeph>seriesFilter</codeph> プロパティを空の配列に設定します。 <codeph>seriesFilters</codeph> プロパティにフィルターを割り当てるとすべての系列に適用され、個々の系列に割り当てるよりも効率的です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:series:get"><apiName>series</apiName><shortdesc>
      グラフのデータを定義する Series オブジェクトの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      グラフのデータを定義する Series オブジェクトの配列です。 この配列の設定に使用する Series オブジェクトのタイプは、それぞれのグラフによって定義されます。例えば ColumnChart コントロールでは、ColumnSeries オブジェクトがこの配列の一部であることが必要です。 一部のグラフは IChartElement2 タイプのあらゆるオブジェクトを配列の一部として受け入れますが、通常、各グラフにはそれぞれ特定のタイプのオブジェクトが必要です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:showAllDataTips:get"><apiName>showAllDataTips</apiName><shortdesc>
      グラフのすべての DataTip コントロールを Flex で表示するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      グラフのすべての DataTip コントロールを Flex で表示するかどうかを指定します。 DataTip コントロールはツールヒントに似ていますが、グラフのデータポイントを表す適切な値が表示されるという点で異なります。
      
      <p>異なるグラフエレメントには異なるスタイルの DataTip コントロールが表示される場合があります。例えば、積み上げ縦棒グラフのエレメントの場合、縦棒の値とその縦棒が全体に占める割合が両方表示されることがあります。</p>
           <p>DataTip コントロールは、<codeph>dataTipFunction</codeph> プロパティを使用してカスタマイズできます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:showDataTips:get"><apiName>showDataTips</apiName><shortdesc>
      グラフの DataTip コントロールを Flex で表示するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      グラフの DataTip コントロールを Flex で表示するかどうかを指定します。 DataTip コントロールはツールヒントに似ていますが、マウスポインターから最も近いグラフのデータポイントを表す適切な値が表示されるという点で異なります。
      
      <p>異なるグラフエレメントには異なるスタイルの DataTip コントロールが表示される場合があります。例えば、積み上げ縦棒グラフのエレメントの場合、縦棒の値とその縦棒が全体に占める割合が両方表示されることがあります。</p>
           <p>DataTip コントロールは、<codeph>dataTipFunction</codeph> プロパティを使用してカスタマイズできます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:IChartElement2"><apiName>IChartElement2</apiName><shortdesc>
  IChartElement2 には、グラフのデータ領域に表すために UIComponent で必要とされるプロパティとメソッドの基本セットが定義されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IChartElement</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IChartElement2 には、グラフのデータ領域に表すために UIComponent で必要とされるプロパティとメソッドの基本セットが定義されます。 グラフの系列、backgroundElements、または annotationElements の配列に割り当てられたコンポーネントには、このインターフェイスを実装する必要があります。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.charts.chartClasses:IChartElement2:mx.charts.chartClasses:IChartElement2:dataToLocal"><apiName>dataToLocal</apiName><shortdesc>
      1 組のデータ値を画面上の x-y 座標に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>グラフを基準とする座標です。
      
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>dataValues</apiItemName><apiType value="restParam"/><apiDesc>座標に変換するデータの値です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      1 組のデータ値を画面上の x-y 座標に変換します。 この関数は、個々のエレメントと同じ変換を使用して画面上でデータを変換する場合に呼び出します。 例えば、グラフのデータ領域にカスタムのハイライト表示を作成するには、この関数を使用して該当する範囲の画面上の座標を指定することができます。
      
      <p>直交 ChartElements の場合は、通常 2 つの値を渡します。 最初の値は水平軸にマッピングされ、2 番目の値は垂直軸にマッピングされます。</p>
      
      <p>極座標グラフの場合は、最初の値が角度軸にマッピングされ、2 番目の値が放射軸にマッピングされます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IChartElement2:mx.charts.chartClasses:IChartElement2:getAllDataPoints"><apiName>getAllDataPoints</apiName><shortdesc>
      IChartElement2 を実装する、基になるすべてのオブジェクトのアイテムの、HitData の配列を返します。これらの dataTips は、グラフで showAllDataTips が true に設定されているときに表示されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>データポイントを示す HitData オブジェクトです。
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      <codeph>IChartElement2</codeph> を実装する、基になるすべてのオブジェクトのアイテムの HitData の配列を返します。このオブジェクトは、グラフで <codeph>showAllDataTips</codeph> が <codeph>true</codeph> に設定されている場合に dataTips を表示します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IChartElement2:mx.charts.chartClasses:IChartElement2:localToData"><apiName>localToData</apiName><shortdesc>
      画面上の座標を 1 組のデータ値に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>1 組のデータ値です。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>pt</apiItemName><apiType value="flash.geom:Point"/><apiDesc>変換する Point オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      画面上の座標を 1 組のデータ値に変換します。 この関数は、画面上の特定のポイントを表すデータ値を取得する場合に呼び出します。
      <p>個々のグラフタイプによって、この変換がどのように行われるかが決まります。 ポイントは、グラフの座標空間に対応する必要があります。</p>
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.charts.chartClasses:PolarTransform"><apiName>PolarTransform</apiName><shortdesc>
  PolarTransform オブジェクトは、極座標の角度 / 距離へのデータ値のマッピングおよびその逆のマッピングに使用される軸のセットを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:DataTransform</apiBaseClassifier></apiClassifierDef><apiDesc>
  PolarTransform オブジェクトは、極座標の角度 / 距離へのデータ値のマッピングおよびその逆のマッピングに使用される軸のセットを表します。  
 
  <p>通常、PolarTransform オブジェクトを操作する必要はありません。 変換は、組み込みのグラフのタイプによって自動的に作成され、それに含まれる系列によってレンダリング座標にデータを変換するために使用されます。</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:PolarTransform:PolarTransform"><apiName>PolarTransform</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:PolarTransform:setSize"><apiName>setSize</apiName><shortdesc>
      PolarTransform が原点と半径を算出するときに使用する幅と高さを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>PolarTransform の幅 (ピクセル単位)。
      
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>PolarTransform の高さ (ピクセル単位)。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      PolarTransfor が原点と半径を算出するときに使用する幅と高さを設定します。グラフはこのメソッドを呼び出します。一般に、このメソッドは直接呼び出さないでください。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarTransform:transformCache"><apiName>transformCache</apiName><shortdesc>
      
      データを表す数値のセットをスクリーン座標にマッピングします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>それぞれのフィールドにデータ値が格納されたオブジェクトの配列です。 また、この関数によって変換された数値が保存される場所でもあります。
     
      </apiDesc></apiParam><apiParam><apiItemName>aField</apiItemName><apiType value="String"/><apiDesc>x 軸のデータ値を参照できるフィールドです。
     
      </apiDesc></apiParam><apiParam><apiItemName>aConvertedField</apiItemName><apiType value="String"/><apiDesc>マップされた x スクリーン座標が保存されるフィールドです。
     
      </apiDesc></apiParam><apiParam><apiItemName>rField</apiItemName><apiType value="String"/><apiDesc>y 軸のデータ値を参照できるフィールドです。
     
      </apiDesc></apiParam><apiParam><apiItemName>rConvertedField</apiItemName><apiType value="String"/><apiDesc>マップされた y スクリーン座標が保存されるフィールドです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      データを表す数値のセットをスクリーン座標にマッピングします。 このメソッドでは、値はすべて数値と見なされるので、数値以外の値は <codeph>mapCache()</codeph> メソッドで変換されている必要があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:PolarTransform:ANGULAR_AXIS"><apiName>ANGULAR_AXIS</apiName><shortdesc>
      角度軸を表すストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>a</apiData><apiType value="String"/></apiValueDef><apiDesc>
      角度軸を表すストリングです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarTransform:RADIAL_AXIS"><apiName>RADIAL_AXIS</apiName><shortdesc>
      放射軸を表すストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>r</apiData><apiType value="String"/></apiValueDef><apiDesc>
      放射軸を表すストリングです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarTransform:origin:get"><apiName>origin</apiName><shortdesc>
      極変換の原点です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Point"/></apiValueDef><apiDesc>
      極変換の原点です。 この点は関連する系列により、データ単位をスクリーン座標に変換するために使用されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarTransform:radius:get"><apiName>radius</apiName><shortdesc>
      半径は変換により、データ単位を極座標に変換するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      半径は変換により、データ単位を極座標に変換するために使用されます。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:DataTip"><apiName>DataTip</apiName><shortdesc>
  DataTip コントロールは、グラフのユーザーに対してデータポイントに関する情報を提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Color" inherit="yes" name="shadowColor" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="uint">
<description>
  ボタンのスキンのボタン内部のカラーです。 3 次元境界の 1 区画です。 デフォルト値は <codeph>0xEEEEEE</codeph>（明るい灰色）です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  データヒントの上の境界とコンテンツ領域との間のピクセル数です。 デフォルト値は 0 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  データヒントの下の境界とコンテンツ領域との間のピクセル数です。 デフォルト値は 0 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  境界ボックスのスタイルです。 可能な値は、<codeph>"none"</codeph>、<codeph>"solid"</codeph>、<codeph>"inset"</codeph>、および <codeph>"outset"</codeph> です。 デフォルト値は <codeph>"inset"</codeph> です。
 
  <p>メモ：<codeph>borderStyle</codeph> スタイルは、Button コントロールまたは Panel コンテナではサポートされません。 実線の境界を持つ Panel を作成するには、<codeph>borderThickness</codeph> プロパティを設定し、必要に応じて <codeph>dropShadow</codeph> プロパティを <codeph>false</codeph> に設定します。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="uint">
<description>
  3 次元境界の黒い区画、または 2 次元境界のカラー区画のカラーです。 このスタイルは、Button、CheckBox、ComboBox、MenuBar、NumericStepper、ProgressBar、RadioButton、ScrollBar、Slider の各コンポーネント、および <codeph>borderStyle</codeph> スタイルをサポートするすべてのコンポーネントによってサポートされます。 デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合は、<codeph>0xAAB3B3</codeph> になります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="uint">
<description>
  コンポーネントの背景色です。 <codeph>backgroundColor</codeph> または <codeph>backgroundImage</codeph> は、いずれか一方を設定できます。両方を設定することはできません。 Button のように、表面全体がボタン面や他のグラフィックで占められているために、背景色を持たないコンポーネントもあります。 DataGrid コントロールでも、このスタイル設定は無視されます。 デフォルト値は <codeph>undefined</codeph> です。このスタイルと backgroundImage スタイルの両方が未定義である場合、コントロールは透明な背景を持ちます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセット（ピクセル単位）です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash10" type="Class">
<description>
  IUITextField を実装するクラスです。このクラスはテキストをレンダリングするためにこのコンポーネントで使用されます。
 
  <p>mx.core.UITextField クラス（Flash Player に組み込まれている標準の TextField を使用する場合）または mx.core.UIFTETextField クラス（Text Layout Framework を使用して、双方向レイアウトなどの向上したテキストレンダリングを取得する場合）のいずれかに設定できます。</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 可能な値は、<codeph>"none"</codeph> および <codeph>"underline"</codeph> です。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  コンテナ内のテキストの整列。 可能な値は <codeph>"left"</codeph>、<codeph>"right"</codeph>、または <codeph>"center"</codeph> です。
 
  <p>ほとんどのコントロールのデフォルト値は <codeph>left</codeph> です。 Button、LinkButton、および AccordionHeader コンポーネントの場合、デフォルト値は <codeph>"center"</codeph> です。 これらのコンポーネントでは、このプロパティは <codeph>labelPlacement</codeph> プロパティが <codeph>"left"</codeph> または <codeph>"right"</codeph> に設定されている場合にのみ認識されます。 <codeph>labelPlacement</codeph> が <codeph>"top"</codeph> または <codeph>"bottom"</codeph> に設定されている場合は、テキストおよびアイコンが中央に配置されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash10" type="String">
<description>
  このコンポーネントで表示されるテキストのロケールです。
 
  <p>FTE および TLF はこのロケールを使用して Unicode 文字をフォント字形にマッピングしたり、フォールバックフォントを検索したりします。</p>
 
  <p>メモ：このスタイルは、MX コンポーネントで、<codeph>textFieldClass</codeph> として UIFTETextField が指定されている場合にのみ適用されます。</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  各文字間に表示される追加のピクセル数。 正の値を指定すると文字間隔が通常より広くなり、負の値を指定すると文字間隔が通常より狭くなります。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Boolean">
<description>
  カーニングが有効（<codeph>true</codeph>) か無効（<codeph>false</codeph>）かを示すブール値です。カーニングでは、読みやすくするために、特定の文字ペア間の間隔を調整します。ただし、カーニングは見出しを大きなフォントにする場合など、必要な場合に限って使用してください。 カーニングは、高度なアンチエイリアスを適用した埋め込みフォントに対してのみサポートされています。 Verdana や、Courier New などの等幅フォントなど、特定のフォントではカーニングはサポートされていません。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"bold"</codeph> です。 Button コントロールのデフォルト値は <codeph>"bold"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>thickness</codeph> プロパティを設定します。 このプロパティは字形のエッジの太さを指定します。 可能な値は -200 から 200 までの数値です。 
  
  <p>このプロパティが適用されるのは、高度なアンチエイリアスを適用した埋め込みフォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルは、システムフォントには影響を与えません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"italic"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 ColorPicker コントロール以外のすべてのコントロールのデフォルト値は 10 です。 ColorPicker コントロールのデフォルト値は 11 です。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>sharpness</codeph> プロパティを設定します。 このプロパティは字形のエッジのシャープネスを指定します。 可能な値は -400 から 400 までの数値です。 
  
  <p>このプロパティが適用されるのは、高度なアンチエイリアスを適用した埋め込みフォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>gridFitType</codeph> プロパティを設定します。 可能な値は、<codeph>"none"</codeph>（<codeph>flash.text.GridFitType.NONE</codeph>）、<codeph>"pixel"</codeph>（<codeph>flash.text.GridFitType.PIXEL</codeph>）、および <codeph>"subpixel"</codeph>（<codeph>flash.text.GridFitType.SUBPIXEL</codeph>）です。 
  
  <p>このプロパティが適用されるのは、高度なアンチエイリアスを適用した埋め込みフォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  使用するフォントの名前です。 完全な CSS 実装と異なり、カンマ区切りリストはサポートされません。 任意のフォントファミリ名を使用できます。 汎用フォント名を指定した場合、適切なデバイスフォントに置換されます。
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  内部 TextField の <codeph>antiAliasType</codeph> プロパティを設定します。 可能な値は、<codeph>"normal"</codeph>（<codeph>flash.text.AntiAliasType.NORMAL</codeph>）および <codeph>"advanced"</codeph>（<codeph>flash.text.AntiAliasType.ADVANCED</codeph>）です。 
  
  <p>デフォルト値は <codeph>"advanced"</codeph> です。この場合、高度なアンチエイリアスを適用した埋め込みフォントを使用していれば、高度なアンチエイリアスが有効になります。  <codeph>"normal"</codeph> に設定すると、高度なアンチエイリアスが無効になります。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
  
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="uint">
<description>
  コンポーネントが無効な場合のテキストの色です。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="uint">
<description>
  コンポーネントのラベルを含めたコンポーネント内のテキストの色です。
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  コントロールの右の境界とコンテンツ領域の右端との間のピクセル数です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  コントロールの左の境界とコンテンツ領域の左端との間のピクセル数です。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  追加の行間を表します。
 
  <p>デフォルト値は 2 です。</p>
  <p>ComboBox コントロールのデフォルト値は 0 です。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  DataTip コントロールは、グラフのユーザーに対してデータポイントに関する情報を提供します。 ユーザーがグラフィックエレメントにマウスを合わせると、DataTip コントロールはエレメントに関する情報を伝えるテキストを表示します。 DataTip コントロールを使用すると、ユーザーがアプリケーションを利用する際のガイドになる他、データヒントをカスタマイズして追加の機能を提供することもできます。
 
  <p>グラフでデータヒントを有効にするには、<codeph>showDataTips</codeph> プロパティを <codeph>true</codeph> に設定します。</p>
 
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.charts.chartClasses:DataTip_mx.events.FlexEvent.SHOW_show"><apiName>show</apiName><shortdesc>
  コンポーネントが表示されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SHOW</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンポーネントが表示されたときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:DataTip_mx.events.FlexEvent.HIDE_hide"><apiName>hide</apiName><shortdesc>
  オブジェクトの状態が可視から不可視に変化したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.HIDE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  オブジェクトの状態が可視から不可視に変化したときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.charts.chartClasses:DataTip:DataTip"><apiName>DataTip</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:DataTip:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:DataTip:protected:measure"><apiName>measure</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:DataTip:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="mx.charts.chartClasses:DataTip:maxTipWidth"><apiName>maxTipWidth</apiName><shortdesc>
      新しい DataTip コントロールの最大の幅をピクセル単位で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>300</apiData><apiType value="Number"/><apiDefaultValue>300
      
      </apiDefaultValue></apiValueDef><apiDesc>
      新しい DataTip コントロールの最大の幅をピクセル単位で指定します。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataTip:data:get"><apiName>data</apiName><shortdesc>
      データヒントでレンダリングするデータポイントを示す HitData 構造体です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      データヒントでレンダリングするデータポイントを示す HitData 構造体です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataTip:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:ChartItemDragProxy"><apiName>ChartItemDragProxy</apiName><shortdesc>
  グラフコントロールからアイテムをドラッグするときに使用されるデフォルトドラッグプロキシです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  グラフコントロールからアイテムをドラッグするときに使用されるデフォルトドラッグプロキシです。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:ChartItemDragProxy:ChartItemDragProxy"><apiName>ChartItemDragProxy</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.charts.chartClasses:IColumn"><apiName>IColumn</apiName><shortdesc>
  垂直軸に沿って集合させることができる ChartElements は、このインターフェイスを実装する必要があります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  垂直軸に沿って集合させることができる ChartElements は、このインターフェイスを実装する必要があります。 このインターフェイスを実装するエレメントはどれも、<codeph>type</codeph> プロパティが "clustered" に設定された ColumnSet エレメントの子系列として使用できます。 ColumnSeries、HLOCSeries、CandleStickSeries、および ColumnSet の各クラスは、すべてこのインターフェイスを実装します。
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.charts.chartClasses:IColumn:mx.charts.chartClasses:IColumn:columnWidthRatio:set"><apiName>columnWidthRatio</apiName><shortdesc>
	  カテゴリのサイズを基準にしてアイテムの幅を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
	  カテゴリのサイズを基準にしてアイテムの幅を指定します。 値が <codeph>1</codeph> の場合は領域全体が使用され、<codeph>0.6</codeph> の場合はアイテムの使用可能領域の 60% が使用されます。 通常、このプロパティを直接設定することはありません。 この値は、管理する ColumSet または ColumnChart によって暗黙的に割り当てられます。 実際のアイテムの幅には、<codeph>columnWidthRatio</codeph> プロパティと <codeph>maxColumnWidth</codeph> プロパティの値のうち小さい方が使用されます。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IColumn:mx.charts.chartClasses:IColumn:maxColumnWidth:set"><apiName>maxColumnWidth</apiName><shortdesc>
	  描画するアイテムの幅をピクセル単位で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
	  描画するアイテムの幅をピクセル単位で指定します。 実際のアイテムの幅には、このプロパティと <codeph>columnWidthRatio</codeph> プロパティの値のうち小さい方が使用されます。 通常、このプロパティを直接設定することはありません。 ColumSet オブジェクトまたは ColumnChart オブジェクトはこの値を割り当てます。 実際のアイテムの幅には、<codeph>columnWidthRatio</codeph> プロパティと <codeph>maxColumnWidth</codeph> プロパティの値のうち小さい方が使用されます。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IColumn:mx.charts.chartClasses:IColumn:offset:set"><apiName>offset</apiName><shortdesc>
	  使用可能な領域の中心からアイテムの中心をずらす度合いを、カテゴリのサイズに対する割合で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/><apiDefaultValue>0
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  使用可能な領域の中心からアイテムの中心をずらす度合いを、カテゴリのサイズに対する割合で指定します。 値の範囲は <codeph>-100</codeph> ～ <codeph>100</codeph> のパーセンテージです。 領域の中心にアイテムを配置するには <codeph>0</codeph> に設定します。 このプロパティの値を <codeph>-50</codeph> に設定すると、アイテムは使用可能な領域の開始位置の中央に配置されます。 通常、このプロパティを直接設定することはありません。 ColumSet オブジェクトまたは ColumnChart オブジェクトはこの値を割り当てます。
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:StackedSeries"><apiName>StackedSeries</apiName><shortdesc>
  StackedSeries は、すべての積み重ねセット系列（BarSet、ColumnSet、および AreaSet）の共通基本クラスとして動作します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  StackedSeries は、すべての積み重ねセット系列（BarSet、ColumnSet、および AreaSet）の共通基本クラスとして動作します。 StackedSeries はサブ系列のエレメントを受け取り、適切な計算を実行して各エレメントを垂直に積み重ねます。これにより、各系列は、1 つ前の系列データに自身の値を加えた合計を表示します。 このクラスは、直接使用するためのものではありません。  
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:StackedSeries:StackedSeries"><apiName>StackedSeries</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:StackedSeries:protected:buildSubSeries"><apiName>buildSubSeries</apiName><shortdesc>
      サブ系列の配列を表示する必要がある場合は、そのための処理を実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      サブ系列の配列を表示する必要がある場合は、そのための処理を実行します。 このメソッドでは、すべてのサブ系列がこの積み重ねセットの子として確実に追加され、必要な系列ごとのカスタマイズ（例えば、継承されたデータプロバイダーの割り当て、プロパティの集合）が適用されます。
      <p>また、このメソッドは、系列が変更されたこと、そして結果的に暗黙的な系列スタイルが再度割り当てられる必要があることをグラフに通知する役割も担います。 このメソッドは、必要に応じて積み重ねセットから自動的に呼び出されます。 この関数を直接呼び出すのではなく、<codeph>invalidateSeries()</codeph> メソッドの呼び出しを検討してください。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:StackedSeries:protected:customizeSeries"><apiName>customizeSeries</apiName><shortdesc> 
      積み重ねビヘイビアーの構築時に何らかのカスタマイズをサブ系列に適用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>g</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IChartElement</apiOperationClassifier><apiDesc>カスタマイズするグラフエレメントです。
      
      </apiDesc></apiParam><apiParam><apiItemName>i</apiItemName><apiType value="uint"/><apiDesc>系列配列内のサブ系列の位置です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      積み重ねビヘイビアーの構築時に何らかのカスタマイズをサブ系列に適用します。 デフォルトでは、継承されたデータプロバイダーがこのメソッドによりサブ系列に割り当てられます。 派生クラスでは、このメソッドをオーバーライドして追加のカスタマイズを適用することができます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:StackedSeries:protected:formatDataTip"><apiName>formatDataTip</apiName><shortdesc>
      DataTip オブジェクトに対してカスタムテキストを提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>DataTip のカスタムテキストです。デフォルトは空のストリングです。カスタムの DataTip を提供するには、このメソッドをオーバーライドする必要があります。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>hitData</apiItemName><apiOperationClassifier>mx.charts:HitData</apiOperationClassifier><apiDesc>積み重ねの中の hitData オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      DataTip オブジェクトに対してカスタムテキストを提供します。積み重ねセットでは、それに含まれるサブ系列のデータヒントテキストを上書きして、積み重ねビヘイビアーに関する詳細情報を表示します。 派生クラスでは、このメソッドをオーバーライドしてカスタムのデータヒントテキストを定義する必要があります。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:StackedSeries:protected:invalidateSeries"><apiName>invalidateSeries</apiName><shortdesc>
      このメソッドを呼び出すと、次回の commitProperties() メソッドの呼び出し時に buildSubSeries() メソッドの呼び出しがトリガーされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このメソッドを呼び出すと、次回の <codeph>commitProperties()</codeph> メソッドの呼び出し時に <codeph>buildSubSeries()</codeph> メソッドの呼び出しがトリガーされます。  
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:StackedSeries:invalidateStacking"><apiName>invalidateStacking</apiName><shortdesc>
      このメソッドを呼び出すと、次回の commitProperties() メソッドの呼び出し時に積み重ね値の再生成がトリガーされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このメソッドを呼び出すと、次回の <codeph>commitProperties()</codeph> メソッドの呼び出し時に積み重ね値の再生成がトリガーされます。  
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:StackedSeries:stack"><apiName>stack</apiName><shortdesc>
      系列データを更新し、そのデータが正しく積み重ねられるように、積み重ねられる側の系列データの値を使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      系列データを更新し、そのデータが正しく積み重ねられるように、積み重ねられる側の系列データの値を使用します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:StackedSeries:protected:updateStacking"><apiName>updateStacking</apiName><shortdesc>
      各サブ系列を反復処理して積み重ね値を構築します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      各サブ系列を反復処理して積み重ね値を構築します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:StackedSeries:protected:negTotalsByPrimaryAxis"><apiName>negTotalsByPrimaryAxis</apiName><shortdesc>
      積み重ねられた負の値の合計です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      積み重ねられた負の値の合計です。 このプロパティには、辞書が含まれます。辞書のキーは、1 番目の軸に沿って子の系列が表す値（例えば、ColumnSeries の x 軸の値、BarSeries の y 軸の値など）です。この辞書の値は、そのキーにおけるすべての負の子系列値の合計です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:protected:posTotalsByPrimaryAxis"><apiName>posTotalsByPrimaryAxis</apiName><shortdesc>
      積み重ねられた正の値の合計です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      積み重ねられた正の値の合計です。 このプロパティには、辞書が含まれます。辞書のキーは、1 番目の軸に沿って子の系列が表す値（例えば、ColumnSeries の x 軸の値、BarSeries の y 軸の値など）です。この辞書の値は、そのキーにおけるすべての正の子系列値の合計です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:protected:stackedMaximum"><apiName>stackedMaximum</apiName><shortdesc>
      この積み重ねられた系列によって表される合計の最大値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      この積み重ねられた系列によって表される合計の最大値です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:protected:stackedMinimum"><apiName>stackedMinimum</apiName><shortdesc>
      この積み重ねられた系列によって表される合計の最小値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      この積み重ねられた系列によって表される合計の最小値です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:allowNegativeForStacked:get"><apiName>allowNegativeForStacked</apiName><shortdesc>
      このプロパティを true に設定すると、正の値と負の値が個別に積み重ねられます。
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このプロパティを true に設定すると、正の値と負の値が個別に積み重ねられます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      x 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      x 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。 LinearAxis クラスまたは CategoryAxis クラスのいずれかを使用すると、horizontalAxis のプロパティを MXML の子タグとして設定したり、ActionScript で LinearAxis オブジェクトまたは CategoryAxis オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:series:get"><apiName>series</apiName><shortdesc>
      この積み重ねセットによって管理されるサブ系列の配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      この積み重ねセットによって管理されるサブ系列の配列です。 この系列は、<codeph>type</codeph> プロパティの値に定義されたこの積み重ねセットの積み重ねビヘイビアーに従ってレンダリングされます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:type:get"><apiName>type</apiName><shortdesc>
      この系列のグループ化ビヘイビアーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      この系列のグループ化ビヘイビアーです。 すべての積み重ね系列で <codeph>"overlaid"</codeph>、<codeph>"stacked"</codeph>、および <codeph>"100%"</codeph> がサポートされます。 <codeph>type</codeph> プロパティが <codeph>"overlaid"</codeph> の場合、すべてのサブ系列は通常どおりにレンダリングされ、特別なビヘイビアーは適用されません。 <codeph>type</codeph> プロパティが <codeph>"stacked"</codeph> の場合、それぞれのサブ系列は、そのデータとそれより前にあるすべての系列の値の合計としてレンダリングされます。 <codeph>type</codeph> プロパティが <codeph>"100%"</codeph> の場合、それぞれのサブ系列は、すべての系列の合計のその系列分としてレンダリングされます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      y 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      y 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。 LinearAxis クラスまたは CategoryAxis クラスのいずれかを使用すると、horizontalAxis のプロパティを MXML の子タグとして設定したり、ActionScript で LinearAxis オブジェクトまたは CategoryAxis オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:BoundedValue"><apiName>BoundedValue</apiName><shortdesc>
  グラフエレメントが画面上にレンダリングしようとするデータポイントは、有界値で表されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  グラフエレメントが画面上にレンダリングしようとするデータポイントは、有界値で表されます。 ChartElements は、Axis オブジェクトに、データを説明する BoundedValues を報告します。axis は自動生成された範囲を計算します。BoundedValue により、特定のサイズ内のデータポイントの値と余白のピクセル値の両方がカプセル化されます。画面にレンダリングされるには、ChartElement はこれらの値を上回るか下回る必要があります。 例えば、プロットグラフのプロットは、そのデータを余白と共に報告し、プロットのサイズに合わせて調整します。 縦棒グラフは Y 軸の余白を報告し、グラフの上に表示されるラベルに合わせて調整します。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:BoundedValue:BoundedValue"><apiName>BoundedValue</apiName><shortdesc>
	  コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>レンダリングされる値です。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>lowerMargin</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>下部の余白です。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>upperMargin</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>上部の余白です。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  コンストラクターです。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts.chartClasses:BoundedValue:lowerMargin"><apiName>lowerMargin</apiName><shortdesc>
	  正しく表示するには、余白のピクセル値がこの値を下回っている必要があります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  正しく表示するには、余白のピクセル値がこの値を下回っている必要があります。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:BoundedValue:upperMargin"><apiName>upperMargin</apiName><shortdesc> 
	  正しく表示するには、余白のピクセル値がこの値を上回っている必要があります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
	  正しく表示するには、余白のピクセル値がこの値を上回っている必要があります。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:BoundedValue:value"><apiName>value</apiName><shortdesc>
	  レンダリングされる値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  レンダリングされる値です。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:ChartLabel"><apiName>ChartLabel</apiName><shortdesc>
  グラフコントロールでデータラベルを描画します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  グラフコントロールでデータラベルを描画します。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:ChartLabel:ChartLabel"><apiName>ChartLabel</apiName><shortdesc>
	  コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  コンストラクターです。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:ChartLabel:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:ChartLabel:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:ChartLabel:protected:measure"><apiName>measure</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:ChartLabel:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
	  </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="mx.charts.chartClasses:ChartLabel:data:get"><apiName>data</apiName><shortdesc>
	  ラベルの内容を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
	  ラベルの内容を定義します。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:PolarDataCanvas"><apiName>PolarDataCanvas</apiName><shortdesc>
 PolarDataCanvas クラスを使用することによって、ユーザーは、スクリーン座標ではなくデータ座標を基準としてグラフィック API を使用できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IDataCanvas</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:ChartElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 PolarDataCanvas クラスを使用することによって、ユーザーは、スクリーン座標ではなくデータ座標を基準としてグラフィック API を使用できます。
 
 <p><codeph>radialAxis</codeph> および <codeph>angularAxis</codeph> が指定されている場合、キャンバスの描画領域はこれらのプロパティによって決定されます。 それ以外の場合は、グラフのデフォルトの軸がキャンバスの描画領域を計算すると見なされます。</p>
 
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:PolarDataCanvas:PolarDataCanvas"><apiName>PolarDataCanvas</apiName><shortdesc>
     コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
     コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:addChildAt"><apiName>addChildAt</apiName><shortdesc>
     
     この DisplayObjectContainer インスタンスに子 DisplayObject インスタンスを追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc><codeph>child</codeph> パラメーターで渡す DisplayObject インスタンスです。
     
     </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>この DisplayObjectContainer インスタンスの子として追加する DisplayObject インスタンスです。
     
     </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>子を追加するインデックス位置です。既にオブジェクトが置かれているインデックス位置を指定すると、その位置にあるオブジェクトとその上に位置するすべてのオブジェクトが、子リスト内で 1 つ上の位置に移動します。 
         
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
     この DisplayObjectContainer インスタンスに子 DisplayObject インスタンスを追加します。子インスタンスは、指定されたインデックス位置に追加されます。インデックス 0 は、この DisplayObjectContainer オブジェクトの表示リストの背景または一番下を表します。
     
     <p>既に異なる表示オブジェクトコンテナを親に持つ子オブジェクトを追加する場合は、もう一方の表示オブジェクトコンテナの子リストからそのオブジェクトが削除されます。 </p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:addChild"><apiName>addChild</apiName><shortdesc>
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:addDataChild"><apiName>addDataChild</apiName><shortdesc>
     DisplayObject を現在のキャンバスに子として追加します。
     
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>        現在のキャンバスに子として追加される DisplayObject のインスタンスです。
     </apiDesc></apiParam><apiParam><apiItemName>angleLeft</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>    データ座標における子の左の角座標です。
     </apiDesc></apiParam><apiParam><apiItemName>radialTop</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>    データ座標における子の上の動径座標です。
     </apiDesc></apiParam><apiParam><apiItemName>angleRight</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>   データ座標における子の右の角座標です。
     </apiDesc></apiParam><apiParam><apiItemName>radialBottom</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc> データ座標における子の下の動径座標です。
     </apiDesc></apiParam><apiParam><apiItemName>angleCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>  データ座標における子の中央の角座標です。
     </apiDesc></apiParam><apiParam><apiItemName>radialCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc> データ座標における子の中央の動径座標です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     <codeph>DisplayObject</codeph> を現在のキャンバスに子として追加します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:beginBitmapFill"><apiName>beginBitmapFill</apiName><shortdesc>
     描画領域をビットマップイメージで塗りつぶします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bitmap</apiItemName><apiType value="flash.display:BitmapData"/><apiDesc>表示されるビットを含む透明または不透明ビットマップイメージです。 
     
     </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>塗りの位置を指定する角度です。
     
     </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>グラフの中心から塗りまでの距離（ピクセル単位）です。
     
     </apiDesc></apiParam><apiParam><apiItemName>matrix</apiItemName><apiType value="flash.geom:Matrix"/><apiData>null</apiData><apiDesc>flash.geom.Matrix クラスのマトリックスオブジェクトです。これを使用してビットマップ上に変形を定義できます。
     
     </apiDesc></apiParam><apiParam><apiItemName>repeat</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc><codeph>true</codeph> の場合、ビットマップイメージが一定のパターンでタイル状に表示されます。<codeph>false</codeph> の場合、ビットマップイメージは繰り返されません。ビットマップからはみ出す塗り領域にはビットマップのエッジが使用されます。
     
     </apiDesc></apiParam><apiParam><apiItemName>smooth</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc><codeph>false</codeph> の場合、拡大ビットマップイメージは最近傍アルゴリズムを使用してレンダリングされ、ピクセル化されたように見えます。<codeph>true</codeph> の場合、拡大ビットマップイメージは双線形アルゴリズムを使用してレンダリングされます。最近傍アルゴリズムを使用したレンダリングの方が高速です。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     描画領域をビットマップイメージで塗りつぶします。座標は、キャンバスの <codeph>angularAxis</codeph> または <codeph>radialAxis</codeph> プロパティを基準とします。
     
     <p>このメソッドの使用方法とパラメーターは、flash.display.Graphics クラスの <codeph>beginBitmapFill()</codeph> メソッドと同じです。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/beginBitmapFill()"><linktext>flash.display.Graphics.beginBitmapFill()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:beginFill"><apiName>beginFill</apiName><shortdesc conref="flash.display.Graphics#beginFill()">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>color</apiItemName><apiType value="uint"/></apiParam><apiParam><apiItemName>alpha</apiItemName><apiType value="Number"/><apiData>1</apiData></apiParam></apiOperationDef><apiDesc conref="flash.display.Graphics#beginFill()">
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Graphics.xml"><linktext>flash.display.Graphics</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:clear"><apiName>clear</apiName><shortdesc>
     キャンバスをクリアします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     キャンバスをクリアします。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:curveTo"><apiName>curveTo</apiName><shortdesc>
     (controlX, controlY) で指定されたコントロールポイントを使用し、現在の描画位置から (anchorX, anchorY) まで、現在の線のスタイルで曲線を描画します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controlAngle</apiItemName><apiType value="any"/><apiDesc>コントロールポイントの位置を指定する角度です。 
     
     </apiDesc></apiParam><apiParam><apiItemName>controlRadial</apiItemName><apiType value="any"/><apiDesc>グラフの中心からコントロールポイントまでの距離（ピクセル単位）です。 
     
     </apiDesc></apiParam><apiParam><apiItemName>anchorAngle</apiItemName><apiType value="any"/><apiDesc>アンカーポイントの位置を指定する角度です。  
     
     </apiDesc></apiParam><apiParam><apiItemName>anchorRadial</apiItemName><apiType value="any"/><apiDesc>グラフの中心からアンカーポイントまでの距離（ピクセル単位）です。  
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     現在の描画位置から（anchorX, anchorY）までの曲線を、現在の線のスタイルと（controlX, controlY）で指定されたコントロールポイントを使用して描画します。このメソッドに渡す座標は、スクリーン座標ではなくグラフデータを基準とします。
     
     <p>このメソッドの使用方法とパラメーターは、flash.display.Graphics クラスの <codeph>curveTo()</codeph> メソッドと同じです。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/curveTo()"><linktext>flash.display.Graphics.curveTo()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:describeData"><apiName>describeData</apiName><shortdesc>
     
      
      この IChartElement で表されるデータの記述を取得するために、管理する DataTransform によって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>表示されるデータを記述する DataDescription インスタンスを含む Array です。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>データの記述を取得する軸を特定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>特定の軸で管理される DataDescription オブジェクトの値を示すビットフィールドです。 インプリメンタによって必要なフィールドを計算する方法でのみ最適化できます。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      
      この IChartElement で表されるデータの記述を取得するために、管理する DataTransform によって呼び出されます。 インプリメンタによって mx.charts.chartClasses.DataDescription オブジェクトの配列が入力されて返され、表示データ（minimum、maximum、interval、unitSize など）から値を自動生成するすべての軸に沿ってこれらのデータが正確に記述されることが保証されます。 ほとんどのエレメントタイプでは、1 つの DataDescription を含む配列が返されます。 BarSet や ColumnSet などのエレメントを集約します。それらのサブエレメントによって表示されるデータを記述する複数の DataDescription インスタンスを返すことがあります。 呼び出されると、インプリメンタによって <codeph>dimension</codeph> パラメーターで指定された軸に沿ってデータが記述されます。 この関数は、グラフによってサポートされる軸ごとに呼び出される場合があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:drawCircle"><apiName>drawCircle</apiName><shortdesc>
     円を描画します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>angle</apiItemName><apiType value="any"/><apiDesc>円の中心の位置を指定する角度です。 
     
     </apiDesc></apiParam><apiParam><apiItemName>radial</apiItemName><apiType value="any"/><apiDesc>グラフの中心から円の中心までの距離（ピクセル単位）です。 
     
     </apiDesc></apiParam><apiParam><apiItemName>radius</apiItemName><apiType value="Number"/><apiDesc>円の半径（ピクセル単位）。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     円を描画します。<codeph>drawCircle()</codeph> メソッドを呼び出す前に、線のスタイルまたは塗り、あるいはその両方を設定します。そのためには、<codeph>linestyle()</codeph>、<codeph>lineGradientStyle()</codeph>、<codeph>beginFill()</codeph>、<codeph>beginGradientFill()</codeph>、または <codeph>beginBitmapFill()</codeph> メソッドを呼び出します。座標はスクリーン座標ではなくデータを基準としています。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/drawCircle()"><linktext>flash.display.Graphics.drawCircle()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:drawEllipse"><apiName>drawEllipse</apiName><shortdesc>
     楕円を描画します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>angleLeft</apiItemName><apiType value="any"/><apiDesc>楕円の境界ボックスの左上隅の位置を指定する角度です。
     
     </apiDesc></apiParam><apiParam><apiItemName>radialTop</apiItemName><apiType value="any"/><apiDesc>グラフの中心から楕円の境界ボックスの左上隅の位置までの距離（ピクセル単位）です。
     
     </apiDesc></apiParam><apiParam><apiItemName>angleRight</apiItemName><apiType value="any"/><apiDesc>楕円の境界ボックスの右下隅の位置を指定する角度です。
     
     </apiDesc></apiParam><apiParam><apiItemName>radialBottom</apiItemName><apiType value="any"/><apiDesc>グラフの中心から楕円の境界ボックスの右下隅の位置までの距離（ピクセル単位）です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     楕円を描画します。<codeph>drawEllipse()</codeph> メソッドを呼び出す前に、線のスタイルまたは塗り、あるいはその両方を設定します。そのためには、<codeph>linestyle()</codeph>、<codeph>lineGradientStyle()</codeph>、<codeph>beginFill()</codeph>、<codeph>beginGradientFill()</codeph>、または <codeph>beginBitmapFill()</codeph> メソッドを呼び出します。座標はスクリーン座標ではなくデータを基準としています。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/drawEllipse()"><linktext>flash.display.Graphics.drawEllipse()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:drawRect"><apiName>drawRect</apiName><shortdesc>
     矩形を描画します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>angleLeft</apiItemName><apiType value="any"/><apiDesc>矩形の左上隅の位置を指定する角度です。
     
     </apiDesc></apiParam><apiParam><apiItemName>radialTop</apiItemName><apiType value="any"/><apiDesc>グラフの中心から矩形の左上隅の位置までの距離（ピクセル単位）です。
     
     </apiDesc></apiParam><apiParam><apiItemName>angleRight</apiItemName><apiType value="any"/><apiDesc>矩形の右下隅の位置を指定する角度です。
     
     </apiDesc></apiParam><apiParam><apiItemName>radialBottom</apiItemName><apiType value="any"/><apiDesc>グラフの中心から矩形の右下隅の位置までの距離（ピクセル単位）です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     矩形を描画します。<codeph>drawRect()</codeph> メソッドを呼び出す前に、線のスタイルまたは塗り、あるいはその両方を設定します。そのためには、<codeph>linestyle()</codeph>、<codeph>lineGradientStyle()</codeph>、<codeph>beginFill()</codeph>、<codeph>beginGradientFill()</codeph>、または <codeph>beginBitmapFill()</codeph> メソッドを呼び出します。座標はスクリーン座標ではなくデータを基準としています。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/drawRect()"><linktext>flash.display.Graphics.drawRect()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:drawRoundedRect"><apiName>drawRoundedRect</apiName><shortdesc>
     角丸矩形を描画します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>angleLeft</apiItemName><apiType value="any"/><apiDesc>矩形の左上隅の位置を指定する角度です。
     
     </apiDesc></apiParam><apiParam><apiItemName>radialTop</apiItemName><apiType value="any"/><apiDesc>グラフの中心から矩形の左上隅の位置までの距離（ピクセル単位）です。
     
     </apiDesc></apiParam><apiParam><apiItemName>angleRight</apiItemName><apiType value="any"/><apiDesc>矩形の右下隅の位置を指定する角度です。
     
     </apiDesc></apiParam><apiParam><apiItemName>radialBottom</apiItemName><apiType value="any"/><apiDesc>グラフの中心から矩形の右下隅の位置までの距離（ピクセル単位）です。
     
     </apiDesc></apiParam><apiParam><apiItemName>cornerRadius</apiItemName><apiType value="Number"/><apiDesc>角丸の半径（ピクセル単位）です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     角丸矩形を描画します。<codeph>drawRoundRect()</codeph> メソッドを呼び出す前に、線のスタイルまたは塗り、あるいはその両方を設定します。そのためには、<codeph>linestyle()</codeph>、<codeph>lineGradientStyle()</codeph>、<codeph>beginFill()</codeph>、<codeph>beginGradientFill()</codeph>、または <codeph>beginBitmapFill()</codeph> メソッドを呼び出します。座標はスクリーン座標ではなくデータを基準としています。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/drawRoundedRect()"><linktext>flash.display.Graphics.drawRoundedRect()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:endFill"><apiName>endFill</apiName><shortdesc conref="flash.display.Graphics#endFill()"> 
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="flash.display.Graphics#endFill()"> 
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Graphics.xml"><linktext>flash.display.Graphics</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      dataProvider 内の基になるデータが変更されたことをキャンバスに通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>データが変更された場合は <codeph>true</codeph> になります。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      dataProvider 内の基になるデータが変更されたことをキャンバスに通知します。 この関数を呼び出すと、<codeph>updateMapping()</codeph> メソッドおよび <codeph>updateTransform()</codeph> メソッドの呼び出しが、次回の <codeph>commitProperties()</codeph> メソッドの呼び出し時にトリガーされます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:lineStyle"><apiName>lineStyle</apiName><shortdesc>
     オブジェクトの他の Graphics メソッド（lineTo() や drawCircle() など）に対する以降の呼び出しに使用する線のスタイルを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>thickness</apiItemName><apiType value="Number"/><apiDesc>線の太さをポイント単位で示す整数。有効な値は 0 ～ 255 です。パラメーターが undefined である場合は、線は描画されません。0 未満の値を指定した場合は、デフォルトで 0 が適用されます。0 は極細線です。最大の太さは 255 です。255 を超える値を指定した場合は、デフォルトで 255 が適用されます。 
     
     </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>線の色を表す 16 進値。例えば、赤は 0xFF0000、青は 0x0000FF で表します。値を指定しない場合は、デフォルトで 0x000000（黒）が適用されます。
     
     </apiDesc></apiParam><apiParam><apiItemName>alpha</apiItemName><apiType value="Number"/><apiData>1.0</apiData><apiDesc>線の色のアルファ値を示す数値。有効な値は 0 ～ 1 です。値を指定しない場合は、デフォルトで 1（ソリッド）が適用されます。0 未満の値を指定した場合、デフォルトで 0 が適用されます。1 より大きい値を指定した場合、デフォルトで 1 が適用されます。
     
     </apiDesc></apiParam><apiParam><apiItemName>pixelHinting</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>ピクセル全体に対して線をヒンティングするかどうかを指定するブール値。この値は、曲線のアンカーの位置と線のサイズ自身の両方に影響を与えます。<codeph>pixelHinting</codeph> を true に設定すると、線幅が全ピクセル幅に調整されます。 <codeph>pixelHinting</codeph> を false に設定すると、曲線と直線で非連続が発生することがあります。
     
     </apiDesc></apiParam><apiParam><apiItemName>scaleMode</apiItemName><apiType value="String"/><apiData>normal</apiData><apiDesc>使用する拡大 / 縮小モードを指定する flash.display.LineScaleMode クラスの値です。
     
     <ul>
       <li><codeph>LineScaleMode.NORMAL</codeph>：オブジェクトが拡大 / 縮小される場合は、常に線の太さが拡大 / 縮小されます（デフォルト）。</li>
       <li><codeph>LineScaleMode.NONE</codeph>：線の太さを拡大 / 縮小しません。</li>
       <li><codeph>LineScaleMode.VERTICAL</codeph>：オブジェクトを垂直方向にのみ拡大 / 縮小する場合は、線の太さを拡大 / 縮小しません。 </li>
       <li><codeph>LineScaleMode.HORIZONTAL</codeph>：オブジェクトを水平方向にのみ拡大 / 縮小する場合は、線の太さを拡大 / 縮小しません。 </li>
     </ul>
     
     </apiDesc></apiParam><apiParam><apiItemName>caps</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>線の終端のキャップの種類を指定する flash.display.CapsStyle クラスの値です。有効な値は次のとおりです。<codeph>CapsStyle.NONE</codeph>、<codeph>CapsStyle.ROUND</codeph>、および <codeph>CapsStyle.SQUARE</codeph>。この値を指定しない場合は、丸いキャップが使用されます。 
     
     </apiDesc></apiParam><apiParam><apiItemName>joints</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>角で使用する接合点の外観の種類を指定する flash.display.JointStyle クラスの値です。有効な値は次のとおりです。<codeph>JointStyle.BEVEL</codeph>、<codeph>JointStyle.MITER</codeph>、および <codeph>JointStyle.ROUND</codeph>。この値を指定しないと、角丸（"round"）の接合点が使用されます。 
     
     </apiDesc></apiParam><apiParam><apiItemName>miterLimit</apiItemName><apiType value="Number"/><apiData>3</apiData><apiDesc>マイターが切り取られる限度を示す数値です。有効な値の範囲は 1 ～ 255 で、この範囲を超えた値は 1 または 255 に丸められます。この値は、jointStyle を "miter" に設定した場合にのみ有効です。<codeph>miterLimit</codeph> の値により、線の接合点を越えてマイターを延長できる長さが決定します。マイターを延長できる長さは、この値と線の thickness が乗算されたものです。例えば、<codeph>miterLimit</codeph> の値が 2.5 で、thickness が 10 ピクセルの場合、マイターは 25 ピクセルで切り取られます。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     オブジェクトの他の Graphics メソッド（<codeph>lineTo()</codeph> や <codeph>drawCircle()</codeph> など）に対する以降の呼び出しに使用する線のスタイルを指定します。
     
     <p>このメソッドの使用方法とパラメーターは、flash.display.Graphics クラスの <codeph>lineStyle()</codeph> メソッドと同じです。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/lineStyle()"><linktext>flash.display.Graphics.lineStyle()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:lineTo"><apiName>lineTo</apiName><shortdesc>
     現在の描画位置から (angle, radial) まで、現在の線のスタイルを使用して線を描画します。その後で、現在の描画位置は (angle, radial) に設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>angle</apiItemName><apiType value="any"/><apiDesc>描画位置の角度です。
     
     </apiDesc></apiParam><apiParam><apiItemName>radial</apiItemName><apiType value="any"/><apiDesc>グラフの中心から描画位置までの距離（ピクセル単位）です。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     現在の描画位置から (angle, radial) まで、現在の線のスタイルを使用して線を描画します。その後で、現在の描画位置は (angle, radial) に設定されます。描画先の表示オブジェクトに Flash の描画ツールで作成したコンテンツが含まれている場合、<codeph>lineTo()</codeph> メソッドへの呼び出しの結果はこのコンテンツの下に描画されます。<codeph>lineTo()</codeph> を呼び出してから moveTo() メソッドを呼び出すと、現在の描画位置はデフォルトで (0,0) になります。いずれかのパラメーターを省略すると、このメソッドは失敗し、現在の描画位置は変更されません。座標はスクリーン座標ではなくデータを基準としています。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/lineTo()"><linktext>flash.display.Graphics.lineTo()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:mappingChanged"><apiName>mappingChanged</apiName><shortdesc>
     
      関連付けられている軸のマッピングが変更されると呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     
      関連付けられている軸のマッピングが変更されると呼び出されます。 この ChartElement に割り当てられた DataTransform は、表現する軸のいずれかが何らかの方法で変更されると、このメソッドを呼び出します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:moveTo"><apiName>moveTo</apiName><shortdesc>
     現在の描画位置を (angle, radial) に移動します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>angle</apiItemName><apiType value="any"/><apiDesc>描画位置の角度です。
     
     </apiDesc></apiParam><apiParam><apiItemName>radial</apiItemName><apiType value="any"/><apiDesc>グラフの中心から描画位置までの距離（ピクセル単位）です。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     現在の描画位置を (angle, radial) に移動します。いずれかのパラメーターを省略すると、このメソッドは失敗し、現在の描画位置は変更されません。座標はスクリーン座標ではなくデータを基準としています。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/moveTo()"><linktext>flash.display.Graphics.moveTo()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:removeAllChildren"><apiName>removeAllChildren</apiName><shortdesc>
     キャンバスのすべての子データ（DisplayObject のインスタンス）を削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     キャンバスのすべての子データ（DisplayObject のインスタンス）を削除します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:removeChildAt"><apiName>removeChildAt</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:removeChild"><apiName>removeChild</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:protected:stripNaNs"><apiName>stripNaNs</apiName><shortdesc>
      field プロパティが NaN である所定のキャッシュにアイテムがある場合は、すべて削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>PolarDataCanvas オブジェクト用のデータキャッシュです。
      
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>アイテムの <codeph>field</codeph> プロパティの値です。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>field</codeph> プロパティが <codeph>NaN</codeph> である所定のキャッシュにアイテムがある場合は、すべて削除します。 派生クラスでは、その <codeph>updateFilter()</codeph> 実装からこのメソッドを呼び出して、軸でフィルターされた ChartItem オブジェクトをすべて削除することができます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:updateDataChild"><apiName>updateDataChild</apiName><shortdesc>
     子の位置を現在のキャンバスに更新します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>        現在のキャンバスに子として追加される DisplayObject のインスタンスです。
     </apiDesc></apiParam><apiParam><apiItemName>angleLeft</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>    データ座標における子の左の角座標です。
     </apiDesc></apiParam><apiParam><apiItemName>radialTop</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>    データ座標における子の上の動径座標です。
     </apiDesc></apiParam><apiParam><apiItemName>angleRight</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>   データ座標における子の右の角座標です。
     </apiDesc></apiParam><apiParam><apiItemName>radialBottom</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc> データ座標における子の下の動径座標です。
     </apiDesc></apiParam><apiParam><apiItemName>angleCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>  データ座標における子の中央の角座標です。
     </apiDesc></apiParam><apiParam><apiItemName>radialCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc> データ座標における子の中央の動径座標です。
     
     <p>次に実際の使用例を示します。
     <pre>
          var lbl:Label = new Label();
          lbl.text = "Last Month";
          canvas.addChild(lbl);
          canvas.updateDataChild(lbl,200,20);
     </pre>
     </p>
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     子の位置を現在のキャンバスに更新します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:protected:updateFilter"><apiName>updateFilter</apiName><shortdesc>
      キャンバスが表す基になるデータのフィルター操作を、関連するデータ変換の軸で表される範囲に対して行う必要があるときに呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      キャンバスが表す基になるデータのフィルター操作を、関連するデータ変換の軸で表される範囲に対して行う必要があるときに呼び出されます。 これは、基になるデータが変更されたか関連する軸の範囲に変更が加えられたかのどちらかの理由で生じることがあります。
      
      <p>カスタムキャンバスタイプを実装する場合は、このメソッドをオーバーライドし、関連するデータ変換によって管理される軸の <codeph>filterCache()</codeph> メソッドを使用して範囲外のデータを除外する必要があります。 <codeph>filterCache()</codeph> メソッドは、範囲外の値を <codeph>NaN</codeph> に変換します。 <codeph>super.updateFilter()</codeph> メソッドは必ずサブクラス内で呼び出す必要があります。 </p>
      
      <p>一般に、このメソッドは直接呼び出さないでください。 その代わり、指定された時点でデータにフィルターが確実に適用されるようにする必要がある場合は、PolarDataCanvas クラスの <codeph>validateTransform()</codeph> メソッドを呼び出します。 </p>
      
      <p>通常、必要な場合には、このメソッドの前に <codeph>updateData()</codeph> メソッドおよび <codeph>updateMapping()</codeph> メソッドが呼び出されていると想定できます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:protected:validateData"><apiName>validateData</apiName><shortdesc>
      必要に応じてキャンバスの updateMapping() および updateFilter() メソッドを呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      必要に応じてキャンバスの <codeph>updateMapping()</codeph> および <codeph>updateFilter()</codeph> メソッドを呼び出します。 このメソッドは必要に応じてキャンバスによって <codeph>commitProperties()</codeph> メソッドから自動的に呼び出されますが、明示的な時間に生成値が必要とされる場合は、派生キャンバスから明示的に呼び出されることがあります。 
      
      <p>軸に対するデータのロードとマッピングは、軸のどのポイントでも可能となるように設計されています。 このメソッドは、どのポイントで明示的に呼び出しても問題ありません。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:protected:validateTransform"><apiName>validateTransform</apiName><shortdesc>
      必要に応じてキャンバスの updateTransform() メソッドを呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>データプロバイダーの元になるデータが変更された場合は <codeph>true</codeph>。それ以外の場合は <codeph>false</codeph> になります。
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      必要に応じてキャンバスの <codeph>updateTransform()</codeph> メソッドを呼び出します。 このメソッドは必要に応じて <codeph>commitProperties()</codeph> メソッドの途中でキャンバスによって自動的に呼び出されますが、明示的な時間に生成値が必要とされる場合は、派生キャンバスから明示的に呼び出されることがあります。 データのフィルターと変換は、軸で計算される特定の値に依存します。また、これらの値も、グラフに表示されるデータに左右される場合があります。 これらの値が更新される場合は、この関数を不適切な時間に呼び出すと、追加の処理が生じる可能性があります。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:PolarDataCanvas:angularAxis:get"><apiName>angularAxis</apiName><shortdesc>
      x 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      x 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。 LinearAxis クラスまたは CategoryAxis クラスのいずれかを使用すると、angularAxis のプロパティを MXML の子タグとして設定したり、ActionScript で LinearAxis オブジェクトまたは CategoryAxis オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarDataCanvas:includeInRanges:get"><apiName>includeInRanges</apiName><shortdesc>
     true に設定されている場合、グラフ中の計算された範囲がこのキャンバスの影響を受けます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     <codeph>true</codeph> に設定されている場合、グラフ中の計算された範囲がこのキャンバスの影響を受けます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarDataCanvas:radialAxis:get"><apiName>radialAxis</apiName><shortdesc>
      y 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      y 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。 LinearAxis クラスまたは CategoryAxis クラスのいずれかを使用すると、角度軸のプロパティを MXML の子タグとして設定したり、ActionScript で LinearAxis オブジェクトまたは CategoryAxis オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarDataCanvas:dataTransform:set"><apiName>dataTransform</apiName><shortdesc>
      
      このエレメントが関連付けられている DataTransform オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:DataTransform</apiValueClassifier></apiValueDef><apiDesc>
      
      このエレメントが関連付けられている DataTransform オブジェクトです。 DataTransform オブジェクトは、データ領域とスクリーン座標間のエレメントの変換に使用される、エレメントのセットと軸オブジェクトのセットの関連付けを表します。 グラフエレメントでは、エレメントに関連付けられた DataTransform オブジェクトを使用して、そのデータのレンダリング方法が決定されます。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:IDataCanvas"><apiName>IDataCanvas</apiName><shortdesc>
  このインターフェイスは、内部的な使用のみを目的としています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  このインターフェイスは、内部的な使用のみを目的としています。 
  
  </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="mx.charts.chartClasses:AxisBase"><apiName>AxisBase</apiName><shortdesc>
  AxisBase クラスは、Flex でサポートされる各種の軸タイプの基本クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>Flex components inherit the following properties
  from the AxisBase class:</p>
 
  <pre>
  &lt;mx:<i>tagname</i>
    displayName="<i>No default</i>"
    title="<i>No default</i>"
  &gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  AxisBase クラスは、Flex でサポートされる各種の軸タイプの基本クラスです。 
 
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:AxisBase:AxisBase"><apiName>AxisBase</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:AxisBase:dataChanged"><apiName>dataChanged</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#dataChanged()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#dataChanged()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:AxisBase:protected:describeData"><apiName>describeData</apiName><shortdesc>
      この IChartElement で表されるデータの記述を取得するために、管理する DataTransform によって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>表示されるデータを記述する DataDescription インスタンスを含む BoundedValue オブジェクトの配列です。
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>特定の軸で管理される DataDescription オブジェクトの値を示すビットフィールドです。 インプリメンタによって必要なフィールドを計算する方法でのみ最適化できます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      この IChartElement で表されるデータの記述を取得するために、管理する DataTransform によって呼び出されます。 インプリメンタによって mx.charts.chartClasses.DataDescription オブジェクトの配列が入力されて返され、表示データ（minimum、maximum、interval、unitSize など）から値を自動生成するすべての軸に沿ってこれらのデータが正確に記述されることが保証されます。 ほとんどのエレメントタイプでは、1 つの DataDescription を含む配列が返されます。 BarSet や ColumnSet などのエレメントを集約します。それらのサブエレメントによって表示されるデータを記述する複数の DataDescription インスタンスを返すことがあります。 呼び出されると、インプリメンタによって <codeph>dimension</codeph> パラメーターで指定された軸に沿ってデータが記述されます。 この関数は、グラフによってサポートされる軸ごとに呼び出される場合があります。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.charts.chartClasses.xml#BoundedValue"><linktext>mx.charts.chartClasses.BoundedValue</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:AxisBase:registerDataTransform"><apiName>registerDataTransform</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#registerDataTransform()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transform</apiItemName><apiOperationClassifier>mx.charts.chartClasses:DataTransform</apiOperationClassifier><apiDesc>登録する DataTransform です。
     
      </apiDesc></apiParam><apiParam><apiItemName>dimensionName</apiItemName><apiType value="String"/><apiDesc>次元の名前です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#registerDataTransform()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:AxisBase:unregisterDataTransform"><apiName>unregisterDataTransform</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#unregisterDataTransform()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transform</apiItemName><apiOperationClassifier>mx.charts.chartClasses:DataTransform</apiOperationClassifier><apiDesc>登録を解除する DataTransform です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#unregisterDataTransform()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:AxisBase:displayName:get"><apiName>displayName</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#displayName">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.charts.chartClasses.IAxis#displayName">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:AxisBase:title:get"><apiName>title</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#title">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.charts.chartClasses.IAxis#title">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:AxisBase:unitSize:get"><apiName>unitSize</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#unitSize">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.charts.chartClasses.IAxis#unitSize">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:AxisBase:chartDataProvider:set"><apiName>chartDataProvider</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#chartDataProvider">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.charts.chartClasses.IAxis#chartDataProvider">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:RenderData"><apiName>RenderData</apiName><shortdesc>
  RenderData 構造体は、グラフエレメントによってグラフの完全なレンダリングに必要なすべての関連値および関連データを格納するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  RenderData 構造体は、グラフエレメントによってグラフの完全なレンダリングに必要なすべての関連値および関連データを格納するために使用されます。 これらの値を個別の構造体に格納すると、必要に応じて、グラフエレメントの割り当てられたプロパティとデータからレンダリングを切り離すことができます。 この機能は、グラフエフェクトによって使用されます。SeriesInterpolate などのエフェクトでは、過去および将来の renderData 構造体から計算された一時的な値が置き換えられます。 SeriesSlide および SeriesZoom などのエフェクトでは、一時的な RenderData 構造体が、エフェクトを正しくレンダリングするために計算された値に置き換えられます。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:RenderData:RenderData"><apiName>RenderData</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>系列の <codeph>dataProvider</codeph> のアイテムを表す ChartItem のリストです。
     
      </apiDesc></apiParam><apiParam><apiItemName>filteredCache</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>フィルター適用後に残った系列の <codeph>dataProvider</codeph> のアイテムを表す ChartItem のリストです。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:RenderData:clone"><apiName>clone</apiName><shortdesc>
      レンダリングデータのコピーを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>RenderData オブジェクトの新しいコピーです。
      
      </apiDesc><apiOperationClassifier>mx.charts.chartClasses:RenderData</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      レンダリングデータのコピーを作成します。 新しいコピーでは、他のオブジェクトを参照するプロパティは、元と同じオブジェクトを引き続き参照します。
      
      <p>このクラスをサブクラス化する場合は、このメソッドをオーバーライドする必要があります。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:RenderData:bounds"><apiName>bounds</apiName><shortdesc>
      系列の座標系を基準にした、系列で画面に表示されるすべてのアイテムの境界です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      系列の座標系を基準にした、系列で画面に表示されるすべてのアイテムの境界です。 この値は、レンダリング時にさまざまなエフェクトによって使用されます。 エフェクトが <codeph>getElementBounds()</codeph> メソッドを呼び出すと、系列によってこの値が入力されます。 特に要求されない場合は、系列によってこのフィールドに値が入力される必要はありません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:RenderData:cache"><apiName>cache</apiName><shortdesc>
      系列の dataProvider のアイテムを表す ChartItem のリストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      系列の <codeph>dataProvider</codeph> のアイテムを表す ChartItem のリストです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:RenderData:elementBounds"><apiName>elementBounds</apiName><shortdesc>
      系列の座標系を基準にして系列の ChartItem の境界を表す矩形の配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      系列の座標系を基準にして系列の ChartItem の境界を表す矩形の配列です。 エフェクトはこの配列を使用して、エフェクトのレンダリングを生成します。 エフェクトが <codeph>getElementBounds()</codeph> メソッドを呼び出すと、この値が系列によって入力されます。 特に要求されない場合は、系列によってこのフィールドに値が入力される必要はありません。 エフェクトでは、この配列を変更してエフェクトの継続時間内におけるアイテムの現在の位置を反映します。 この値が系列の <codeph>renderData</codeph> に入力されている場合は、系列のデータではなくこれらの矩形に基づいて系列がレンダリングされます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:RenderData:filteredCache"><apiName>filteredCache</apiName><shortdesc>
      フィルター適用後に残った系列の dataProvider のアイテムを表す ChartItem のリストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      フィルター適用後に残った系列の <codeph>dataProvider</codeph> のアイテムを表す ChartItem のリストです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:RenderData:visibleRegion"><apiName>visibleRegion</apiName><shortdesc>
      系列で画面上に表示できる座標の範囲を表す矩形です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      系列で画面上に表示できる座標の範囲を表す矩形です。 この値は、レンダリング時にさまざまなエフェクトによって使用されます。 エフェクトが <codeph>getElementBounds()</codeph> メソッドを呼び出すと、この値が入力されます。 特に要求されない場合は、系列によってこのフィールドに値が入力される必要はありません。 この値が <codeph>null</codeph> の場合、エフェクトではエレメントの可視範囲が、エレメントを基準にして表されるエレメント自体の境界ボックス（0、0、幅、高さ）であると見なされます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:RenderData:length:get"><apiName>length</apiName><shortdesc>
      このレンダリングデータに表されるアイテムの数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
      このレンダリングデータに表されるアイテムの数です。 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:NumericAxis"><apiName>NumericAxis</apiName><shortdesc>
  NumericAxis クラスは、軸タイプの共通基本クラスとして動作し、定義された最小値および最大値の間の連続する範囲を表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IAxis</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:AxisBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  NumericAxis クラスは、軸タイプの共通基本クラスとして動作し、定義された最小値および最大値の間の連続する範囲を表します。 組み込みの LinearAxis、LogAxis、および DateTimeAxis クラスはすべて、この基本クラスを拡張します。
  
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#DateTimeAxis"><linktext>mx.charts.DateTimeAxis</linktext></link><link href="mx.charts.xml#LinearAxis"><linktext>mx.charts.LinearAxis</linktext></link><link href="mx.charts.xml#LogAxis"><linktext>mx.charts.LogAxis</linktext></link></related-links><apiConstructor id="mx.charts.chartClasses:NumericAxis:NumericAxis"><apiName>NumericAxis</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:NumericAxis:protected:adjustMinMax"><apiName>adjustMinMax</apiName><shortdesc>
      軸のラベルの生成または割り当て範囲を調整します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>minValue</apiItemName><apiType value="Number"/><apiDesc>計算された最小値です。
      </apiDesc></apiParam><apiParam><apiItemName>maxValue</apiItemName><apiType value="Number"/><apiDesc>計算された最大値です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      軸のラベルの生成または割り当て範囲を調整します。 このメソッドは軸の更新サイクル中に呼び出されます。 サブクラスはこのメソッドをオーバーライドして、値に対して特別な処理を行うことができます。 デフォルトでは、この範囲には調整が行われません。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:protected:buildLabelCache"><apiName>buildLabelCache</apiName><shortdesc>
      軸の現在の値を表すラベルで labelCache プロパティの値を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>ラベルが再生成されている場合は true です。
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      軸の現在の値を表すラベルで <codeph>labelCache</codeph> プロパティの値を設定します。 サブクラスではこの関数を実装する必要があります。 この関数は何度も呼び出されるため、計算の実行前に <codeph>labelCache</codeph> プロパティが <codeph>null</codeph> であるかどうかをチェックする必要があります。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:protected:buildMinorTickCache"><apiName>buildMinorTickCache</apiName><shortdesc>
      この軸によって生成される小さな目盛りの配列に対する位置の配列を構築します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>小さな目盛りがレンダリングされる箇所の、軸の最小値と最大値の間のポイントを表す 0 から 1 までの位置の配列です。
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      この軸によって生成される小さな目盛りの配列に対する位置の配列を構築します。 サブクラスではこの関数を実装する必要があります。 この関数は、NumericAxis によって自動的に呼び出されます。 この関数を直接呼び出すのではなく、<codeph>minorTicks</codeph> プロパティにアクセスする必要があります。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:filterCache"><apiName>filterCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#filterCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>変換された値の読み取り元および保管先であるオブジェクトの配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>フィルターの適用前の値を含む、キャッシュ配列の中のオブジェクトのフィールドです。
     
      </apiDesc></apiParam><apiParam><apiItemName>filteredField</apiItemName><apiType value="String"/><apiDesc>フィルターが適用された値の保管先となる、キャッシュ配列の中のオブジェクトのフィールドです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#filterCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:formatForScreen"><apiName>formatForScreen</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#formatForScreen()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>DataTip のテキストです。
      
      </apiDesc></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>ストリングに変換される値です。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#formatForScreen()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:getLabelEstimate"><apiName>getLabelEstimate</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#getLabelEstimate()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier><apiDesc>AxisLabel オブジェクトの配列です。
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#getLabelEstimate()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:getLabels"><apiName>getLabels</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#getLabels()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier><apiDesc>AxisLabel オブジェクトの配列です。
      
      </apiDesc></apiReturn><apiParam><apiItemName>minimumAxisLength</apiItemName><apiType value="Number"/><apiDesc>軸の最小の長さ（ピクセル単位）です。 軸はこの値より長くすることができますが、短くすることはできません。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#getLabels()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:protected:guardMinMax"><apiName>guardMinMax</apiName><shortdesc>
      この軸タイプについて、所定の範囲を無効な値から保護します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>調整が不要な場合、または <codeph>[min,max]</codeph> の形式の調整済み値が含まれる配列の場合は null です。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>min</apiItemName><apiType value="Number"/><apiDesc>計算された最小値です。
      </apiDesc></apiParam><apiParam><apiItemName>max</apiItemName><apiType value="Number"/><apiDesc>計算された最大値です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      この軸タイプについて、所定の範囲を無効な値から保護します。 この関数は、無効な範囲が生成されないようにするため、軸の更新サイクル中に呼び出されます。 サブクラスはこのクラスをオーバーライドして、その軸タイプに適したロジックを定義できます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:protected:invalidateCache"><apiName>invalidateCache</apiName><shortdesc>
      この軸の値を表すキャッシュされたラベルおよび目盛りを無効化します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      この軸の値を表すキャッシュされたラベルおよび目盛りを無効化します。 派生クラスは、ラベルと目盛りの計算に使用された値が変更された場合は必ずこの関数を呼び出す必要があります。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:invertTransform"><apiName>invertTransform</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#invertTransform()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>変換された値を保持するオブジェクトです。
      
      </apiDesc></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>軸の境界です。 このパラメーターは 0 と 1 の間である必要があります。ここで 0 は軸の最小の境界を、1 は最大の境界を表します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#invertTransform()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:mapCache"><apiName>mapCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#mapCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>変換された値の読み取り元および保管先であるオブジェクトの配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>変換前の値を含む、キャッシュ配列の中のオブジェクトのフィールドです。
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>変換された値の保管先となる、キャッシュ配列の中のオブジェクトのフィールドです。
     
      </apiDesc></apiParam><apiParam><apiItemName>indexValues</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>このパラメーターは、マップされる値がインデックス値である場合は <codeph>true</codeph>、自然データ値である場合は <codeph>false</codeph> です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#mapCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:preferDropLabels"><apiName>preferDropLabels</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#preferDropLabels()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>データが失われることなく、ラベルをドロップできる場合は <codeph>true</codeph>、そうでない場合は <codeph>false</codeph> です。 
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#preferDropLabels()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:reduceLabels"><apiName>reduceLabels</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#reduceLabels()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier><apiDesc>ラベルの数を減らして重複を解決する新しいラベルのセットです。
      
      </apiDesc></apiReturn><apiParam><apiItemName>intervalStart</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>ラベルが重なる間隔の始まりです。
     
      </apiDesc></apiParam><apiParam><apiItemName>intervalEnd</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>ラベルが重なる間隔の終わりです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#reduceLabels()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:transformCache"><apiName>transformCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#transformCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>マップされた値の読み取り元および保管先であるオブジェクトの配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>マップ前の値を含む、キャッシュ配列の中のオブジェクトのフィールドです。
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>マップされた値の保管先となる、キャッシュ配列の中のオブジェクトのフィールドです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#transformCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:update"><apiName>update</apiName><shortdesc>
      
      グラフを更新します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      グラフを更新します。 フレームごとに複数回呼び出すことができます。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:NumericAxis:protected:assignedMaximum"><apiName>assignedMaximum</apiName><shortdesc>
      明示的に割り当てられた最大値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      明示的に割り当てられた最大値です。 値が割り当てられない場合、この値は <codeph>NaN</codeph> となります。 通常、計算は <codeph>computedMaximum</codeph> フィールドで実行されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:assignedMinimum"><apiName>assignedMinimum</apiName><shortdesc>
      明示的に割り当てられた最小値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      明示的に割り当てられた最小値です。 値が割り当てられない場合、この値は <codeph>NaN</codeph> となります。 通常、計算は <codeph>computedMinimum</codeph> フィールドで実行されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:computedInterval"><apiName>computedInterval</apiName><shortdesc>
      この軸が表す計算された間隔です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      この軸が表す計算された間隔です。 <codeph>computedInterval</codeph> は、AxisRenderer クラスおよび Gridlines クラスにより、目盛りとグリッド線をレンダリングする場所を決定する場合に使用されます。 NumericAxis 基本クラスはこのフィールドが変更されたかどうかを監視し、グラフをレンダリングする必要があるかどうかを決定します。 このフィールドの値を計算するのは、派生クラスの役割です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:computedMaximum"><apiName>computedMaximum</apiName><shortdesc>
      この軸が表す計算された最大値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      この軸が表す計算された最大値です。 ユーザーが明示的に最大値を割り当てた場合は、通常、<codeph>computedMaximum</codeph> プロパティと <codeph>assignedMaximum</codeph> プロパティが同じです。 そうでない場合は、<codeph>computedMaximum</codeph> が、グラフ内に表示された値から生成されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:computedMinimum"><apiName>computedMinimum</apiName><shortdesc>
      この軸が表す計算された最小値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      この軸が表す計算された最小値です。 ユーザーが明示的に最小値を割り当てた場合は、通常、<codeph>computedMinimum</codeph> プロパティと <codeph>assignedMinimum</codeph> プロパティが同じです。 そうでない場合は、<codeph>computedMinimum</codeph> が、グラフ内に表示された値から生成されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:labelCache"><apiName>labelCache</apiName><shortdesc>
      この軸を表すために生成された AxisLabel オブジェクトの最新のセットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      この軸を表すために生成された AxisLabel オブジェクトの最新のセットです。 軸が変更されて新しいラベルが必要な場合、このプロパティは <codeph>null</codeph> となります。 <codeph>labelCache</codeph> プロパティの値が必ず正しくなるようにするには、<codeph>buildLabelCache()</codeph> メソッドを呼び出してから、<codeph>labelCache</codeph> プロパティにアクセスします。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:labelMaximum"><apiName>labelMaximum</apiName><shortdesc>
      ラベルが配置される最大値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      ラベルが配置される最大値です。 調整済みの最小値を計算した後、多くの軸タイプはグラフ内で軸の範囲をさらに拡大し、ラベルや境界線の生成結果がレンダリングされるスペースを確保します。 この値は、これらの生成結果のためにグラフが調整される<i>前</i>のグラフ内の最大値を表します。 通常、この値に必ずラベルが付けられるよう、軸によりラベルが生成されます。調整された軸の最大値が生成されるわけではありません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:labelMinimum"><apiName>labelMinimum</apiName><shortdesc>
      ラベルが配置される最小値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      ラベルが配置される最小値です。 調整済みの最小値を計算した後、多くの軸タイプはグラフ内で軸の範囲をさらに拡大し、ラベルや境界線の生成結果がレンダリングされるスペースを確保します。 この値は、これらの生成結果のためにグラフが調整される<i>前</i>のグラフ内の最小値を表します。 通常、この値に必ずラベルが付けられるよう、軸によりラベルが生成されます。調整された軸の最大値が生成されるわけではありません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:minorTickCache"><apiName>minorTickCache</apiName><shortdesc>
      この軸を表すために生成された、小さな目盛りの最新のセットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      この軸を表すために生成された、小さな目盛りの最新のセットです。 軸が変更され、新しいラベルと目盛りが必要な場合、このプロパティは <codeph>null</codeph> となることがあります。 パブリックアクセッサー <codeph>minorTicks</codeph> を使用して、要求時に小さな目盛りを作成します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:autoAdjust:get"><apiName>autoAdjust</apiName><shortdesc>
      Flex で値の四捨五入が行われるかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Flex で値の四捨五入が行われるかどうかを指定します。 <codeph>false</codeph> の場合、<codeph>minimum</codeph> プロパティおよび <codeph>maximum</codeph> プロパティで設定された値は四捨五入されず、また、デフォルトの <codeph>minimum</codeph> と <codeph>maximum</codeph> の値も修正されません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:baseAtZero:get"><apiName>baseAtZero</apiName><shortdesc>
      Flex で minimum および maximum の値を 0 のままにするかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Flex で <codeph>minimum</codeph> および <codeph>maximum</codeph> の値を 0 のままにするかどうかを指定します。 軸の値がすべて正の場合は、軸の最小値がゼロになります。 軸の値がすべて負の場合は、軸の最大値がゼロになります。  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:baseline:get"><apiName>baseline</apiName><shortdesc>
      計算された軸の最小値です（この値が 0 より大きい場合に限り）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      計算された軸の最小値です（この値が 0 より大きい場合に限り）。 最大値が 0 以下の場合、<codeph>baseline</codeph> プロパティは計算された最大値となります。 いずれの値も 0 より大きい場合、<codeph>baseline</codeph> プロパティは 0 となります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:dataDescriptions:get"><apiName>dataDescriptions</apiName><shortdesc>
      グラフで表されるデータを記述した DataDescription 構造体の配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      グラフで表されるデータを記述した DataDescription 構造体の配列です。 軸はこのプロパティを使用して、範囲などの、プロパティの値を生成することができます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:direction:get"><apiName>direction</apiName><shortdesc>
 	  軸をレンダリングする方向を決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"normal"
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
 	  軸をレンダリングする方向を決定します。可能な値は、<codeph>normal</codeph> および <codeph>inverted</codeph> です。すべての派生クラスで、<codeph>direction</codeph> に応じて、最小値および最大値の設定方法に注意する必要があります。すべての系列で、基になる軸の <codeph>direction</codeph> に応じて、レンダリング方法に注意する必要があります。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      ラベルとして表示するために、軸の値をフォーマットするために呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      ラベルとして表示するために、軸の値をフォーマットするために呼び出されます。 <codeph>labelFunction</codeph> には、次のシグネチャがあります。
      <pre>
      function <i>function_name</i>(<i>labelValue</i>:Object, <i>previousValue</i>:Object, <i>axis</i>:IAxis):String { ... }
      </pre>
      
      <p>使用する関数でフォーマットされるデータのタイプがわかっている場合は、<codeph>labelValue</codeph> パラメーターおよび <codeph>previousValue</codeph> パラメーターに明示的なタイプを指定できます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:minorTicks:get"><apiName>minorTicks</apiName><shortdesc>
      この軸を表すために生成された小さな目盛りの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      この軸を表すために生成された小さな目盛りの配列です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:padding:get"><apiName>padding</apiName><shortdesc>
      値を画面上にレンダリングする際に、計算された軸の最小値および最大値に追加するスペースを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      値を画面上にレンダリングする際に、計算された軸の最小値および最大値に追加するスペースを指定します。  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:parseFunction:get"><apiName>parseFunction</apiName><shortdesc> 
      グラフによりレンダリングされた値の数値への変換方法をカスタマイズする parseFunction を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> 
      グラフによりレンダリングされた値の数値への変換方法をカスタマイズする <codeph>parseFunction</codeph> を指定します。 カスタムの <codeph>parseFunction</codeph> にデータ値が渡され、同じ値を表す対応数値が返されます。 デフォルトでは、この軸で ECMA 関数 <codeph>parseFloat()</codeph> が使用されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:requiredDescribedFields:get"><apiName>requiredDescribedFields</apiName><shortdesc>
      この軸に影響する DescribeData 構造体のフィールドです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
      この軸に影響する DescribeData 構造体のフィールドです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:ticks:get"><apiName>ticks</apiName><shortdesc>
      この軸で使用される小さな目盛りの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      この軸で使用される小さな目盛りの配列です。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:IStackable"><apiName>IStackable</apiName><shortdesc>
  IStackable インターフェイスは、積み重ね可能な系列によって実装されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IStackable インターフェイスは、積み重ね可能な系列によって実装されます。 積み重ねセット（ColumnSet、BarSet、AreaSet）では、このインターフェイスは積み重ね時に割り当てられたサブ系列によって実装される必要があります。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.charts.chartClasses:IStackable:mx.charts.chartClasses:IStackable:stack"><apiName>stack</apiName><shortdesc>
	  系列を積み重ねます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>新たに積み重ねる系列の最大値です。	 
	  
	  </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>stackedXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>系列が積み重ねられる基本値が含まれます。 辞書のキーは y 値で、値は x 値です。
	  
	  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable</apiOperationClassifier><apiDesc>積み重ねの中の直前のエレメントです。 例えば、同じ型のエレメントの場合は、このプロパティへのアクセスを使用することにより、レンダリング時に同じ処理を繰り返す必要を回避できます。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  系列を積み重ねます。 通常、系列はデータプロバイダーからデータをロードするため <codeph>updateData()</codeph> 関数を実装しています。 ただし、積み重ね系列では、必ずしもデータプロバイダーに値が格納されているとは限らないため、特殊な操作が実行されます。 その値は、データプロバイダーに何が格納されていても、積み重ねられる側のオブジェクトによってロードされた値と合算したものになります。
	  <p>カスタム積み重ね系列には、<codeph>stack()</codeph> メソッドを実装してください。データプロバイダーからデータをロードし、レンダリング対象の実値が取得される辞書内の基本値にそのデータを追加し、合算後の新しい値で辞書内の値を置き換えます。</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:IStackable:mx.charts.chartClasses:IStackable:stacker:get"><apiName>stacker</apiName><shortdesc>
	  この系列に関連付けられた StackedSeries です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:StackedSeries</apiValueClassifier></apiValueDef><apiDesc>
	  この系列に関連付けられた StackedSeries です。 このスタッカーによって、系列の積み重ね動作が管理されます。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IStackable:mx.charts.chartClasses:IStackable:stackTotals:set"><apiName>stackTotals</apiName><shortdesc>
	  系列の積み重ねの総計です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
	  系列の積み重ねの総計です。
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:IBar"><apiName>IBar</apiName><shortdesc>
  IBar インターフェイスは、垂直方向に集合させることができる系列（BarSeries など）によって実装されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IBar インターフェイスは、垂直方向に集合させることができる系列（BarSeries など）によって実装されます。 BarSet の系列タイプでは、このインターフェイスは割り当てられたサブ系列によって実装される必要があります。
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.charts.chartClasses:IBar:mx.charts.chartClasses:IBar:barWidthRatio:set"><apiName>barWidthRatio</apiName><shortdesc>
	  表示するアイテムの幅をカテゴリに対する割合で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
	  表示するアイテムの幅をカテゴリに対する割合で指定します。 値が <codeph>1</codeph> の場合は領域全体が使用され、<codeph>0.6</codeph> の場合はカテゴリの使用可能領域の 60% が使用されます。 通常、このプロパティを直接設定することはありません。 この値は、管理する BarSet または BarChart によって暗黙的に割り当てられます。 実際の幅には、<codeph>barWidthRatio</codeph> プロパティと <codeph>maxbarWidth</codeph> プロパティの値のうち小さい方が使用されます。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IBar:mx.charts.chartClasses:IBar:maxBarWidth:set"><apiName>maxBarWidth</apiName><shortdesc>
	  描画するアイテムの幅をピクセル単位で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
	  描画するアイテムの幅をピクセル単位で指定します。 実際のアイテムの幅には、このスタイルと <codeph>barWidthRatio</codeph> プロパティの値のうち小さい方が使用されます。 通常、このプロパティを直接設定することはありません。 BarSet オブジェクトまたは BarChart オブジェクトはこの値を割り当てます。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IBar:mx.charts.chartClasses:IBar:offset:set"><apiName>offset</apiName><shortdesc>
	  使用可能な領域の中心からアイテムの中心をずらす度合いを、カテゴリのサイズに対する割合で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/><apiDefaultValue>0
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  使用可能な領域の中心からアイテムの中心をずらす度合いを、カテゴリのサイズに対する割合で指定します。 値の範囲は <codeph>-100</codeph> ～ <codeph>100</codeph> のパーセンテージです。 領域の中心にアイテムを配置するには <codeph>0</codeph> に設定します。 このプロパティの値を <codeph>-50</codeph> に設定すると、アイテムは使用可能な領域の開始位置の中央に配置されます。 通常、このプロパティを直接設定することはありません。 BarSet オブジェクトまたは BarChart オブジェクトはこの値を割り当てます。
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:AxisLabelSet"><apiName>AxisLabelSet</apiName><shortdesc>
  AxisLabelSet は、IAxis の実装で生成されたラベルと目盛りのデータを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  AxisLabelSet は、IAxis の実装で生成されたラベルと目盛りのデータを表します。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:AxisLabelSet:AxisLabelSet"><apiName>AxisLabelSet</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts.chartClasses:AxisLabelSet:accurate"><apiName>accurate</apiName><shortdesc>
      getLabelEstimate() メソッドから返されたときに、レンダリングされる最終ラベルが予測によって正確に表せる場合は、true に設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
      <codeph>getLabelEstimate()</codeph> メソッドから返されたときに、レンダリングされる最終ラベルが予測によって正確に表せる場合は、<codeph>true</codeph> に設定します。 正確に表せない場合、このプロパティは適切ではありません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:AxisLabelSet:labels"><apiName>labels</apiName><shortdesc>
      生成する軸の値を表す AxisLabel オブジェクトの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      生成する軸の値を表す AxisLabel オブジェクトの配列です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:AxisLabelSet:minorTicks"><apiName>minorTicks</apiName><shortdesc>
      軸に沿って小さな目盛りを配置する場所を表す 0 から 1 までの値の配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      軸に沿って小さな目盛りを配置する場所を表す 0 から 1 までの値の配列です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:AxisLabelSet:ticks"><apiName>ticks</apiName><shortdesc>
      軸に沿って目盛りを配置する場所を表す 0 から 1 までの値の配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      軸に沿って目盛りを配置する場所を表す 0 から 1 までの値の配列です。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:CartesianDataCanvas"><apiName>CartesianDataCanvas</apiName><shortdesc>
 このクラスを使用すると、グラフィック API によって線、楕円、その他のシェイプなどのグラフィックエレメントを使用または追加できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataChildren"/></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:CartesianDataCanvas&gt;</code> tag inherits all the
  properties of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:CartesianDataCanvas
    <strong>Properties</strong>
    dataChildren="<i>No default</i>"
    horizontalAxis="<i>No default</i>"
    includeInRanges="<i>false</i>"
    verticalAxis="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IDataCanvas</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:ChartElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 このクラスを使用すると、グラフィック API によって線、楕円、その他のシェイプなどのグラフィックエレメントを使用または追加できます。 グラフィック API に渡す値は、スクリーン座標ではなくデータ座標です。 また、コンテナに子を追加するときと同じ方法で、キャンバスに DisplaObject を追加することもできます。
 
 <p><codeph>verticalAxis</codeph> および <codeph>horizontalAxis</codeph> が指定されている場合、キャンバスの描画領域はこれらのプロパティによって決定されます。 それ以外の場合、キャンバスはグラフのデフォルトの軸を使用して描画領域を計算します。</p>
 
 <p>描画 API にパラメーターとして渡すデータ座標には、データ座標の実際の値か、データ座標の値およびオフセット（ピクセル単位）を保持できる <codeph>CartesianCanvasValue</codeph> タイプのオブジェクトを指定できます。</p>
 
 </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:CartesianDataCanvas:CartesianDataCanvas"><apiName>CartesianDataCanvas</apiName><shortdesc>
     コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
     コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:addChildAt"><apiName>addChildAt</apiName><shortdesc>
     
     この DisplayObjectContainer インスタンスに子 DisplayObject インスタンスを追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc><codeph>child</codeph> パラメーターで渡す DisplayObject インスタンスです。
     
     </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>この DisplayObjectContainer インスタンスの子として追加する DisplayObject インスタンスです。
     
     </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>子を追加するインデックス位置です。既にオブジェクトが置かれているインデックス位置を指定すると、その位置にあるオブジェクトとその上に位置するすべてのオブジェクトが、子リスト内で 1 つ上の位置に移動します。 
         
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
     この DisplayObjectContainer インスタンスに子 DisplayObject インスタンスを追加します。子インスタンスは、指定されたインデックス位置に追加されます。インデックス 0 は、この DisplayObjectContainer オブジェクトの表示リストの背景または一番下を表します。
     
     <p>既に異なる表示オブジェクトコンテナを親に持つ子オブジェクトを追加する場合は、もう一方の表示オブジェクトコンテナの子リストからそのオブジェクトが削除されます。 </p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:addChild"><apiName>addChild</apiName><shortdesc>
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:addDataChild"><apiName>addDataChild</apiName><shortdesc>
     指定された表示オブジェクトを現在のキャンバスに子として追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>    現在のキャンバスに子として追加される表示オブジェクトです。
     </apiDesc></apiParam><apiParam><apiItemName>left</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>     データ座標における<codeph>子</codeph>の左の x 座標です。
     </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>      データ座標における<codeph>子</codeph>の上の y 座標です。
     </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>    データ座標における<codeph>子</codeph>の右の x 座標です。
     </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>   データ座標における<codeph>子</codeph>の下の y 座標です。
     </apiDesc></apiParam><apiParam><apiItemName>hCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>  データ座標における<codeph>子</codeph>の中央の x 座標です。
     </apiDesc></apiParam><apiParam><apiItemName>vCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>  データ座標における<codeph>子</codeph>の中央の y 座標です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     指定された表示オブジェクトを現在のキャンバスに子として追加します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:beginBitmapFill"><apiName>beginBitmapFill</apiName><shortdesc>
     描画領域をビットマップイメージで塗りつぶします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bitmap</apiItemName><apiType value="flash.display:BitmapData"/><apiDesc>表示されるビットを含む透明または不透明ビットマップイメージです。 
     
     </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>塗りの x 座標です。
     
     </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>塗りの y 座標です。
     
     </apiDesc></apiParam><apiParam><apiItemName>matrix</apiItemName><apiType value="flash.geom:Matrix"/><apiData>null</apiData><apiDesc>flash.geom.Matrix クラスのマトリックスオブジェクトです。これを使用してビットマップ上に変形を定義できます。
     
     </apiDesc></apiParam><apiParam><apiItemName>repeat</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc><codeph>true</codeph> の場合、ビットマップイメージが一定のパターンでタイル状に表示されます。<codeph>false</codeph> の場合、ビットマップイメージは繰り返されません。ビットマップからはみ出す塗り領域にはビットマップのエッジが使用されます。
     
     </apiDesc></apiParam><apiParam><apiItemName>smooth</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc><codeph>false</codeph> の場合、拡大ビットマップイメージは最近傍アルゴリズムを使用してレンダリングされ、ピクセル化されたように見えます。<codeph>true</codeph> の場合、拡大ビットマップイメージは双線形アルゴリズムを使用してレンダリングされます。最近傍アルゴリズムを使用したレンダリングの方が高速です。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     描画領域をビットマップイメージで塗りつぶします。このメソッドに渡す座標は、キャンバスの水平軸および垂直軸を基準とします。
     
     <p>このメソッドの使用方法とパラメーターは、flash.display.Graphics クラスの <codeph>beginBitmapFill()</codeph> メソッドと同じです。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/beginBitmapFill()"><linktext>flash.display.Graphics.beginBitmapFill()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:beginFill"><apiName>beginFill</apiName><shortdesc conref="flash.display.Graphics#beginFill()">
     メモ：このメソッドには、beginGradientFill() および beginShaderFill() メソッドを除いて、flash.display.Graphics クラスの beginFill() メソッドから取得される次の情報が適用されます。
      
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>color</apiItemName><apiType value="uint"/></apiParam><apiParam><apiItemName>alpha</apiItemName><apiType value="Number"/><apiData>1</apiData></apiParam></apiOperationDef><apiDesc conref="flash.display.Graphics#beginFill()">
     <i>メモ：このメソッドには、<codeph>beginGradientFill()</codeph> および <codeph>beginShaderFill()</codeph> メソッドを除いて、<codeph>flash.display.Graphics</codeph> クラスの <codeph>beginFill()</codeph> メソッドから取得される次の情報が適用されます。</i>
      
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Graphics.xml"><linktext>flash.display.Graphics</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:clear"><apiName>clear</apiName><shortdesc conref="flash.display.Graphics#clear()">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="flash.display.Graphics#clear()">
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Graphics.xml"><linktext>flash.display.Graphics</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:curveTo"><apiName>curveTo</apiName><shortdesc>
     (controlX, controlY) で指定されたコントロールポイントを使用し、現在の描画位置から (anchorX, anchorY) まで、現在の線のスタイルで曲線を描画します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controlX</apiItemName><apiType value="any"/><apiDesc>コントロールポイントの x 座標です。 
     
     </apiDesc></apiParam><apiParam><apiItemName>controlY</apiItemName><apiType value="any"/><apiDesc>コントロールポイントの y 座標です。
     
     </apiDesc></apiParam><apiParam><apiItemName>anchorX</apiItemName><apiType value="any"/><apiDesc>アンカーポイントの x 座標です。 
     
     </apiDesc></apiParam><apiParam><apiItemName>anchorY</apiItemName><apiType value="any"/><apiDesc>アンカーポイントの y 座標です。  
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     現在の描画位置から（anchorX, anchorY）までの曲線を、現在の線のスタイルと（controlX, controlY）で指定されたコントロールポイントを使用して描画します。このメソッドに渡す座標は、スクリーン座標ではなくグラフデータを基準とします。
     
     <p>このメソッドの使用方法とパラメーターは、flash.display.Graphics クラスの <codeph>curveTo()</codeph> メソッドと同じです。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/curveTo()"><linktext>flash.display.Graphics.curveTo()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:dataToLocal"><apiName>dataToLocal</apiName><shortdesc>
      
      
      1 組のデータ値を画面上の x-y 座標に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>グラフを基準とする座標です。
      
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>dataValues</apiItemName><apiType value="restParam"/><apiDesc>座標に変換するデータの値です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      1 組のデータ値を画面上の x-y 座標に変換します。 この関数は、個々のエレメントと同じ変換を使用して画面上でデータを変換する場合に呼び出します。 例えば、グラフのデータ領域にカスタムのハイライト表示を作成するには、この関数を使用して該当する範囲の画面上の座標を指定することができます。
      
      <p>直交 ChartElements の場合は、通常 2 つの値を渡します。 最初の値は水平軸にマッピングされ、2 番目の値は垂直軸にマッピングされます。</p>
      
      <p>極座標グラフの場合は、最初の値が角度軸にマッピングされ、2 番目の値が放射軸にマッピングされます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:describeData"><apiName>describeData</apiName><shortdesc>
     
      
      この IChartElement で表されるデータの記述を取得するために、管理する DataTransform によって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>表示されるデータを記述する DataDescription インスタンスを含む Array です。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>データの記述を取得する軸を特定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>特定の軸で管理される DataDescription オブジェクトの値を示すビットフィールドです。 インプリメンタによって必要なフィールドを計算する方法でのみ最適化できます。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      
      この IChartElement で表されるデータの記述を取得するために、管理する DataTransform によって呼び出されます。 インプリメンタによって mx.charts.chartClasses.DataDescription オブジェクトの配列が入力されて返され、表示データ（minimum、maximum、interval、unitSize など）から値を自動生成するすべての軸に沿ってこれらのデータが正確に記述されることが保証されます。 ほとんどのエレメントタイプでは、1 つの DataDescription を含む配列が返されます。 BarSet や ColumnSet などのエレメントを集約します。それらのサブエレメントによって表示されるデータを記述する複数の DataDescription インスタンスを返すことがあります。 呼び出されると、インプリメンタによって <codeph>dimension</codeph> パラメーターで指定された軸に沿ってデータが記述されます。 この関数は、グラフによってサポートされる軸ごとに呼び出される場合があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:drawCircle"><apiName>drawCircle</apiName><shortdesc>
     円を描画します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="any"/><apiDesc>円の中心の x の位置（ピクセル単位）です。 
     
     </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="any"/><apiDesc>円の中心の y の位置（ピクセル単位）です。 
     
     </apiDesc></apiParam><apiParam><apiItemName>radius</apiItemName><apiType value="Number"/><apiDesc>円の半径（ピクセル単位）。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     円を描画します。<codeph>drawCircle()</codeph> メソッドを呼び出す前に、線のスタイルまたは塗り、あるいはその両方を設定します。そのためには、<codeph>linestyle()</codeph>、<codeph>lineGradientStyle()</codeph>、<codeph>beginFill()</codeph>、<codeph>beginGradientFill()</codeph>、または <codeph>beginBitmapFill()</codeph> メソッドを呼び出します。このメソッドに渡す座標は、スクリーン座標ではなくグラフデータを基準とします。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Graphics.xml"><linktext>flash.display.Graphics</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:drawEllipse"><apiName>drawEllipse</apiName><shortdesc>
     楕円を描画します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>left</apiItemName><apiType value="any"/><apiDesc>楕円の境界ボックスの左上隅の x の位置です。
     
     </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="any"/><apiDesc>楕円の境界ボックスの左上隅の y の位置です。
     
     </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="any"/><apiDesc>楕円の境界ボックスの右下隅の x の位置です。
     
     </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="any"/><apiDesc>楕円の境界ボックスの右下隅の y の位置です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     楕円を描画します。<codeph>drawEllipse()</codeph> メソッドを呼び出す前に、線のスタイルまたは塗り、あるいはその両方を設定します。そのためには、<codeph>linestyle()</codeph>、<codeph>lineGradientStyle()</codeph>、<codeph>beginFill()</codeph>、<codeph>beginGradientFill()</codeph>、または <codeph>beginBitmapFill()</codeph> メソッドを呼び出します。このメソッドに渡す座標は、スクリーン座標ではなくグラフデータを基準とします。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/drawEllipse()"><linktext>flash.display.Graphics.drawEllipse()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:drawRect"><apiName>drawRect</apiName><shortdesc>
     矩形を描画します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>left</apiItemName><apiType value="any"/><apiDesc>矩形の左上隅の x の位置です。
     
     </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="any"/><apiDesc>矩形の左上隅の y の位置です。
     
     </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="any"/><apiDesc>矩形の右下隅の x の位置です。
     
     </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="any"/><apiDesc>矩形の右下隅の y の位置です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     矩形を描画します。<codeph>drawRect()</codeph> メソッドを呼び出す前に、線のスタイルまたは塗り、あるいはその両方を設定します。そのためには、<codeph>linestyle()</codeph>、<codeph>lineGradientStyle()</codeph>、<codeph>beginFill()</codeph>、<codeph>beginGradientFill()</codeph>、または <codeph>beginBitmapFill()</codeph> メソッドを呼び出します。このメソッドに渡す座標は、スクリーン座標ではなくグラフデータを基準とします。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/drawRect()"><linktext>flash.display.Graphics.drawRect()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:drawRoundedRect"><apiName>drawRoundedRect</apiName><shortdesc>
     角丸矩形を描画します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>left</apiItemName><apiType value="any"/><apiDesc>矩形の左上隅の x の位置です。
     
     </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="any"/><apiDesc>矩形の左上隅の y の位置です。
     
     </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="any"/><apiDesc>矩形の右下隅の x の位置です。
     
     </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="any"/><apiDesc>矩形の右下隅の y の位置です。
     
     </apiDesc></apiParam><apiParam><apiItemName>cornerRadius</apiItemName><apiType value="Number"/><apiDesc>角丸の半径（ピクセル単位）です。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     角丸矩形を描画します。<codeph>drawRoundRect()</codeph> メソッドを呼び出す前に、線のスタイルまたは塗り、あるいはその両方を設定します。そのためには、<codeph>linestyle()</codeph>、<codeph>lineGradientStyle()</codeph>、<codeph>beginFill()</codeph>、<codeph>beginGradientFill()</codeph>、または <codeph>beginBitmapFill()</codeph> メソッドを呼び出します。このメソッドに渡す座標は、スクリーン座標ではなくグラフデータを基準とします。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/drawRoundRect()"><linktext>flash.display.Graphics.drawRoundRect()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:endFill"><apiName>endFill</apiName><shortdesc conref="flash.display.Graphics#endFill()"> 
     メモ：このメソッドには、beginGradientFill() を除いて、flash.display.Graphics クラスの endFill() から取得される次の情報が適用されます。
     
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="flash.display.Graphics#endFill()"> 
     <i>メモ：このメソッドには、<codeph>beginGradientFill()</codeph> を除いて、<codeph>flash.display.Graphics</codeph> クラスの <codeph>endFill()</codeph> から取得される次の情報が適用されます。</i>
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Graphics.xml"><linktext>flash.display.Graphics</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      データプロバイダー内の基になるデータが変更されたことをキャンバスに通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>データプロバイダーのデータが変更された場合は <codeph>true</codeph> になります。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      データプロバイダー内の基になるデータが変更されたことをキャンバスに通知します。 このメソッドを呼び出すと、<codeph>updateMapping()</codeph> メソッドおよび <codeph>updateTransform()</codeph> メソッドの呼び出しが、次回の <codeph>commitProperties()</codeph> メソッドの呼び出し時にトリガーされます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:lineStyle"><apiName>lineStyle</apiName><shortdesc>
     オブジェクトの他の Graphics メソッド（lineTo() や drawCircle() など）に対する以降の呼び出しに使用する線のスタイルを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>thickness</apiItemName><apiType value="Number"/><apiDesc>線の太さをポイント単位で示す整数。有効な値は 0 ～ 255 です。パラメーターが undefined である場合は、線は描画されません。0 未満の値を指定した場合は、デフォルトで 0 が適用されます。0 は極細線です。最大の太さは 255 です。255 を超える値を指定した場合は、デフォルトで 255 が適用されます。 
     
     </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>線の色を表す 16 進値。例えば、赤は 0xFF0000、青は 0x0000FF で表します。値を指定しない場合は、デフォルトで 0x000000（黒）が適用されます。
     
     </apiDesc></apiParam><apiParam><apiItemName>alpha</apiItemName><apiType value="Number"/><apiData>1.0</apiData><apiDesc>線の色のアルファ値を示す数値。有効な値は 0 ～ 1 です。値を指定しない場合は、デフォルトで 1（ソリッド）が適用されます。0 未満の値を指定した場合、デフォルトで 0 が適用されます。1 より大きい値を指定した場合、デフォルトで 1 が適用されます。
     
     </apiDesc></apiParam><apiParam><apiItemName>pixelHinting</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>ピクセル全体に対して線をヒンティングするかどうかを指定するブール値。この値は、曲線のアンカーの位置と線のサイズ自身の両方に影響を与えます。<codeph>pixelHinting</codeph> を true に設定すると、線幅が全ピクセル幅に調整されます。 <codeph>pixelHinting</codeph> を false に設定すると、曲線と直線で非連続が発生することがあります。
     
     </apiDesc></apiParam><apiParam><apiItemName>scaleMode</apiItemName><apiType value="String"/><apiData>normal</apiData><apiDesc>使用する拡大 / 縮小モードを指定する flash.display.LineScaleMode クラスの値です。
     
     <ul>
       <li><codeph>LineScaleMode.NORMAL</codeph>：オブジェクトが拡大 / 縮小される場合は、常に線の太さが拡大 / 縮小されます（デフォルト）。</li>
       <li><codeph>LineScaleMode.NONE</codeph>：線の太さを拡大 / 縮小しません。</li>
       <li><codeph>LineScaleMode.VERTICAL</codeph>：オブジェクトを垂直方向にのみ拡大 / 縮小する場合は、線の太さを拡大 / 縮小しません。 </li>
       <li><codeph>LineScaleMode.HORIZONTAL</codeph>：オブジェクトを水平方向にのみ拡大 / 縮小する場合は、線の太さを拡大 / 縮小しません。 </li>
     </ul>
     
     </apiDesc></apiParam><apiParam><apiItemName>caps</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>線の終端のキャップの種類を指定する flash.display.CapsStyle クラスの値です。有効な値は次のとおりです。<codeph>CapsStyle.NONE</codeph>、<codeph>CapsStyle.ROUND</codeph>、および <codeph>CapsStyle.SQUARE</codeph>。この値を指定しない場合は、丸いキャップが使用されます。 
     
     </apiDesc></apiParam><apiParam><apiItemName>joints</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>角で使用する接合点の外観の種類を指定する flash.display.JointStyle クラスの値です。有効な値は次のとおりです。<codeph>JointStyle.BEVEL</codeph>、<codeph>JointStyle.MITER</codeph>、および <codeph>JointStyle.ROUND</codeph>。この値を指定しないと、角丸（"round"）の接合点が使用されます。 
     
     </apiDesc></apiParam><apiParam><apiItemName>miterLimit</apiItemName><apiType value="Number"/><apiData>3</apiData><apiDesc>マイターが切り取られる限度を示す数値です。有効な値の範囲は 1 ～ 255 で、この範囲を超えた値は 1 または 255 に丸められます。この値は、jointStyle を "miter" に設定した場合にのみ有効です。<codeph>miterLimit</codeph> の値により、線の接合点を越えてマイターを延長できる長さが決定します。マイターを延長できる長さは、この値と線の thickness が乗算されたものです。例えば、<codeph>miterLimit</codeph> の値が 2.5 で、thickness が 10 ピクセルの場合、マイターは 25 ピクセルで切り取られます。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     オブジェクトの他の Graphics メソッド（<codeph>lineTo()</codeph> や <codeph>drawCircle()</codeph> など）に対する以降の呼び出しに使用する線のスタイルを指定します。
     
     <p>このメソッドの使用方法とパラメーターは、flash.display.Graphics クラスの <codeph>lineStyle()</codeph> メソッドと同じです。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/lineStyle()"><linktext>flash.display.Graphics.lineStyle()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:lineTo"><apiName>lineTo</apiName><shortdesc>
     現在の描画位置から (x, y) まで、現在の線のスタイルを使用して線を描画します。その後で、現在の描画位置は (x, y) に設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="any"/><apiDesc>描画位置の x 座標です。
     
     </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="any"/><apiDesc>描画位置の y 座標です。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     現在の描画位置から (x, y) まで、現在の線のスタイルを使用して線を描画します。その後で、現在の描画位置は (x, y) に設定されます。描画先の表示オブジェクトに Flash の描画ツールで作成したコンテンツが含まれている場合、<codeph>lineTo()</codeph> メソッドへの呼び出しの結果はこのコンテンツの下に描画されます。<codeph>lineTo()</codeph> を呼び出してから moveTo() メソッドを呼び出すと、現在の描画位置はデフォルトで (0,0) になります。いずれかのパラメーターを省略すると、このメソッドは失敗し、現在の描画位置は変更されません。座標はスクリーン座標ではなくデータを基準としています。このメソッドに渡す座標は、スクリーン座標ではなくグラフデータを基準とします。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/lineTo()"><linktext>flash.display.Graphics.lineTo()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:localToData"><apiName>localToData</apiName><shortdesc>
      
      
      画面上の座標を 1 組のデータ値に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>1 組のデータ値です。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>v</apiItemName><apiType value="flash.geom:Point"/><apiDesc>変換する Point オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      画面上の座標を 1 組のデータ値に変換します。 この関数は、画面上の特定のポイントを表すデータ値を取得する場合に呼び出します。
      <p>個々のグラフタイプによって、この変換がどのように行われるかが決まります。 ポイントは、グラフの座標空間に対応する必要があります。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:mappingChanged"><apiName>mappingChanged</apiName><shortdesc>
     
      関連付けられている軸のマッピングが変更されると呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     
      関連付けられている軸のマッピングが変更されると呼び出されます。 この ChartElement に割り当てられた DataTransform は、表現する軸のいずれかが何らかの方法で変更されると、このメソッドを呼び出します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:moveTo"><apiName>moveTo</apiName><shortdesc>
     現在の描画位置を (x, y) に移動します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="any"/><apiDesc>描画位置の x 座標です。
     
     </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="any"/><apiDesc>描画位置の y 座標です。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     現在の描画位置を (x, y) に移動します。いずれかのパラメーターを省略すると、このメソッドは失敗し、現在の描画位置は変更されません。このメソッドに渡す座標は、スクリーン座標ではなくグラフデータを基準とします。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/moveTo()"><linktext>flash.display.Graphics.moveTo()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:removeAllChildren"><apiName>removeAllChildren</apiName><shortdesc>
     キャンバスのすべての子データ（DisplayObject のインスタンス）を削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     キャンバスのすべての子データ（DisplayObject のインスタンス）を削除します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:removeChildAt"><apiName>removeChildAt</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:removeChild"><apiName>removeChild</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:protected:stripNaNs"><apiName>stripNaNs</apiName><shortdesc>
      field プロパティが NaN である所定のキャッシュにアイテムがある場合は、すべて削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc> オブジェクトの配列。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>テストする <codeph>field</codeph> プロパティ。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>field</codeph> プロパティが <codeph>NaN</codeph> である所定のキャッシュにアイテムがある場合は、すべて削除します。 派生クラスによって、その updateFilter() 実装からこのメソッドを呼び出して、軸でフィルターされた ChartItem をすべて削除することができます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:updateDataChild"><apiName>updateDataChild</apiName><shortdesc>
     子の位置を現在のキャンバスに更新します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>    更新される表示オブジェクトです。
     </apiDesc></apiParam><apiParam><apiItemName>left</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>     データ座標における子の左の x 座標です。
     </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>      データ座標における子の上の y 座標です。
     </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>    データ座標における子の右の x 座標です。
     </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>   データ座標における子の下の y 座標です。
     </apiDesc></apiParam><apiParam><apiItemName>hCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>  データ座標における子の中央の x 座標です。
     </apiDesc></apiParam><apiParam><apiItemName>vCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>  データ座標における子の中央の y 座標です。
     
     <p>次に実際の使用例を示します。
     <pre>
          var lbl:Label = new Label();
          lbl.text = "Last Month";
          canvas.addChild(lbl);
          canvas.updateDataChild(lbl,"Feb",200);
     </pre>
     </p>
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     子の位置を現在のキャンバスに更新します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:protected:updateFilter"><apiName>updateFilter</apiName><shortdesc>
      キャンバスが表す基になるデータのフィルター操作を、関連するデータ変換の軸で表される範囲に対して行う必要があるときに呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      キャンバスが表す基になるデータのフィルター操作を、関連するデータ変換の軸で表される範囲に対して行う必要があるときに呼び出されます。 これは、基になるデータが変更されたか、関連する軸の範囲が変更されたことが原因で生じる場合があります。 カスタムキャンバスタイプを実装する場合は、このメソッドをオーバーライドし、関連するデータ変換によって管理される軸の <codeph>filterCache()</codeph> メソッドを使用して範囲外のデータを除外する必要があります。 <codeph>filterCache()</codeph> メソッドは、範囲外の値を <codeph>NaN</codeph> に変換します。 <codeph>super.updateFilter()</codeph> メソッドは必ずサブクラス内で呼び出す必要があります。 一般に、このメソッドは直接呼び出さないでください。 その代わり、指定された時点でデータにフィルターが確実に適用されるようにする必要がある場合は、PolarDataCanvas クラスの <codeph>validateTransform()</codeph> メソッドを呼び出します。 通常、必要な場合には、このメソッドの前に <codeph>updateData()</codeph> メソッドおよび <codeph>updateMapping()</codeph> メソッドが呼び出されていると想定できます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:protected:validateData"><apiName>validateData</apiName><shortdesc>
      必要に応じてキャンバスの updateMapping() および updateFilter() メソッドを呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      必要に応じてキャンバスの <codeph>updateMapping()</codeph> および <codeph>updateFilter()</codeph> メソッドを呼び出します。 このメソッドは必要に応じてキャンバスによって <codeph>commitProperties()</codeph> メソッドから自動的に呼び出されますが、明示的な時間に生成値が必要とされる場合は、派生キャンバスから明示的に呼び出されることがあります。 軸に対するデータのロードとマッピングは、軸のどのポイントでも可能となるように設計されています。 このメソッドは、どのポイントで明示的に呼び出しても問題ありません。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:protected:validateTransform"><apiName>validateTransform</apiName><shortdesc>
      必要に応じてキャンバスの updateTransform() メソッドを呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc><codeph>updateTransform()</codeph> が呼び出された場合は、<codeph>true</codeph> を返します。 それ以外の場合は <codeph>false</codeph> です。
     
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      必要に応じてキャンバスの <codeph>updateTransform()</codeph> メソッドを呼び出します。 このメソッドは必要に応じて <codeph>commitProperties()</codeph> メソッドの途中でキャンバスによって自動的に呼び出されますが、明示的な時間に生成値が必要とされる場合は、派生キャンバスから明示的に呼び出されることがあります。 データのフィルターと変換は、軸で計算される特定の値に依存します。また、これらの値も、グラフに表示されるデータに左右される場合があります。 これらの値が更新される場合は、この関数を不適切な時間に呼び出すと、追加の処理が生じる可能性があります。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:CartesianDataCanvas:dataChildren:get"><apiName>dataChildren</apiName><shortdesc>
     子オブジェクトの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
     子オブジェクトの配列です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianDataCanvas:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      x 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      x 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。 LinearAxis クラスまたは CategoryAxis クラスのいずれかを使用すると、水平軸のプロパティを MXML の子タグとして設定したり、ActionScript で LinearAxis オブジェクトまたは CategoryAxis オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianDataCanvas:includeInRanges:get"><apiName>includeInRanges</apiName><shortdesc>
     true に設定されている場合、グラフ中の計算された範囲がこのキャンバスの影響を受けます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     <codeph>true</codeph> に設定されている場合、グラフ中の計算された範囲がこのキャンバスの影響を受けます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianDataCanvas:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      y 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      y 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。 LinearAxis クラスまたは CategoryAxis クラスのいずれかを使用すると、垂直軸のプロパティを MXML の子タグとして設定したり、ActionScript で LinearAxis オブジェクトまたは CategoryAxis オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianDataCanvas:dataTransform:set"><apiName>dataTransform</apiName><shortdesc>
      
      このエレメントが関連付けられている DataTransform オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:DataTransform</apiValueClassifier></apiValueDef><apiDesc>
      
      このエレメントが関連付けられている DataTransform オブジェクトです。 DataTransform オブジェクトは、データ領域とスクリーン座標間のエレメントの変換に使用される、エレメントのセットと軸オブジェクトのセットの関連付けを表します。 グラフエレメントでは、エレメントに関連付けられた DataTransform オブジェクトを使用して、そのデータのレンダリング方法が決定されます。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:IAxis"><apiName>IAxis</apiName><shortdesc>
  IAxis クラスは、ラベル、目盛り、データ位置のプロパティをグラフの軸に対して定義する抽象インターフェイスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IAxis クラスは、ラベル、目盛り、データ位置のプロパティをグラフの軸に対して定義する抽象インターフェイスです。
 
  <p>クラスはこのインターフェイスの実装により、範囲を定義する機能を提供します。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#CategoryAxis"><linktext>mx.charts.CategoryAxis</linktext></link><link href="mx.charts.xml#LinearAxis"><linktext>mx.charts.LinearAxis</linktext></link></related-links><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:dataChanged"><apiName>dataChanged</apiName><shortdesc> 
      グラフデータが変更されたときに、範囲のオブジェクトに通知を送るイベントをトリガーします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
      グラフデータが変更されたときに、範囲のオブジェクトに通知を送るイベントをトリガーします。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:filterCache"><apiName>filterCache</apiName><shortdesc>
      任意のタイプの値のセットにフィルターをかけ、マップできる数字のセットにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>変換された値の読み取り元および保管先であるオブジェクトの配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>フィルターの適用前の値を含む、キャッシュ配列の中のオブジェクトのフィールドです。
     
      </apiDesc></apiParam><apiParam><apiItemName>filteredString</apiItemName><apiType value="String"/><apiDesc>フィルターが適用された値の保管先となる、キャッシュ配列の中のオブジェクトのフィールドです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      任意のタイプの値のセットにフィルターをかけ、マップできる数字のセットにします。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:formatForScreen"><apiName>formatForScreen</apiName><shortdesc>
      DataTips での表示用に値をフォーマットします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>DataTip のテキストです。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>ストリングに変換される値です。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      DataTips での表示用に値をフォーマットします。 ユーザーが読み取れるストリングを返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:getLabelEstimate"><apiName>getLabelEstimate</apiName><shortdesc>
      軸ラベルを予測するための範囲を決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>AxisLabel オブジェクトの配列です。
      
      </apiDesc><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      軸ラベルを予測するための範囲を決定します。 軸は直ちに <codeph>getLabels()</codeph> メソッドを呼び出して実際の値を取得します。 軸は予測した値を使用して、グラフの余白を調整し、予測したラベルと正確なラベル（<codeph>getLabels()</codeph> メソッドから返されたラベル）の間の差があっても、ラベルが適切に拡大・縮小されるようにします。
     
      <p>軸が予測したラベルを返すときは、最小ラベルおよび最大ラベルのみを返す必要があります。 ラベルのセットがかなり静的で、画面にレンダリングされる軸のサイズに依存しない場合は、軸がラベルセット全体をこの関数から返し、予測したラベルに正確であることを示すマークを付けることができます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:getLabels"><apiName>getLabels</apiName><shortdesc>
      レンダリングされるラベルテキストを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>AxisLabel オブジェクトの配列です。
      
      </apiDesc><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier></apiReturn><apiParam><apiItemName>minimumAxisLength</apiItemName><apiType value="Number"/><apiDesc>軸の最小の長さ（ピクセル単位）です。 軸はこの値より長くすることができますが、短くすることはできません。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      レンダリングされるラベルテキストを取得します。 このメソッドが呼び出されたときは、既に軸によってラベルの最小の長さが決定されています。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:invertTransform"><apiName>invertTransform</apiName><shortdesc>
      軸に対する位置を数値データの値にマップして戻します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>変換された値を保持するオブジェクトです。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>軸の境界です。 このパラメーターは 0 と 1 の間である必要があります。ここで 0 は軸の最小の境界を、1 は最大の境界を表します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      軸に対する位置を数値データの値にマップして戻します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:mapCache"><apiName>mapCache</apiName><shortdesc>
      任意のタイプの値のセットを、画面の座標に換算できる数値のセットに変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>変換された値の読み取り元および保管先であるオブジェクトの配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>変換前の値を含む、キャッシュ配列の中のオブジェクトのフィールドです。
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>変換された値の保管先となる、キャッシュ配列の中のオブジェクトのフィールドです。
     
      </apiDesc></apiParam><apiParam><apiItemName>indexValues</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>このパラメーターは、マップされる値がインデックス値である場合は <codeph>true</codeph>、自然データ値である場合は <codeph>false</codeph> です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      任意のタイプの値のセットを、画面の座標に換算できる数値のセットに変換します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:preferDropLabels"><apiName>preferDropLabels</apiName><shortdesc> 
      軸による重なるラベルの処理方法を決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>データが失われることなく、ラベルをドロップできる場合は <codeph>true</codeph>、そうでない場合は <codeph>false</codeph> です。 
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> 
      軸による重なるラベルの処理方法を決定します。 通常、数値範囲では <codeph>true</codeph> が返されますが、個別の値に基づく範囲では true は返されません。 このプロパティは、軸上に直接設定することによりオーバーライドすることができます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:reduceLabels"><apiName>reduceLabels</apiName><shortdesc>
      AxisRenderer がラベルを重ならないようにレンダリングできず、Axis オブジェクトによりラベルのセットが減らされるようにする場合に起動されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>ラベルの数を減らして重複を解決する新しいラベルのセットです。
      
      </apiDesc><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier></apiReturn><apiParam><apiItemName>intervalStart</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>ラベルが重なる間隔の始まりです。
     
      </apiDesc></apiParam><apiParam><apiItemName>intervalEnd</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>ラベルが重なる間隔の終わりです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      AxisRenderer がラベルを重ならないようにレンダリングできず、Axis オブジェクトによりラベルのセットが減らされるようにする場合に起動されます。 重なった 2 つのラベルがメソッドに渡されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:registerDataTransform"><apiName>registerDataTransform</apiName><shortdesc>
      軸を使用する各 DataTransform が、その軸に自動的に登録されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transform</apiItemName><apiOperationClassifier>mx.charts.chartClasses:DataTransform</apiOperationClassifier><apiDesc>登録する DataTransform です。
     
      </apiDesc></apiParam><apiParam><apiItemName>dimensionName</apiItemName><apiType value="String"/><apiDesc>次元の名前です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      軸を使用する各 DataTransform が、その軸に自動的に登録されます。 該当する変換の値が変更されたときは、軸によってこのことが変換に通知されます。 また、最小値および最大値を自動生成する場合も、軸により変換からの値が要求されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:transformCache"><apiName>transformCache</apiName><shortdesc>
      値のセットをデータ領域からスクリーン領域にマップします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>マップされた値の読み取り元および保管先であるオブジェクトの配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>マップ前の値を含む、キャッシュ配列の中のオブジェクトのフィールドです。
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>マップされた値の保管先となる、キャッシュ配列の中のオブジェクトのフィールドです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      値のセットをデータ領域からスクリーン領域にマップします。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:unregisterDataTransform"><apiName>unregisterDataTransform</apiName><shortdesc>
      軸を使用する各 DataTransform が、その軸に自動的に登録されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transform</apiItemName><apiOperationClassifier>mx.charts.chartClasses:DataTransform</apiOperationClassifier><apiDesc>登録を解除する DataTransform です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      軸を使用する各 DataTransform が、その軸に自動的に登録されます。 該当する変換の値が変更されたときは、軸によってこのことが変換に通知されます。 また、最小値および最大値を自動生成する場合も、軸により変換からの値が要求されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:update"><apiName>update</apiName><shortdesc>
      グラフを更新します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      グラフを更新します。 フレームごとに複数回呼び出すことができます。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:baseline:get"><apiName>baseline</apiName><shortdesc>
      軸のベースライン位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      軸のベースライン位置です。 ColumnSeries や AreaSeries などの一部の系列では、最小値が指定されない場合に、この値を使用して塗りつぶされた領域の下端が定義されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:displayName:get"><apiName>displayName</apiName><shortdesc> 
      軸の名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc> 
      軸の名前です。 指定すると、Flex はこの名前を使用して DataTip コントロールをフォーマットします。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:title:get"><apiName>title</apiName><shortdesc>
      軸に沿って表示されるタイトルのテキストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      軸に沿って表示されるタイトルのテキストです。  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:unitSize:get"><apiName>unitSize</apiName><shortdesc>
      この軸に表示されるデータの 1 単位のサイズです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      この軸に表示されるデータの 1 単位のサイズです。 この値はさまざまな系列タイプによって使用され、レンダリングに役立ちます。 例えば、ColumnSeries クラスは、この値を使用して列の幅を決定します。 異なる軸タイプごとに、異なる値が返されます。表示されるデータによって返される値が異なる場合があります。 例えば、DateTimeAxis クラスは、グラフにレンダリングされるデータにより、1 日または 1 年間のミリ秒の数を返すことがあります。 この値は表示されるデータの収集に依存しているため、カスタム系列はその <codeph>updateData()</codeph> メソッドまたは <codeph>updateMapping()</codeph> メソッドで、この値が正確であることを想定できません。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:chartDataProvider:set"><apiName>chartDataProvider</apiName><shortdesc>
      周りを囲むグラフに割り当てられたデータプロバイダーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Object"/></apiValueDef><apiDesc>
      周りを囲むグラフに割り当てられたデータプロバイダーです。 データプロバイダーをベースとする軸タイプは、周りを囲むグラフに関連付けられたデータプロバイダーを継承することを選択できます。 軸が複数のグラフの間で共有されている場合、このプロパティの値は <codeph>undefined</codeph> です（多くの場合、これが関連付けられたグラフの 1 つに割り当てられる最後のデータプロバイダーとなります）。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:PolarChart"><apiName>PolarChart</apiName><shortdesc>
  PolarChart コントロールは、極座標グラフの基本クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:ChartBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  PolarChart コントロールは、極座標グラフの基本クラスです。
  
  <p>グラフの最小サイズは 20 × 20 ピクセルです。 </p>
  <p>グラフの最大サイズに制限はありません。 </p>
  <p>グラフの推奨サイズは 400 × 400 ピクセルです。 </p>
  
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#CategoryAxis"><linktext>mx.charts.CategoryAxis</linktext></link><link href="mx.charts.xml#LinearAxis"><linktext>mx.charts.LinearAxis</linktext></link><link href="mx.charts.chartClasses.xml#ChartBase"><linktext>mx.charts.chartClasses.ChartBase</linktext></link></related-links><apiConstructor id="mx.charts.chartClasses:PolarChart:PolarChart"><apiName>PolarChart</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:PolarChart:getFirstItem"><apiName>getFirstItem</apiName><shortdesc>
      
      グラフ内の最初のアイテム（軸に対して）を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>対応する ChartItem オブジェクトです。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>最初のアイテムを返す必要がある方向。可能な値は、<codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> および <codeph>ChartBase.NAVIGATE_VERTICAL</codeph> です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      グラフ内の最初のアイテム（軸に対して）を取得します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarChart:getLastItem"><apiName>getLastItem</apiName><shortdesc>
      
      グラフ内の最後のグラフアイテム（軸に対して）を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>対応する ChartItem オブジェクトです。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>最終アイテムを返す必要がある方向。可能な値は、<codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> および <codeph>ChartBase.NAVIGATE_VERTICAL</codeph> です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      グラフ内の最後のグラフアイテム（軸に対して）を取得します。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarChart:getNextItem"><apiName>getNextItem</apiName><shortdesc>
      
      グラフ内で、現在フォーカスがあるアイテムの隣（軸に対して）のグラフアイテムを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>対応する ChartItem オブジェクトです。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>次のアイテムを返す必要がある方向。可能な値は、<codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> および <codeph>ChartBase.NAVIGATE_VERTICAL</codeph> です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      グラフ内で、現在フォーカスがあるアイテムの隣（軸に対して）のグラフアイテムを取得します。 現在グラフアイテムが選択されていない場合、このメソッドは最初の系列の最初のアイテムを返します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarChart:getPreviousItem"><apiName>getPreviousItem</apiName><shortdesc>
      
      グラフ内で、現在フォーカスがあるアイテムの前（軸に対して）のグラフアイテムを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>対応する ChartItem オブジェクトです。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>前のアイテムを返す必要がある方向。可能な値は、<codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> および <codeph>ChartBase.NAVIGATE_VERTICAL</codeph> です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      グラフ内で、現在フォーカスがあるアイテムの前（軸に対して）のグラフアイテムを取得します。 現在グラフアイテムが選択されていない場合、このメソッドは最初の系列の最初のアイテムを返します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarChart:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="mx.charts.chartClasses:PolarChart:angularAxis:get"><apiName>angularAxis</apiName><shortdesc>
      データ値を 0 と 2 PI 間の角度にマッピングするために使用される軸オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      データ値を 0 と 2 PI 間の角度にマッピングするために使用される軸オブジェクトです。 デフォルトでは、<codeph>autoAdjust</codeph> プロパティが <codeph>false</codeph> の線状軸になります。 したがって、データ値はグラフに均等にマッピングされます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarChart:protected:dataRegion:get"><apiName>dataRegion</apiName><shortdesc>
      
      データを表示するのに使用されるグラフの領域です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      
      データを表示するのに使用されるグラフの領域です。 この矩形には、ふち取り、軸線とラベル、および追加スペースに使用される領域は含まれません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarChart:radialAxis:get"><apiName>radialAxis</apiName><shortdesc>
      データ値をグラフの中心と外側エッジ間の放射状の距離にマッピングするために使用される軸オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      データ値をグラフの中心と外側エッジ間の放射状の距離にマッピングするために使用される軸オブジェクトです。 デフォルトでは、<codeph>autoAdjust</codeph> プロパティが <codeph>false</codeph> の線状軸になります。 したがって、データ値はグラフの内側から外側に均等にマッピングされます。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:CartesianChart"><apiName>CartesianChart</apiName><shortdesc>
  CartesianChart クラスは、一般的なグラフタイプの基本クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style arrayType="String" inherit="no" name="verticalAxisStyleNames" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Array">
<description>
  垂直軸のスタイルプロパティを定義するクラスセレクターの配列です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="String" inherit="no" name="horizontalAxisStyleNames" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Array">
<description>
  水平軸のスタイルプロパティを定義するクラスセレクターの配列です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="gutterTop" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  グラフのデータ領域の上端とグラフコントロールの上端との間の領域をピクセル単位で表します。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="gutterRight" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  グラフのデータ領域の右端とグラフコントロールの外側との間の領域をピクセル単位で表します。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="gutterLeft" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  グラフのデータ領域の左端とグラフコントロールの左端との間の領域をピクセル単位で表します。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="gutterBottom" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  グラフのデータ領域の下端とグラフコントロールの下端との間の領域をピクセル単位で表します。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="gridLinesStyleName" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  デフォルトのグリッド線のスタイルプロパティを定義するクラスセレクターです。 グラフで <codeph>backgroundElements</codeph> プロパティを明示的に設定すると、この値は無視されます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="axisTitleStyleName" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  軸のタイトルの書式を設定するときに使用する CSS クラスセレクターの名前です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセット（ピクセル単位）です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 可能な値は、<codeph>"none"</codeph> および <codeph>"underline"</codeph> です。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  コンテナ内のテキストの整列。 可能な値は <codeph>"left"</codeph>、<codeph>"right"</codeph>、または <codeph>"center"</codeph> です。
 
  <p>ほとんどのコントロールのデフォルト値は <codeph>left</codeph> です。 Button、LinkButton、および AccordionHeader コンポーネントの場合、デフォルト値は <codeph>"center"</codeph> です。 これらのコンポーネントでは、このプロパティは <codeph>labelPlacement</codeph> プロパティが <codeph>"left"</codeph> または <codeph>"right"</codeph> に設定されている場合にのみ認識されます。 <codeph>labelPlacement</codeph> が <codeph>"top"</codeph> または <codeph>"bottom"</codeph> に設定されている場合は、テキストおよびアイコンが中央に配置されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  各文字間に表示される追加のピクセル数。 正の値を指定すると文字間隔が通常より広くなり、負の値を指定すると文字間隔が通常より狭くなります。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Boolean">
<description>
  カーニングが有効（<codeph>true</codeph>) か無効（<codeph>false</codeph>）かを示すブール値です。カーニングでは、読みやすくするために、特定の文字ペア間の間隔を調整します。ただし、カーニングは見出しを大きなフォントにする場合など、必要な場合に限って使用してください。 カーニングは、埋め込み FlashType フォントに対してのみサポートされています。 Verdana や、Courier New などの等幅フォントなど、特定のフォントではカーニングはサポートされていません。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"bold"</codeph> です。 LegendItem のデフォルトは <codeph>"bold"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>thickness</codeph> プロパティを設定します。 このプロパティは字形のエッジの太さを指定します。 可能な値は -200 から 200 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルは、システムフォントには影響を与えません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"italic"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 ColorPicker コントロール以外のすべてのコントロールのデフォルト値は 10 です。 ColorPicker コントロールのデフォルト値は 11 です。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>sharpness</codeph> プロパティを設定します。 このプロパティは字形のエッジのシャープネスを指定します。 可能な値は -400 から 400 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>gridFitType</codeph> プロパティを設定します。 可能な値は、<codeph>"none"</codeph>（<codeph>flash.text.GridFitType.NONE</codeph>）、<codeph>"pixel"</codeph>（<codeph>flash.text.GridFitType.PIXEL</codeph>）、および <codeph>"subpixel"</codeph>（<codeph>flash.text.GridFitType.SUBPIXEL</codeph>）です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  使用するフォントの名前です。 完全な CSS 実装と異なり、カンマ区切りリストはサポートされません。 任意のフォントファミリ名を使用できます。 汎用フォント名を指定した場合、適切なデバイスフォントに置換されます。
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  内部 TextField の <codeph>antiAliasType</codeph> プロパティを設定します。 可能な値は、<codeph>"normal"</codeph>（<codeph>flash.text.AntiAliasType.NORMAL</codeph>）および <codeph>"advanced"</codeph>（<codeph>flash.text.AntiAliasType.ADVANCED</codeph>）です。 
  
  <p>デフォルト値は <codeph>"advanced"</codeph> です。この場合、埋め込み FlashType フォントを使用していれば FlashType レンダラーが有効になります。 FlashType レンダラーを無効にするには、<codeph>"normal"</codeph> に設定してください。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
  
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="uint">
<description>
  コンポーネントが無効な場合のテキストの色です。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="uint">
<description>
  コンポーネントのラベルを含めたコンポーネント内のテキストの色です。
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:CartesianChart&gt;</code> tag inherits all the
  properties of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:CartesianChart
    <strong>Properties</strong>
    computedGutters="<i>No default</i>"
    dataRegion="<i>Rectangle; no default</i>"
    horizontalAxis="<i>Axis; no default</i>"
    horizontalAxisRatio=".33"
    horizontalAxisRenderers="<i>Array; no default</i>"
    selectedChartItems="<i>Array; no default</i>"
    verticalAxis="<i>Axis; no default</i>"
    verticalAxisRatio=".33"
    verticalAxisRenderers="<i>Array; no default</i>"
   
    <strong>Styles</strong>  
    axisTitleStyleName="<i>Style; no default</i>"
    gridLinesStyleName="<i>Style; no default</i>"
    gutterBottom="<i>No default</i>"
    gutterLeft="<i>No default</i>"
    gutterRight="<i>No default</i>"
    gutterTop="<i>No default</i>"
    horizontalAxisStyleNames=<i>Array; no default</i>"
    verticalAxisStyleNames = <i>Array; no default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:ChartBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  CartesianChart クラスは、一般的なグラフタイプの基本クラスです。 CartesianChart は、標準的な長方形の 2 次元グラフの基本的なレイアウト動作を定義します。
   </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#CategoryAxis"><linktext>mx.charts.CategoryAxis</linktext></link><link href="mx.charts.xml#LinearAxis"><linktext>mx.charts.LinearAxis</linktext></link><link href="mx.charts.chartClasses.xml#ChartBase"><linktext>mx.charts.chartClasses.ChartBase</linktext></link></related-links><apiConstructor id="mx.charts.chartClasses:CartesianChart:CartesianChart"><apiName>CartesianChart</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:CartesianChart:getFirstItem"><apiName>getFirstItem</apiName><shortdesc>
      
      グラフ内の最初のアイテム（軸に対して）を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>対応する ChartItem オブジェクトです。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>最初のアイテムを返す必要がある方向。可能な値は、<codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> および <codeph>ChartBase.NAVIGATE_VERTICAL</codeph> です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      グラフ内の最初のアイテム（軸に対して）を取得します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianChart:getLastItem"><apiName>getLastItem</apiName><shortdesc>
      
      グラフ内の最後のグラフアイテム（軸に対して）を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>対応する ChartItem オブジェクトです。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>最終アイテムを返す必要がある方向。可能な値は、<codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> および <codeph>ChartBase.NAVIGATE_VERTICAL</codeph> です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      グラフ内の最後のグラフアイテム（軸に対して）を取得します。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianChart:getNextItem"><apiName>getNextItem</apiName><shortdesc>
      
      グラフ内で、現在フォーカスがあるアイテムの隣（軸に対して）のグラフアイテムを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>対応する ChartItem オブジェクトです。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>次のアイテムを返す必要がある方向。可能な値は、<codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> および <codeph>ChartBase.NAVIGATE_VERTICAL</codeph> です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      グラフ内で、現在フォーカスがあるアイテムの隣（軸に対して）のグラフアイテムを取得します。 現在グラフアイテムが選択されていない場合、このメソッドは最初の系列の最初のアイテムを返します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianChart:getPreviousItem"><apiName>getPreviousItem</apiName><shortdesc>
      
      グラフ内で、現在フォーカスがあるアイテムの前（軸に対して）のグラフアイテムを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>対応する ChartItem オブジェクトです。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>前のアイテムを返す必要がある方向。可能な値は、<codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> および <codeph>ChartBase.NAVIGATE_VERTICAL</codeph> です。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      グラフ内で、現在フォーカスがあるアイテムの前（軸に対して）のグラフアイテムを取得します。 現在グラフアイテムが選択されていない場合、このメソッドは最初の系列の最初のアイテムを返します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianChart:styleChanged"><apiName>styleChanged</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianChart:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="mx.charts.chartClasses:CartesianChart:horizontalAxisRatio"><apiName>horizontalAxisRatio</apiName><shortdesc>
      水平軸の高さの制限を決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0.33</apiData><apiType value="Number"/><apiDefaultValue>0.33.
      
      </apiDefaultValue></apiValueDef><apiDesc>
      水平軸の高さの制限を決定します。 制限は、軸の幅とこの割合を掛けた値です。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:verticalAxisRatio"><apiName>verticalAxisRatio</apiName><shortdesc>
      垂直軸の幅の制限を決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0.33</apiData><apiType value="Number"/><apiDefaultValue>0.33.
      
      </apiDefaultValue></apiValueDef><apiDesc>
      垂直軸の幅の制限を決定します。 制限は、軸の幅とこの割合を掛けた値です。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:computedGutters:get"><apiName>computedGutters</apiName><shortdesc>
      現在の計算された CartesianChart のふち取りのサイズです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      現在の計算された CartesianChart のふち取りのサイズです。 ふち取りはグラフの追加スペースとデータ領域の間の領域として表され、ここにタイトルと軸がレンダリングされます。 デフォルトでは、ふち取りが動的に計算されます。 ふち取りのスタイルによって、明示的に値を設定できます。 ふち取りは LayoutManager により検証されるときに、グラフに対するあらゆる変更に適合するように計算されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:protected:dataRegion:get"><apiName>dataRegion</apiName><shortdesc>
      
      データを表示するのに使用されるグラフの領域です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      
      データを表示するのに使用されるグラフの領域です。 この矩形には、ふち取り、軸線とラベル、および追加スペースに使用される領域は含まれません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:horizontalAxisRenderers:get"><apiName>horizontalAxisRenderers</apiName><shortdesc>
      グラフの x 軸に沿ったデータの表示方法を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      グラフの x 軸に沿ったデータの表示方法を指定します。 AxisRenderer クラスを使用すると、horizontalAxisRenderer のプロパティを MXML の子タグとして定義したり、ActionScript で AxisRenderer オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      x 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      x 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。 LinearAxis クラスまたは CategoryAxis クラスのいずれかを使用すると、horizontalAxis のプロパティを MXML の子タグとして設定したり、ActionScript で LinearAxis オブジェクトまたは CategoryAxis オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:selectedChartItems:get"><apiName>selectedChartItems</apiName><shortdesc>
      グラフから選択された ChartItem オブジェクトの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      グラフから選択された ChartItem オブジェクトの配列です。この中には、グラフのすべての系列から選択された ChartItem オブジェクトが含まれます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:verticalAxisRenderers:get"><apiName>verticalAxisRenderers</apiName><shortdesc>
      グラフの y 軸に沿ったデータの表示方法を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      グラフの y 軸に沿ったデータの表示方法を指定します。 AxisRenderer クラスを使用すると、verticalAxisRenderer のプロパティを MXML の子タグとして定義したり、ActionScript で AxisRenderer オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      y 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      y 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。 LinearAxis クラスまたは CategoryAxis クラスのいずれかを使用すると、水平軸のプロパティを MXML の子タグとして設定したり、ActionScript で LinearAxis オブジェクトまたは CategoryAxis オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:Series"><apiName>Series</apiName><shortdesc>
  Series クラスは、グラフコントロールのデータ系列を指定するクラスの基本クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><effects><effect event="showData" name="showDataEffect" owner="mx.charts.chartClasses:Series">
<description>
  現在のデータを画面上の最終位置に移動させるときに使用するエフェクトを定義します。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="hideData" name="hideDataEffect" owner="mx.charts.chartClasses:Series">
<description>
  現在のデータをビューから隠すときに使用するエフェクトを定義します。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect></effects></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:ChartElement</apiBaseClassifier></apiClassifierDef><apiDesc>
  Series クラスは、グラフコントロールのデータ系列を指定するクラスの基本クラスです。 Series クラスのサブクラスは、関連付けられたグラフコントロールと共に使用します。 Series クラスを使用すると、データ系列に関連するグラフエレメントの塗りのパターンや線の属性を指定できます。 
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:Series:Series"><apiName>Series</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:Series:beginInterpolation"><apiName>beginInterpolation</apiName><shortdesc>
      補間エフェクトを開始するために SeriesInterpolate エフェクトによって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>系列が補間を実行するために必要なデータです。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>sourceRenderData</apiItemName><apiType value="Object"/><apiDesc>補間を行う範囲の系列のソースデータです。
     
      </apiDesc></apiParam><apiParam><apiItemName>destRenderData</apiItemName><apiType value="Object"/><apiDesc>補間を行う範囲の系列の宛先データです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      補間エフェクトを開始するために SeriesInterpolate エフェクトによって呼び出されます。 このエフェクトは、補間する範囲の系列のソースと宛先のデータを渡します。エフェクトは、このメソッドの戻り値を系列の <codeph>interpolate()</codeph> メソッドに繰り返し渡すことによって、このエフェクトの間のアニメーションを更新します。 系列は補間を実行するために必要なデータを算出し、それをこのメソッドに戻します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:cacheDefaultValues"><apiName>cacheDefaultValues</apiName><shortdesc>
      元の dataProvider アイテムから measureName プロパティに格納された値をグラフアイテムの fieldName プロパティにキャッシュします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc><codeph>measureName</codeph> プロパティの値が空のストリングの場合は <codeph>false</codeph>、それ以外の場合は <codeph>true</codeph> になります。     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>measureName</apiItemName><apiType value="String"/><apiDesc><codeph>fieldName</codeph> プロパティに基づく dataProvider の値によってプロパティの名前を設定する必要があるグラフアイテムです。例えば、xValue、yValue、xNumber、yNumber などがグラフアイテムのプロパティであれば、<codeph>measureName</codeph> もそれらの値になることができます。
      
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>グラフアイテムの配列です。
      
      </apiDesc></apiParam><apiParam><apiItemName>fieldName</apiItemName><apiType value="String"/><apiDesc>グラフアイテムの <codeph>measureName</codeph> プロパティを設定するために使用する必要があるデータプロバイダーのアイテム内のラベルです。例えば、データプロバイダーに、<codeph>{Country:"US", medals:10}</codeph> のようなアイテムがある場合、<codeph>fieldName</codeph> の値は、"Country" または "medals" にすることができます。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      元の dataProvider アイテムから <codeph>measureName</codeph> プロパティに格納された値をグラフアイテムの <codeph>fieldName</codeph> プロパティにキャッシュします。 <codeph>measureName</codeph> プロパティの値が <codeph>null</codeph> または空のストリングの場合は、元のデータプロバイダーアイテムは生の値と見なされ、これらの値が代わりにキャッシュされます。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:cacheIndexValues"><apiName>cacheIndexValues</apiName><shortdesc>
      元の dataProvider アイテムから measureName プロパティに格納された値をグラフアイテムの fieldName プロパティにキャッシュします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc><codeph>measureName</codeph> プロパティの値が空のストリングの場合は <codeph>false</codeph>、それ以外の場合は <codeph>true</codeph> になります。     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>measureName</apiItemName><apiType value="String"/><apiDesc><codeph>fieldName</codeph> プロパティに基づく dataProvider の値によってプロパティの名前を設定する必要があるグラフアイテムです。例えば、xValue、yValue、xNumber、yNumber などがグラフアイテムのプロパティであれば、<codeph>measureName</codeph> もそれらの値になることができます。
      
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>グラフアイテムの配列です。
      
      </apiDesc></apiParam><apiParam><apiItemName>fieldName</apiItemName><apiType value="String"/><apiDesc>グラフアイテムの <codeph>measureName</codeph> プロパティを設定するために使用する必要があるデータプロバイダーのアイテム内のラベルです。例えば、データプロバイダーに、<codeph>{Country:"US", medals:10}</codeph> のようなアイテムがある場合、<codeph>fieldName</codeph> の値は、"Country" または "medals" にすることができます。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      元の dataProvider アイテムから <codeph>measureName</codeph> プロパティに格納された値をグラフアイテムの <codeph>fieldName</codeph> プロパティにキャッシュします。 <codeph>measureName</codeph> プロパティが <codeph>null</codeph> または空のストリングの場合は、代わりに <codeph>fieldName</codeph> プロパティのアイテムのインデックスが格納されます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:cacheNamedValues"><apiName>cacheNamedValues</apiName><shortdesc>
      元の dataProvider アイテムから measureName プロパティに格納された値をグラフアイテムの fieldName プロパティにキャッシュします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc><codeph>measureName</codeph> プロパティの値が空のストリングの場合は <codeph>false</codeph>、それ以外の場合は <codeph>true</codeph> になります。     
     
     </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>measureName</apiItemName><apiType value="String"/><apiDesc><codeph>fieldName</codeph> プロパティに基づく dataProvider の値によってプロパティの名前を設定する必要があるグラフアイテムです。例えば、xValue、yValue、xNumber、yNumber などがグラフアイテムのプロパティであれば、<codeph>measureName</codeph> もそれらの値になることができます。
      
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>グラフアイテムの配列です。
      
      </apiDesc></apiParam><apiParam><apiItemName>fieldName</apiItemName><apiType value="String"/><apiDesc>グラフアイテムの <codeph>measureName</codeph> プロパティを設定するために使用する必要があるデータプロバイダーのアイテム内のラベルです。例えば、データプロバイダーに、<codeph>{Country:"US", medals:10}</codeph> のようなアイテムがある場合、<codeph>fieldName</codeph> の値は、"Country" または "medals" にすることができます。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      元の dataProvider アイテムから <codeph>measureName</codeph> プロパティに格納された値をグラフアイテムの <codeph>fieldName</codeph> プロパティにキャッシュします。  
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:claimStyles"><apiName>claimStyles</apiName><shortdesc conref="mx.charts.chartClasses.IChartElement#claimStyles()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="uint"/><apiDesc>スタイル (<codeph>firstAvailable</codeph> + <i>N</i> など) の要求後の、<codeph>firstAvailable</codeph> の新しい値です。
      
      </apiDesc></apiReturn><apiParam><apiItemName>styles</apiItemName><apiType value="Array"/><apiDesc>要求するスタイルの配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>firstAvailable</apiItemName><apiType value="uint"/><apiDesc>要求する配列にある最初のスタイルセレクターです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IChartElement#claimStyles()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:defaultFilterFunction"><apiName>defaultFilterFunction</apiName><shortdesc>
      系列の filterFunction としてカスタム関数を設定しない場合に使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc> オブジェクトの配列。
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc> オブジェクトの配列。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      系列の filterFunction としてカスタム関数を設定しない場合に使用されます。この設定は個々の系列で上書きする必要があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:dragStartHandler"><apiName>dragStartHandler</apiName><shortdesc>
      dragStart イベントのデフォルトハンドラーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>DragEvent オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>dragStart</codeph> イベントのデフォルトハンドラーです。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:endInterpolation"><apiName>endInterpolation</apiName><shortdesc>
      補間エフェクトを終了するために SeriesInterpolate エフェクトによって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>interpolationData</apiItemName><apiType value="Object"/><apiDesc>系列の "事後" 状態を表す (<codeph>show</codeph> エフェクトの) ソースデータと、系列の "事前" 状態を表す (<codeph>hide</codeph> エフェクト) の宛先データを定義するオブジェクト。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      補間エフェクトを終了するために SeriesInterpolate エフェクトによって呼び出されます。 エフェクトはこのメソッドを使用して補間を完了し、このエフェクトに関連付けられた一時的状態があればそれをクリーンアップします。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:extractMinInterval"><apiName>extractMinInterval</apiName><shortdesc>
      ChartItem オブジェクトの配列から最小値および最大値を抽出するだけでなく、オプションで最小間隔を抽出することもできます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>グラフアイテムの配列です。
      
      </apiDesc></apiParam><apiParam><apiItemName>measureName</apiItemName><apiType value="String"/><apiDesc><codeph>fieldName</codeph> プロパティに基づく dataProvider の値によってプロパティの名前を設定する必要があるグラフアイテムです。例えば、xValue、yValue、xNumber、yNumber などがグラフアイテムのプロパティであれば、<codeph>measureName</codeph> もそれらの値になることができます。
      
      </apiDesc></apiParam><apiParam><apiItemName>desc</apiItemName><apiOperationClassifier>mx.charts.chartClasses:DataDescription</apiOperationClassifier><apiDesc>系列の DataDescription オブジェクトです。このプロパティは、系列の <codeph>min</codeph>、<codeph>max</codeph>、<codeph>minInterval</codeph> などの境界値を保持します。    
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ChartItem オブジェクトの配列から最小値および最大値を抽出するだけでなく、オプションで最小間隔を抽出することもできます。 派生クラスによって、その <codeph>describeData()</codeph> メソッドの実装からこのメソッドを呼び出して、DataDescription 構造の詳細を入力することができます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:extractMinMax"><apiName>extractMinMax</apiName><shortdesc>
      ChartItem オブジェクトの配列から最小値および最大値を抽出するだけでなく、オプションで最小間隔を抽出することもできます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>グラフアイテムの配列です。
      
      </apiDesc></apiParam><apiParam><apiItemName>measureName</apiItemName><apiType value="String"/><apiDesc><codeph>fieldName</codeph> プロパティに基づく dataProvider の値によってプロパティの名前を設定する必要があるグラフアイテムです。例えば、xValue、yValue、xNumber、yNumber などがグラフアイテムのプロパティであれば、<codeph>measureName</codeph> もそれらの値になることができます。
      
      </apiDesc></apiParam><apiParam><apiItemName>desc</apiItemName><apiOperationClassifier>mx.charts.chartClasses:DataDescription</apiOperationClassifier><apiDesc>系列の DataDescription オブジェクトです。このプロパティは、系列の <codeph>min</codeph>、<codeph>max</codeph>、<codeph>minInterval</codeph> などの境界値を保持します。
      
      </apiDesc></apiParam><apiParam><apiItemName>calculateInterval</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>cache</codeph> プロパティ内の ChartItem オブジェクトを使用して、DataDescription の <codeph>desc</codeph> 用の <codeph>minInterval</codeph> を抽出するかどうかを決定します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ChartItem オブジェクトの配列から最小値および最大値を抽出するだけでなく、オプションで最小間隔を抽出することもできます。 派生クラスによって、その <codeph>describeData()</codeph> メソッドの実装からこのメソッドを呼び出して、DataDescription 構造の詳細を入力することができます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:getAxis"><apiName>getAxis</apiName><shortdesc>
      通常は、名前付きプロパティ (直交ベースの系列の horizontalAxis、verticalAxis または radiusAxis など) により軸インスタンスを直接取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>グラフの特定のサイズの軸インスタンス。
      
      </apiDesc><apiOperationClassifier>mx.charts.chartClasses:IAxis</apiOperationClassifier></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>軸を取得するサイズです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      通常は、名前付きプロパティ (直交ベースの系列の <codeph>horizontalAxis</codeph>、<codeph>verticalAxis</codeph> または <codeph>radiusAxis</codeph> など) により軸インスタンスを直接取得します。
      
      <p>これは低レベルのアクセッサーです。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:getElementBounds"><apiName>getElementBounds</apiName><shortdesc>
      この系列で生成された renderData 構造の elementBounds、bounds および visibleBounds の各プロパティに値を入力します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderData</apiItemName><apiType value="Object"/><apiDesc>この系列によって生成される構造です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      この系列で生成された renderData 構造の <codeph>elementBounds</codeph>、<codeph>bounds</codeph> および <codeph>visibleBounds</codeph> の各プロパティに値を入力します。 エフェクトクラスは、様々なエフェクトタイプの実装に使用される各フィールドに値を入力するためにこのメソッドを呼び出します。 要求されたときにのみ系列のアイテムの境界を生成するには、派生クラスにこのメソッドを実装する必要があります。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:getItemsInRegion"><apiName>getItemsInRegion</apiName><shortdesc>
      系列の矩形領域内にあるすべてのアイテムを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定された矩形領域内にある ChartItem オブジェクトの配列です。
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>r</apiItemName><apiType value="flash.geom:Rectangle"/><apiDesc>領域を定義する Rectangle オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      系列の矩形領域内にあるすべてのアイテムを取得します。 この関数は、どのアイテムが系列内で特定の矩形領域にあるかを判断するために呼び出します。
      <p>個々の系列によって、それぞれのグラフアイテムが領域の下にあるかどうかが決まります。 ポイントは、グローバルな座標空間内にある必要があります。</p>
      
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.geom.Rectangle.xml"><linktext>flash.geom.Rectangle</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:getMissingInterpolationValues"><apiName>getMissingInterpolationValues</apiName><shortdesc>
      補間構造内の欠損値を埋めます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sourceProps</apiItemName><apiType value="Object"/><apiDesc>特定のアイテムについて補間されるソース値の入ったオブジェクトです。 このメソッドが終了するとき、このオブジェクトのすべてのプロパティ値は <codeph>NaN</codeph> 値ではなくなります。
     
      </apiDesc></apiParam><apiParam><apiItemName>srcCache</apiItemName><apiType value="Array"/><apiDesc>補間されるグラフアイテムのソースの配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>destProps</apiItemName><apiType value="Object"/><apiDesc>特定のアイテムについて補間される宛先値の入ったオブジェクトです。 このメソッドが終了するとき、このオブジェクトのすべてのプロパティ値は <codeph>NaN</codeph> 値ではなくなります。
     
      </apiDesc></apiParam><apiParam><apiItemName>destCache</apiItemName><apiType value="Array"/><apiDesc>補間されるグラフアイテムの宛先の配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>キャッシュに入れられるアイテムのインデックスです。  
     
      </apiDesc></apiParam><apiParam><apiItemName>customData</apiItemName><apiType value="Object"/><apiDesc>系列が <codeph>initializeInterpolationData()</codeph> メソッドに渡したデータです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      補間構造内の欠損値を埋めます。 系列が <codeph>initializeInterpolationData()</codeph> メソッドを呼び出す場合、補間のためのソースと宛先の値の配列を渡します。 これらの 2 つの配列のいずれかが不完全である場合、系列は補間のための "適切な" プレースホルダーを提供する必要があります。 これらのプレースホルダーーが決定される方法は、系列のタイプに固有です。 系列エクステンダーは、このメソッドをオーバーライドして、これらのプレースホルダー値を提供する必要があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:getRenderDataForTransition"><apiName>getRenderDataForTransition</apiName><shortdesc>
      系列のアニメーションの前後の状態をキャプチャします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>系列のデータを表すために必要なデータのコピーです。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>エフェクトが記述を要求しているのは非表示のデータなのか、表示中の新しいデータなのかを示します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      系列のアニメーションの前後の状態をキャプチャします。このメソッドは、通常は、エフェクトクラスによって呼び出されます。
     
      <p>カスタム系列タイプを実装している場合、通常はこのメソッドをオーバーライドしません。 代わりに、<codeph>renderData()</codeph> アクセッサーをオーバーライドしてください。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:initializeInterpolationData"><apiName>initializeInterpolationData</apiName><shortdesc>
      補間エフェクトを実装するためのヘルパーメソッドです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc><codeph>applyInterpolation()</codeph> メソッドに渡すことができるデータ構造体です。
     
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>srcCache</apiItemName><apiType value="Array"/><apiDesc>フィールドに補間の開始値が入力されているオブジェクトの配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>dstCache</apiItemName><apiType value="Array"/><apiDesc>フィールドに補間の終了値が入力されているオブジェクトの配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>iProps</apiItemName><apiType value="Object"/><apiDesc>補間するキャッシュのプロパティの名前を識別するキーを持つハッシュテーブルです。
     
      </apiDesc></apiParam><apiParam><apiItemName>cacheType</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>補間のために算出されたデルタ値を保持する、インスタンス化対象のクラスです。 通常、これは <codeph>null</codeph> ですが、その場合は汎用 Object が使用されます。
     
      </apiDesc></apiParam><apiParam><apiItemName>customData</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>系列固有のデータを持つオブジェクトです。 初期化プロセスで欠損値があると、系列の <codeph>getMissingInterpolationValues()</codeph> メソッドが呼び出されて欠損値が埋められます。 このカスタムデータはそのメソッドに渡されて、複数の任意のパラメーターを渡すために使用できます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      補間エフェクトを実装するためのヘルパーメソッドです。 カスタム系列はその <codeph>beginInterpolation()</codeph> メソッドからこのメソッドを呼び出して、エフェクトの有効期間全体にわたって数値プロパティの任意のセットを補間するためにデータ構造を初期化することができます。 そのデータ構造を <codeph>applyInterpolation()</codeph> ユーティリティメソッドに渡して、<codeph>interpolate()</codeph> メソッドが呼び出されたときに値を実際に変更することができます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:interpolate"><apiName>interpolate</apiName><shortdesc>
      補間を進めるために SeriesInterpolate エフェクトによって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>interpolationValues</apiItemName><apiType value="Array"/><apiDesc>数値の配列です。各数値は 0 ～ 1 の範囲になります。<i/>n 番目の数値は、データ系列中の <i/>n 番目の値の補間が、開始値から終了値に至る行程の何パーセントまで進むかを示します。
     
      </apiDesc></apiParam><apiParam><apiItemName>interpolationData</apiItemName><apiType value="Object"/><apiDesc><codeph>beginInterpolation()</codeph> メソッドから返されるデータです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      補間を進めるために SeriesInterpolate エフェクトによって呼び出されます。 エフェクトはこれをフレームにつき 1 回ずつ、補間が完了するまで呼び出します。 系列は、パラメーターを使用して、補間された値をレンダリングする役割を果たします。 デフォルトでは、系列は <codeph>interpolationData</codeph> を <codeph>initializeInterpolationData()</codeph> メソッドによって返されたデータ構造であると見なし、これを <codeph>applyInterpolation()</codeph> メソッドに渡します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      データプロバイダー内の基になるデータが変更されたことを系列に通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>このメソッドが更新メソッドへの呼び出しをトリガーする場合は <codeph>true</codeph> になります。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      データプロバイダー内の基になるデータが変更されたことを系列に通知します。 この関数によって、<codeph>updateData()</codeph>、<codeph>updateMapping()</codeph>、<codeph>updateFilter()</codeph>、および <codeph>updateTransform()</codeph> メソッドの呼び出しが、次回の <codeph>commitProperties()</codeph> メソッドの呼び出し時にトリガーされます。 グラフのエレメントに割り当てられているデータエフェクトがある場合は、このメソッドによって表示エフェクトと非表示エフェクトもトリガーされます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:invalidateFilter"><apiName>invalidateFilter</apiName><shortdesc>
      軸に対するデータのフィルターが変更されたため、再計算が必要であることを系列に通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>このメソッドが更新メソッドへの呼び出しをトリガーする場合は <codeph>true</codeph> になります。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      軸に対するデータのフィルターが変更されたため、再計算が必要であることを系列に通知します。 このメソッドを呼び出すと、<codeph>updateFilter()</codeph> メソッドと <codeph>updateTransform()</codeph> メソッドの呼び出しが、次回の <codeph>commitProperties()</codeph> メソッドの呼び出し時にトリガーされます。 グラフのエレメントに割り当てられているデータエフェクトがある場合は、このメソッドによって表示エフェクトと非表示エフェクトもトリガーされます。
           
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:invalidateMapping"><apiName>invalidateMapping</apiName><shortdesc>
      数値へのデータのマッピングが変更されたため、再計算が必要であることを系列に通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>このメソッドが更新メソッドへの呼び出しをトリガーする場合は <codeph>true</codeph> になります。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      数値へのデータのマッピングが変更されたため、再計算が必要であることを系列に通知します。 この関数を呼び出すと、<codeph>updateMapping()</codeph>、<codeph>updateFilter()</codeph>、および <codeph>updateTransform()</codeph> メソッドの呼び出しが、次回の <codeph>commitProperties()</codeph> メソッドの呼び出し時にトリガーされます。 グラフのエレメントに割り当てられているデータエフェクトがある場合は、このメソッドによって表示エフェクトと非表示エフェクトもトリガーされます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:invalidateTransform"><apiName>invalidateTransform</apiName><shortdesc>
      スクリーン座標へのデータの変換が変更され、再計算が必要であることを系列に通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>このメソッドが更新メソッドへの呼び出しをトリガーする場合は <codeph>true</codeph> になります。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      スクリーン座標へのデータの変換が変更され、再計算が必要であることを系列に通知します。 この関数を呼び出すと、<codeph>updateTransform()</codeph> メソッドの呼び出しが、次回の <codeph>commitProperties()</codeph> メソッドの呼び出し時にトリガーされます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:invalidateTransitions"><apiName>invalidateTransitions</apiName><shortdesc>
      データの表示が大幅に変更されたことを系列に通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      データの表示が大幅に変更されたことを系列に通知します。 これにより、ShowData エフェクトと HideData エフェクトがすべてトリガーされます。  
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:legendDataChanged"><apiName>legendDataChanged</apiName><shortdesc>
      新しい LegendDataChanged イベントの送出によって系列の表示名が変更されると、凡例アイテムを更新します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      新しい LegendDataChanged イベントの送出によって系列の表示名が変更されると、凡例アイテムを更新します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:Series:setAxis"><apiName>setAxis</apiName><shortdesc>
      軸インスタンスをグラフの特定のサイズに割り当てます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>軸を割り当てるグラフのサイズです。
      
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IAxis</apiOperationClassifier><apiDesc>グラフのサイズに割り当てる軸です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      軸インスタンスをグラフの特定のサイズに割り当てます。通常は、名前付きプロパティ (直交ベースの系列の <codeph>horizontalAxis</codeph>、<codeph>verticalAxis</codeph> または <codeph>radiusAxis</codeph> など) により軸インスタンスを直接設定します。
      
      <p>これは低レベルのアクセッサーです。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:stripNaNs"><apiName>stripNaNs</apiName><shortdesc>
      field プロパティが NaN である所定のキャッシュにアイテムがある場合は、すべて削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>グラフアイテムの配列です。
      
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>アイテムを削除する field プロパティです。
      
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>field</codeph> プロパティが <codeph>NaN</codeph> である所定のキャッシュにアイテムがある場合は、すべて削除します。 派生クラスでは、その <codeph>updateFilter()</codeph> メソッドの実装からこのメソッドを呼び出して、軸でフィルターされた ChartItem オブジェクトをすべて削除することができます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:stylesInitialized"><apiName>stylesInitialized</apiName><shortdesc>
      legendDataChanged() メソッドを呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      <codeph>legendDataChanged()</codeph> メソッドを呼び出します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:updateData"><apiName>updateData</apiName><shortdesc>
      このメソッドは、系列が表す基になるデータが変更され、データプロバイダーから再ロードする必要がある場合に呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このメソッドは、系列が表す基になるデータが変更され、データプロバイダーから再ロードする必要がある場合に呼び出されます。 カスタム系列タイプを実装する場合、このメソッドをオーバーライドして、系列をレンダリングするのに必要なすべてのデータをそのデータプロバイダーからロードする必要があります。 さらに、<codeph>super.updateData()</codeph> メソッドは必ずサブクラス内で呼び出す必要があります。 通常、このメソッドは直接呼び出さないでください。 その代わりに、データが特定の時点で確実に更新されるようにするために、系列クラスの <codeph>validateData()</codeph> メソッドを呼び出してください。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:updateFilter"><apiName>updateFilter</apiName><shortdesc>
      系列が表す基になるデータに、関連するデータ変換の軸によって表される範囲に対するフィルターを適用する必要がある場合に呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      系列が表す基になるデータに、関連するデータ変換の軸によって表される範囲に対するフィルターを適用する必要がある場合に呼び出されます。 これは、基になるデータが変更されたか、関連する軸の範囲が変更されたことが原因で生じる場合があります。 カスタム系列タイプを実装する場合、このメソッドをオーバーライドし、関連するデータ変換によって管理される軸の <codeph>filterCache()</codeph> メソッドを使用して範囲外のデータを除外する必要があります。 <codeph>filterCache()</codeph> メソッドは、範囲外の値を <codeph>NaN</codeph> に変換します。 <codeph>super.updateFilter()</codeph> メソッドは必ずサブクラス内で呼び出す必要があります。 一般に、このメソッドは直接呼び出さないでください。 その代わり、指定された時点でデータにフィルターが確実に適用されるようにする必要がある場合、Series クラスの <codeph>validateTransform()</codeph> メソッドを呼び出します。 通常、必要な場合には、このメソッドの前に <codeph>updateData()</codeph> メソッドおよび <codeph>updateMapping()</codeph> メソッドが呼び出されていると想定できます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:updateMapping"><apiName>updateMapping</apiName><shortdesc>
      このメソッドは、系列が表す基になるデータを数値表現にマッピングする必要がある場合に呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このメソッドは、系列が表す基になるデータを数値表現にマッピングする必要がある場合に呼び出されます。 これは、基になるデータが変更されたか、系列をレンダリングするのに使用された軸が何らかの方法で変更されたことが原因で生じる場合があります。 カスタム系列を実装する場合、このメソッドをオーバーライドし、表されているデータを、関連するデータ変換によって管理されている軸の <codeph>mapCache()</codeph> メソッドを使用して数値に変換する必要があります。 さらに、<codeph>super.updateMapping()</codeph> メソッドは必ずサブクラス内で呼び出す必要があります。 一般に、このメソッドは直接呼び出さないでください。 その代わりに、データが特定の時点で確実にマップされるようにするために、系列クラスの <codeph>validateData()</codeph> メソッドを呼び出してください。 通常、必要な場合には、このメソッドの前に <codeph>updateData()</codeph> メソッドが呼び出されていると想定できます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:updateTransform"><apiName>updateTransform</apiName><shortdesc>
      系列が表す基になるデータを、関連するデータ変換の軸によってスクリーン値に変換する必要がある場合に呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      系列が表す基になるデータを、関連するデータ変換の軸によってスクリーン値に変換する必要がある場合に呼び出されます。 これは、基になるデータが変更されたか、関連する軸の範囲が変更されたか、画面上の領域のサイズが変更されたことが原因で生じる場合があります。 カスタム系列タイプを実装する場合、このメソッドをオーバーライドして、関連するデータ変換の <codeph>transformCache()</codeph> メソッドを使用してデータを変換する必要があります。 <codeph>super.updateTransform()</codeph> メソッドは必ずサブクラス内で呼び出す必要があります。 一般に、このメソッドは直接呼び出さないでください。 その代わり、指定された時点でデータにフィルターが確実に適用されるようにする必要がある場合、Series クラスの <codeph>valiateTransform()</codeph> メソッドを呼び出します。 一般的に、必要な場合には、このメソッドの前に <codeph>updateData()</codeph> メソッド、<codeph>updateMapping()</codeph> メソッド、および <codeph>updateFilter()</codeph> メソッドが呼び出されていると想定できます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:validateData"><apiName>validateData</apiName><shortdesc>
      必要に応じて、系列の updateData() メソッドおよび updateMapping() メソッドを呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      必要に応じて、系列の<codeph>updateData()</codeph> メソッドおよび <codeph>updateMapping()</codeph> メソッドを呼び出します。 このメソッドは、<codeph>commitProperties()</codeph> メソッドから系列によって自動的に呼び出されますが、明示的な時間に生成値が必要とされる場合は、派生系列から明示的に呼び出される場合もあります。 軸に対するデータのロードとマッピングは、軸のどのポイントでも可能となるように設計されています。 このメソッドは、どのポイントで明示的に呼び出しても問題ありません。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:validateTransform"><apiName>validateTransform</apiName><shortdesc>
      必要に応じて、系列の updateFilter() メソッドおよび updateTransform() メソッドを呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      必要に応じて、系列の <codeph>updateFilter()</codeph> メソッドおよび <codeph>updateTransform()</codeph> メソッドを呼び出します。 このメソッドは、<codeph>commitProperties()</codeph> メソッドの実行中に系列から自動的に呼び出されますが、明示的な時間に生成値が必要とされる場合は、派生系列から明示的に呼び出される場合もあります。 データのフィルターと変換は、軸で計算される特定の値に依存します。また、これらの値も、グラフに表示されるデータに左右される場合があります。 これらの値が更新される場合は、この関数を不適切な時間に呼び出すと、追加の処理が生じる可能性があります。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:Series:dataFunction:get"><apiName>dataFunction</apiName><shortdesc>
     系列内の現在のグラフアイテムの配置に使用する値を返すメソッドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     系列内の現在のグラフアイテムの配置に使用する値を返すメソッドを指定します。 このプロパティが設定されている場合、カスタムのデータ関数の戻り値は、他の関連プロパティ（AreaSeries、BarSeries、BubbleSeries、ColumnSeries、LineSeries、PlotSeries の <codeph>xField</codeph> および <codeph>yField</codeph> など）よりも優先されます。 BubbleSeries については、この戻り値は <codeph>radiusField</codeph> プロパティよりも優先されます。 PieSeries については、この戻り値は <codeph>field</codeph> プロパティよりも優先されます。     
     
     <p>系列のカスタムの <codeph>dataFunction</codeph> には、次のシグネチャがあります。
      
     <pre>
     <i>function_name</i> (series:Series, item:Object, fieldName:String):Object { ... }
     </pre>
     
     <codeph>series</codeph> は、この <codeph>dataFunction</codeph> を使用する現在の系列です。 <codeph>item</codeph> は、データプロバイダー内のアイテムです。 <codeph>fieldName</codeph> は、現在のグラフアイテム内の設定されるフィールドです。 この関数はオブジェクトを返します。
     </p>
     
     <p>通常は、<codeph>dataFunction</codeph> プロパティを使用して、データプロバイダー内のフィールド（スカラー値ではなくデータプロバイダー内にネストされたもの）にアクセスします。 例えば、次のデータの場合、グラフのデータプロバイダーのフィールドにアクセスするにはデータ関数が必要です。</p>
      
      <pre>
      {month: "Aug", close: {High:45.87,Low:12.2}, open:25.19}
      </pre>
      
     <p>次の例では、このデータプロバイダーから値を返します。</p>
       
     <pre>
     public function myDataFunction(series:Series, item:Object, fieldName:String):Object {
          if (fieldName == 'yValue')
              return(item.close.High);
          else if (fieldName == "xValue")
              return(item.month);
          else
              return null;
     }     
     </pre>
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:dataTipItems:get"><apiName>dataTipItems</apiName><shortdesc>
      グラフ上でデータヒントが非インタラクティブに表示されるグラフアイテムの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      グラフ上でデータヒントが非インタラクティブに表示されるグラフアイテムの配列です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:displayName:get"><apiName>displayName</apiName><shortdesc>
      ユーザーに表示される系列の名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      ユーザーに表示される系列の名前です。 このプロパティは、データヒントなどの、ユーザーが見ることができるラベルに系列を示すために使用されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:filterDataValues:get"><apiName>filterDataValues</apiName><shortdesc>
      filterFuction が設定されている場合、filterDataValues および filterData は無視されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>filterFuction</codeph> が設定されている場合、<codeph>filterDataValues</codeph> および <codeph>filterData</codeph> は無視されます。<codeph>filterDataValues</codeph> プロパティが <codeph>none</codeph> に設定されている場合、系列のデータは表示前にフィルター処理されません。<codeph>filterDataValues</codeph> が <codeph>nulls</codeph> に設定されている場合、系列の <codeph>null</codeph>、<codeph>undefined</codeph> または <codeph>NaN</codeph> などのデータは、表示前にフィルター処理されます。このプロパティが <codeph>outsideRange</codeph> に設定されている場合、系列の <codeph>null</codeph>、<codeph>undefined</codeph> または <codeph>NaN</codeph> などのデータがフィルター処理され、グラフ軸の範囲外の値もフィルター処理されます。系列内のすべてのデータが有効であることが確認できている場合は、このプロパティを <codeph>none</codeph> に設定してパフォーマンスを向上させることができます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:filterData:get"><apiName>filterData</apiName><shortdesc>
      filterFuction または filterDataValues が設定されている場合、filterData は無視されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      <codeph>filterFuction</codeph> または <codeph>filterDataValues</codeph> が設定されている場合、<codeph>filterData</codeph> は無視されます。系列のデータがフィルターされてから表示されるようになっていると <codeph>true</codeph> になります。 系列で欠損値（<codeph>null</codeph>、<codeph>undefined</codeph>、<codeph>NaN</codeph> など）のあるデータがレンダリングされる場合またはグラフの軸の範囲外の値がレンダリングされる場合、このプロパティは <codeph>true</codeph>（デフォルト）に設定される必要があります。 系列内のすべてのデータが有効であることが確認できている場合は、このプロパティを <codeph>false</codeph> に設定してパフォーマンスを向上させることができます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:filterFunction:get"><apiName>filterFunction</apiName><shortdesc>
     表示対象の系列内のグラフアイテムの配列を返すメソッドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     表示対象の系列内のグラフアイテムの配列を返すメソッドを指定します。このプロパティを設定すると、カスタムのフィルター関数の戻り値は <codeph>filterDataValues</codeph> および <codeph>filterData</codeph> の各プロパティよりも優先されます。ただし null が返された場合は、<codeph>filterDataValues</codeph> および <codeph>filterData</codeph> が、この順序で優先されます。  
     
     <p>カスタムの <codeph>filterFunction</codeph> には、次のシグネチャがあります。
      
     <pre>
     <i>function_name</i> (cache:Array):Array { ... }
     </pre>
     
     <codeph>cache</codeph> は、フィルターを適用するグラフアイテムの配列への参照です。この関数は、表示対象のグラフアイテムの配列を返します。 
     </p>
      
     </apiDesc><example>
     <pre>
     public function myFilterFunction(cache:Array):Array {
          var filteredCache:Array=[];
          var n:int = cache.length;  
          for(var i:int = 0; i &lt; n; i++)
          {
              var item:ColumnSeriesItem = ColumnSeriesItem(cache[i]);
              if(item.yNumber > 0 &amp;&amp; item.yNumber &lt; 700)
              {
                  filteredCache.push(item);
              }
          }
          return filteredCache;
     }
     </pre>
     
     <p>
      グラフの系列に対してカスタムのフィルター関数を指定し、null 値または軸の範囲外の値をフィルター処理する場合は、そのカスタムのフィルター関数を使用して、手動でフィルター処理する必要があります。<codeph>filterDataValues</codeph> または <codeph> filterData</codeph> は使用できません。
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:interactive:get"><apiName>interactive</apiName><shortdesc>
      ユーザーが画面上のグラフデータを操作する際にデータヒントを表示するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーが画面上のグラフデータを操作する際にデータヒントを表示するかどうかを指定します。 <codeph>false</codeph> に設定すると、系列でデータヒントが表示されたりヒットデータが生成されたりすることを防止できます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:items:get"><apiName>items</apiName><shortdesc>
      フィルター適用後に系列内にあるすべてのアイテムを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      フィルター適用後に系列内にあるすべてのアイテムを取得します。
      <p>個々の系列によって、返されるアイテムのリストが決まります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:legendData:get"><apiName>legendData</apiName><shortdesc>
      この系列の凡例に示されるアイテムを記述した LegendData インスタンスの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      この系列の凡例に示されるアイテムを記述した LegendData インスタンスの配列です。 派生系列クラスはこの getter をオーバーライドするものであり、それぞれのクラスのスタイルおよびデータ表現メソッドに固有の凡例データを返します。 ほとんどの系列タイプが LegendData インスタンスを 1 つだけ返すのに対して、PieSeries や StackedSeries などの系列タイプのように、配列内の個別のアイテムを示す複数のインスタンスを返すものやいくつもの方法でデータをレンダリングするものもあります。   
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:protected:renderData:get"><apiName>renderData</apiName><shortdesc>
      この系列のレンダリングに必要な情報を格納します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      この系列のレンダリングに必要な情報を格納します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:selectable:get"><apiName>selectable</apiName><shortdesc>
      系列が選択可能かどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      系列が選択可能かどうかを指定します。
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      系列のデータプロバイダー内の選択されたアイテムのインデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      系列のデータプロバイダー内の選択されたアイテムのインデックスです。 複数のアイテムが選択されている場合、このプロパティは最も新しく選択されたアイテムを指定します。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:selectedIndices:get"><apiName>selectedIndices</apiName><shortdesc>
      系列のデータプロバイダー内の選択されたアイテムのインデックスの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      系列のデータプロバイダー内の選択されたアイテムのインデックスの配列です。
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:selectedItem:get"><apiName>selectedItem</apiName><shortdesc>
      系列内の選択されたグラフアイテムです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts:ChartItem</apiValueClassifier></apiValueDef><apiDesc>
      系列内の選択されたグラフアイテムです。 複数のアイテムが選択されている場合、このプロパティは最も新しく選択されたアイテムを指定します。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:selectedItems:get"><apiName>selectedItems</apiName><shortdesc>
      系列内の選択されたグラフアイテムの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      系列内の選択されたグラフアイテムの配列です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:transitionRenderData:get"><apiName>transitionRenderData</apiName><shortdesc>
      実行中のトランジションによって渡されるレンダリングデータ構造です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      実行中のトランジションによって渡されるレンダリングデータ構造です。 系列で再生するように系列のエフェクトが設定されると、まずこのレンダリングデータを調べて系列の現在の状態が取得されます。 トランジションでは、レンダリングデータを変更して必要なエフェクトが作成され、その構造が表示する系列に戻されます。 <codeph>transitionRenderData</codeph> プロパティ値が <codeph>null</codeph> でない場合、系列ではその内容を使用して表示が更新されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:dataTransform:set"><apiName>dataTransform</apiName><shortdesc>
      
      このエレメントが関連付けられている DataTransform オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:DataTransform</apiValueClassifier></apiValueDef><apiDesc>
      
      このエレメントが関連付けられている DataTransform オブジェクトです。 DataTransform オブジェクトは、データ領域とスクリーン座標間のエレメントの変換に使用される、エレメントのセットと軸オブジェクトのセットの関連付けを表します。 グラフエレメントでは、エレメントに関連付けられた DataTransform オブジェクトを使用して、そのデータのレンダリング方法が決定されます。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:GraphicsUtilities"><apiName>GraphicsUtilities</apiName><shortdesc>
  様々なグラフクラスで使用される、一連の内部グラフィックレンダリングユーティリティです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  様々なグラフクラスで使用される、一連の内部グラフィックレンダリングユーティリティです。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.charts.chartClasses:GraphicsUtilities:colorFromFill"><apiName>colorFromFill</apiName><shortdesc>
	  塗りの値を単色のカラーに変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>塗りを表すカラー値です。
	  
	  </apiDesc><apiType value="uint"/></apiReturn><apiParam><apiItemName>f</apiItemName><apiType value="Object"/><apiDesc>カラーの抽出元の Fill オブジェクトです。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	  塗りの値を単色のカラーに変換します。この便利なメソッドでは、画面上の Fill に最も近似した Fill からカラー値が取り出されます。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:GraphicsUtilities:drawArc"><apiName>drawArc</apiName><shortdesc>
	  ターゲット Graphics オブジェクトに円弧を描画します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>g</apiItemName><apiType value="flash.display:Graphics"/><apiDesc>描画先の Graphics オブジェクトです。
	 </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>円弧の水平方向の原点です。
	 </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>円弧の垂直方向の原点です。
	 </apiDesc></apiParam><apiParam><apiItemName>startAngle</apiItemName><apiType value="Number"/><apiDesc>円弧の開始角度（ラジアン単位）です。
	 </apiDesc></apiParam><apiParam><apiItemName>arc</apiItemName><apiType value="Number"/><apiDesc>円弧の長さ（ラジアン単位）です。
	 </apiDesc></apiParam><apiParam><apiItemName>radius</apiItemName><apiType value="Number"/><apiDesc> 円弧の水平方向の半径（ピクセル単位）です。
	 </apiDesc></apiParam><apiParam><apiItemName>yRadius</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>円弧の垂直方向の半径（ピクセル単位）です。指定しない場合は、半径と同じであると見なされます。
	 </apiDesc></apiParam><apiParam><apiItemName>continueFlag</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>このルーチンで、描画前にグラフィックペンツールを円弧の始点に移動する必要があるかどうかを示します。処理中の線の描画を続行する場合は、<codeph>true</codeph> に設定します。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  ターゲット Graphics オブジェクトに円弧を描画します。  
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:GraphicsUtilities:drawPolyLine"><apiName>drawPolyLine</apiName><shortdesc>
	  様々な形式の 1 つを使用してデータポイントを接続する線を描画します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>g</apiItemName><apiType value="flash.display:Graphics"/><apiDesc>    描画先の Graphics オブジェクトです。
	 </apiDesc></apiParam><apiParam><apiItemName>pts</apiItemName><apiType value="Array"/><apiDesc>  線を定義するデータポイントの配列です。
	 </apiDesc></apiParam><apiParam><apiItemName>start</apiItemName><apiType value="int"/><apiDesc>線の描画時に使用する <codeph>pts</codeph> 配列の最初のポイントのインデックスです。
	 </apiDesc></apiParam><apiParam><apiItemName>end</apiItemName><apiType value="int"/><apiDesc>  線の描画時に使用する最後のポイントのインデックスです（このポイントは含まれません）。
	 </apiDesc></apiParam><apiParam><apiItemName>hProp</apiItemName><apiType value="String"/><apiDesc>線のポイントの水平位置を定義する <codeph>pts</codeph> 配列に含まれているオブジェクトのプロパティの名前です。
	 </apiDesc></apiParam><apiParam><apiItemName>vProp</apiItemName><apiType value="String"/><apiDesc>線のポイントの垂直位置を定義する <codeph>pts</codeph> 配列に含まれているオブジェクトのプロパティの名前です。
	 </apiDesc></apiParam><apiParam><apiItemName>stroke</apiItemName><apiType value="mx.graphics:IStroke"/><apiDesc>線のレンダリングに使用する Stroke です。
	 </apiDesc></apiParam><apiParam><apiItemName>form</apiItemName><apiType value="Object"/><apiDesc> 線をレンダリングする形式です。有効な値は、"segment"、"horizontal"、"vertical"、"step"、"reverseStep" または "curve" です。これらの形式は、LineSeries クラスの <codeph>form</codeph> プロパティに似ています。
	 </apiDesc></apiParam><apiParam><apiItemName>moveToStart</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>描画前にペンツールを線の始点に移動するかどうかを示します。この関数を使用して線の処理を続行する場合は、<codeph>false</codeph> を渡します。
 	  
 	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  様々な形式の 1 つを使用してデータポイントを接続する線を描画します。  
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:GraphicsUtilities:fillFromStyle"><apiName>fillFromStyle</apiName><shortdesc>
	  スタイル値を Fill オブジェクトに変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>対応する IFill オブジェクトです。
	  
	  </apiDesc><apiType value="mx.graphics:IFill"/></apiReturn><apiParam><apiItemName>v</apiItemName><apiType value="Object"/><apiDesc>Fill に変換する値です。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	  スタイル値を Fill オブジェクトに変換します。この便利なメソッドでは、スタイルによって割り当てられた値が Fill オブジェクトに変換されます。このオブジェクトは、画面の領域を塗りつぶすために使用できます。値が数値の場合は、対応する SolidColor に変換されます。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:GraphicsUtilities:fillRect"><apiName>fillRect</apiName><shortdesc>
	  指定された IFill および IStroke オブジェクトを使用して矩形を塗りつぶします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>g</apiItemName><apiType value="flash.display:Graphics"/><apiDesc>描画先の Graphics オブジェクトです。
	 </apiDesc></apiParam><apiParam><apiItemName>left</apiItemName><apiType value="Number"/><apiDesc>塗りつぶす矩形の左端です。
	 </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="Number"/><apiDesc>塗りつぶす矩形の上端です。
	 </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="Number"/><apiDesc>塗りつぶす矩形の右端です。
	 </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="Number"/><apiDesc>塗りつぶす矩形の下端です。
	 </apiDesc></apiParam><apiParam><apiItemName>fill</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>矩形の塗りつぶしに使用する IFill オブジェクトです。Fill を使用せずに矩形を描画する場合は、このパラメーターを null に設定します。
	 </apiDesc></apiParam><apiParam><apiItemName>ls</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>矩形の描画に使用する Stroke オブジェクトです。Stroke を使用せずに矩形を描画する場合は、このパラメーターを null に設定します。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  指定された IFill および IStroke オブジェクトを使用して矩形を塗りつぶします。このユーティリティ関数は、指定した Fill および Stroke を使用して、Graphics オブジェクト内の指定した矩形を塗りつぶします。Stroke を指定しない場合、矩形は境界線なしで塗りつぶされます。Fill を指定しない場合、矩形は塗りつぶしなしで描画されます。
	 
	 	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:GraphicsUtilities:setLineStyle"><apiName>setLineStyle</apiName><shortdesc>
	  指定した Graphics オブジェクトに Stroke の値を適用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>g</apiItemName><apiType value="flash.display:Graphics"/><apiDesc>変更する Graphics オブジェクトです。
	 </apiDesc></apiParam><apiParam><apiItemName>ls</apiItemName><apiType value="mx.graphics:IStroke"/><apiDesc>適用する IStroke インスタンスです。Stroke なしでレンダリングする場合は <codeph>null</codeph> に設定します。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  指定した Graphics オブジェクトに Stroke の値を適用します。このユーティリティ関数は、指定した Graphics オブジェクトに、渡された Stroke を適用するか、<codeph>ls</codeph> パラメーターが <codeph>null</codeph> に設定されている場合は、Graphics オブジェクトの線のスタイルをクリアします。
	 
	 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.charts.chartClasses:DateRangeUtilities"><apiName>DateRangeUtilities</apiName><shortdesc>
 DateTimeAxis で使用される、無効化された日付範囲ユーティリティのセットです。
  
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 DateTimeAxis で使用される、無効化された日付範囲ユーティリティのセットです。
  
  </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="mx.charts.chartClasses:IStackable2"><apiName>IStackable2</apiName><shortdesc>
  IStackable2 インターフェイスは、積み重ね可能な系列によって実装されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IStackable</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IStackable2 インターフェイスは、積み重ね可能な系列によって実装されます。 積み重ねセット（ColumnSet、BarSet、AreaSet）では、積み重ね時に割り当てられたサブ系列が積み重ね時に負の値も表示する場合、このインターフェイスはそのサブ系列によって実装される必要があります。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.charts.chartClasses:IStackable2:mx.charts.chartClasses:IStackable2:stackAll"><apiName>stackAll</apiName><shortdesc>
  系列を積み重ねます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>新たに積み重ねる系列の最大値および最小値を表すオブジェクトです。	 
  
  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>stackedPosXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>系列が積み重ねられる基本値が含まれます。 辞書のキーは x 値で、値は正の x 値です。
 
  </apiDesc></apiParam><apiParam><apiItemName>stackedNegXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>系列が積み重ねられる基本値が含まれます。 辞書のキーは x 値で、値は負の y 値です。
  
  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable2</apiOperationClassifier><apiDesc>積み重ねの中の直前のエレメントです。 例えば、同じ型のエレメントの場合は、このプロパティへのアクセスを使用することにより、レンダリング時に同じ処理を繰り返す必要を回避できます。
  
  </apiDesc></apiParam></apiOperationDef><apiDesc>
  系列を積み重ねます。 通常、系列はデータプロバイダーからデータをロードするため <codeph>updateData()</codeph> 関数を実装しています。 ただし、積み重ね系列では、必ずしもデータプロバイダーに値が格納されているとは限らないため、特殊な操作が実行されます。 その値は、データプロバイダーに何が格納されていても、積み重ねられる側のオブジェクトによってロードされた値と合算したものになります。
  <p>カスタム積み重ね系列には、<codeph>stack()</codeph> メソッドを実装してください。データプロバイダーからデータをロードし、レンダリング対象の実値が取得される辞書内の基本値にそのデータを追加し、合算後の新しい値で辞書内の値を置き換えます。</p>
  
  </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.charts.chartClasses:ChartElement"><apiName>ChartElement</apiName><shortdesc>
  ChartElement クラスは、可視のグラフエレメントの基本クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IChartElement2</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:DualStyleObject</apiBaseClassifier></apiClassifierDef><apiDesc>
  ChartElement クラスは、可視のグラフエレメントの基本クラスです。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:ChartElement:ChartElement"><apiName>ChartElement</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:ChartElement:addChildAt"><apiName>addChildAt</apiName><shortdesc>
     この DisplayObjectContainer インスタンスに子 DisplayObject インスタンスを追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc><codeph>child</codeph> パラメーターで渡す DisplayObject インスタンスです。
     
     </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>この DisplayObjectContainer インスタンスの子として追加する DisplayObject インスタンスです。
     
     </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>子を追加するインデックス位置です。既にオブジェクトが置かれているインデックス位置を指定すると、その位置にあるオブジェクトとその上に位置するすべてのオブジェクトが、子リスト内で 1 つ上の位置に移動します。 
         
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     この DisplayObjectContainer インスタンスに子 DisplayObject インスタンスを追加します。子インスタンスは、指定されたインデックス位置に追加されます。インデックス 0 は、この DisplayObjectContainer オブジェクトの表示リストの背景または一番下を表します。
     
     <p>既に異なる表示オブジェクトコンテナを親に持つ子オブジェクトを追加する場合は、もう一方の表示オブジェクトコンテナの子リストからそのオブジェクトが削除されます。 </p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:addChild"><apiName>addChild</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:chartStateChanged"><apiName>chartStateChanged</apiName><shortdesc>
      
      周りを囲むグラフの現在の状態が変更されたことを示すために、そのグラフによって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>oldState</apiItemName><apiType value="uint"/><apiDesc>前の状態を表す整数です。
     
      </apiDesc></apiParam><apiParam><apiItemName>v</apiItemName><apiType value="uint"/><apiDesc>新しい状態を表す整数です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      周りを囲むグラフの現在の状態が変更されたことを示すために、そのグラフによって呼び出されます。 エレメントの実装では、このメソッドに応答してエレメントで表示されるデータの変更と同期させる必要があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:claimStyles"><apiName>claimStyles</apiName><shortdesc>
      
      関連付けられたエレメントで chartSeriesStyles の配列からスタイルセレクターを要求できるようにするために、グラフによって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>スタイル (<codeph>firstAvailable</codeph> + <i>N</i> など) の要求後の、<codeph>firstAvailable</codeph> の新しい値です。
      
      </apiDesc><apiType value="uint"/></apiReturn><apiParam><apiItemName>styles</apiItemName><apiType value="Array"/><apiDesc>要求するスタイルの配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>firstAvailable</apiItemName><apiType value="uint"/><apiDesc>要求する配列にある最初のスタイルセレクターです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      関連付けられたエレメントで chartSeriesStyles の配列からスタイルセレクターを要求できるようにするために、グラフによって呼び出されます。 各グラフには、セレクターを必要とするグラフのエレメントに暗黙的に割り当てられる、関連付けられたセレクターのセットがあります。 この関数を実装すると、必要に応じて、エレメントがこのセットからエレメントに "要求" を行うことができます。 <i>N</i> スタイルセレクターを必要とするエレメントは、<codeph>styles[firstAvailable]</codeph> から <codeph>styles[firstAvailable + <i>N</i> - 1]</codeph> までの値を要求します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:collectTransitions"><apiName>collectTransitions</apiName><shortdesc>
      
      周りを囲むグラフの状態が変更されたときに、特定のエレメントで再生する可能性のあるすべてのトランジションを収集するために、そのグラフによって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>chartState</apiItemName><apiType value="Number"/><apiDesc>グラフによって新しいトランジションが再生される状態です。
     
      </apiDesc></apiParam><apiParam><apiItemName>transitions</apiItemName><apiType value="Array"/><apiDesc>グラフの再生するトランジションのリストに追加するトランジションの配列です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      周りを囲むグラフの状態が変更されたときに、特定のエレメントで再生する可能性のあるすべてのトランジションを収集するために、そのグラフによって呼び出されます。 グラフでは、すべてのエレメントからトランジションが収集され、これらがパラレルに再生されます。 グラフは、すべてのトランジションが完了した後で次の状態に進みます。 インプリメンタによって、トランジション配列パラメーターに必要なトランジションが追加される必要があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:protected:createDataID"><apiName>createDataID</apiName><shortdesc>
      比較できるよう、dataPoint を表す一意の ID を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>アプリケーション全体で一意の dataPoint の ID です。
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>dataPointID</apiItemName><apiType value="Number"/><apiDesc>dataPoint の現在の ID です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      比較できるよう、dataPoint を表す一意の ID を作成します。派生クラスによって、ローカルで一意のデータポイント ID でこの関数を呼び出し、アプリケーション全体で一意となる ID を生成することができます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:protected:dataChanged"><apiName>dataChanged</apiName><shortdesc>
      エレメントが表現する基になるデータが変更されたことを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      エレメントが表現する基になるデータが変更されたことを示します。 系列またはエレメントが表示しているデータが変更された場合は、必ずこのメソッドを呼び出してください。 すると、関連付けられた軸がある場合は、必要に応じてその範囲が更新されます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:dataToLocal"><apiName>dataToLocal</apiName><shortdesc>
      
      1 組のデータ値を画面上の x-y 座標に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>グラフを基準とする座標です。
      
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>dataValues</apiItemName><apiType value="restParam"/><apiDesc>座標に変換するデータの値です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      1 組のデータ値を画面上の x-y 座標に変換します。 この関数は、個々のエレメントと同じ変換を使用して画面上でデータを変換する場合に呼び出します。 例えば、グラフのデータ領域にカスタムのハイライト表示を作成するには、この関数を使用して該当する範囲の画面上の座標を指定することができます。
      
      <p>直交 ChartElements の場合は、通常 2 つの値を渡します。 最初の値は水平軸にマッピングされ、2 番目の値は垂直軸にマッピングされます。</p>
      
      <p>極座標グラフの場合は、最初の値が角度軸にマッピングされ、2 番目の値が放射軸にマッピングされます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:describeData"><apiName>describeData</apiName><shortdesc>
      
      この IChartElement で表されるデータの記述を取得するために、管理する DataTransform によって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>表示されるデータを記述する DataDescription インスタンスを含む Array です。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>データの記述を取得する軸を特定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>特定の軸で管理される DataDescription オブジェクトの値を示すビットフィールドです。 インプリメンタによって必要なフィールドを計算する方法でのみ最適化できます。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      この IChartElement で表されるデータの記述を取得するために、管理する DataTransform によって呼び出されます。 インプリメンタによって mx.charts.chartClasses.DataDescription オブジェクトの配列が入力されて返され、表示データ（minimum、maximum、interval、unitSize など）から値を自動生成するすべての軸に沿ってこれらのデータが正確に記述されることが保証されます。 ほとんどのエレメントタイプでは、1 つの DataDescription を含む配列が返されます。 BarSet や ColumnSet などのエレメントを集約します。それらのサブエレメントによって表示されるデータを記述する複数の DataDescription インスタンスを返すことがあります。 呼び出されると、インプリメンタによって <codeph>dimension</codeph> パラメーターで指定された軸に沿ってデータが記述されます。 この関数は、グラフによってサポートされる軸ごとに呼び出される場合があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:findDataPoints"><apiName>findDataPoints</apiName><shortdesc> 
      指定された座標にあるエレメントによって表される最も近いデータポイントを探します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>HitData の配列です。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>X 座標を表します。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Y 座標を表します。
     
      </apiDesc></apiParam><apiParam><apiItemName>sensitivity2</apiItemName><apiType value="Number"/><apiDesc>実際の座標に対してどこまでの範囲内であれば、座標の下にあると見なされるかをピクセル単位で指定します。 このプロパティは、グラフコントロールの mouseSensitivity プロパティの値に似ています。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      指定された座標にあるエレメントによって表される最も近いデータポイントを探します。
     
      <p>このメソッドは、範囲内にあるデータポイントを記述した HitData 構造体の配列を返します。 個々の ChartElements のデータポイントに重複のないことが保証されている場合は、エレメントからデータポイントが 1 つのみ返されるようにすることもできます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:getAllDataPoints"><apiName>getAllDataPoints</apiName><shortdesc>
      基になるすべての ChartElements のアイテムの、HitData の配列を返します。これらの dataTips は、グラフで showAllDataTips が true に設定されているときに表示されます。
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>データポイントを示す HitData オブジェクトです。
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      基になるすべての ChartElements のアイテムの、HitData の配列を返します。これらの dataTips は、グラフで <codeph>showAllDataTips</codeph> が <codeph>true</codeph> に設定されているときに表示されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:localToData"><apiName>localToData</apiName><shortdesc>
      
      画面上の座標を 1 組のデータ値に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>1 組のデータ値です。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>pt</apiItemName><apiType value="flash.geom:Point"/><apiDesc>変換する Point オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      画面上の座標を 1 組のデータ値に変換します。 この関数は、画面上の特定のポイントを表すデータ値を取得する場合に呼び出します。
      <p>個々のグラフタイプによって、この変換がどのように行われるかが決まります。 ポイントは、グラフの座標空間に対応する必要があります。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:mappingChanged"><apiName>mappingChanged</apiName><shortdesc>
      関連付けられている軸のマッピングが変更されると呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      関連付けられている軸のマッピングが変更されると呼び出されます。 この ChartElement に割り当てられた DataTransform は、表現する軸のいずれかが何らかの方法で変更されると、このメソッドを呼び出します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:protected:processNewDataProvider"><apiName>processNewDataProvider</apiName><shortdesc> 
      エレメントに新しい dataProvider が割り当てられると呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>データプロバイダーです。これは、通常は、Array、ArrayCollection、XMLList、XMLListCollection、または類似するクラスです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      エレメントに新しい dataProvider が割り当てられると呼び出されます。新しい dataProvider が割り当てられると、サブクラスではカスタムビヘイビアーをオーバーライドして定義することができます。このメソッドは、<codeph>dataProvider</codeph> プロパティが設定されたとき、または chartDataProvider が直接割り当てられない場合に <codeph>chartDataProvider</codeph> プロパティが設定されたときに呼び出されます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:ChartElement:protected:cursor"><apiName>cursor</apiName><shortdesc>
      各 ChartElement では、内部で独自に使用するためそれぞれの dataProvider にカーソルが関連付けられています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="mx.collections:IViewCursor"/></apiValueDef><apiDesc>
      各 ChartElement では、内部で独自に使用するためそれぞれの dataProvider にカーソルが関連付けられています。 ChartElement は、そのカーソルの単独の所有権を持つか、または他のコードではカーソルの位置が動かないと見なすことができます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartElement:protected:chart:get"><apiName>chart</apiName><shortdesc>
      このエレメントを含むグラフコンポーネントを参照します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.charts.chartClasses:ChartBase</apiValueClassifier></apiValueDef><apiDesc>
      このエレメントを含むグラフコンポーネントを参照します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartElement:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      この特定のエレメントに割り当てられているデータプロバイダーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      この特定のエレメントに割り当てられているデータプロバイダーです。 通常、エレメントは周りを囲むグラフから dataProvider を継承します。 しかし、個々のエレメントは独自の特定 dataProvider を使ってオーバーライドできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartElement:dataTransform:get"><apiName>dataTransform</apiName><shortdesc>
      このエレメントが関連付けられている DataTransform オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:DataTransform</apiValueClassifier></apiValueDef><apiDesc>
      このエレメントが関連付けられている DataTransform オブジェクトです。 DataTransform オブジェクトは、データ領域とスクリーン座標間のエレメントの変換に使用される、エレメントのセットと軸オブジェクトのセットの関連付けを表します。 グラフエレメントでは、エレメントに関連付けられた DataTransform オブジェクトを使用して、そのデータのレンダリング方法が決定されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartElement:labelContainer:get"><apiName>labelContainer</apiName><shortdesc>
      
      このエレメントでレンダリングされるラベルを表示する DisplayObject です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      
      このエレメントでレンダリングされるラベルを表示する DisplayObject です。 ほとんどの場合、グラフのデータ領域に表示されるラベルは、データに埋め込まれるのではなく、すべてのエレメントの一番上にレンダリングされます。 実装するエレメントに表示するラベルがある場合は、Sprite オブジェクトにラベルを配置して、このオブジェクトを <codeph>labelContainer</codeph> プロパティの値として返すことができます。 周りを囲むグラフによって、すべての囲まれたエレメントから labelContainer がレンダリングされ、他のすべてのエレメントよりも上にあるデータ領域に配置されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartElement:chartDataProvider:set"><apiName>chartDataProvider</apiName><shortdesc>
      周りを囲むグラフに割り当てられたデータプロバイダーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Object"/></apiValueDef><apiDesc>
      周りを囲むグラフに割り当てられたデータプロバイダーです。 エレメントタイプでは、必要に応じて周りを囲むグラフからデータプロバイダーを継承するか、または開発者がエレメントに特定のデータプロバイダーを割り当てるかを選択することができます。 すべてのエレメントが、データプロバイダーによって提供されるとは限りません。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:DataTransform"><apiName>DataTransform</apiName><shortdesc>
  DataTransform オブジェクトは、文字を含むグラフの一部を表します。このオブジェクトでは、値をスクリーン座標に変換できます。また、その逆も可能です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  DataTransform オブジェクトは、文字を含むグラフの一部を表します。このオブジェクトでは、値をスクリーン座標に変換できます。また、その逆も可能です。 それぞれの DataTransform オブジェクトには、1 つの水平軸、垂直軸、および表示する文字のセット（背景、データ、およびオーバーレイ）があります。  
  
  <p>理論上は、グラフに複数の DataTransform オブジェクトを重ねて設定することができます。 これにより、同一の領域内に、範囲の異なる複数のデータセットがレンダリングされたグラフを表示できます。 例えば、販売数量に対する月ごとの収益を比較して示す必要があるとします。 通常、収益が百万単位で数量が千個単位の場合、これらの値を同じ範囲に沿って効果的にレンダリングすることは難しくなります。 これらの値を別々の DataTransform オブジェクトに重ねると、それぞれの値が異なる範囲にレンダリングされたときに、エンドユーザーが値の傾向を比較することが可能になります。</p>
 
  <p>グラフに設定できるのは、1 セットの DataTransform のみです。</p>
  
  <p>ほとんどの場合は ChartBase オブジェクトを使用します。このオブジェクトでは、グラフと、グラフに含まれる文字および軸オブジェクトとの間にある DataTransform オブジェクトの存在が表示されません。 独自の ChartElement オブジェクトを作成する場合は、DataTransform クラスの各メソッドを理解して、それぞれのエレメントを正しく実装する必要があります。</p>
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.charts.chartClasses:DataTransform_mx.events.FlexEvent.TRANSFORM_CHANGE_transformChange"><apiName>transformChange</apiName><shortdesc>
  データ領域からスクリーン領域への変換が変更されたときに送出されます。通常、変換を構成する軸が何らかの方法で変更されたか、またはデータ変換自体にサイズがある場合に行われます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.TRANSFORM_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  データ領域からスクリーン領域への変換が変更されたときに送出されます。通常、変換を構成する軸が何らかの方法で変更されたか、またはデータ変換自体にサイズがある場合に行われます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.charts.chartClasses:DataTransform:DataTransform"><apiName>DataTransform</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:DataTransform:dataChanged"><apiName>dataChanged</apiName><shortdesc>
      グラフに表示される基になるデータの一部が変更されたことを DataTransform に通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      グラフに表示される基になるデータの一部が変更されたことを DataTransform に通知します。 通常、DataTransform にはグラフに表示される、基になるデータソースの情報がないので、これらのデータが変更された場合は、そのデータに基づいて DataTransform で範囲の拡大 / 縮小を再計算できるように、文字からこのメソッドが呼び出される必要があります。 必ずしもデータが変更されているとは限らないので、これにより DataTransform が無効化されることは<b>ありません</b>。 無効化イベントは、軸オブジェクト（つまり、範囲オブジェクト）によってトリガーされる必要があります。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:DataTransform:describeData"><apiName>describeData</apiName><shortdesc>
      データ変換に関連付けられたすべてのエレメントの重要な表示値を収集します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>BoundedValue オブジェクトの配列です。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>値を収集するためのサイズです。
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>この変換に必要なデータを定義します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      データ変換に関連付けられたすべてのエレメントの重要な表示値を収集します。 このメソッドは軸インスタンスから呼び出され、該当範囲の自動生成時に検討が必要な値が収集されます。 このメソッドは、BoundedValue オブジェクトの配列を返します。
      
      <p>CartesianTransform の水平軸に対する重要な値を収集するには、0 を指定します。垂直軸の値を収集するには 1 を指定します。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:DataTransform:getAxis"><apiName>getAxis</apiName><shortdesc>
      dimension パラメーターで指定されたデータサイズの変換を行う軸インスタンスを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>軸インスタンスです。
      
      </apiDesc><apiOperationClassifier>mx.charts.chartClasses:IAxis</apiOperationClassifier></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>データの変換を行う軸のサイズです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>dimension</codeph> パラメーターで指定されたデータサイズの変換を行う軸インスタンスを取得します。 軸が事前に割り当てられていない場合は、デフォルトの軸が作成されます。 すべてのサイズに対するデフォルトの軸は、<codeph>autoAdjust</codeph> プロパティが <codeph>false</codeph> に設定された LinearAxis になります。 
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.charts.xml#LinearAxis"><linktext>mx.charts.LinearAxis</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:DataTransform:invertTransform"><apiName>invertTransform</apiName><shortdesc>
      DataTransform 座標系に対応する x 座標と y 座標をデータ領域の 2 次元値に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>変換された値を保持する配列です。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiType value="restParam"/><apiDesc>x 座標と y 座標です (この順序で示されます)。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      DataTransform 座標系に対応する x 座標と y 座標をデータ領域の 2 次元値に変換します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:DataTransform:setAxis"><apiName>setAxis</apiName><shortdesc>
      軸インスタンスを変換の特定のサイズに割り当てます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>変換のサイズです。
      </apiDesc></apiParam><apiParam><apiItemName>v</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IAxis</apiOperationClassifier><apiDesc>ターゲットの軸インスタンスです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      軸インスタンスを変換の特定のサイズに割り当てます。 軸オブジェクトは、それを囲むグラフオブジェクトによって割り当てられます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:DataTransform:transformCache"><apiName>transformCache</apiName><shortdesc>
      データを表す数値のセットをスクリーン座標にマッピングします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>それぞれのフィールドにデータ値が格納されたオブジェクトの配列です。 また、この関数によって変換された数値が保存される場所でもあります。
     
      </apiDesc></apiParam><apiParam><apiItemName>xField</apiItemName><apiType value="String"/><apiDesc>x 軸のデータ値を参照できるフィールドです。
     
      </apiDesc></apiParam><apiParam><apiItemName>xConvertedField</apiItemName><apiType value="String"/><apiDesc>マップされた x スクリーン座標が保存されるフィールドです。
     
      </apiDesc></apiParam><apiParam><apiItemName>yField</apiItemName><apiType value="String"/><apiDesc>y 軸のデータ値を参照できるフィールドです。
     
      </apiDesc></apiParam><apiParam><apiItemName>yConvertedField</apiItemName><apiType value="String"/><apiDesc>マップされた y スクリーン座標が保存されるフィールドです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      データを表す数値のセットをスクリーン座標にマッピングします。 このメソッドでは、値はすべて数値と見なされるので、数値以外の値は <codeph>mapCache()</codeph> メソッドで変換されている必要があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:DataTransform:axes:get"><apiName>axes</apiName><shortdesc>
      この変換に関連付けられている軸のセットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      この変換に関連付けられている軸のセットです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataTransform:elements:get"><apiName>elements</apiName><shortdesc>
      この変換に関連付けられているエレメントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      この変換に関連付けられているエレメントです。 この Array には、この変換に関連付けられた背景、系列、オーバーレイのエレメントがあります。 この値は、それを囲むグラフオブジェクトによって割り当てられます。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:DualStyleObject"><apiName>DualStyleObject</apiName><shortdesc>
  DualStyleObject クラスは、クライアント開発者のコントロールの及ばないところでクラスセレクターを割り当てる必要があるコンポーネントにとって、基本クラスの役割を果たします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  <p><b>Common MXML Syntax Inherited from DualStyleObject</b></p>
  
  <p>Flex components inherit the following properties
  from the DualStyleObject class:</p>
 
  <pre>
  &lt;mx:<i>tagname</i>
    internalStyleName="<i>Style; No default</i>"
  &gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  DualStyleObject クラスは、クライアント開発者のコントロールの及ばないところでクラスセレクターを割り当てる必要があるコンポーネントにとって、基本クラスの役割を果たします。 DualStyleObject インスタンスには、標準 styleName と追加の internalStyleName という 2 つの styleName プロパティがあります。 コンポーネントは internalStyleName プロパティを必要に応じて割り当て、クライアント開発者が styleName プロパティを割り当てられるようにします。
 
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:DualStyleObject:DualStyleObject"><apiName>DualStyleObject</apiName><shortdesc> 
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts.chartClasses:DualStyleObject:internalStyleName:get"><apiName>internalStyleName</apiName><shortdesc>
      このインスタンスが値を継承した元のクラスセレクターの名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      このインスタンスが値を継承した元のクラスセレクターの名前です。 <codeph>internalStyleName</codeph> プロパティは、<codeph>styleName</codeph> セレクターよりも優先順位が低くなります。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>