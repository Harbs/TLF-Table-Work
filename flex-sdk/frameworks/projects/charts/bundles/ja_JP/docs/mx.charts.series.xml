<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.charts.series"><apiName>mx.charts.series</apiName><apiDetail/><apiClassifier id="mx.charts.series:BarSet"><apiName>BarSet</apiName><shortdesc>
  グラフの種類を問わず BarSeries オブジェクトの積み重ねや集合に使用できるグループ化セットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="series"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IBar</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:StackedSeries</apiBaseClassifier></apiClassifierDef><apiDesc>
  グラフの種類を問わず BarSeries オブジェクトの積み重ねや集合に使用できるグループ化セットです。 BarSet は BarChart コントロールと同じグループ化動作をカプセル化しているものの、CartesianChart クラスに基づいてカスタムグラフを構成できます。 BarSet を使用すると、IBar インターフェイスを実装したどのグラフエレメントタイプでも集合させることができます。 また、IBar インターフェイスおよび IStackable インターフェイスを実装したどのグラフエレメントタイプでも積み重ねることができます。 BarSet クラスは IBar インターフェイスを実装しているため、BarSet を使用して他の BarSet をいくつか集合させて、さらに高度なカスタムグラフを構築できます。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.series:BarSet:BarSet"><apiName>BarSet</apiName><shortdesc>
	  コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  コンストラクターです。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:BarSet:stack"><apiName>stack</apiName><shortdesc>
	  系列データを更新し、そのデータが正しく積み重ねられるように、積み重ねられる側の系列データの値を使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  系列データを更新し、そのデータが正しく積み重ねられるように、積み重ねられる側の系列データの値を使用します。
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:BarSet:barWidthRatio:get"><apiName>barWidthRatio</apiName><shortdesc>
	  表示する横棒の幅をカテゴリの幅に対する割合で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.65
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  表示する横棒の幅をカテゴリの幅に対する割合で指定します。 値が <codeph>1</codeph> の場合は領域全体が使用され、<codeph>0.6</codeph> の場合は横棒の使用可能領域の 60% が使用されます。 通常、このプロパティを直接設定することはありません。 実際の横棒の幅には、<codeph>barWidthRatio</codeph> プロパティと <codeph>maxbarWidth</codeph> プロパティの値のうち小さい方が使用されます。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSet:maxBarWidth:get"><apiName>maxBarWidth</apiName><shortdesc>
	  描画する横棒の幅をピクセル単位で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  描画する横棒の幅をピクセル単位で指定します。 実際の横棒の幅には、このスタイルと <codeph>barWidthRatio</codeph> プロパティの値のうち小さい方が使用されます。 集合横棒グラフの場合、このスペースが各集合内の横棒によって均等に分割されます。 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSet:offset:get"><apiName>offset</apiName><shortdesc>
	  使用可能な領域の中心から横棒の中心をずらす度合いを、カテゴリの幅に対する割合で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  使用可能な領域の中心から横棒の中心をずらす度合いを、カテゴリの幅に対する割合で指定します。 値の範囲は <codeph>-100</codeph> ～ <codeph>100</codeph> のパーセンテージです。 領域の中心に棒を配置するには <codeph>0</codeph> に設定します。 このプロパティの値を <codeph>-50</codeph> に設定すると、縦棒は使用可能な領域の開始位置の中央に配置されます。 通常、このプロパティを直接設定することはありません。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.series:BubbleSeries"><apiName>BubbleSeries</apiName><shortdesc>
  BubbleChart コントロールのデータ系列を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="Array">
<description>
  系列内の各アイテムの塗りを定義する塗りつぶしオブジェクトの配列を指定します。 これは <codeph>fill</codeph> スタイルプロパティよりも優先されます。 <codeph>fillFunction</codeph> プロパティでカスタムメソッドが指定されている場合は、それがこの配列よりも優先されます。 すべてのアイテムに十分な配列エレメントを用意しない場合、配列の最初から塗りが繰り返されます。
  
  <p>CSS を使用してこのプロパティの値を設定するには：
   <pre>
    BubbleSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>MXML を使用してこのプロパティの値を設定するには：
   <pre>
    &lt;mx:BubbleSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:BubbleSeries>
   </pre>
  </p>
  
  <p>
  <codeph>fills</codeph> プロパティを指定した場合に、Legend コントロールを使用するには、手動で Legend コントロールを作成してそれに LegendItems を追加する必要があります。
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列が、関連する凡例にマーカーをレンダリングする場合に使用するクラスです。 このスタイルが <codeph>null</codeph> の場合、ほとんどの系列ではデフォルトで itemRenderer が凡例マーカースキンとして使用されます。 凡例マーカーとして使用するクラスには、IFlexDisplayObject インターフェイスを実装する必要があるだけでなく、オプションで ISimpleStyleClient インターフェイスおよび IDataRenderer インターフェイスを実装することもできます。 凡例マーカーとして使用するクラスに IDataRenderer インターフェイスを実装すると、データプロパティに LegendData インスタンスが割り当てられます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列がグラフに個々のアイテムを表現する場合に使用するクラスとなるファクトリです。 このクラスは、グラフ内のエレメントごとに 1 回インスタンス化されます。 itemRenderer として使用するクラスには、IFlexDisplayObject、ISimpleStyleClient、IDataRenderer の各インターフェイスを実装する必要があります。 <codeph>data</codeph> プロパティには、スキンインスタンスがレンダリングする chartItem が割り当てられます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  このデータ系列の線スタイルを設定します。 線を定義するには、Stroke オブジェクトを指定する必要があります。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  このデータ系列の塗りを設定します。 IFill インターフェイスを実装するオブジェクトか、単色のカラー値を表す数値を指定できます。 CSS を使用して単色の塗りを指定することもできます。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ <p>
  The <code>&lt;mx:BubbleSeries&gt;</code> tag inherits all the properties of its parent classes, and 
  the following properties:
  </p>
  <pre>
  &lt;mx:BubbleSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    itemType="<i>No default</i>"
    legendData="<i>No default</i>"
    maxRadius="50"
    minRadius="0"
    radiusAxis="<i>No default</i>"
    radiusField="<i>No default</i>"
    renderData="<i>No default</i>"
    renderDataType="<i>No default</i>"
    verticalAxis="<i>No default</i>"
    xField="null"
    yField="null"
    
    <strong>Styles</strong>
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    stroke="<i>IStroke; no default</i>"  
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  BubbleChart コントロールのデータ系列を定義します。 デフォルトの itemRenderer は、CircleRenderer クラスです。 オプションでデータ系列の itemRenderer も定義できます。 itemRenderer には、IDataRenderer インターフェイスを実装する必要があります。
   </apiDesc><example conref="BubbleChartExample.mxml"><swfblock conref="../examples/BubbleChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#BubbleChart"><linktext>mx.charts.BubbleChart</linktext></link></related-links><apiConstructor id="mx.charts.series:BubbleSeries:BubbleSeries"><apiName>BubbleSeries</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:BubbleSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      指定の DisplayObject にスタイルプロパティを適用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>インスタンスの作成中です。
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>インスタンスキャッシュ自体への参照です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定の DisplayObject にスタイルプロパティを適用します。 このメソッドは、InstanceCache が新しいレンダラーを作成するときに呼び出すコールバックです。  
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:beginInterpolation"><apiName>beginInterpolation</apiName><shortdesc>
      
      補間エフェクトを開始するために SeriesInterpolate エフェクトによって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>系列が補間を実行するために必要なデータです。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>sourceRenderData</apiItemName><apiType value="Object"/><apiDesc>補間を行う範囲の系列のソースデータです。
     
      </apiDesc></apiParam><apiParam><apiItemName>destRenderData</apiItemName><apiType value="Object"/><apiDesc>補間を行う範囲の系列の宛先データです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      補間エフェクトを開始するために SeriesInterpolate エフェクトによって呼び出されます。 このエフェクトは、補間する範囲の系列のソースと宛先のデータを渡します。エフェクトは、このメソッドの戻り値を系列の <codeph>interpolate()</codeph> メソッドに繰り返し渡すことによって、このエフェクトの間のアニメーションを更新します。 系列は補間を実行するために必要なデータを算出し、それをこのメソッドに戻します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:describeData"><apiName>describeData</apiName><shortdesc>
      
      
      この IChartElement で表されるデータの記述を取得するために、管理する DataTransform によって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>表示されるデータを記述する DataDescription インスタンスを含む Array です。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>データの記述を取得する軸を特定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>特定の軸で管理される DataDescription オブジェクトの値を示すビットフィールドです。 インプリメンタによって必要なフィールドを計算する方法でのみ最適化できます。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      この IChartElement で表されるデータの記述を取得するために、管理する DataTransform によって呼び出されます。 インプリメンタによって mx.charts.chartClasses.DataDescription オブジェクトの配列が入力されて返され、表示データ（minimum、maximum、interval、unitSize など）から値を自動生成するすべての軸に沿ってこれらのデータが正確に記述されることが保証されます。 ほとんどのエレメントタイプでは、1 つの DataDescription を含む配列が返されます。 BarSet や ColumnSet などのエレメントを集約します。それらのサブエレメントによって表示されるデータを記述する複数の DataDescription インスタンスを返すことがあります。 呼び出されると、インプリメンタによって <codeph>dimension</codeph> パラメーターで指定された軸に沿ってデータが記述されます。 この関数は、グラフによってサポートされる軸ごとに呼び出される場合があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:findDataPoints"><apiName>findDataPoints</apiName><shortdesc>
       
      指定された座標にあるエレメントによって表される最も近いデータポイントを探します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>HitData の配列です。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>X 座標を表します。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Y 座標を表します。
     
      </apiDesc></apiParam><apiParam><apiItemName>sensitivity</apiItemName><apiType value="Number"/><apiDesc>実際の座標に対してどこまでの範囲内であれば、座標の下にあると見なされるかをピクセル単位で指定します。 このプロパティは、グラフコントロールの mouseSensitivity プロパティの値に似ています。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
       
      指定された座標にあるエレメントによって表される最も近いデータポイントを探します。
     
      <p>このメソッドは、範囲内にあるデータポイントを記述した HitData 構造体の配列を返します。 個々の ChartElements のデータポイントに重複のないことが保証されている場合は、エレメントからデータポイントが 1 つのみ返されるようにすることもできます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:getElementBounds"><apiName>getElementBounds</apiName><shortdesc>
      
      この系列で生成された renderData 構造の elementBounds、bounds および visibleBounds の各プロパティに値を入力します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderData</apiItemName><apiType value="Object"/><apiDesc>この系列によって生成される構造です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      この系列で生成された renderData 構造の <codeph>elementBounds</codeph>、<codeph>bounds</codeph> および <codeph>visibleBounds</codeph> の各プロパティに値を入力します。 エフェクトクラスは、様々なエフェクトタイプの実装に使用される各フィールドに値を入力するためにこのメソッドを呼び出します。 要求されたときにのみ系列のアイテムの境界を生成するには、派生クラスにこのメソッドを実装する必要があります。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:getMissingInterpolationValues"><apiName>getMissingInterpolationValues</apiName><shortdesc>
      
      補間構造内の欠損値を埋めます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sourceProps</apiItemName><apiType value="Object"/><apiDesc>特定のアイテムについて補間されるソース値の入ったオブジェクトです。 このメソッドが終了するとき、このオブジェクトのすべてのプロパティ値は <codeph>NaN</codeph> 値ではなくなります。
     
      </apiDesc></apiParam><apiParam><apiItemName>srcCache</apiItemName><apiType value="Array"/><apiDesc>補間されるグラフアイテムのソースの配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>destProps</apiItemName><apiType value="Object"/><apiDesc>特定のアイテムについて補間される宛先値の入ったオブジェクトです。 このメソッドが終了するとき、このオブジェクトのすべてのプロパティ値は <codeph>NaN</codeph> 値ではなくなります。
     
      </apiDesc></apiParam><apiParam><apiItemName>destCache</apiItemName><apiType value="Array"/><apiDesc>補間されるグラフアイテムの宛先の配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>キャッシュに入れられるアイテムのインデックスです。  
     
      </apiDesc></apiParam><apiParam><apiItemName>customData</apiItemName><apiType value="Object"/><apiDesc>系列が <codeph>initializeInterpolationData()</codeph> メソッドに渡したデータです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      補間構造内の欠損値を埋めます。 系列が <codeph>initializeInterpolationData()</codeph> メソッドを呼び出す場合、補間のためのソースと宛先の値の配列を渡します。 これらの 2 つの配列のいずれかが不完全である場合、系列は補間のための "適切な" プレースホルダーを提供する必要があります。 これらのプレースホルダーーが決定される方法は、系列のタイプに固有です。 系列エクステンダーは、このメソッドをオーバーライドして、これらのプレースホルダー値を提供する必要があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:styleChanged"><apiName>styleChanged</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateData"><apiName>updateData</apiName><shortdesc>
      
      このメソッドは、系列が表す基になるデータが変更され、データプロバイダーから再ロードする必要がある場合に呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      このメソッドは、系列が表す基になるデータが変更され、データプロバイダーから再ロードする必要がある場合に呼び出されます。 カスタム系列タイプを実装する場合、このメソッドをオーバーライドして、系列をレンダリングするのに必要なすべてのデータをそのデータプロバイダーからロードする必要があります。 さらに、<codeph>super.updateData()</codeph> メソッドは必ずサブクラス内で呼び出す必要があります。 通常、このメソッドは直接呼び出さないでください。 その代わりに、データが特定の時点で確実に更新されるようにするために、系列クラスの <codeph>validateData()</codeph> メソッドを呼び出してください。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateFilter"><apiName>updateFilter</apiName><shortdesc>
      
      系列が表す基になるデータに、関連するデータ変換の軸によって表される範囲に対するフィルターを適用する必要がある場合に呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      系列が表す基になるデータに、関連するデータ変換の軸によって表される範囲に対するフィルターを適用する必要がある場合に呼び出されます。 これは、基になるデータが変更されたか、関連する軸の範囲が変更されたことが原因で生じる場合があります。 カスタム系列タイプを実装する場合、このメソッドをオーバーライドし、関連するデータ変換によって管理される軸の <codeph>filterCache()</codeph> メソッドを使用して範囲外のデータを除外する必要があります。 <codeph>filterCache()</codeph> メソッドは、範囲外の値を <codeph>NaN</codeph> に変換します。 <codeph>super.updateFilter()</codeph> メソッドは必ずサブクラス内で呼び出す必要があります。 一般に、このメソッドは直接呼び出さないでください。 その代わり、指定された時点でデータにフィルターが確実に適用されるようにする必要がある場合、Series クラスの <codeph>validateTransform()</codeph> メソッドを呼び出します。 通常、必要な場合には、このメソッドの前に <codeph>updateData()</codeph> メソッドおよび <codeph>updateMapping()</codeph> メソッドが呼び出されていると想定できます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateMapping"><apiName>updateMapping</apiName><shortdesc>
      
      このメソッドは、系列が表す基になるデータを数値表現にマッピングする必要がある場合に呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      このメソッドは、系列が表す基になるデータを数値表現にマッピングする必要がある場合に呼び出されます。 これは、基になるデータが変更されたか、系列をレンダリングするのに使用された軸が何らかの方法で変更されたことが原因で生じる場合があります。 カスタム系列を実装する場合、このメソッドをオーバーライドし、表されているデータを、関連するデータ変換によって管理されている軸の <codeph>mapCache()</codeph> メソッドを使用して数値に変換する必要があります。 さらに、<codeph>super.updateMapping()</codeph> メソッドは必ずサブクラス内で呼び出す必要があります。 一般に、このメソッドは直接呼び出さないでください。 その代わりに、データが特定の時点で確実にマップされるようにするために、系列クラスの <codeph>validateData()</codeph> メソッドを呼び出してください。 通常、必要な場合には、このメソッドの前に <codeph>updateData()</codeph> メソッドが呼び出されていると想定できます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateTransform"><apiName>updateTransform</apiName><shortdesc>
      
      系列が表す基になるデータを、関連するデータ変換の軸によってスクリーン値に変換する必要がある場合に呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      系列が表す基になるデータを、関連するデータ変換の軸によってスクリーン値に変換する必要がある場合に呼び出されます。 これは、基になるデータが変更されたか、関連する軸の範囲が変更されたか、画面上の領域のサイズが変更されたことが原因で生じる場合があります。 カスタム系列タイプを実装する場合、このメソッドをオーバーライドして、関連するデータ変換の <codeph>transformCache()</codeph> メソッドを使用してデータを変換する必要があります。 <codeph>super.updateTransform()</codeph> メソッドは必ずサブクラス内で呼び出す必要があります。 一般に、このメソッドは直接呼び出さないでください。 その代わり、指定された時点でデータにフィルターが確実に適用されるようにする必要がある場合、Series クラスの <codeph>valiateTransform()</codeph> メソッドを呼び出します。 一般的に、必要な場合には、このメソッドの前に <codeph>updateData()</codeph> メソッド、<codeph>updateMapping()</codeph> メソッド、および <codeph>updateFilter()</codeph> メソッドが呼び出されていると想定できます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:BubbleSeries:RADIUS_AXIS"><apiName>RADIUS_AXIS</apiName><shortdesc>
      半径軸のタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bubbleRadius</apiData><apiType value="String"/></apiValueDef><apiDesc>
      半径軸のタイプです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:maxRadius"><apiName>maxRadius</apiName><shortdesc>
      この系列にレンダリングされる最大のアイテムの半径です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>50</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      この系列にレンダリングされる最大のアイテムの半径です。 BubbleChart の BubbleSeries オブジェクトを使用する場合、グラフはその <codeph>maxRadius</codeph> スタイル値を、グラフ内のすべての系列のこのプロパティに自動的に割り当てます。 CartesianChart コントロールの BubbleSeries オブジェクトを使用する場合、このプロパティを手動で管理します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:minRadius"><apiName>minRadius</apiName><shortdesc>
      この系列にレンダリングされる最小のアイテムの半径です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      この系列にレンダリングされる最小のアイテムの半径です。 BubbleChart の BubbleSeries オブジェクトを使用する場合、グラフはその <codeph>minRadius</codeph> スタイル値を、グラフ内のすべての系列のこのプロパティに自動的に割り当てます。 CartesianChart コントロールの BubbleSeries オブジェクトを使用する場合、このプロパティを手動で管理します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     系列内の現在のグラフアイテムの塗りを返すメソッドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     系列内の現在のグラフアイテムの塗りを返すメソッドを指定します。 このプロパティを設定すると、カスタムの塗り関数の戻り値は <codeph>fill</codeph> および <codeph>fills</codeph> の各スタイルプロパティよりも優先されます。 ただし null が返された場合は、<codeph>fills</codeph> および <codeph>fill</codeph> が、この順序で優先されます。  
     
     <p>カスタムの <codeph>fillFunction</codeph> には、次のシグネチャがあります。
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> は、レンダリング中のグラフアイテムへの参照です。 <codeph>index</codeph> は、renderData キャッシュのグラフアイテムのインデックスです。このインデックスは、x、y、z の値に基づいてソートされているので、グラフのデータプロバイダーのインデックスとは異なります。
     </p>
      
     <p>カスタマイズした <codeph>fillFunction</codeph> の使用方法の例としては、任意のしきい値に基づく塗りを返させることができます。</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:BubbleSeriesItem = BubbleSeriesItem(item);
          if (curItem.zNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
          <p>
      グラフ系列にカスタムの塗り関数を指定した場合に、Legend コントロールを使用するには、手動で Legend コントロールを作成してそれに LegendItems を追加する必要があります。
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      x 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      x 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。 LinearAxis クラスまたは CategoryAxis クラスのいずれかを使用すると、horizontalAxis のプロパティを MXML の子タグとして設定したり、ActionScript で LinearAxis オブジェクトまたは CategoryAxis オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      この系列が個々のアイテムを表現する場合に使用する ChartItem のサブタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      この系列が個々のアイテムを表現する場合に使用する ChartItem のサブタイプです。 アイテムにさらに情報を格納する必要がある場合には、サブクラスでオーバーライドし、さらに特化したクラスを返すことができます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:items:get"><apiName>items</apiName><shortdesc>
      
      フィルター適用後に系列内にあるすべてのアイテムを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      フィルター適用後に系列内にあるすべてのアイテムを取得します。
      <p>個々の系列によって、返されるアイテムのリストが決まります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:legendData:get"><apiName>legendData</apiName><shortdesc>
      
      この系列の凡例に示されるアイテムを記述した LegendData インスタンスの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      この系列の凡例に示されるアイテムを記述した LegendData インスタンスの配列です。 派生系列クラスはこの getter をオーバーライドするものであり、それぞれのクラスのスタイルおよびデータ表現メソッドに固有の凡例データを返します。 ほとんどの系列タイプが LegendData インスタンスを 1 つだけ返すのに対して、PieSeries や StackedSeries などの系列タイプのように、配列内の個別のアイテムを示す複数のインスタンスを返すものやいくつもの方法でデータをレンダリングするものもあります。   
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:radiusAxis:get"><apiName>radiusAxis</apiName><shortdesc>
      バブルの半径のマッピング対象である軸です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      バブルの半径のマッピング対象である軸です。 バブルグラフでは、個々のバブルのサイズがデータの 3 番目のサイズとして扱われ、x 方向と y 方向の位置の変換と同様の方法で変換されます。 デフォルトでは、<codeph>radiusAxis</codeph> は、<codeph>autoAdjust</codeph> プロパティが <codeph>false</codeph> に設定された LinearAxis です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:radiusField:get"><apiName>radiusField</apiName><shortdesc>
      グラフ内の他のデータポイントを基準にして各シンボルの半径を決定するデータプロバイダーのフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      グラフ内の他のデータポイントを基準にして各シンボルの半径を決定するデータプロバイダーのフィールドを指定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      この系列がレンダリングに必要な全データを格納する場合に使用する ChartRenderData のサブタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      この系列がレンダリングに必要な全データを格納する場合に使用する ChartRenderData のサブタイプです。 レンダリング用にさらに情報を格納する必要がある場合には、サブクラスでオーバーライドし、さらに特化したクラスを返すことができます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:protected:renderData:get"><apiName>renderData</apiName><shortdesc>
      
      この系列のレンダリングに必要な情報を格納します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      この系列のレンダリングに必要な情報を格納します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      y 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      y 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。 LinearAxis クラスまたは CategoryAxis クラスのいずれかを使用すると、verticalAxis のプロパティを MXML の子タグとして設定したり、ActionScript で LinearAxis オブジェクトまたは CategoryAxis オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:xField:get"><apiName>xField</apiName><shortdesc>
      各データポイントの x 軸の位置を決定するデータプロバイダーのフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      各データポイントの x 軸の位置を決定するデータプロバイダーのフィールドを指定します。 <codeph>null</codeph> の場合は、データポイントはデータプロバイダーに表示される順序でレンダリングされます。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:yField:get"><apiName>yField</apiName><shortdesc>
      各データポイントの y 軸の位置を決定するデータプロバイダーのフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      各データポイントの y 軸の位置を決定するデータプロバイダーのフィールドを指定します。 <codeph>null</codeph> の場合、BubbleSeries は dataProvider が数値の配列であると見なし、数値をデータポイントの値として使用します。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:CandlestickSeries"><apiName>CandlestickSeries</apiName><shortdesc>
  データ系列の高値、安値、始値、終値などの財務データを一連のローソク足で示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="Array">
<description>
  系列内の各アイテムの塗りを定義する塗りつぶしオブジェクトの配列を指定します。 これは <codeph>fill</codeph> スタイルプロパティよりも優先されます。 <codeph>fillFunction</codeph> プロパティでカスタムメソッドが指定されている場合は、それがこの配列よりも優先されます。 すべてのアイテムに十分な配列エレメントを用意しない場合、配列の最初から塗りが繰り返されます。
  
  <p>CSS を使用してこのプロパティの値を設定するには：
   <pre>
    CandlestickSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>MXML を使用してこのプロパティの値を設定するには：
   <pre>
    &lt;mx:CandlestickSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:CandlestickSeries>
   </pre>
  </p>
  
  <p>
  <codeph>fills</codeph> プロパティを指定した場合に、Legend コントロールを使用するには、手動で Legend コントロールを作成してそれに LegendItems を追加する必要があります。
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="declineFill" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  このデータ系列に対して、色が減少していく塗りを設定します。この塗りは、エレメントの終値が始値を下回るときに使用されます。 IFill インターフェイスを実装するオブジェクトか、単色のカラー値を表す数値を指定できます。 CSS を使用して単色の塗りを指定することもできます。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="boxStroke" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  系列の始値と終値の範囲を定義するボックスの輪郭に使用する線スタイルを設定します。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  このデータ系列の線スタイルを設定します。 線を定義するには、Stroke オブジェクトを指定する必要があります。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  このデータ系列の塗りを設定します。 IFill インターフェイスを実装するオブジェクトか、単色のカラー値を表す数値を指定できます。 CSS を使用して単色の塗りを指定することもできます。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ <p>
  The <code>&lt;mx:CandlestickSeries&gt;</code> tag inherits all the properties of its parent classes, and 
  the following properties:
  </p>
  <pre>
  &lt;mx:CandlestickSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
 
    <strong>Styles</strong>
    boxStroke="<i>IStroke; no default</i>"
    declineFill="<i>IFill; no default</i>"
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    stroke="<i>IStroke; no default</i>"  
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:HLOCSeriesBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  データ系列の高値、安値、始値、終値などの財務データを一連のローソク足で示します。 各ローソク足の垂直線の上部と下部は、データポイントの高値と安値を示しています。一方、塗りつぶされたボックスの上部と下部は始値と終値を示しています。 ローソク足の塗りつぶされ方は、データポイントの終値が始値よりも高いかどうかによって異なります。
   </apiDesc><example conref="CandlestickChartExample.mxml"><swfblock conref="../examples/CandlestickChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#CandlestickChart"><linktext>mx.charts.CandlestickChart</linktext></link></related-links><apiConstructor id="mx.charts.series:CandlestickSeries:CandlestickSeries"><apiName>CandlestickSeries</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:CandlestickSeries:findDataPoints"><apiName>findDataPoints</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Array"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>sensitivity</apiItemName><apiType value="Number"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:CandlestickSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     系列内の現在のグラフアイテムの塗りを返すメソッドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     系列内の現在のグラフアイテムの塗りを返すメソッドを指定します。 このプロパティを設定すると、カスタムの塗り関数の戻り値は <codeph>fill</codeph> および <codeph>fills</codeph> の各スタイルプロパティよりも優先されます。 ただし null が返された場合は、<codeph>fills</codeph> および <codeph>fill</codeph> が、この順序で優先されます。  
     
     <p>カスタムの <codeph>fillFunction</codeph> には、次のシグネチャがあります。
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> は、レンダリング中のグラフアイテムへの参照です。 <codeph>index</codeph> は、renderData キャッシュのグラフアイテムのインデックスです。このインデックスは、x、y、z の値に基づいてソートされているので、グラフのデータプロバイダーのインデックスとは異なります。この関数は、<codeph>IFill</codeph> インターフェイスを実装するオブジェクトを返します。
     </p>
      
     <p>カスタマイズした <codeph>fillFunction</codeph> の使用方法の例としては、任意のしきい値に基づく塗りを返させることができます。</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:HLOCSeriesItem = HLOCSeriesItem(item);
          if (curItem.closeNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
       
     <p>
      グラフ系列にカスタムの塗り関数を指定した場合に、Legend コントロールを使用するには、手動で Legend コントロールを作成してそれに LegendItems を追加する必要があります。
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:CandlestickSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:AreaSet"><apiName>AreaSet</apiName><shortdesc>
  グラフ内の AreaSeries オブジェクトを積み重ねるのに使用できるグループ化セットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="series"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:StackedSeries</apiBaseClassifier></apiClassifierDef><apiDesc>
  グラフ内の AreaSeries オブジェクトを積み重ねるのに使用できるグループ化セットです。 AreaSet は AreaChart コントロールで使用されているのと同じ積み重ね動作をカプセル化しているものの、AreaSet では CartesianChart クラスに基づいてカスタムグラフを構成できます。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.series:AreaSet:AreaSet"><apiName>AreaSet</apiName><shortdesc>
	  コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  コンストラクターです。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.charts.series:PlotSeries"><apiName>PlotSeries</apiName><shortdesc>
  PlotChart コントロールのデータ系列を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="radius" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="Number">
<description> 
  各データポイントのグラフエレメントの半径をピクセル単位で指定します。 デフォルトでは、PlotChart コントロールによって各データポイントに円が描画されます。 このプロパティは MXML で、またはスタイルを使用して設定できます。 デフォルト値は <codeph>5</codeph> ピクセルです。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="Array">
<description>
  系列内の各アイテムの塗りを定義する塗りつぶしオブジェクトの配列を指定します。 これは <codeph>fill</codeph> スタイルプロパティよりも優先されます。 <codeph>fillFunction</codeph> プロパティでカスタムメソッドが指定されている場合は、それがこの配列よりも優先されます。 すべてのアイテムに十分な配列エレメントを用意しない場合、配列の最初から塗りが繰り返されます。
  
  <p>CSS を使用してこのプロパティの値を設定するには：
   <pre>
    PlotSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>MXML を使用してこのプロパティの値を設定するには：
   <pre>
    &lt;mx:PlotSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:PlotSeries>
   </pre>
  </p>
  
  <p>
  <codeph>fills</codeph> プロパティを指定した場合に、Legend コントロールを使用するには、手動で Legend コントロールを作成してそれに LegendItems を追加する必要があります。
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="adjustedRadius" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="Number">
<description>
  グラフアイテムの半径をハイライト表示または選択したときに、増加させるピクセル数を指定します。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列が、関連する凡例にマーカーをレンダリングする場合に使用するクラスです。 このスタイルが <codeph>null</codeph> の場合、ほとんどの系列ではデフォルトで itemRenderer が凡例マーカースキンとして使用されます。 凡例マーカーとして使用するクラスには、IFlexDisplayObject インターフェイスを実装する必要があるだけでなく、オプションで ISimpleStyleClient インターフェイスおよび IDataRenderer インターフェイスを実装することもできます。 凡例マーカーとして使用するクラスに IDataRenderer インターフェイスを実装すると、データプロパティに LegendData インスタンスが割り当てられます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列がグラフに個々のアイテムを表現する場合に使用するクラスとなるファクトリです。 このクラスは、グラフ内のエレメントごとに 1 回インスタンス化されます。 itemRenderer として使用するクラスには、IFlexDisplayObject、ISimpleStyleClient、IDataRenderer の各インターフェイスを実装する必要があります。 <codeph>data</codeph> プロパティには、スキンインスタンスがレンダリングする chartItem が割り当てられます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  このデータ系列の線スタイルを設定します。 線を定義するには、Stroke オブジェクトを指定する必要があります。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  このデータ系列の塗りを設定します。 IFill インターフェイスを実装するオブジェクトか、単色のカラー値を表す数値を指定できます。 CSS を使用して単色の塗りを指定することもできます。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;mx:PlotSeries&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:</p>
  
  <pre>
  &lt;mx:PlotSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    verticalAxis="<i>No default</i>"
    xField="null"
    yField="null"
 
    <strong>Styles</strong>
    adjustedRadius="2"
    fill="0xFFFFFF"
    fills="<i>IFill; no default</i>"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    radius="5"
    stroke="<i>IStroke; no default</i>" 
  /&gt;
  </pre>
  </p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  PlotChart コントロールのデータ系列を定義します。 PlotChart コントロールのデフォルトのアイテムレンダラーは、DiamondItemRenderer クラスです。 オプションでデータ系列のアイテムレンダラーも定義できます。 アイテムレンダラーには、IDataRenderer インターフェイスを実装する必要があります。 
   </apiDesc><example conref="PlotChartExample.mxml"><swfblock conref="../examples/PlotChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#PlotChart"><linktext>mx.charts.PlotChart</linktext></link><link href="mx.charts.renderers.xml#DiamondItemRenderer"><linktext>mx.charts.renderers.DiamondItemRenderer</linktext></link></related-links><apiConstructor id="mx.charts.series:PlotSeries:PlotSeries"><apiName>PlotSeries</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:PlotSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      グラフを表すのに使用されるアイテムレンダラーインスタンスをカスタマイズします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>作成される新しいアイテムレンダラーインスタンスです。
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>アイテムレンダラーインスタンスを管理するために使用される InstanceCache です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      グラフを表すのに使用されるアイテムレンダラーインスタンスをカスタマイズします。 このメソッドは、グラフのレンダリング中に新しいアイテムレンダラーが必要とされる場合、常に自動的に呼び出されます。 必要に応じて独自のカスタマイズを加えるために、このメソッドをオーバーライドできます。
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PlotSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:PlotSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     系列内の現在のグラフアイテムの塗りを返すメソッドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     系列内の現在のグラフアイテムの塗りを返すメソッドを指定します。 このプロパティを設定すると、カスタムの塗り関数の戻り値は <codeph>fill</codeph> および <codeph>fills</codeph> の各スタイルプロパティよりも優先されます。 ただし null が返された場合は、<codeph>fills</codeph> および <codeph>fill</codeph> が、この順序で優先されます。  
     
     <p>カスタムの <codeph>fillFunction</codeph> には、次のシグネチャがあります。
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> は、レンダリング中のグラフアイテムへの参照です。 <codeph>index</codeph> は、renderData キャッシュのグラフアイテムのインデックスです。このインデックスは、x、y、z の値に基づいてソートされているので、グラフのデータプロバイダーのインデックスとは異なります。この関数は、<codeph>IFill</codeph> インターフェイスを実装するオブジェクトを返します。
     </p>
      
     <p>カスタマイズした <codeph>fillFunction</codeph> の使用方法の例としては、任意のしきい値に基づく塗りを返させることができます。</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:PlotSeriesItem = PlotSeriesItem(item);
          if (curItem.yNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
       
     <p>
      グラフ系列にカスタムの塗り関数を指定した場合に、Legend コントロールを使用するには、手動で Legend コントロールを作成してそれに LegendItems を追加する必要があります。
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      x 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      x 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。 LinearAxis クラスまたは CategoryAxis クラスのいずれかを使用すると、horizontalAxis のプロパティを MXML の子タグとして設定したり、ActionScript で LinearAxis オブジェクトまたは CategoryAxis オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      この系列が個々のアイテムを表現する場合に使用する ChartItem のサブタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      この系列が個々のアイテムを表現する場合に使用する ChartItem のサブタイプです。 アイテムにさらに情報を格納する必要がある場合には、サブクラスでオーバーライドし、さらに特化したクラスを返すことができます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:items:get"><apiName>items</apiName><shortdesc>
      
      フィルター適用後に系列内にあるすべてのアイテムを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      フィルター適用後に系列内にあるすべてのアイテムを取得します。
      <p>個々の系列によって、返されるアイテムのリストが決まります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      この系列がレンダリングに必要な全データを格納する場合に使用する ChartRenderData のサブタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      この系列がレンダリングに必要な全データを格納する場合に使用する ChartRenderData のサブタイプです。 レンダリング用にさらに情報を格納する必要がある場合には、サブクラスでオーバーライドし、さらに特化したクラスを返すことができます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:protected:renderData:get"><apiName>renderData</apiName><shortdesc>
      この系列がレンダリングに必要な全データを格納する場合に使用する ChartRenderData のサブタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      この系列がレンダリングに必要な全データを格納する場合に使用する ChartRenderData のサブタイプです。 レンダリング用にさらに情報を格納する必要がある場合には、サブクラスでオーバーライドし、さらに特化したクラスを返すことができます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      y 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      y 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。 LinearAxis クラスまたは CategoryAxis クラスのいずれかを使用すると、verticalAxis のプロパティを MXML の子タグとして設定したり、ActionScript で LinearAxis オブジェクトまたは CategoryAxis オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:xField:get"><apiName>xField</apiName><shortdesc>
      各データポイントの x 軸の位置を決定するデータプロバイダーのフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      各データポイントの x 軸の位置を決定するデータプロバイダーのフィールドを指定します。 <codeph>null</codeph> の場合、データポイントは dataProvider に表示される順序でレンダリングされます。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:yField:get"><apiName>yField</apiName><shortdesc>
      各データポイントの y 軸の位置を決定するデータプロバイダーのフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      各データポイントの y 軸の位置を決定するデータプロバイダーのフィールドを指定します。 <codeph>null</codeph> の場合、PlotSeries はデータプロバイダーが数値の配列であると見なし、数値を値として使用します。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:ColumnSeries"><apiName>ColumnSeries</apiName><shortdesc>
  ColumnChart コントロールのデータ系列を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="labelSizeLimit" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  フォントサイズのしきい値をポイントで指定します。これ以下のサイズのラベルは判読不能と見なされます。 このしきい値を下回ったラベルは切り捨てられます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,outside,inside" inherit="no" name="labelPosition" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
 ラベルの位置を指定します。可能な値は、<codeph>none</codeph>、<codeph>outside</codeph>、および <codeph>inside</codeph> です。
 
 </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="labelClass" owner="mx.charts.series:ColumnSeries" playerVersion="Flash10.2" type="Class">
<description>
  このコンポーネントがラベルをレンダリングするために使用するクラス。
   <p>mx.controls.Label クラスまたは spark.components.Label クラスのどちらかに設定できます。</p>
   </description>
<default>spark.components.Label
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,center,bottom" inherit="no" name="labelAlign" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
 ラベルの整列設定を指定します。 labelPosition が <codeph>inside</codeph> で、ラベルが縦に表示される場合のみ考慮されます。可能な値は、<codeph>center</codeph>、<codeph>top</codeph> および <codeph>bottom</codeph> です。
 
 </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Array">
<description>
  系列内の各アイテムの塗りを定義する塗りつぶしオブジェクトの配列を指定します。 これは <codeph>fill</codeph> スタイルプロパティよりも優先されます。 <codeph>fillFunction</codeph> プロパティでカスタムメソッドが指定されている場合は、それがこの配列よりも優先されます。 すべてのアイテムに十分な配列エレメントを用意しない場合、配列の最初から塗りが繰り返されます。
  
  <p>CSS を使用してこのプロパティの値を設定するには：
   <pre>
    ColumnSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>MXML を使用してこのプロパティの値を設定するには：
   <pre>
    &lt;mx:ColumnSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:ColumnSeries>
   </pre>
  </p>
  
  <p>
  <codeph>fills</codeph> プロパティを指定した場合に、Legend コントロールを使用するには、手動で Legend コントロールを作成してそれに LegendItems を追加する必要があります。
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセット（ピクセル単位）です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 可能な値は、<codeph>"none"</codeph> および <codeph>"underline"</codeph> です。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  コンテナ内のテキストの整列。 可能な値は <codeph>"left"</codeph>、<codeph>"right"</codeph>、または <codeph>"center"</codeph> です。
 
  <p>ほとんどのコントロールのデフォルト値は <codeph>left</codeph> です。 Button、LinkButton、および AccordionHeader コンポーネントの場合、デフォルト値は <codeph>"center"</codeph> です。 これらのコンポーネントでは、このプロパティは <codeph>labelPlacement</codeph> プロパティが <codeph>"left"</codeph> または <codeph>"right"</codeph> に設定されている場合にのみ認識されます。 <codeph>labelPlacement</codeph> が <codeph>"top"</codeph> または <codeph>"bottom"</codeph> に設定されている場合は、テキストおよびアイコンが中央に配置されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  各文字間に表示される追加のピクセル数。 正の値を指定すると文字間隔が通常より広くなり、負の値を指定すると文字間隔が通常より狭くなります。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Boolean">
<description>
  カーニングが有効（<codeph>true</codeph>) か無効（<codeph>false</codeph>）かを示すブール値です。カーニングでは、読みやすくするために、特定の文字ペア間の間隔を調整します。ただし、カーニングは見出しを大きなフォントにする場合など、必要な場合に限って使用してください。 カーニングは、埋め込み FlashType フォントに対してのみサポートされています。 Verdana や、Courier New などの等幅フォントなど、特定のフォントではカーニングはサポートされていません。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"bold"</codeph> です。 LegendItem のデフォルトは <codeph>"bold"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>thickness</codeph> プロパティを設定します。 このプロパティは字形のエッジの太さを指定します。 可能な値は -200 から 200 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルは、システムフォントには影響を与えません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"italic"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 ColorPicker コントロール以外のすべてのコントロールのデフォルト値は 10 です。 ColorPicker コントロールのデフォルト値は 11 です。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>sharpness</codeph> プロパティを設定します。 このプロパティは字形のエッジのシャープネスを指定します。 可能な値は -400 から 400 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>gridFitType</codeph> プロパティを設定します。 可能な値は、<codeph>"none"</codeph>（<codeph>flash.text.GridFitType.NONE</codeph>）、<codeph>"pixel"</codeph>（<codeph>flash.text.GridFitType.PIXEL</codeph>）、および <codeph>"subpixel"</codeph>（<codeph>flash.text.GridFitType.SUBPIXEL</codeph>）です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  使用するフォントの名前です。 完全な CSS 実装と異なり、カンマ区切りリストはサポートされません。 任意のフォントファミリ名を使用できます。 汎用フォント名を指定した場合、適切なデバイスフォントに置換されます。
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  内部 TextField の <codeph>antiAliasType</codeph> プロパティを設定します。 可能な値は、<codeph>"normal"</codeph>（<codeph>flash.text.AntiAliasType.NORMAL</codeph>）および <codeph>"advanced"</codeph>（<codeph>flash.text.AntiAliasType.ADVANCED</codeph>）です。 
  
  <p>デフォルト値は <codeph>"advanced"</codeph> です。この場合、埋め込み FlashType フォントを使用していれば FlashType レンダラーが有効になります。 FlashType レンダラーを無効にするには、<codeph>"normal"</codeph> に設定してください。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
  
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="uint">
<description>
  コンポーネントが無効な場合のテキストの色です。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="uint">
<description>
  コンポーネントのラベルを含めたコンポーネント内のテキストの色です。
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列が、関連する凡例にマーカーをレンダリングする場合に使用するクラスです。 このスタイルが <codeph>null</codeph> の場合、ほとんどの系列ではデフォルトで itemRenderer が凡例マーカースキンとして使用されます。 凡例マーカーとして使用するクラスには、IFlexDisplayObject インターフェイスを実装する必要があるだけでなく、オプションで ISimpleStyleClient インターフェイスおよび IDataRenderer インターフェイスを実装することもできます。 凡例マーカーとして使用するクラスに IDataRenderer インターフェイスを実装すると、データプロパティに LegendData インスタンスが割り当てられます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列がグラフに個々のアイテムを表現する場合に使用するクラスとなるファクトリです。 このクラスは、グラフ内のエレメントごとに 1 回インスタンス化されます。 itemRenderer として使用するクラスには、IFlexDisplayObject、ISimpleStyleClient、IDataRenderer の各インターフェイスを実装する必要があります。 <codeph>data</codeph> プロパティには、スキンインスタンスがレンダリングする chartItem が割り当てられます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  このデータ系列の線スタイルを設定します。 線を定義するには、Stroke オブジェクトを指定する必要があります。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  このデータ系列の塗りを設定します。 IFill インターフェイスを実装するオブジェクトか、単色のカラー値を表す数値を指定できます。 CSS を使用して単色の塗りを指定することもできます。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ <p>
  The <code>&lt;mx:ColumnSeries&gt;</code> tag inherits all the properties of its parent classes, and 
  the following properties:
  </p>
  <pre>
  &lt;mx:ColumnSeries
    <strong>Properties</strong>
    columnWidthRatio=".65"
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    labelField="<i>No default</i>"
    labelFunction="<i>No default</i>"
    legendData="<i>No default</i>"
    maxColumnWidth="<i>No default</i>"
    minField="null"
    offset="<i>No default</i>"
    sortOnXField="false|true"
    stacker="<i>No default</i>"
    stackTotals="<i>No default</i>"
    verticalAxis="<i>No default</i>"
    xField="null"
    yField="null"
 
    
    <strong>Styles</strong>
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    fontFamily="Verdana"
    fontSize="10"
    fontStyle="italic|normal"
    fontWeight="bold|normal"
    labelAlign="center|left|right"
    labelPosition="none|inside|outside"
    labelSizeLimit="9"
    itemRenderer="<i>BoxItemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    stroke="<i>Stroke; no default</i>"
    textDecoration="underline|none"
  /&gt;
  </pre>
  </p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IColumn</apiBaseInterface><apiBaseInterface>mx.charts.chartClasses:IStackable2</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  ColumnChart コントロールのデータ系列を定義します。 デフォルトでは、このクラスは BoxItemRenderer クラスを使用します。 オプションでデータ系列のカスタム itemRenderer も定義できます。カスタム itemRenderer には、IDataRenderer インターフェイスを実装する必要があります。 
   </apiDesc><example conref="Column_BarChartExample.mxml"><swfblock conref="../examples/Column_BarChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#ColumnChart"><linktext>mx.charts.ColumnChart</linktext></link></related-links><apiConstructor id="mx.charts.series:ColumnSeries:ColumnSeries"><apiName>ColumnSeries</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:ColumnSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      グラフを表すのに使用されるアイテムレンダラーインスタンスをカスタマイズします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>作成される新しいアイテムレンダラーインスタンスです。
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>アイテムレンダラーインスタンスを管理するために使用される InstanceCache です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      グラフを表すのに使用されるアイテムレンダラーインスタンスをカスタマイズします。 このメソッドは、グラフのレンダリング中に新しいアイテムレンダラーが必要とされる場合、常に自動的に呼び出されます。 必要に応じて独自のカスタマイズを加えるために、このメソッドをオーバーライドできます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      
      データプロバイダー内の基になるデータが変更されたことを系列に通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>このメソッドが更新メソッドへの呼び出しをトリガーする場合は <codeph>true</codeph> になります。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      データプロバイダー内の基になるデータが変更されたことを系列に通知します。 この関数によって、<codeph>updateData()</codeph>、<codeph>updateMapping()</codeph>、<codeph>updateFilter()</codeph>、および <codeph>updateTransform()</codeph> メソッドの呼び出しが、次回の <codeph>commitProperties()</codeph> メソッドの呼び出し時にトリガーされます。 グラフのエレメントに割り当てられているデータエフェクトがある場合は、このメソッドによって表示エフェクトと非表示エフェクトもトリガーされます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:protected:invalidateMapping"><apiName>invalidateMapping</apiName><shortdesc>
      
      数値へのデータのマッピングが変更されたため、再計算が必要であることを系列に通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>このメソッドが更新メソッドへの呼び出しをトリガーする場合は <codeph>true</codeph> になります。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      数値へのデータのマッピングが変更されたため、再計算が必要であることを系列に通知します。 この関数を呼び出すと、<codeph>updateMapping()</codeph>、<codeph>updateFilter()</codeph>、および <codeph>updateTransform()</codeph> メソッドの呼び出しが、次回の <codeph>commitProperties()</codeph> メソッドの呼び出し時にトリガーされます。 グラフのエレメントに割り当てられているデータエフェクトがある場合は、このメソッドによって表示エフェクトと非表示エフェクトもトリガーされます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:stackAll"><apiName>stackAll</apiName><shortdesc>
      
  系列を積み重ねます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>新たに積み重ねる系列の最大値および最小値を表すオブジェクトです。	 
  
  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>stackedPosXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>系列が積み重ねられる基本値が含まれます。 辞書のキーは x 値で、値は正の x 値です。
 
  </apiDesc></apiParam><apiParam><apiItemName>stackedNegXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>系列が積み重ねられる基本値が含まれます。 辞書のキーは x 値で、値は負の y 値です。
  
  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable2</apiOperationClassifier><apiDesc>積み重ねの中の直前のエレメントです。 例えば、同じ型のエレメントの場合は、このプロパティへのアクセスを使用することにより、レンダリング時に同じ処理を繰り返す必要を回避できます。
  
  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
  系列を積み重ねます。 通常、系列はデータプロバイダーからデータをロードするため <codeph>updateData()</codeph> 関数を実装しています。 ただし、積み重ね系列では、必ずしもデータプロバイダーに値が格納されているとは限らないため、特殊な操作が実行されます。 その値は、データプロバイダーに何が格納されていても、積み重ねられる側のオブジェクトによってロードされた値と合算したものになります。
  <p>カスタム積み重ね系列には、<codeph>stack()</codeph> メソッドを実装してください。データプロバイダーからデータをロードし、レンダリング対象の実値が取得される辞書内の基本値にそのデータを追加し、合算後の新しい値で辞書内の値を置き換えます。</p>
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:stack"><apiName>stack</apiName><shortdesc>
     
	  系列を積み重ねます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>新たに積み重ねる系列の最大値です。	 
	  
	  </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>stackedXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>系列が積み重ねられる基本値が含まれます。 辞書のキーは y 値で、値は x 値です。
	  
	  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable</apiOperationClassifier><apiDesc>積み重ねの中の直前のエレメントです。 例えば、同じ型のエレメントの場合は、このプロパティへのアクセスを使用することにより、レンダリング時に同じ処理を繰り返す必要を回避できます。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
     
	  系列を積み重ねます。 通常、系列はデータプロバイダーからデータをロードするため <codeph>updateData()</codeph> 関数を実装しています。 ただし、積み重ね系列では、必ずしもデータプロバイダーに値が格納されているとは限らないため、特殊な操作が実行されます。 その値は、データプロバイダーに何が格納されていても、積み重ねられる側のオブジェクトによってロードされた値と合算したものになります。
	  <p>カスタム積み重ね系列には、<codeph>stack()</codeph> メソッドを実装してください。データプロバイダーからデータをロードし、レンダリング対象の実値が取得される辞書内の基本値にそのデータを追加し、合算後の新しい値で辞書内の値を置き換えます。</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:ColumnSeries:columnWidthRatio:get"><apiName>columnWidthRatio</apiName><shortdesc>
      カテゴリの幅を基準にして縦棒の幅を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.65
      
      </apiDefaultValue></apiValueDef><apiDesc>
      カテゴリの幅を基準にして縦棒の幅を指定します。 値が 1 の場合は領域全体が使用され、.6 の場合は縦棒の使用可能領域の 60% が使用されます。 通常、このプロパティを直接設定することはありません。 実際の縦棒の幅には、<codeph>columnWidthRatio</codeph> プロパティと <codeph>maxColumnWidth</codeph> プロパティの値のうち、小さい方が使用されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     系列内の現在のグラフアイテムの塗りを返すメソッドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     系列内の現在のグラフアイテムの塗りを返すメソッドを指定します。 このプロパティを設定すると、カスタムの塗り関数の戻り値は <codeph>fill</codeph> および <codeph>fills</codeph> の各スタイルプロパティよりも優先されます。 ただし null が返された場合は、<codeph>fills</codeph> および <codeph>fill</codeph> が、この順序で優先されます。  
     
     <p>カスタムの <codeph>fillFunction</codeph> には、次のシグネチャがあります。
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> は、レンダリング中のグラフアイテムへの参照です。 <codeph>index</codeph> は、renderData キャッシュのグラフアイテムのインデックスです。このインデックスは、x、y、z の値に基づいてソートされているので、グラフのデータプロバイダーのインデックスとは異なります。この関数は、<codeph>IFill</codeph> インターフェイスを実装するオブジェクトを返します。
     </p>
      
     <p>カスタマイズした <codeph>fillFunction</codeph> の使用方法の例としては、任意のしきい値に基づく塗りを返させることができます。</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:ColumnSeriesItem = ColumnSeriesItem(item);
          if (curItem.yNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
          <p>
      グラフ系列にカスタムの塗り関数を指定した場合に、Legend コントロールを使用するには、手動で Legend コントロールを作成してそれに LegendItems を追加する必要があります。
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      x 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      x 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。 LinearAxis クラスまたは CategoryAxis クラスのいずれかを使用すると、horizontalAxis のプロパティを MXML の子タグとして設定したり、ActionScript で LinearAxis オブジェクトまたは CategoryAxis オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      この系列が個々のアイテムを表現する場合に使用する ChartItem のサブタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      この系列が個々のアイテムを表現する場合に使用する ChartItem のサブタイプです。 アイテムにさらに情報を格納する必要がある場合には、サブクラスでオーバーライドし、さらに特化したクラスを返すことができます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:items:get"><apiName>items</apiName><shortdesc>
      
      フィルター適用後に系列内にあるすべてのアイテムを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      フィルター適用後に系列内にあるすべてのアイテムを取得します。
      <p>個々の系列によって、返されるアイテムのリストが決まります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:labelField:get"><apiName>labelField</apiName><shortdesc>
     値がラベルとして表示される、データプロバイダー内のフィールドの名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
     値がラベルとして表示される、データプロバイダー内のフィールドの名前です。 このプロパティは、<codeph>labelFunction</codeph> プロパティが指定されている場合は無視されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Series の各ラベルのレンダリングに使用されるコールバック関数を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Series の各ラベルのレンダリングに使用されるコールバック関数を指定します。 labelFunction には次のシグネチャが必要です。
          <pre>
     function <i>function_name</i>(<i>element</i>:ChartItem, <i>series</i>:Series):String { ... }
     </pre>
     
     <codeph><i>element</i></codeph> は、レンダリング中のグラフアイテムです。 <codeph><i>series</i></codeph> は、グラフアイテムが属する系列です。 返されるストリングは、現在のアイテムのラベルです。
          <p>カスタマイズした labelFunction の使用法の例としては、次のようなものがあります。</p>
     <pre>
     private function myLabelFunction(element:ChartItem, series:Series):String {
          var item:ColumnSeriesItem = ColumnSeriesItem(element);
          var ser:ColumnSeries = ColumnSeries(series);
          return(item.item.Country + ":" +"" + ser.yField.toString() +":"+ item.yNumber);
     }
     </pre>
           
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:maxColumnWidth:get"><apiName>maxColumnWidth</apiName><shortdesc>
      縦棒の幅をピクセル単位で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      縦棒の幅をピクセル単位で指定します。 実際の縦棒の幅には、このスタイルと <codeph>columnWidthRatio</codeph> プロパティの値のうち小さい方が使用されます。 集合縦棒グラフの場合、この領域が各集合内の縦棒によって均等に分割されます。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:minField:get"><apiName>minField</apiName><shortdesc>
      縦棒下端の y 軸の位置を決定するデータプロバイダーのフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      縦棒下端の y 軸の位置を決定するデータプロバイダーのフィールドを指定します。 <codeph>null</codeph> の場合、縦棒の基底は範囲の最小値（フィールド値が負の場合は最大値）になります。 デフォルト値は <codeph>null</codeph> です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:offset:get"><apiName>offset</apiName><shortdesc>
      使用可能な領域の中心から縦棒の中心をずらす度合いを、カテゴリの幅に対する割合で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      使用可能な領域の中心から縦棒の中心をずらす度合いを、カテゴリの幅に対する割合で指定します。 デフォルト値の 0 では、縦棒は領域の中央に配置されます。 このプロパティの値を -50 に設定すると、縦棒は使用可能な領域の開始位置の中央に配置されます。 通常、このプロパティを直接設定することはありません。 この値は、ColumnChart コントロールが <codeph>columnWidthRatio</codeph> プロパティに基づいて管理します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      この系列がレンダリングに必要な全データを格納する場合に使用する ChartRenderData のサブタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      この系列がレンダリングに必要な全データを格納する場合に使用する ChartRenderData のサブタイプです。 レンダリング用にさらに情報を格納する必要がある場合には、サブクラスでオーバーライドし、さらに特化したクラスを返すことができます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:sortOnXField:get"><apiName>sortOnXField</apiName><shortdesc> 
      レンダリングの前に縦棒を左から右にソートするよう要求します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      レンダリングの前に縦棒を左から右にソートするよう要求します。 デフォルトでは、ColumnSeries はデータプロバイダーに表示される順序で縦棒をレンダリングします。 
      
      <p><codeph>xField</codeph> プロパティを使用して各縦棒の位置を決定すると、異なる順序で画面上に表示されることがあります。 縦棒は、任意の順序でレンダリングできます。 ただし、一部のカスタムの縦棒は、左から右へレンダリングされる縦棒に依存していることがあります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:stacker:get"><apiName>stacker</apiName><shortdesc>
      この BarSeries に関連付けられた StackedSeries です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:StackedSeries</apiValueClassifier></apiValueDef><apiDesc>
      この BarSeries に関連付けられた StackedSeries です。 このスタッカーによって、系列の積み重ね動作が管理されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      y 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      y 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。 LinearAxis クラスまたは CategoryAxis クラスのいずれかを使用すると、verticalAxis のプロパティを MXML の子タグとして設定したり、ActionScript で LinearAxis オブジェクトまたは CategoryAxis オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:xField:get"><apiName>xField</apiName><shortdesc>
      縦棒の x 軸の位置を決定するデータプロバイダーのフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      縦棒の x 軸の位置を決定するデータプロバイダーのフィールドを指定します。 <codeph>null</codeph> の場合、縦棒はデータプロバイダーに表示される順序でレンダリングされます。 デフォルト値は <codeph>null</codeph> です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:yField:get"><apiName>yField</apiName><shortdesc>
      縦棒上端の y 軸の位置を決定するデータプロバイダーのフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      縦棒上端の y 軸の位置を決定するデータプロバイダーのフィールドを指定します。 <codeph>null</codeph> の場合、ColumnSeries はデータプロバイダーが数値の配列であると見なし、数値を値として使用します。 デフォルト値は <codeph>null</codeph> です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.charts.series:ColumnSeries:stackTotals:set"><apiName>stackTotals</apiName><shortdesc>
      系列の積み重ねの総計です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      系列の積み重ねの総計です。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.series:ColumnSet"><apiName>ColumnSet</apiName><shortdesc>
  ColumnSet は、グラフの種類を問わず縦棒系列の積み重ねや集合に使用できるグループ化セットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="series"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IColumn</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:StackedSeries</apiBaseClassifier></apiClassifierDef><apiDesc>
  ColumnSet は、グラフの種類を問わず縦棒系列の積み重ねや集合に使用できるグループ化セットです。 ColumnChart と同じグループ化動作をカプセル化しているものの、ColumnSet では CartesianChart に基づいてカスタムグラフを構成できます。 ColumnSet を使用すると、IColumn インターフェイスを実装したどのグラフエレメントタイプでも集合させることができます。 また、IColumn インターフェイスおよび IStackable インターフェイスを実装したどのグラフエレメントタイプでも積み重ねることができます。 ColumnSet 自体が IColumn インターフェイスを実装しているため、ColumnSet を使用して他の ColumnSet をいくつか集合させて、さらに高度なカスタムグラフを構築できます。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.series:ColumnSet:ColumnSet"><apiName>ColumnSet</apiName><shortdesc>
	 コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	 コンストラクターです。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:ColumnSet:protected:buildSubSeries"><apiName>buildSubSeries</apiName><shortdesc> 
	  
      サブ系列の配列を表示する必要がある場合は、そのための処理を実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
	  
      サブ系列の配列を表示する必要がある場合は、そのための処理を実行します。 このメソッドでは、すべてのサブ系列がこの積み重ねセットの子として確実に追加され、必要な系列ごとのカスタマイズ（例えば、継承されたデータプロバイダーの割り当て、プロパティの集合）が適用されます。
      <p>また、このメソッドは、系列が変更されたこと、そして結果的に暗黙的な系列スタイルが再度割り当てられる必要があることをグラフに通知する役割も担います。 このメソッドは、必要に応じて積み重ねセットから自動的に呼び出されます。 この関数を直接呼び出すのではなく、<codeph>invalidateSeries()</codeph> メソッドの呼び出しを検討してください。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSet:protected:customizeSeries"><apiName>customizeSeries</apiName><shortdesc>
	   
      積み重ねビヘイビアーの構築時に何らかのカスタマイズをサブ系列に適用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>glyph</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IChartElement</apiOperationClassifier><apiDesc>カスタマイズするグラフエレメントです。
      
      </apiDesc></apiParam><apiParam><apiItemName>i</apiItemName><apiType value="uint"/><apiDesc>系列配列内のサブ系列の位置です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	   
      積み重ねビヘイビアーの構築時に何らかのカスタマイズをサブ系列に適用します。 デフォルトでは、継承されたデータプロバイダーがこのメソッドによりサブ系列に割り当てられます。 派生クラスでは、このメソッドをオーバーライドして追加のカスタマイズを適用することができます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSet:describeData"><apiName>describeData</apiName><shortdesc>
	  
      
      この IChartElement で表されるデータの記述を取得するために、管理する DataTransform によって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>表示されるデータを記述する DataDescription インスタンスを含む Array です。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>データの記述を取得する軸を特定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>特定の軸で管理される DataDescription オブジェクトの値を示すビットフィールドです。 インプリメンタによって必要なフィールドを計算する方法でのみ最適化できます。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      
      この IChartElement で表されるデータの記述を取得するために、管理する DataTransform によって呼び出されます。 インプリメンタによって mx.charts.chartClasses.DataDescription オブジェクトの配列が入力されて返され、表示データ（minimum、maximum、interval、unitSize など）から値を自動生成するすべての軸に沿ってこれらのデータが正確に記述されることが保証されます。 ほとんどのエレメントタイプでは、1 つの DataDescription を含む配列が返されます。 BarSet や ColumnSet などのエレメントを集約します。それらのサブエレメントによって表示されるデータを記述する複数の DataDescription インスタンスを返すことがあります。 呼び出されると、インプリメンタによって <codeph>dimension</codeph> パラメーターで指定された軸に沿ってデータが記述されます。 この関数は、グラフによってサポートされる軸ごとに呼び出される場合があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSet:protected:formatDataTip"><apiName>formatDataTip</apiName><shortdesc>
	  
      DataTip オブジェクトに対してカスタムテキストを提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>DataTip のカスタムテキストです。デフォルトは空のストリングです。カスタムの DataTip を提供するには、このメソッドをオーバーライドする必要があります。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>hd</apiItemName><apiOperationClassifier>mx.charts:HitData</apiOperationClassifier><apiDesc>積み重ねの中の hitData オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      DataTip オブジェクトに対してカスタムテキストを提供します。積み重ねセットでは、それに含まれるサブ系列のデータヒントテキストを上書きして、積み重ねビヘイビアーに関する詳細情報を表示します。 派生クラスでは、このメソッドをオーバーライドしてカスタムのデータヒントテキストを定義する必要があります。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:ColumnSet:columnWidthRatio:get"><apiName>columnWidthRatio</apiName><shortdesc>
	  カテゴリの幅を基準にして縦棒の幅を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.65
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  カテゴリの幅を基準にして縦棒の幅を指定します。 値が <codeph>1</codeph> の場合は領域全体が使用され、<codeph>0.6</codeph> の場合は縦棒の使用可能領域の 60% が使用されます。 通常、このプロパティを直接設定することはありません。 実際の縦棒の幅には、<codeph>columnWidthRatio</codeph> プロパティと <codeph>maxColumnWidth</codeph> プロパティの値のうち、小さい方が使用されます。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSet:maxColumnWidth:get"><apiName>maxColumnWidth</apiName><shortdesc>
	  縦棒の幅をピクセル単位で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  縦棒の幅をピクセル単位で指定します。 実際の縦棒の幅には、このスタイルと <codeph>columnWidthRatio</codeph> プロパティの値のうち小さい方が使用されます。 集合縦棒グラフの場合、この領域が各集合内の縦棒によって均等に分割されます。 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSet:offset:get"><apiName>offset</apiName><shortdesc>
	  使用可能な領域の中心から縦棒の中心をずらす度合いを、カテゴリの幅に対する割合で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  使用可能な領域の中心から縦棒の中心をずらす度合いを、カテゴリの幅に対する割合で指定します。 デフォルト値の <codeph>0</codeph> では、縦棒は領域の中央に配置されます。 このプロパティの値を <codeph>-50</codeph> に設定すると、縦棒は使用可能な領域の開始位置の中央に配置されます。 通常、このプロパティを直接設定することはありません。 この値は、ColumnChart コントロールが <codeph>columnWidthRatio</codeph> プロパティに基づいて管理します。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.series:HLOCSeries"><apiName>HLOCSeries</apiName><shortdesc>
  データ系列の高値、安値、終値、および始値（オプション）などの財務データを一連のエレメントで示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="style" name="hlocColor"/><styles><style inherit="no" name="stroke" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  このデータ系列の線スタイルを設定します。 線を定義するには、Stroke オブジェクトを指定する必要があります。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="openTickStroke" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  始値を指定している場合には、始値の目盛りに使用する線を指定します。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="openTickLength" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="Number">
<description>
  始値を指定している場合には、始値の目盛りの長さをピクセル単位で指定します。 この値とは関係なく、HLOCSeries が個々のエレメントに割り当てられている領域の外に始値の目盛りをレンダリングすることはありません。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="closeTickStroke" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  始値を指定している場合には、終値の目盛りに使用する線を指定します。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="closeTickLength" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="Number">
<description>
  終値の目盛りの長さをピクセル単位で指定します。 この値とは関係なく、HLOCSeries が個々のエレメントに割り当てられている領域の外に終値の目盛りをレンダリングすることはありません。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:HLOCSeries&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:</p>
  
  <pre>
  &lt;mx:HLOCSeries
    <strong>Styles</strong>
    closeTickLength="<i>No default</i>"
    closeTickStroke="<i>No default</i>"
    openTickLength="<i>No default</i>"
    openTickStroke="<i>No default</i>"
    stroke="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:HLOCSeriesBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  データ系列の高値、安値、終値、および始値（オプション）などの財務データを一連のエレメントで示します。 各エレメントの垂直線の上端および下端が、データポイントの高値および安値になります。 右向きの目盛りが終値になり、始値を指定した場合には左向きの目盛りが始値になります。 
 
  </apiDesc><example conref="HLOCChartExample.mxml"><swfblock conref="../examples/HLOCChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#HLOCChart"><linktext>mx.charts.HLOCChart</linktext></link></related-links><apiConstructor id="mx.charts.series:HLOCSeries:HLOCSeries"><apiName>HLOCSeries</apiName><shortdesc>
	  コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  コンストラクターです。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts.series:HLOCSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:LineSeries"><apiName>LineSeries</apiName><shortdesc>
  LineChart コントロールのデータ系列を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="radius" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="Number">
<description> 
  データポイントのグラフエレメントの半径をピクセル単位で指定します。 このプロパティは、<codeph>itemRenderer</codeph> プロパティを使用してアイテムレンダラーを指定した場合にのみ適用されます。 <codeph>itemRenderer</codeph> は MXML で、またはスタイルを使用して指定できます。  
  
  </description>
<default>4 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="lineStroke" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description> 
   実際の線セグメントの線を設定します。 LineChart コントロールのデフォルト値はオレンジ（<codeph>0xE48701</codeph>）です。 CartesianChart コントロールで使用される LineSeries のデフォルトカラーは黒（<codeph>0x000000</codeph>）です。 幅のデフォルト値は 3 です。
   
   </description>

<playerversion>AIR 1.1
   </playerversion>
	<prolog><asCustoms><langversion>3.0
   </langversion><productversion>Flex 3
  </productversion></asCustoms></prolog></style><style inherit="no" name="lineSegmentRenderer" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列が個々の線セグメントを表現する場合に使用するクラスとなるファクトリです。 このクラスは、系列の異なるセグメントごとに 1 回インスタンス化されます。 lineSegmentRenderers として使用するクラスには、IFlexDisplayObject、ISimpleStyleClient、IDataRenderer の各インターフェイスを実装する必要があります。 <codeph>data</codeph> プロパティには、描画対象のセグメントを記述する mx.charts.series.items.LineSeriesSegment のインスタンスが割り当てられます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="segment,step,reverseStep,vertical,horizontal,curve" inherit="no" name="form" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="String">
<description>
  グラフの線のタイプを指定します。 有効な値は次のとおりです。
  <ul>
    <li><codeph>"curve"</codeph>：データポイント間に曲線を描画します。</li>
    
    <li><codeph>"horizontal"</codeph>：最初のポイントの x 座標から、2 番目のポイントの y 座標がある位置の x 座標までの水平の線だけを描画します。 これを各データポイントについて繰り返します。</li>
    
    <li><codeph>"vertical"</codeph>：最初のポイントの x 座標から、2 番目のポイントの x 座標がある位置の y 座標までの垂直の線だけを描画します。 これを各データポイントについて繰り返します。</li>
    
    <li><codeph>"segment"</codeph>：系列の各データポイントで連結するよう角度を付けて、連結されたセグメントとして線を描画します。</li>
    
    <li><codeph>"step"</codeph>：線を水平のセグメントとして描画します。 最初のデータポイントでは水平の線を描画し、次に 2 番目のデータポイントまで垂直の線を描画して、以降各データポイントについてこれを繰り返します。</li>
    
    <li><codeph>"reverseStep"</codeph>：線を水平のセグメントとして描画します。 最初のデータポイントでは垂直の線を描画し、次に 2 番目のデータポイントまで水平の線を描画して、以降各データポイントについてこれを繰り返します。</li>
  </ul>
  デフォルト値は <codeph>"segment"</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="Array">
<description>
  系列内の各アイテムの塗りを定義する塗りつぶしオブジェクトの配列を指定します。 これは <codeph>fill</codeph> スタイルプロパティよりも優先されます。 <codeph>fillFunction</codeph> プロパティでカスタムメソッドが指定されている場合は、それがこの配列よりも優先されます。 すべてのアイテムに十分な配列エレメントを用意しない場合、配列の最初から塗りが繰り返されます。
  
  <p>CSS を使用してこのプロパティの値を設定するには：
   <pre>
    LineSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>MXML を使用してこのプロパティの値を設定するには：
   <pre>
    &lt;mx:LineSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:LineSeries>
   </pre>
  </p>
  
  <p>
  <codeph>fills</codeph> プロパティを指定した場合に、Legend コントロールを使用するには、手動で Legend コントロールを作成してそれに LegendItems を追加する必要があります。
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="adjustedRadius" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="Number">
<description>
  グラフアイテムの半径をハイライト表示または選択したときに、増加させるピクセル数を指定します。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列が、関連する凡例にマーカーをレンダリングする場合に使用するクラスです。 このスタイルが <codeph>null</codeph> の場合、ほとんどの系列ではデフォルトで itemRenderer が凡例マーカースキンとして使用されます。 凡例マーカーとして使用するクラスには、IFlexDisplayObject インターフェイスを実装する必要があるだけでなく、オプションで ISimpleStyleClient インターフェイスおよび IDataRenderer インターフェイスを実装することもできます。 凡例マーカーとして使用するクラスに IDataRenderer インターフェイスを実装すると、データプロパティに LegendData インスタンスが割り当てられます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列がグラフに個々のアイテムを表現する場合に使用するクラスとなるファクトリです。 このクラスは、グラフ内のエレメントごとに 1 回インスタンス化されます。 itemRenderer として使用するクラスには、IFlexDisplayObject、ISimpleStyleClient、IDataRenderer の各インターフェイスを実装する必要があります。 <codeph>data</codeph> プロパティには、スキンインスタンスがレンダリングする chartItem が割り当てられます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  このデータ系列の線スタイルを設定します。 線を定義するには、Stroke オブジェクトを指定する必要があります。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  このデータ系列の塗りを設定します。 IFill インターフェイスを実装するオブジェクトか、単色のカラー値を表す数値を指定できます。 CSS を使用して単色の塗りを指定することもできます。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:LineSeries&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:LineSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    interpolateValues="false|true"
    sortOnXField="false|true"
    verticalAxis="<i>No default</i>"
    xField="null"
    yField="null"
 
    <strong>Styles</strong>
    adjustedRadius="2"
    fill="0xFFFFFF"
    fills="<i>IFill; no default</i>"
    form="segment|curve|horizontal|reverseStep|step|vertical"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    lineSegmentRenderer="<i>ShadowLineRenderer</i>"
    lineStroke="Stroke(0xE47801,3)"
    radius="4"
    stroke="<i>IStroke; no default</i>" 
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  LineChart コントロールのデータ系列を定義します。 デフォルトでは、このクラスは ShadowLineRenderer クラスを使用します。 オプションでデータ系列の itemRenderer も定義できます。 itemRenderer には、IDataRenderer インターフェイスを実装する必要があります。 
   </apiDesc><example conref="Line_AreaChartExample.mxml"><swfblock conref="../examples/Line_AreaChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#LineChart"><linktext>mx.charts.LineChart</linktext></link><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links><apiConstructor id="mx.charts.series:LineSeries:LineSeries"><apiName>LineSeries</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:LineSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      グラフを表すのに使用されるアイテムレンダラーインスタンスをカスタマイズします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>作成される新しいアイテムレンダラーインスタンスです。
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>アイテムレンダラーインスタンスを管理するために使用される InstanceCache です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      グラフを表すのに使用されるアイテムレンダラーインスタンスをカスタマイズします。 このメソッドは、グラフのレンダリング中に新しいアイテムレンダラーが必要とされる場合、常に自動的に呼び出されます。 必要に応じて独自のカスタマイズを加えるために、このメソッドをオーバーライドできます。
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:LineSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:LineSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     系列内の現在のグラフアイテムの塗りを返すメソッドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     系列内の現在のグラフアイテムの塗りを返すメソッドを指定します。 このプロパティを設定すると、カスタムの塗り関数の戻り値は <codeph>fill</codeph> および <codeph>fills</codeph> の各スタイルプロパティよりも優先されます。 ただし null が返された場合は、<codeph>fills</codeph> および <codeph>fill</codeph> が、この順序で優先されます。  
     
     <p>カスタムの <codeph>fillFunction</codeph> には、次のシグネチャがあります。
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> は、レンダリング中のグラフアイテムへの参照です。 <codeph>index</codeph> は、renderData キャッシュのグラフアイテムのインデックスです。このインデックスは、x、y、z の値に基づいてソートされているので、グラフのデータプロバイダーのインデックスとは異なります。この関数は、<codeph>IFill</codeph> インターフェイスを実装するオブジェクトを返します。
     </p>
      
     <p>カスタマイズした <codeph>fillFunction</codeph> の使用方法の例としては、任意のしきい値に基づく塗りを返させることができます。</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:LineSeriesItem = LineSeriesItem(item);
          if (curItem.yNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
       
     <p>
      グラフ系列にカスタムの塗り関数を指定した場合に、Legend コントロールを使用するには、手動で Legend コントロールを作成してそれに LegendItems を追加する必要があります。
      </p>
           
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      x 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      x 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。 LinearAxis クラスまたは CategoryAxis クラスのいずれかを使用すると、horizontalAxis のプロパティを MXML の子タグとして設定したり、ActionScript で LinearAxis オブジェクトまたは CategoryAxis オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:interpolateValues:get"><apiName>interpolateValues</apiName><shortdesc> 
      存在しないデータの表現方法を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
     </apiDefaultValue></apiValueDef><apiDesc> 
      存在しないデータの表現方法を指定します。
           <p><codeph>false</codeph> に設定すると、線は欠損値の箇所で途切れます。 <codeph>true</codeph> に設定すると、欠損値が補間されて継続的な線が描画されます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      この系列が個々のアイテムを表現する場合に使用する ChartItem のサブタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      この系列が個々のアイテムを表現する場合に使用する ChartItem のサブタイプです。 アイテムにさらに情報を格納する必要がある場合には、サブクラスでオーバーライドし、さらに特化したクラスを返すことができます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:items:get"><apiName>items</apiName><shortdesc>
      
      フィルター適用後に系列内にあるすべてのアイテムを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      フィルター適用後に系列内にあるすべてのアイテムを取得します。
      <p>個々の系列によって、返されるアイテムのリストが決まります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:protected:lineSegmentType:get"><apiName>lineSegmentType</apiName><shortdesc>
      この系列が線セグメントの表現に必要なデータをすべて格納する場合に使用するクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      この系列が線セグメントの表現に必要なデータをすべて格納する場合に使用するクラスです。 レンダリング用にさらに情報を格納する必要がある場合には、サブクラスでオーバーライドし、さらに特化したクラスを返すことができます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:radius:get"><apiName>radius</apiName><shortdesc> 
      データポイントのグラフエレメントの半径をピクセル単位で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      データポイントのグラフエレメントの半径をピクセル単位で指定します。 このプロパティは、<codeph>itemRenderer</codeph> プロパティを使用してアイテムレンダラーを指定した場合にのみ適用されます。 <codeph>itemRenderer</codeph> は MXML で、またはスタイルを使用して指定できます。  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      この系列がレンダリングに必要な全データを格納する場合に使用する ChartRenderData のサブタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      この系列がレンダリングに必要な全データを格納する場合に使用する ChartRenderData のサブタイプです。 レンダリング用にさらに情報を格納する必要がある場合には、サブクラスでオーバーライドし、さらに特化したクラスを返すことができます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:sortOnXField:get"><apiName>sortOnXField</apiName><shortdesc> 
      レンダリングの前に線データポイントを左から右にソートするよう要求します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      レンダリングの前に線データポイントを左から右にソートするよう要求します。
           <p>デフォルトでは、LineSeries は左から右にポイントをレンダリングします。 このプロパティを <codeph>false</codeph> に設定すると、アイテムはデータプロバイダーに表示される順序でレンダリングされます。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      y 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      y 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。 LinearAxis クラスまたは CategoryAxis クラスのいずれかを使用すると、verticalAxis のプロパティを MXML の子タグとして設定したり、ActionScript で LinearAxis オブジェクトまたは CategoryAxis オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:xField:get"><apiName>xField</apiName><shortdesc>
      各データポイントの x 軸の位置を決定するデータプロバイダーのフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      各データポイントの x 軸の位置を決定するデータプロバイダーのフィールドを指定します。 <codeph>null</codeph> の場合、データポイントはデータプロバイダーに表示される順序でレンダリングされます。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:yField:get"><apiName>yField</apiName><shortdesc>
      各データポイントの y 軸の位置を決定するデータプロバイダーのフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      各データポイントの y 軸の位置を決定するデータプロバイダーのフィールドを指定します。 <codeph>null</codeph> の場合、LineSeries はデータプロバイダーが数値の配列であると見なし、数値を値として使用します。 
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:AreaSeries"><apiName>AreaSeries</apiName><shortdesc>
  AreaChart コントロールのデータ系列を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="radius" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="Number">
<description> 
  データポイントのグラフエレメントの半径をピクセル単位で指定します。 このプロパティは、<codeph>itemRenderer</codeph> プロパティを指定した場合にのみ適用されます。 itemRenderer は MXML で、またはスタイルを使用して指定できます。  
  
  </description>
<default>4 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="segment,step,reverseStep,vertical,horizontal,curve" inherit="no" name="form" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="String">
<description>
  領域の境界のタイプを指定します。 有効な値は次のとおりです。
  
  <ul>
   <li><codeph>"curve"</codeph> - 各データポイント間の境界に曲線を描画します。</li>
  
   <li><codeph>"horizontal"</codeph> - 最初のポイントの x 座標から、2 番目のポイントの y 座標がある位置の x 座標までの境界線だけを描画します。 これを各データポイントについて繰り返します。</li>
  
   <li><codeph>"reverseStep"</codeph> - 領域の境界を水平のセグメントとして描画します。 最初のデータポイントでは垂直の境界線を描画し、次に 2 番目のデータポイントまで水平の境界線を描画して、以降各データポイントについてこれを繰り返します。</li>
  
   <li><codeph>"segment"</codeph> - 系列の各データポイントで連結するよう角度を付けて、連結されたセグメントとして領域の境界を描画します。</li>
  
   <li><codeph>"step"</codeph> - 領域の境界を水平のセグメントとして描画します。 最初のデータポイントでは水平の境界線を描画し、次に 2 番目のデータポイントまで垂直の境界線を描画して、以降各データポイントについてこれを繰り返します。</li>
  
   <li><codeph>"vertical"</codeph> - 最初のポイントの y 座標から、2 番目のポイントの x 座標がある位置の y 座標までの境界線だけを描画します。 これを各データポイントについて繰り返します。</li>
  </ul>
  
  </description>
<default>segment
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="Array">
<description>
  系列内の各アイテムの塗りを定義する塗りつぶしオブジェクトの配列を指定します。 これは <codeph>fill</codeph> スタイルプロパティよりも優先されます。 <codeph>fillFunction</codeph> プロパティでカスタムメソッドが指定されている場合は、それがこの配列よりも優先されます。 すべてのアイテムに十分な配列エレメントを用意しない場合、配列の最初から塗りが繰り返されます。
  
  <p>CSS を使用してこのプロパティの値を設定するには：
   <pre>
    AreaSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>MXML を使用してこのプロパティの値を設定するには：
   <pre>
    &lt;mx:AreaSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:AreaSeries>
   </pre>
  </p>
  
  <p>
  <codeph>fills</codeph> プロパティを指定した場合に、Legend コントロールを使用するには、手動で Legend コントロールを作成してそれに LegendItems を追加する必要があります。
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="areaStroke" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description> 
  領域の線スタイルを設定します。 線を定義するには Stroke オブジェクトを使用します。 itemRenderer は MXML で、またはスタイルを使用して指定できます。  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="areaRenderer" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列がグラフに塗り領域を表現する場合に使用するクラスです。 このクラスは、系列ごとに 1 回インスタンス化されます。 areaRenderer として使用するクラスには、IFlexDisplayObject、ISimpleStyleClient、IDataRenderer の各インターフェイスを実装する必要があります。 データプロパティには、領域データを記述する AreaSeriesRenderData が割り当てられます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="areaFill" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description> 
  この領域の塗りを設定します。 IFill インターフェイスを実装するオブジェクトか、単色のカラー値を表す数値を指定できます。 CSS を使用して単色の塗りを指定することもできます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="adjustedRadius" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="Number">
<description>
  グラフアイテムの半径をハイライト表示または選択したときに、増加させるピクセル数を指定します。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列が、関連する凡例にマーカーをレンダリングする場合に使用するクラスです。 このスタイルが <codeph>null</codeph> の場合、ほとんどの系列ではデフォルトで itemRenderer が凡例マーカースキンとして使用されます。 凡例マーカーとして使用するクラスには、IFlexDisplayObject インターフェイスを実装する必要があるだけでなく、オプションで ISimpleStyleClient インターフェイスおよび IDataRenderer インターフェイスを実装することもできます。 凡例マーカーとして使用するクラスに IDataRenderer インターフェイスを実装すると、データプロパティに LegendData インスタンスが割り当てられます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列がグラフに個々のアイテムを表現する場合に使用するクラスとなるファクトリです。 このクラスは、グラフ内のエレメントごとに 1 回インスタンス化されます。 itemRenderer として使用するクラスには、IFlexDisplayObject、ISimpleStyleClient、IDataRenderer の各インターフェイスを実装する必要があります。 <codeph>data</codeph> プロパティには、スキンインスタンスがレンダリングする chartItem が割り当てられます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  このデータ系列の線スタイルを設定します。 線を定義するには、Stroke オブジェクトを指定する必要があります。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  このデータ系列の塗りを設定します。 IFill インターフェイスを実装するオブジェクトか、単色のカラー値を表す数値を指定できます。 CSS を使用して単色の塗りを指定することもできます。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:AreaSeries&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:AreaSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    minField="null"
    sortOnXField="<i>true</i>"
    stacker="<i>No default</i>"
    stackTotals="<i>No default</i>"
    xField="null"
    verticalAxis="<i>No default</i>"
    yField="null"
 
    <strong>Styles</strong>
    adjustedRadius="2"
    areaFill="<i>IFill</i>"
    areaRenderer="<i>areaRenderer</i>"
    areaStroke="<i>Stroke</i>"
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    form="<i>segment|curve|horizontal|reverseStep|step|vertical</i>"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    radius="4"
    stroke="<i>IStroke; no default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IStackable2</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  AreaChart コントロールのデータ系列を定義します。 デフォルトでは、このクラスは AreaRenderer itemRenderer を使用します。 オプションでデータ系列の itemRenderer も定義できます。 itemRenderer には、IDataRenderer インターフェイスを実装する必要があります。 
  
  </apiDesc><example conref="Line_AreaChartExample.mxml"><swfblock conref="../examples/Line_AreaChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#AreaChart"><linktext>mx.charts.AreaChart</linktext></link></related-links><apiConstructor id="mx.charts.series:AreaSeries:AreaSeries"><apiName>AreaSeries</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:AreaSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      グラフを表すために使用されるアイテムレンダラーインスタンスをカスタマイズします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>作成される新しいアイテムレンダラーインスタンスです。
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>アイテムレンダラーインスタンスを管理するために使用される InstanceCache です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      グラフを表すために使用されるアイテムレンダラーインスタンスをカスタマイズします。 このメソッドは、グラフのレンダリング中に新しいアイテムレンダラーが必要とされる場合、常に自動的に呼び出されます。 必要に応じて独自のカスタマイズを加えるために、このメソッドをオーバーライドできます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      
      データプロバイダー内の基になるデータが変更されたことを系列に通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>このメソッドが更新メソッドへの呼び出しをトリガーする場合は <codeph>true</codeph> になります。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      データプロバイダー内の基になるデータが変更されたことを系列に通知します。 この関数によって、<codeph>updateData()</codeph>、<codeph>updateMapping()</codeph>、<codeph>updateFilter()</codeph>、および <codeph>updateTransform()</codeph> メソッドの呼び出しが、次回の <codeph>commitProperties()</codeph> メソッドの呼び出し時にトリガーされます。 グラフのエレメントに割り当てられているデータエフェクトがある場合は、このメソッドによって表示エフェクトと非表示エフェクトもトリガーされます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:protected:invalidateMapping"><apiName>invalidateMapping</apiName><shortdesc>
      
      数値へのデータのマッピングが変更されたため、再計算が必要であることを系列に通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>このメソッドが更新メソッドへの呼び出しをトリガーする場合は <codeph>true</codeph> になります。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      数値へのデータのマッピングが変更されたため、再計算が必要であることを系列に通知します。 この関数を呼び出すと、<codeph>updateMapping()</codeph>、<codeph>updateFilter()</codeph>、および <codeph>updateTransform()</codeph> メソッドの呼び出しが、次回の <codeph>commitProperties()</codeph> メソッドの呼び出し時にトリガーされます。 グラフのエレメントに割り当てられているデータエフェクトがある場合は、このメソッドによって表示エフェクトと非表示エフェクトもトリガーされます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:stackAll"><apiName>stackAll</apiName><shortdesc>
      
  系列を積み重ねます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>新たに積み重ねる系列の最大値および最小値を表すオブジェクトです。	 
  
  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>stackedPosXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>系列が積み重ねられる基本値が含まれます。 辞書のキーは x 値で、値は正の x 値です。
 
  </apiDesc></apiParam><apiParam><apiItemName>stackedNegXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>系列が積み重ねられる基本値が含まれます。 辞書のキーは x 値で、値は負の y 値です。
  
  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable2</apiOperationClassifier><apiDesc>積み重ねの中の直前のエレメントです。 例えば、同じ型のエレメントの場合は、このプロパティへのアクセスを使用することにより、レンダリング時に同じ処理を繰り返す必要を回避できます。
  
  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
  系列を積み重ねます。 通常、系列はデータプロバイダーからデータをロードするため <codeph>updateData()</codeph> 関数を実装しています。 ただし、積み重ね系列では、必ずしもデータプロバイダーに値が格納されているとは限らないため、特殊な操作が実行されます。 その値は、データプロバイダーに何が格納されていても、積み重ねられる側のオブジェクトによってロードされた値と合算したものになります。
  <p>カスタム積み重ね系列には、<codeph>stack()</codeph> メソッドを実装してください。データプロバイダーからデータをロードし、レンダリング対象の実値が取得される辞書内の基本値にそのデータを追加し、合算後の新しい値で辞書内の値を置き換えます。</p>
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:stack"><apiName>stack</apiName><shortdesc>
      
	  系列を積み重ねます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>新たに積み重ねる系列の最大値です。	 
	  
	  </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>stackedXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>系列が積み重ねられる基本値が含まれます。 辞書のキーは y 値で、値は x 値です。
	  
	  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable</apiOperationClassifier><apiDesc>積み重ねの中の直前のエレメントです。 例えば、同じ型のエレメントの場合は、このプロパティへのアクセスを使用することにより、レンダリング時に同じ処理を繰り返す必要を回避できます。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  系列を積み重ねます。 通常、系列はデータプロバイダーからデータをロードするため <codeph>updateData()</codeph> 関数を実装しています。 ただし、積み重ね系列では、必ずしもデータプロバイダーに値が格納されているとは限らないため、特殊な操作が実行されます。 その値は、データプロバイダーに何が格納されていても、積み重ねられる側のオブジェクトによってロードされた値と合算したものになります。
	  <p>カスタム積み重ね系列には、<codeph>stack()</codeph> メソッドを実装してください。データプロバイダーからデータをロードし、レンダリング対象の実値が取得される辞書内の基本値にそのデータを追加し、合算後の新しい値で辞書内の値を置き換えます。</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:AreaSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     系列内の現在のグラフアイテムの塗りを返すメソッドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     系列内の現在のグラフアイテムの塗りを返すメソッドを指定します。 このプロパティを設定すると、カスタムの塗り関数の戻り値は <codeph>fill</codeph> および <codeph>fills</codeph> の各スタイルプロパティよりも優先されます。 ただし null が返された場合は、<codeph>fills</codeph> および <codeph>fill</codeph> が、この順序で優先されます。
       
     <p>カスタムの <codeph>fillFunction</codeph> には、次のシグネチャがあります。
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> は、レンダリング中のグラフアイテムへの参照です。 <codeph>index</codeph> は、renderData キャッシュのグラフアイテムのインデックスです。このインデックスは、x、y、z の値に基づいてソートされているので、グラフのデータプロバイダーのインデックスとは異なります。この関数は、<codeph>IFill</codeph> インターフェイスを実装するオブジェクトを返します。
     </p>
      
     <p>カスタマイズした <codeph>fillFunction</codeph> の使用方法の例としては、任意のしきい値に基づく塗りを返させることができます。</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill 
     {
          var curItem:AreaSeriesItem = AreaSeriesItem(item);
          if (curItem.yNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
          <p>
      グラフ系列にカスタムの塗り関数を指定した場合に、Legend コントロールを使用するには、手動で Legend コントロールを作成してそれに LegendItems を追加する必要があります。
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      x 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      x 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。 LinearAxis クラスまたは CategoryAxis クラスのいずれかを使用すると、horizontalAxis のプロパティを MXML の子タグとして設定したり、ActionScript で LinearAxis オブジェクトまたは CategoryAxis オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      この系列が個々のアイテムを表現する場合に使用する ChartItem のサブタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      この系列が個々のアイテムを表現する場合に使用する ChartItem のサブタイプです。 アイテムにさらに情報を格納する必要がある場合には、サブクラスでオーバーライドし、さらに特化したクラスを返すことができます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:items:get"><apiName>items</apiName><shortdesc>
      
      フィルター適用後に系列内にあるすべてのアイテムを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      フィルター適用後に系列内にあるすべてのアイテムを取得します。
      <p>個々の系列によって、返されるアイテムのリストが決まります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:minField:get"><apiName>minField</apiName><shortdesc>
      領域の下部の境界を決定する dataProvider のフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      領域の下部の境界を決定する dataProvider のフィールドを指定します。 <codeph>null</codeph> の場合、領域の基底は範囲の最小値（フィールド値が負の場合は最大値）になります。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      この系列がレンダリングに必要な全データを格納する場合に使用する ChartRenderData のサブタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      この系列がレンダリングに必要な全データを格納する場合に使用する ChartRenderData のサブタイプです。 レンダリング用にさらに情報を格納する必要がある場合には、サブクラスでオーバーライドし、さらに特化したクラスを返すことができます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:sortOnXField:get"><apiName>sortOnXField</apiName><shortdesc> 
      レンダリングの前に線データポイントを左から右にソートするよう要求します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      レンダリングの前に線データポイントを左から右にソートするよう要求します。
           <p>デフォルトでは、LineSeries は左から右にポイントをレンダリングします。 このプロパティを <codeph>false</codeph> に設定すると、アイテムはデータプロバイダーに表示される順序でレンダリングされます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:stacker:get"><apiName>stacker</apiName><shortdesc>
      この AreaSeries に関連付けられた StackedSeries です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:StackedSeries</apiValueClassifier></apiValueDef><apiDesc>
      この AreaSeries に関連付けられた StackedSeries です。 このスタッカーによって、系列の積み重ね動作が管理されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      y 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      y 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。 LinearAxis クラスまたは CategoryAxis クラスのいずれかを使用すると、verticalAxis のプロパティを MXML の子タグとして設定したり、ActionScript で LinearAxis オブジェクトまたは CategoryAxis オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:xField:get"><apiName>xField</apiName><shortdesc>
      水平軸上のデータポイントの位置を決定するデータプロバイダーのフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      水平軸上のデータポイントの位置を決定するデータプロバイダーのフィールドを指定します。 <codeph>null</codeph> の場合、データポイントはデータプロバイダーに表示される順序でレンダリングされます。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:yField:get"><apiName>yField</apiName><shortdesc>
      垂直軸上のデータポイントの位置を決定するデータプロバイダーのフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      垂直軸上のデータポイントの位置を決定するデータプロバイダーのフィールドを指定します。 <codeph>null</codeph> の場合、AreaSeries は dataProvider が数値の配列であると見なし、数値をデータポイントの値として使用します。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.charts.series:AreaSeries:stackTotals:set"><apiName>stackTotals</apiName><shortdesc>
      系列の積み重ねの総計です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      系列の積み重ねの総計です。
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.series:PieSeries"><apiName>PieSeries</apiName><shortdesc>
  PieSeries クラスは、PieChart コントロールのデータ系列を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="stroke" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  このデータ系列の線スタイルを設定します。 線を定義するには、Stroke オブジェクトを指定する必要があります。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="clockwise,counterClockwise" inherit="no" name="renderDirection" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  系列をレンダリングする方向を設定します。有効な値は次のとおりです。
  <ul>
    <li><codeph>"clockwise"</codeph> - 区分を時計回りに描画します。</li>
  
    <li><codeph>"counterClockwise"</codeph> - 区分を反時計回りに描画します。</li>
  </ul>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="radialStroke" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  円グラフの各区分間の境界線を描画する際に使用する線のスタイルを指定します。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,outside,callout,inside,insideWithCallout" inherit="no" name="labelPosition" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description> 
  値のラベルのレンダリング方法を指定します。 このプロパティは MXML で、またはスタイルを使用して設定できます。 有効な値は次のとおりです。
  <ul>
    <li><codeph>"none"</codeph> - ラベルは描画しません。</li>
  
    <li><codeph>"outside"</codeph> - 円グラフの境界線の周囲にラベルを描画します。</li>
  
    <li><codeph>"callout"</codeph> - 円グラフの右側か左側に、2 つの垂直なスタックでラベルを描画します。 必要に応じて区分を縮小して、ラベル用の領域を空けます（「<codeph>maxLabelRadius</codeph>」を参照）。 各ラベルから円グラフ内の関連付けられた区分まで、主要な線を描画します。 必要に応じて、ラベルを領域に合うよう縮小します。</li>
  
    <li><codeph>"inside"</codeph> - グラフの内部に、円グラフの各区分に沿っておよそ 10 分の 7 程度の位置を中心にして、ラベルを描画します。 ラベル同士が重ならないように、各ラベルを縮小します。 ラベルが <codeph>insideLabelSizeLimitSize</codeph> プロパティの値よりも小さくなる場合は、ラベルを削除します。 2 つのラベルが重なる場合、大きな区分のラベルが優先されます。</li>
  
    <li><codeph>"insideWithCallout"</codeph> - ラベルを円の中に描画しますが、判読できないサイズまで縮小された場合はコールアウトに変換します。</li>
  </ul>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="insideLabelSizeLimit" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  フォントサイズのしきい値をポイントで指定します。これ以下のサイズの内部ラベルは判読不能と見なされます。 このしきい値を下回ったラベルは、<codeph>labelPosition</codeph> プロパティの設定に基づいて、完全に非表示になるか、コールアウトとしてレンダリングされます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="innerRadius" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  系列の中心からレンダリング済み区分の内側エッジまでの距離を、系列に割り当てられた全半径のパーセンテージで指定する、0 ～ 1 の数です。 このプロパティは、系列に直接割り当てられます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Array">
<description>
  PieChart コントロールの各区分のレンダリングに使用する塗りつぶしオブジェクトの配列を指定します。 すべてのスライスに十分な配列エレメントを用意しない場合、配列の最初から塗りが繰り返されます。 <codeph>fillFunction</codeph> プロパティを使用してメソッドを指定した場合は、そのメソッドによって設定された値がこの配列よりも優先されます。
  
  <p>CSS を使用してこのプロパティの値を設定するには：
   <pre>
    PieSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>MXML を使用してこのプロパティの値を設定するには：
   <pre>
    &lt;mx:PieSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:PieSeries>
   </pre>
  </p>
  
  <p>
  <codeph>fills</codeph> プロパティを指定した場合に、Legend コントロールを使用するには、手動で Legend コントロールを作成してそれに LegendItems を追加する必要があります。
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="calloutStroke" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  コールアウトの線の描画に使用される線のスタイルを指定します。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="calloutGap" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  コールアウトをレンダリングする際に、円グラフの端とラベルの間に挿入する領域をピクセル単位で指定します。
  
  </description>
<default>10
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセット（ピクセル単位）です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 可能な値は、<codeph>"none"</codeph> および <codeph>"underline"</codeph> です。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  コンテナ内のテキストの整列。 可能な値は <codeph>"left"</codeph>、<codeph>"right"</codeph>、または <codeph>"center"</codeph> です。
 
  <p>ほとんどのコントロールのデフォルト値は <codeph>left</codeph> です。 Button、LinkButton、および AccordionHeader コンポーネントの場合、デフォルト値は <codeph>"center"</codeph> です。 これらのコンポーネントでは、このプロパティは <codeph>labelPlacement</codeph> プロパティが <codeph>"left"</codeph> または <codeph>"right"</codeph> に設定されている場合にのみ認識されます。 <codeph>labelPlacement</codeph> が <codeph>"top"</codeph> または <codeph>"bottom"</codeph> に設定されている場合は、テキストおよびアイコンが中央に配置されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  各文字間に表示される追加のピクセル数。 正の値を指定すると文字間隔が通常より広くなり、負の値を指定すると文字間隔が通常より狭くなります。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Boolean">
<description>
  カーニングが有効（<codeph>true</codeph>) か無効（<codeph>false</codeph>）かを示すブール値です。カーニングでは、読みやすくするために、特定の文字ペア間の間隔を調整します。ただし、カーニングは見出しを大きなフォントにする場合など、必要な場合に限って使用してください。 カーニングは、埋め込み FlashType フォントに対してのみサポートされています。 Verdana や、Courier New などの等幅フォントなど、特定のフォントではカーニングはサポートされていません。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"bold"</codeph> です。 LegendItem のデフォルトは <codeph>"bold"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>thickness</codeph> プロパティを設定します。 このプロパティは字形のエッジの太さを指定します。 可能な値は -200 から 200 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルは、システムフォントには影響を与えません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"italic"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 ColorPicker コントロール以外のすべてのコントロールのデフォルト値は 10 です。 ColorPicker コントロールのデフォルト値は 11 です。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>sharpness</codeph> プロパティを設定します。 このプロパティは字形のエッジのシャープネスを指定します。 可能な値は -400 から 400 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>gridFitType</codeph> プロパティを設定します。 可能な値は、<codeph>"none"</codeph>（<codeph>flash.text.GridFitType.NONE</codeph>）、<codeph>"pixel"</codeph>（<codeph>flash.text.GridFitType.PIXEL</codeph>）、および <codeph>"subpixel"</codeph>（<codeph>flash.text.GridFitType.SUBPIXEL</codeph>）です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  使用するフォントの名前です。 完全な CSS 実装と異なり、カンマ区切りリストはサポートされません。 任意のフォントファミリ名を使用できます。 汎用フォント名を指定した場合、適切なデバイスフォントに置換されます。
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  内部 TextField の <codeph>antiAliasType</codeph> プロパティを設定します。 可能な値は、<codeph>"normal"</codeph>（<codeph>flash.text.AntiAliasType.NORMAL</codeph>）および <codeph>"advanced"</codeph>（<codeph>flash.text.AntiAliasType.ADVANCED</codeph>）です。 
  
  <p>デフォルト値は <codeph>"advanced"</codeph> です。この場合、埋め込み FlashType フォントを使用していれば FlashType レンダラーが有効になります。 FlashType レンダラーを無効にするには、<codeph>"normal"</codeph> に設定してください。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
  
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="uint">
<description>
  コンポーネントが無効な場合のテキストの色です。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="uint">
<description>
  コンポーネントのラベルを含めたコンポーネント内のテキストの色です。
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列が、関連する凡例にマーカーをレンダリングする場合に使用するクラスです。 このスタイルが <codeph>null</codeph> の場合、ほとんどの系列ではデフォルトで itemRenderer が凡例マーカースキンとして使用されます。 凡例マーカーとして使用するクラスには、IFlexDisplayObject インターフェイスを実装する必要があるだけでなく、オプションで ISimpleStyleClient インターフェイスおよび IDataRenderer インターフェイスを実装することもできます。 凡例マーカーとして使用するクラスに IDataRenderer インターフェイスを実装すると、データプロパティに LegendData インスタンスが割り当てられます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列がグラフに個々のアイテムを表現する場合に使用するクラスとなるファクトリです。 このクラスは、グラフ内のエレメントごとに 1 回インスタンス化されます。 itemRenderer として使用するクラスには、IFlexDisplayObject、ISimpleStyleClient、IDataRenderer の各インターフェイスを実装する必要があります。 <codeph>data</codeph> プロパティには、スキンインスタンスがレンダリングする chartItem が割り当てられます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:PieSeries&gt;</code> tag inherits all the properties
  of its parent classes, and the following properties:</p>
  
  <pre>
  &lt;mx:PieSeries
    <strong>Properties</strong>
    angularAxis=""
    explodeRadius="0"
    field="null"
    fillFunction="<i>Internal fill function</i>"
    itemType="<i>No default</i>"
    labelFunction="<i>No default</i>"
    labelField="<i>No default</i>"
    maxLabelRadius="0.6" 
    nameField="null"
    outerRadius="1"
    perWedgeExplodeRadius="<i>Array, no default</i>"
    renderDataType="<i>No default</i>"
    reserveExplodeRadius="0"
    startAngle="0"
 
    <strong>Styles</strong>
    calloutGap="10"
    calloutStroke="<i>IStroke; no default</i>"
    fills="<i>IFill; no default</i>"
    fontSize="10"
    innerRadius="0"
    insideLabelSizeLimit="9"
    itemRenderer="<i>No default</i>"
    labelPosition="none|callout|inside|insideWithCallout|outside"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    radialStroke="<i>IStroke; no default</i>"
    renderDirection="clockwise|counterClockwise"
    stroke="<i>IStroke; no default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  PieSeries クラスは、PieChart コントロールのデータ系列を定義します。 デフォルトのアイテムレンダラーは、WedgeItemRenderer クラスです。 オプションでデータ系列の itemRenderer も定義できます。 itemRenderer には、IDataRenderer インターフェイスを実装する必要があります。
   </apiDesc><example conref="PieChartExample.mxml"><swfblock conref="../examples/PieChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#PieChart"><linktext>mx.charts.PieChart</linktext></link></related-links><apiConstructor id="mx.charts.series:PieSeries:PieSeries"><apiName>PieSeries</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:PieSeries:beginInterpolation"><apiName>beginInterpolation</apiName><shortdesc>
      
      補間エフェクトを開始するために SeriesInterpolate エフェクトによって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>系列が補間を実行するために必要なデータです。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>sourceRenderData</apiItemName><apiType value="Object"/><apiDesc>補間を行う範囲の系列のソースデータです。
     
      </apiDesc></apiParam><apiParam><apiItemName>destRenderData</apiItemName><apiType value="Object"/><apiDesc>補間を行う範囲の系列の宛先データです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      補間エフェクトを開始するために SeriesInterpolate エフェクトによって呼び出されます。 このエフェクトは、補間する範囲の系列のソースと宛先のデータを渡します。エフェクトは、このメソッドの戻り値を系列の <codeph>interpolate()</codeph> メソッドに繰り返し渡すことによって、このエフェクトの間のアニメーションを更新します。 系列は補間を実行するために必要なデータを算出し、それをこのメソッドに戻します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
	  
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.series:PieSeries:dataToLocal"><apiName>dataToLocal</apiName><shortdesc>
      
      
      1 組のデータ値を画面上の x-y 座標に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>グラフを基準とする座標です。
      
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>dataValues</apiItemName><apiType value="restParam"/><apiDesc>座標に変換するデータの値です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      1 組のデータ値を画面上の x-y 座標に変換します。 この関数は、個々のエレメントと同じ変換を使用して画面上でデータを変換する場合に呼び出します。 例えば、グラフのデータ領域にカスタムのハイライト表示を作成するには、この関数を使用して該当する範囲の画面上の座標を指定することができます。
      
      <p>直交 ChartElements の場合は、通常 2 つの値を渡します。 最初の値は水平軸にマッピングされ、2 番目の値は垂直軸にマッピングされます。</p>
      
      <p>極座標グラフの場合は、最初の値が角度軸にマッピングされ、2 番目の値が放射軸にマッピングされます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:getElementBounds"><apiName>getElementBounds</apiName><shortdesc>
      
      この系列で生成された renderData 構造の elementBounds、bounds および visibleBounds の各プロパティに値を入力します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderData</apiItemName><apiType value="Object"/><apiDesc>この系列によって生成される構造です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      この系列で生成された renderData 構造の <codeph>elementBounds</codeph>、<codeph>bounds</codeph> および <codeph>visibleBounds</codeph> の各プロパティに値を入力します。 エフェクトクラスは、様々なエフェクトタイプの実装に使用される各フィールドに値を入力するためにこのメソッドを呼び出します。 要求されたときにのみ系列のアイテムの境界を生成するには、派生クラスにこのメソッドを実装する必要があります。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:protected:getMissingInterpolationValues"><apiName>getMissingInterpolationValues</apiName><shortdesc> 
      
      補間構造内の欠損値を埋めます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sourceProps</apiItemName><apiType value="Object"/><apiDesc>特定のアイテムについて補間されるソース値の入ったオブジェクトです。 このメソッドが終了するとき、このオブジェクトのすべてのプロパティ値は <codeph>NaN</codeph> 値ではなくなります。
     
      </apiDesc></apiParam><apiParam><apiItemName>srcCache</apiItemName><apiType value="Array"/><apiDesc>補間されるグラフアイテムのソースの配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>destProps</apiItemName><apiType value="Object"/><apiDesc>特定のアイテムについて補間される宛先値の入ったオブジェクトです。 このメソッドが終了するとき、このオブジェクトのすべてのプロパティ値は <codeph>NaN</codeph> 値ではなくなります。
     
      </apiDesc></apiParam><apiParam><apiItemName>destCache</apiItemName><apiType value="Array"/><apiDesc>補間されるグラフアイテムの宛先の配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>キャッシュに入れられるアイテムのインデックスです。  
     
      </apiDesc></apiParam><apiParam><apiItemName>customData</apiItemName><apiType value="Object"/><apiDesc>系列が <codeph>initializeInterpolationData()</codeph> メソッドに渡したデータです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      
      補間構造内の欠損値を埋めます。 系列が <codeph>initializeInterpolationData()</codeph> メソッドを呼び出す場合、補間のためのソースと宛先の値の配列を渡します。 これらの 2 つの配列のいずれかが不完全である場合、系列は補間のための "適切な" プレースホルダーを提供する必要があります。 これらのプレースホルダーーが決定される方法は、系列のタイプに固有です。 系列エクステンダーは、このメソッドをオーバーライドして、これらのプレースホルダー値を提供する必要があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:interpolate"><apiName>interpolate</apiName><shortdesc>
      
      補間を進めるために SeriesInterpolate エフェクトによって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>interpolationValues</apiItemName><apiType value="Array"/><apiDesc>数値の配列です。各数値は 0 ～ 1 の範囲になります。<i/>n 番目の数値は、データ系列中の <i/>n 番目の値の補間が、開始値から終了値に至る行程の何パーセントまで進むかを示します。
     
      </apiDesc></apiParam><apiParam><apiItemName>interpolationData</apiItemName><apiType value="Object"/><apiDesc><codeph>beginInterpolation()</codeph> メソッドから返されるデータです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      補間を進めるために SeriesInterpolate エフェクトによって呼び出されます。 エフェクトはこれをフレームにつき 1 回ずつ、補間が完了するまで呼び出します。 系列は、パラメーターを使用して、補間された値をレンダリングする役割を果たします。 デフォルトでは、系列は <codeph>interpolationData</codeph> を <codeph>initializeInterpolationData()</codeph> メソッドによって返されたデータ構造であると見なし、これを <codeph>applyInterpolation()</codeph> メソッドに渡します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:localToData"><apiName>localToData</apiName><shortdesc>
      
      
      画面上の座標を 1 組のデータ値に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>1 組のデータ値です。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>v</apiItemName><apiType value="flash.geom:Point"/><apiDesc>変換する Point オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      画面上の座標を 1 組のデータ値に変換します。 この関数は、画面上の特定のポイントを表すデータ値を取得する場合に呼び出します。
      <p>個々のグラフタイプによって、この変換がどのように行われるかが決まります。 ポイントは、グラフの座標空間に対応する必要があります。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:PieSeries:maxLabelRadius"><apiName>maxLabelRadius</apiName><shortdesc>
      ラベルに割り当て可能な PieSeries の半径の最大値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0.6</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      ラベルに割り当て可能な PieSeries の半径の最大値です。 この値は、系列がコールアウトラベルをレンダリングしているときにのみ適用できます。
      
      <p>コールアウトラベルをレンダリングすると、ラベルを両側に配置するための領域が確保されるよう、区分の半径が小さくなります。 ラベルに割り当てられた領域がこの上限値に達すると、最大サイズ内に留まるよう、ラベルのサイズが小さくなります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:angularAxis:get"><apiName>angularAxis</apiName><shortdesc>
      データ値を 0 と 2 PI 間の角度にマッピングするために使用される軸オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      データ値を 0 と 2 PI 間の角度にマッピングするために使用される軸オブジェクトです。 デフォルトでは、<codeph>autoAdjust</codeph> プロパティが <codeph>false</codeph> の線状軸になります。 したがって、データ値はグラフに均等にマッピングされます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:explodeRadius:get"><apiName>explodeRadius</apiName><shortdesc>
      0 から 1 までの数値です。円系列の全区分をグラフの中心からどのくらい分離するかを全半径のパーセンテージで指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      0 から 1 までの数値です。円系列の全区分をグラフの中心からどのくらい分離するかを全半径のパーセンテージで指定します。 
      
      <p>この値は、円系列の全区分を均一に分離する値です。 <codeph>perWedgeExplodeRadius</codeph> プロパティでは、この分離する値を区分ごとに設定できます。</p>
      
      <p>各区分の分離半径は、<codeph>explodeRadius</codeph> プロパティの値に、<codeph>perWedgeExplodeRadius</codeph> 配列内のそれぞれの区分の値を加えたものになります。</p>
      
      <p>円系列をグラフの境界内に留める一方、各区分を取り出せるようにする目的で、円グラフの全半径が縮小されることがあります。 実行時に動的に区分を取り出すと、円グラフの全半径が縮小されます。 この影響を回避するには、実行時に設定しようとしている最大分離半径を <codeph>reserveExplodeRadius</codeph> プロパティの値として指定することにより、領域を "予約" して、あらかじめ全半径を縮小しておきます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:field:get"><apiName>field</apiName><shortdesc>
      PieChart コントロールの各区分のデータを決定するデータプロバイダーのフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      PieChart コントロールの各区分のデータを決定するデータプロバイダーのフィールドを指定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     系列内の現在のグラフアイテムの塗りを返すメソッドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     系列内の現在のグラフアイテムの塗りを返すメソッドを指定します。 このプロパティを設定すると、カスタムの塗り関数の戻り値は <codeph>fills</codeph> スタイルプロパティよりも優先されます。 ただし null が返された場合は、<codeph>fills</codeph> が優先されます。
     
     <p>カスタムの <codeph>fillFunction</codeph> には、次のシグネチャがあります。
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> は、レンダリング中のグラフアイテムへの参照です。 <codeph>index</codeph> は、renderData キャッシュのグラフアイテムのインデックスです。このインデックスは、x、y、z の値に基づいてソートされているので、グラフのデータプロバイダーのインデックスとは異なります。この関数は、<codeph>IFill</codeph> インターフェイスを実装するオブジェクトを返します。
     </p>
      
     <p>カスタマイズした <codeph>fillFunction</codeph> の使用方法の例としては、任意のしきい値に基づく塗りを返させることができます。</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:PieSeriesItem = PieSeriesItem(item);
          if (curItem.number > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
       
     <p>
      グラフ系列にカスタムの塗り関数を指定した場合に、Legend コントロールを使用するには、手動で Legend コントロールを作成してそれに LegendItems を追加する必要があります。
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      この系列が個々のアイテムを表現する場合に使用する ChartItem のサブタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      この系列が個々のアイテムを表現する場合に使用する ChartItem のサブタイプです。 アイテムにさらに情報を格納する必要がある場合には、サブクラスでオーバーライドし、さらに特化したクラスを返すことができます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:items:get"><apiName>items</apiName><shortdesc>
      
      フィルター適用後に系列内にあるすべてのアイテムを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      フィルター適用後に系列内にあるすべてのアイテムを取得します。
      <p>個々の系列によって、返されるアイテムのリストが決まります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:labelField:get"><apiName>labelField</apiName><shortdesc>
     値がラベルとして表示される、データプロバイダー内のフィールドの名前です。labelFunction が指定されている場合は無視されます。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
     値がラベルとして表示される、データプロバイダー内のフィールドの名前です。labelFunction が指定されている場合は無視されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      PieSeries の各ラベルのレンダリングに使用されるコールバック関数を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      PieSeries の各ラベルのレンダリングに使用されるコールバック関数を指定します。 コールバック関数の形式を以下に示します。
      <pre>
      <i>function_name</i>(<i>data</i>:Object, <i>field</i>:String, <i>index</i>:Number, <i>percentValue</i>:Number):String { ... }
      </pre>
     
      <codeph>data</codeph> オブジェクトは、レンダリングされる dataProvider アイテムです。 <codeph>field</codeph> ストリングは、レンダリングされるデータに含まれるフィールドの名前です。 <codeph>index</codeph> 数値は、レンダリングされるアイテムの元の dataProvider のインデックスです。 <codeph>percent</codeph> 数値は、このアイテムが全体の何割を表現するかを示す数値です。 この関数は、このアイテムのラベルとなるストリングを返します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:nameField:get"><apiName>nameField</apiName><shortdesc>
      PieChart コントロールの各区分の名前を決定するデータプロバイダーのフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      PieChart コントロールの各区分の名前を決定するデータプロバイダーのフィールドを指定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:outerRadius:get"><apiName>outerRadius</apiName><shortdesc>
      領域全体のうち PieSeries が系列の内容をレンダリングする場合に使用可能な領域の割合です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      領域全体のうち PieSeries が系列の内容をレンダリングする場合に使用可能な領域の割合です。 この値はグラフによって管理されるため、直接割り当てないでください。
      <p>値の範囲は 0 から 1 になります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:perWedgeExplodeRadius:get"><apiName>perWedgeExplodeRadius</apiName><shortdesc>
      0 から 1 までの数値の配列です。円系列の各区分をグラフの中心からどのくらい分離するかを全半径のパーセンテージで指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      0 から 1 までの数値の配列です。円系列の各区分をグラフの中心からどのくらい分離するかを全半径のパーセンテージで指定します。 
      
      <p>この配列の <i>n</i> 番目の値は、<i>n</i> 番目の区分に対応しています。 例えば、3 番目の区分を半径の 1/2 だけ分離するには、<codeph>perWedgeExplodeRadius = [ 0, 0, 50];</codeph> のように値を割り当てます。</p>
      
      <p>配列内の <codeph>null</codeph> 値または欠損値は、0 として扱われます。</p>
      
      <p>円系列をグラフの境界内に留める一方、各区分を取り出せるようにする目的で、円グラフの全半径が縮小されることがあります。</p>
           
      <p>実行時に動的に区分を取り出すと、円グラフの全半径が縮小されます。 この影響を回避するには、実行時に設定しようとしている最大分離半径を <codeph>reserveExplodeRadius</codeph> プロパティの値として指定することにより、領域を "予約" して、あらかじめ全半径を縮小しておきます。</p>
      
      <p><codeph>perWedgeExplodeRadius</codeph> 配列内の個々の区分の値が、系列の <codeph>explodeRadius</codeph> プロパティの値に追加され、該当の区分に対する分離半径の合計が計算されます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      この系列がレンダリングに必要な全データを格納する場合に使用する ChartRenderData のサブタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      この系列がレンダリングに必要な全データを格納する場合に使用する ChartRenderData のサブタイプです。 レンダリング用にさらに情報を格納する必要がある場合には、サブクラスでオーバーライドし、さらに特化したクラスを返すことができます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:reserveExplodeRadius:get"><apiName>reserveExplodeRadius</apiName><shortdesc>
      0 から 1 までの数値です。円系列の全半径のうち実行時に区分を分離するために予約しておく割合を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      0 から 1 までの数値です。円系列の全半径のうち実行時に区分を分離するために予約しておく割合を指定します。 区分を分離するときには、グラフの境界を超えないよう、円グラフの全半径を縮小する必要があります。 このため、開発者が実行時に区分の分離値を変更した場合、区分を 1 つだけ取り出すという所期の効果が得られるのではなく、全区分を効率よく縮小できるようになります。 これを回避するには、実行時に区分を最大でどのくらい分離するのかを <codeph>reserveExplodeRadius</codeph> に設定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:startAngle:get"><apiName>startAngle</apiName><shortdesc>
      PieChart コントロールの最初の区分の開始角度を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      PieChart コントロールの最初の区分の開始角度を指定します。 デフォルト値は 0 で、PieChart コントロール右側が水平になります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:BarSeries"><apiName>BarSeries</apiName><shortdesc>
  BarChart コントロールのデータ系列を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="labelSizeLimit" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  フォントサイズのしきい値をポイントで指定します。これ以下のサイズのラベルは判読不能と見なされます。 このしきい値を下回ったラベルは切り捨てられます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,outside,inside" inherit="no" name="labelPosition" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
 ラベルの位置を指定します。可能な値は、<codeph>"none"</codeph>、<codeph>"outside"</codeph>、および <codeph>"inside"</codeph> です。
 
 </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="labelClass" owner="mx.charts.series:BarSeries" playerVersion="Flash10.2" type="Class">
<description>
  このコンポーネントがラベルをレンダリングするために使用するクラス。
   <p>mx.controls.Label クラスまたは spark.components.Label クラスのどちらかに設定できます。</p>
   </description>
<default>spark.components.Label
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="labelAlign" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
 ラベルの整列設定を指定します。 これは <codeph>labelPostion</codeph> が <codeph>inside</codeph> の場合のみ考慮されます。 可能な値は <codeph>center</codeph>、<codeph>left</codeph>、および <codeph>right</codeph> です。
 
 </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Array">
<description>
  系列内の各アイテムの塗りを定義する塗りつぶしオブジェクトの配列を指定します。 これは <codeph>fill</codeph> スタイルプロパティよりも優先されます。 <codeph>fillFunction</codeph> プロパティでカスタムメソッドが指定されている場合は、それがこの配列よりも優先されます。 すべてのアイテムに十分な配列エレメントを用意しない場合、配列の最初から塗りが繰り返されます。
  
  <p>CSS を使用してこのプロパティの値を設定するには：
   <pre>
    BarSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>MXML を使用してこのプロパティの値を設定するには：
   <pre>
    &lt;mx:BarSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:BarSeries>
   </pre>
  </p>
  
  <p>
  <codeph>fills</codeph> プロパティを指定した場合に、Legend コントロールを使用するには、手動で Legend コントロールを作成してそれに LegendItems を追加する必要があります。
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセット（ピクセル単位）です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 可能な値は、<codeph>"none"</codeph> および <codeph>"underline"</codeph> です。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  コンテナ内のテキストの整列。 可能な値は <codeph>"left"</codeph>、<codeph>"right"</codeph>、または <codeph>"center"</codeph> です。
 
  <p>ほとんどのコントロールのデフォルト値は <codeph>left</codeph> です。 Button、LinkButton、および AccordionHeader コンポーネントの場合、デフォルト値は <codeph>"center"</codeph> です。 これらのコンポーネントでは、このプロパティは <codeph>labelPlacement</codeph> プロパティが <codeph>"left"</codeph> または <codeph>"right"</codeph> に設定されている場合にのみ認識されます。 <codeph>labelPlacement</codeph> が <codeph>"top"</codeph> または <codeph>"bottom"</codeph> に設定されている場合は、テキストおよびアイコンが中央に配置されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  各文字間に表示される追加のピクセル数。 正の値を指定すると文字間隔が通常より広くなり、負の値を指定すると文字間隔が通常より狭くなります。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Boolean">
<description>
  カーニングが有効（<codeph>true</codeph>) か無効（<codeph>false</codeph>）かを示すブール値です。カーニングでは、読みやすくするために、特定の文字ペア間の間隔を調整します。ただし、カーニングは見出しを大きなフォントにする場合など、必要な場合に限って使用してください。 カーニングは、埋め込み FlashType フォントに対してのみサポートされています。 Verdana や、Courier New などの等幅フォントなど、特定のフォントではカーニングはサポートされていません。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"bold"</codeph> です。 LegendItem のデフォルトは <codeph>"bold"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>thickness</codeph> プロパティを設定します。 このプロパティは字形のエッジの太さを指定します。 可能な値は -200 から 200 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルは、システムフォントには影響を与えません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"italic"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 ColorPicker コントロール以外のすべてのコントロールのデフォルト値は 10 です。 ColorPicker コントロールのデフォルト値は 11 です。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>sharpness</codeph> プロパティを設定します。 このプロパティは字形のエッジのシャープネスを指定します。 可能な値は -400 から 400 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>gridFitType</codeph> プロパティを設定します。 可能な値は、<codeph>"none"</codeph>（<codeph>flash.text.GridFitType.NONE</codeph>）、<codeph>"pixel"</codeph>（<codeph>flash.text.GridFitType.PIXEL</codeph>）、および <codeph>"subpixel"</codeph>（<codeph>flash.text.GridFitType.SUBPIXEL</codeph>）です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  使用するフォントの名前です。 完全な CSS 実装と異なり、カンマ区切りリストはサポートされません。 任意のフォントファミリ名を使用できます。 汎用フォント名を指定した場合、適切なデバイスフォントに置換されます。
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  内部 TextField の <codeph>antiAliasType</codeph> プロパティを設定します。 可能な値は、<codeph>"normal"</codeph>（<codeph>flash.text.AntiAliasType.NORMAL</codeph>）および <codeph>"advanced"</codeph>（<codeph>flash.text.AntiAliasType.ADVANCED</codeph>）です。 
  
  <p>デフォルト値は <codeph>"advanced"</codeph> です。この場合、埋め込み FlashType フォントを使用していれば FlashType レンダラーが有効になります。 FlashType レンダラーを無効にするには、<codeph>"normal"</codeph> に設定してください。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
  
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="uint">
<description>
  コンポーネントが無効な場合のテキストの色です。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="uint">
<description>
  コンポーネントのラベルを含めたコンポーネント内のテキストの色です。
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列が、関連する凡例にマーカーをレンダリングする場合に使用するクラスです。 このスタイルが <codeph>null</codeph> の場合、ほとんどの系列ではデフォルトで itemRenderer が凡例マーカースキンとして使用されます。 凡例マーカーとして使用するクラスには、IFlexDisplayObject インターフェイスを実装する必要があるだけでなく、オプションで ISimpleStyleClient インターフェイスおよび IDataRenderer インターフェイスを実装することもできます。 凡例マーカーとして使用するクラスに IDataRenderer インターフェイスを実装すると、データプロパティに LegendData インスタンスが割り当てられます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列がグラフに個々のアイテムを表現する場合に使用するクラスとなるファクトリです。 このクラスは、グラフ内のエレメントごとに 1 回インスタンス化されます。 itemRenderer として使用するクラスには、IFlexDisplayObject、ISimpleStyleClient、IDataRenderer の各インターフェイスを実装する必要があります。 <codeph>data</codeph> プロパティには、スキンインスタンスがレンダリングする chartItem が割り当てられます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  このデータ系列の線スタイルを設定します。 線を定義するには、Stroke オブジェクトを指定する必要があります。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  このデータ系列の塗りを設定します。 IFill インターフェイスを実装するオブジェクトか、単色のカラー値を表す数値を指定できます。 CSS を使用して単色の塗りを指定することもできます。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:BarSeries&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:BarSeries
    <strong>Properties</strong>
    barWidthRatio=".65"
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    labelField="<i>No default</i>"
    labelFunction="<i>No default</i>"
    maxBarWidth="<i>No default</i>"
    minField="null"
    offset="<i>No default</i>"
    stacker="<i>No default</i>"
    stackTotals="<i>No default</i>"
    verticalAxis="<i>No default</i>" 
    xField="null"
    yField="null"
  
    <strong>Styles</strong>
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    fontFamily="Verdana"
    fontSize="10"
    fontStyle="italic|normal"
    fontWeight="bold|normal"
    labelAlign="center|left|right"
    labelPosition="none|inside|outside"
    labelSizeLimit="9"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    stroke="<i>IStroke; no default</i>"
    textDecoration="underline|none"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IStackable2</apiBaseInterface><apiBaseInterface>mx.charts.chartClasses:IBar</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  BarChart コントロールのデータ系列を定義します。 デフォルトでは、このクラスは BoxItemRenderer クラスを使用します。 オプションでデータ系列の itemRenderer も定義できます。 itemRenderer には、IDataRenderer インターフェイスを実装する必要があります。 
   </apiDesc><example conref="Column_BarChartExample.mxml"><swfblock conref="../examples/Column_BarChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#BarChart"><linktext>mx.charts.BarChart</linktext></link></related-links><apiConstructor id="mx.charts.series:BarSeries:BarSeries"><apiName>BarSeries</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:BarSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      グラフを表すのに使用されるアイテムレンダラーインスタンスをカスタマイズします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>作成される新しいアイテムレンダラーインスタンスです。
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>アイテムレンダラーインスタンスを管理するために使用される InstanceCache です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      グラフを表すのに使用されるアイテムレンダラーインスタンスをカスタマイズします。 このメソッドは、グラフのレンダリング中に新しいアイテムレンダラーが必要とされる場合、常に自動的に呼び出されます。 必要に応じて独自のカスタマイズを加えるために、このメソッドをオーバーライドできます。
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.series:BarSeries:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      
      データプロバイダー内の基になるデータが変更されたことを系列に通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>このメソッドが更新メソッドへの呼び出しをトリガーする場合は <codeph>true</codeph> になります。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      データプロバイダー内の基になるデータが変更されたことを系列に通知します。 この関数によって、<codeph>updateData()</codeph>、<codeph>updateMapping()</codeph>、<codeph>updateFilter()</codeph>、および <codeph>updateTransform()</codeph> メソッドの呼び出しが、次回の <codeph>commitProperties()</codeph> メソッドの呼び出し時にトリガーされます。 グラフのエレメントに割り当てられているデータエフェクトがある場合は、このメソッドによって表示エフェクトと非表示エフェクトもトリガーされます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:protected:invalidateMapping"><apiName>invalidateMapping</apiName><shortdesc>
      
      数値へのデータのマッピングが変更されたため、再計算が必要であることを系列に通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>このメソッドが更新メソッドへの呼び出しをトリガーする場合は <codeph>true</codeph> になります。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      数値へのデータのマッピングが変更されたため、再計算が必要であることを系列に通知します。 この関数を呼び出すと、<codeph>updateMapping()</codeph>、<codeph>updateFilter()</codeph>、および <codeph>updateTransform()</codeph> メソッドの呼び出しが、次回の <codeph>commitProperties()</codeph> メソッドの呼び出し時にトリガーされます。 グラフのエレメントに割り当てられているデータエフェクトがある場合は、このメソッドによって表示エフェクトと非表示エフェクトもトリガーされます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:stackAll"><apiName>stackAll</apiName><shortdesc>
      系列を積み重ねます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>新たに積み重ねる系列の最大値および最小値を表すオブジェクトです。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>stackedPosYValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>系列が積み重ねられる基本値が含まれます。 辞書のキーは y 値で、値は正の x 値です。
     
      </apiDesc></apiParam><apiParam><apiItemName>stackedNegYValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>系列が積み重ねられる基本値が含まれます。 辞書のキーは y 値で、値は負の x 値です。
      
      </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable2</apiOperationClassifier><apiDesc>積み重ねの中の直前のエレメントです。 例えば、同じ型のエレメントの場合は、このプロパティへのアクセスを使用することにより、レンダリング時に同じ処理を繰り返す必要を回避できます。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      系列を積み重ねます。 通常、系列はデータプロバイダーからデータをロードするため <codeph>updateData()</codeph> 関数を実装しています。 ただし、積み重ね系列では、必ずしもデータプロバイダーに値が格納されているとは限らないため、特殊な操作が実行されます。 その値は、データプロバイダーに何が格納されていても、積み重ねられる側のオブジェクトによってロードされた値と合算したものになります。
      <p>カスタム積み重ね系列には、<codeph>stackAll()</codeph> メソッドを実装してください。データプロバイダーからデータをロードし、レンダリング対象の実値が取得される辞書内の基本値にそのデータを追加し、合算後の新しい値で辞書内の値を置き換えます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:stack"><apiName>stack</apiName><shortdesc>
      系列を積み重ねます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>新たに積み重ねる系列の最大値です。
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>stackedYValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>系列が積み重ねられる基本値が含まれます。 辞書のキーは x 値で、値は y 値です。
      
      </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable</apiOperationClassifier><apiDesc>積み重ねの中の直前のエレメントです。 例えば、同じ型のエレメントの場合は、このプロパティへのアクセスを使用することにより、レンダリング時に同じ処理を繰り返す必要を回避できます。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      系列を積み重ねます。 通常、系列はデータプロバイダーからデータをロードするため <codeph>updateData()</codeph> 関数を実装しています。 ただし、積み重ね系列では、必ずしもデータプロバイダーに値が格納されているとは限らないため、特殊な操作が実行されます。 その値は、データプロバイダーに何が格納されていても、積み重ねられる側のオブジェクトによってロードされた値と合算したものになります。
      <p>カスタム積み重ね系列には、<codeph>stack()</codeph> メソッドを実装してください。データプロバイダーからデータをロードし、レンダリング対象の実値が取得される辞書内の基本値にそのデータを追加し、合算後の新しい値で辞書内の値を置き換えます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:BarSeries:barWidthRatio:get"><apiName>barWidthRatio</apiName><shortdesc>
      表示する横棒の幅をカテゴリの幅に対する割合で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>.65
      
      </apiDefaultValue></apiValueDef><apiDesc>
      表示する横棒の幅をカテゴリの幅に対する割合で指定します。 値が 1 の場合は領域全体が使用され、.6 の場合は横棒の使用可能領域の 60% が使用されます。 通常、このプロパティを直接設定することはありません。 実際の横棒の幅には、<codeph>barWidthRatio</codeph> プロパティと <codeph>maxbarWidth</codeph> プロパティの値のうち小さい方が使用されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     系列内の現在のグラフアイテムの塗りを返すメソッドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     系列内の現在のグラフアイテムの塗りを返すメソッドを指定します。 このプロパティを設定すると、カスタムの塗り関数の戻り値は <codeph>fill</codeph> および <codeph>fills</codeph> の各スタイルプロパティよりも優先されます。 ただし null が返された場合は、<codeph>fills</codeph> および <codeph>fill</codeph> が、この順序で優先されます。  
     
     <p>カスタムの <codeph>fillFunction</codeph> には、次のシグネチャがあります。
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> は、レンダリング中のグラフアイテムへの参照です。 <codeph>index</codeph> は、renderData キャッシュのグラフアイテムのインデックスです。このインデックスは、x、y、z の値に基づいてソートされているので、グラフのデータプロバイダーのインデックスとは異なります。この関数は、<codeph>IFill</codeph> インターフェイスを実装するオブジェクトを返します。
     </p>
      
     <p>カスタマイズした <codeph>fillFunction</codeph> の使用方法の例としては、任意のしきい値に基づく塗りを返させることができます。</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill
     {
          var curItem:BarSeriesItem = BarSeriesItem(item);
          if (curItem.xNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
          <p>
      グラフ系列にカスタムの塗り関数を指定した場合に、Legend コントロールを使用するには、手動で Legend コントロールを作成してそれに LegendItems を追加する必要があります。
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      x 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      x 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。 LinearAxis クラスまたは CategoryAxis クラスのいずれかを使用すると、horizontalAxis のプロパティを MXML の子タグとして設定したり、ActionScript で LinearAxis オブジェクトまたは CategoryAxis オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      この系列が個々のアイテムを表現する場合に使用する ChartItem のサブタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      この系列が個々のアイテムを表現する場合に使用する ChartItem のサブタイプです。 アイテムにさらに情報を格納する必要がある場合には、サブクラスでオーバーライドし、さらに特化したクラスを返すことができます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:items:get"><apiName>items</apiName><shortdesc>
      
      フィルター適用後に系列内にあるすべてのアイテムを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      フィルター適用後に系列内にあるすべてのアイテムを取得します。
      <p>個々の系列によって、返されるアイテムのリストが決まります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:labelField:get"><apiName>labelField</apiName><shortdesc>
     値がラベルとして表示される、データプロバイダー内のフィールドの名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
     値がラベルとして表示される、データプロバイダー内のフィールドの名前です。 このプロパティは、<codeph>labelFunction</codeph> プロパティが指定されている場合は無視されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Series の各ラベルのレンダリングに使用されるコールバック関数を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Series の各ラベルのレンダリングに使用されるコールバック関数を指定します。 labelFunction には次のシグネチャが必要です。
          <pre>
     function <i>function_name</i>(<i>element</i>:ChartItem, <i>series</i>:Series):String { ... }
     </pre>
     
     <codeph><i>element</i></codeph> は、レンダリング中のグラフアイテムです。 <codeph><i>series</i></codeph> は、グラフアイテムが属する系列です。 返されるストリングは、現在のアイテムのラベルです。
          <p>カスタマイズした labelFunction の使用法の例としては、次のようなものがあります。</p>
     <pre>
     private function myLabelFunction(element:ChartItem, series:Series):String {
          var item:BarSeriesItem = BarSeriesItem(element);
          var ser:BarSeries = BarSeries(series);
          return(item.item.Country + ":" +"" + ser.xField.toString() +":"+ item.xNumber);
     }
     </pre>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:maxBarWidth:get"><apiName>maxBarWidth</apiName><shortdesc>
      横棒の幅をピクセル単位で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      横棒の幅をピクセル単位で指定します。 実際の横棒の幅には、このスタイルと <codeph>barWidthRatio</codeph> プロパティの値のうち小さい方が使用されます。 集合横棒グラフの場合、このスペースが各集合内の横棒によって均等に分割されます。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:minField:get"><apiName>minField</apiName><shortdesc>
      各横棒の底部を決定するデータプロバイダーのフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      各横棒の底部を決定するデータプロバイダーのフィールドを指定します。 <codeph>null</codeph> の場合、縦棒の基底は範囲の最小値（フィールド値が負の場合は最大値）になります。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:offset:get"><apiName>offset</apiName><shortdesc>
      使用可能な領域の中心から横棒の中心をずらす度合いを、カテゴリの幅に対する割合で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      使用可能な領域の中心から横棒の中心をずらす度合いを、カテゴリの幅に対する割合で指定します。 値の範囲は <codeph>-100</codeph> ～ <codeph>100</codeph> のパーセンテージです。 領域の中心に棒を配置するには <codeph>0</codeph> に設定します。 このプロパティの値を <codeph>-50</codeph> に設定すると、縦棒は使用可能な領域の開始位置の中央に配置されます。 通常、このプロパティを直接設定することはありません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      この系列がレンダリングに必要な全データを格納する場合に使用する ChartRenderData のサブタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      この系列がレンダリングに必要な全データを格納する場合に使用する ChartRenderData のサブタイプです。 レンダリング用にさらに情報を格納する必要がある場合には、サブクラスでオーバーライドし、さらに特化したクラスを返すことができます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:stacker:get"><apiName>stacker</apiName><shortdesc>
      この BarSeries に関連付けられた StackedSeries です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:StackedSeries</apiValueClassifier></apiValueDef><apiDesc>
      この BarSeries に関連付けられた StackedSeries です。 このスタッカーによって、系列の積み重ね動作が管理されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      y 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      y 軸上のアイテムのラベル、目盛り、およびデータの位置を定義します。 LinearAxis クラスまたは CategoryAxis クラスのいずれかを使用すると、verticalAxis のプロパティを MXML の子タグとして設定したり、ActionScript で LinearAxis オブジェクトまたは CategoryAxis オブジェクトを作成したりできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:xField:get"><apiName>xField</apiName><shortdesc>
      各横棒の先端の x 軸の位置を決定するデータプロバイダーのフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      各横棒の先端の x 軸の位置を決定するデータプロバイダーのフィールドを指定します。 <codeph>null</codeph> の場合、BarSeries はデータプロバイダーが数値の配列であると見なし、数値を値として使用します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:yField:get"><apiName>yField</apiName><shortdesc> 
      グラフ内の各横棒の終端の y 軸の位置を決定するデータプロバイダーのフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      グラフ内の各横棒の終端の y 軸の位置を決定するデータプロバイダーのフィールドを指定します。 <codeph>null</codeph> の場合、データプロバイダー内のデータの順序で横棒が配置されます。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.charts.series:BarSeries:stackTotals:set"><apiName>stackTotals</apiName><shortdesc>
      系列の積み重ねの総計です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      系列の積み重ねの総計です。
           </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>