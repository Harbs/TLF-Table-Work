<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.charts"><apiName>mx.charts</apiName><apiDetail/><apiClassifier id="mx.charts:ColumnChart"><apiName>ColumnChart</apiName><shortdesc>
  ColumnChart コントロールは、データを一連の縦棒で表します。縦棒の高さはデータの値によって決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="labelClass" owner="mx.charts:ColumnChart" playerVersion="Flash10.2" type="Class">
<description>
  このコンポーネントがラベルをレンダリングするために使用するクラス。
   <p>mx.controls.Label クラスまたは spark.components.Label クラスのどちらかに設定できます。</p>
   </description>
<default>spark.components.Label
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="maxColumnWidth" owner="mx.charts:ColumnChart" playerVersion="Flash9" type="Number">
<description>
  描画する縦棒の幅をピクセル単位で指定します。 実際の縦棒の幅には、このプロパティと <codeph>columnWidthRatio</codeph> プロパティの値のうち小さい方が使用されます。 集合縦棒グラフの場合、この領域が各集合内の縦棒によって均等に分割されます。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnWidthRatio" owner="mx.charts:ColumnChart" playerVersion="Flash9" type="Number">
<description>
  縦棒を描画する際の、カテゴリの幅を基準にした棒の比率を指定します。0 ～ 1 の範囲内のパーセンテージで表します。値が 1 の場合は領域全体が使用され、0.6 の場合は縦棒の使用可能領域の 60% が使用されます。 実際の縦棒の幅には、<codeph>columnWidthRatio</codeph> プロパティと <codeph>maxColumnWidth</codeph> プロパティの値のうち、小さい方が使用されます。 集合縦棒グラフの場合、この領域が各集合内の縦棒によって均等に分割されます。 デフォルト値は 0.65 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:ColumnChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:ColumnChart
    <strong>Properties</strong>
    extendLabelToEnd="false|true"
    maxLabelWidth="<i>50</i>"
    showLabelVertically="false|true"
    type="<i>clustered|overlaid|stacked|100%</i>"
 
    <strong>Styles</strong>
    columnWidthRatio=".65"
    maxColumnWidth="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  ColumnChart コントロールは、データを一連の縦棒で表します。縦棒の高さはデータの値によって決定します。ColumnChart を使用すると、単純縦棒グラフ、集合縦棒グラフ、積み上げ縦棒グラフ、構成比縦棒グラフ、高低縦棒グラフなど、各種の縦棒グラフを表すことができます。 
  
  <p>ColumnChart コントロールでは、<codeph>series</codeph> プロパティに ColumnSeries オブジェクトの配列が含まれている必要があります。</p>
   <p>積み上げ縦棒グラフおよび構成比縦棒グラフは、ColumnSeries オブジェクトの <codeph>minField</codeph> プロパティをオーバーライドします。</p>
   </apiDesc><example conref="Column_BarChartExample.mxml"><swfblock conref="examples/Column_BarChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#ColumnSeries"><linktext>mx.charts.series.ColumnSeries</linktext></link></related-links><apiConstructor id="mx.charts:ColumnChart:ColumnChart"><apiName>ColumnChart</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:ColumnChart:extendLabelToEnd:get"><apiName>extendLabelToEnd</apiName><shortdesc>
     データラベルをグラフの端まで拡張できるかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
     データラベルをグラフの端まで拡張できるかどうかを指定します。 これを true に設定した場合、アイテムとグラフ境界線の間の領域全体を使用してラベルを表示できます。そうでない場合、データラベルはグラフアイテムによって定義された領域内に表示されます。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ColumnChart:maxLabelWidth:get"><apiName>maxLabelWidth</apiName><shortdesc>
     アイテムのラベルの最大の幅（ピクセル単位）を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>50
      
      </apiDefaultValue></apiValueDef><apiDesc>
     アイテムのラベルの最大の幅（ピクセル単位）を指定します。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ColumnChart:showLabelVertically:get"><apiName>showLabelVertically</apiName><shortdesc>
     データラベルを垂直に表示できるかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
     データラベルを垂直に表示できるかどうかを指定します。 これを true に設定して、埋め込みフォントを使用すると、ラベルは縦棒の幅に水平に収まらない場合に垂直に表示されます。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ColumnChart:type:get"><apiName>type</apiName><shortdesc>
      縦棒グラフの種類を表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      縦棒グラフの種類を表します。
           <p>有効な値は次のとおりです。</p>
      <ul>
        <li><codeph>"clustered"</codeph>：各データ系列の値はカテゴリ別にグループ化されます。 これはデフォルトの種類です。</li>
        <li><codeph>"overlaid"</codeph>：複数の値がカテゴリごとに積み上げられて表示され、最後のデータ系列が一番上になります。 </li>
        <li><codeph>"stacked"</codeph>：縦棒は積み上げられ、カテゴリ別にグループ化されます。 各縦棒は、その下にあるすべての縦棒の累積値を表します。 </li>
        <li><codeph>"100%"</codeph>：縦棒は積み上げられ、合計が 100% になります。 各縦棒は、カテゴリの値の合計値に占めるその縦棒の構成比を表します。</li>
      </ul>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ColumnChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:LinearAxis"><apiName>LinearAxis</apiName><shortdesc>
  LinearAxis クラスは、最小値から最大値の間の数値を、グラフの軸に沿って均等にマッピングします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:LinearAxis&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:LinearAxis
    <strong>Properties</strong>
    interval="null"
    maximum="null"
    maximumLabelPrecision="null"
    minimum="null"
    minorInterval="null"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:NumericAxis</apiBaseClassifier></apiClassifierDef><apiDesc>
  LinearAxis クラスは、最小値から最大値の間の数値を、グラフの軸に沿って均等にマッピングします。 デフォルトでは、画面上のすべてのグラフエレメントに適合するように、<codeph>minimum</codeph>、<codeph>maximum</codeph>、および <codeph>interval</codeph> の値がグラフのデータから決定されます。 これらのプロパティに特定の値を明示的に設定することもできます。
  
  <p>範囲内の値の自動決定は、次の手順で行われます。
 
  <ol>
    <li> Flex により、グラフに表示されているすべてのデータに適合する最小値および最大値が決定されます。</li>
    <li> <codeph>autoAdjust</codeph> プロパティおよび <codeph>baseAtZero</codeph> プロパティが <codeph>true</codeph> に設定された場合、次の調整が行われます。
      <ul>
        <li>すべての値が正の場合、<codeph>minimum</codeph> プロパティは 0 に設定されます。</li>
  	  <li>すべての値が負の場合、<codeph>maximum</codeph> プロパティは 0 に設定されます。</li>
  	</ul>
    </li>
    <li> <codeph>autoAdjust</codeph> プロパティが <codeph>true</codeph> に設定された場合、<codeph>minimum</codeph> プロパティと <codeph>maximum</codeph> プロパティの値を切り上げるか、または切り捨てて調整します。</li>
    <li> グラフ内で表示されているエレメントで、正しく表示されるために追加スペース（ラベル用など）を必要とするものがあるかどうかがチェックされます。 必要に応じて <codeph>minimum</codeph> プロパティと <codeph>maximum</codeph> プロパティが調整されます。</li>
    <li> Flex は、<codeph>minimum</codeph> および <codeph>maximum</codeph> の値にスペースが明示的に指定されているかを調べ、必要に応じてそれらの値を調整します。</li>
  </ol>
  </p>
  
  </apiDesc><example conref="HLOCChartExample.mxml"><swfblock conref="examples/HLOCChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.chartClasses.xml#IAxis"><linktext>mx.charts.chartClasses.IAxis</linktext></link></related-links><apiConstructor id="mx.charts:LinearAxis:LinearAxis"><apiName>LinearAxis</apiName><shortdesc>
	 コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	 コンストラクターです。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:LinearAxis:interval:get"><apiName>interval</apiName><shortdesc>
	  軸に沿ったラベル間の間隔を示す数値を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  軸に沿ったラベル間の間隔を示す数値を指定します。 このプロパティが <codeph>NaN</codeph> に設定されている場合、Flex により間隔が計算されます。 デフォルト値は <codeph>NaN</codeph> です。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LinearAxis:maximum:get"><apiName>maximum</apiName><shortdesc>
	  軸のラベルの最大値を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  軸のラベルの最大値を指定します。 <codeph>autoAdjust</codeph> プロパティを <codeph>true</codeph> に設定すると、Flex によりこの値が計算されます。 <codeph>NaN</codeph> の場合は、グラフのデータから最大値が決定されます。 デフォルト値は <codeph>NaN</codeph> です。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LinearAxis:minimum:get"><apiName>minimum</apiName><shortdesc>
	  軸のラベルの最小値を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  軸のラベルの最小値を指定します。 <codeph>NaN</codeph> の場合は、グラフのデータから最小値が決定されます。 デフォルト値は <codeph>NaN</codeph> です。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LinearAxis:minorInterval:get"><apiName>minorInterval</apiName><shortdesc>
	  軸に沿った小さな目盛りの間隔を示す数値を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  軸に沿った小さな目盛りの間隔を示す数値を指定します。 このプロパティが <codeph>NaN</codeph> に設定されている場合、Flex により差が計算されます。  
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LinearAxis:maximumLabelPrecision:set"><apiName>maximumLabelPrecision</apiName><shortdesc>
	  この軸によって生成されたラベルで小数値を表すときの最大小数桁数を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  この軸によって生成されたラベルで小数値を表すときの最大小数桁数を指定します。デフォルトでは、軸はこの値をラベル自体から自動生成します。値が 0 の場合、直近の整数値に四捨五入します。値が 2 の場合、値の 1/100 の桁で直近の数に四捨五入します。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:AreaChart"><apiName>AreaChart</apiName><shortdesc>
  AreaChart コントロールは、データ内の値をつなぐ線で囲まれた面としてデータを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:AreaChart&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:</p>
  
  <pre>
  &lt;mx:AreaChart
    <strong>Properties</strong>
    type="<i>overlaid|stacked|100%</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  AreaChart コントロールは、データ内の値をつなぐ線で囲まれた面としてデータを表します。AreaChart コントロールを使用すると、単純面グラフ、積み上げ面グラフ、構成比面グラフ、高低面グラフなど、各種の面グラフを表すことができます。
  
  <p>AreaChart コントロールでは、<codeph>series</codeph> プロパティに AreaSeries オブジェクトの配列が含まれている必要があります。</p>
  
  <p>積み上げ面グラフおよび構成比面グラフは、AreaSeries オブジェクトの <codeph>minField</codeph> プロパティをオーバーライドします。</p>
   </apiDesc><example conref="Line_AreaChartExample.mxml"><swfblock conref="examples/Line_AreaChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#AreaSeries"><linktext>mx.charts.series.AreaSeries</linktext></link></related-links><apiConstructor id="mx.charts:AreaChart:AreaChart"><apiName>AreaChart</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:AreaChart:type:get"><apiName>type</apiName><shortdesc>
      レンダリングする面グラフの種類を表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      レンダリングする面グラフの種類を表します。
           <p>有効な値は次のとおりです。</p>
      <ul>
        <li><codeph>"overlaid"</codeph>：複数の領域が積み上げられて表示され、最後に指定されたデータ系列が一番上になります。 これがデフォルト値です。</li>
        <li><codeph>"stacked"</codeph>：領域は積み上げられ、カテゴリ別にグループ化されます。 各領域は、その下にあるすべての領域の累積値を表します。</li>
        <li><codeph>"100%"</codeph>：領域は積み上げられ、合計が 100% になります。 領域は、全体に占めるそのデータ系列の構成比を表します。</li>
      </ul>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AreaChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:PieChart"><apiName>PieChart</apiName><shortdesc>
  PieChart コントロールは、標準的な円グラフでデータ系列を表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="innerRadius" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  円グラフの中心の空洞のサイズを決定します。このプロパティは、円グラフ全体の半径に対する中心の円の半径のパーセンテージ値を表します。デフォルト値は 0% です。このプロパティを使用すると、ドーナツグラフを作成できます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセット（ピクセル単位）です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 可能な値は、<codeph>"none"</codeph> および <codeph>"underline"</codeph> です。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  コンテナ内のテキストの整列。 可能な値は <codeph>"left"</codeph>、<codeph>"right"</codeph>、または <codeph>"center"</codeph> です。
 
  <p>ほとんどのコントロールのデフォルト値は <codeph>left</codeph> です。 Button、LinkButton、および AccordionHeader コンポーネントの場合、デフォルト値は <codeph>"center"</codeph> です。 これらのコンポーネントでは、このプロパティは <codeph>labelPlacement</codeph> プロパティが <codeph>"left"</codeph> または <codeph>"right"</codeph> に設定されている場合にのみ認識されます。 <codeph>labelPlacement</codeph> が <codeph>"top"</codeph> または <codeph>"bottom"</codeph> に設定されている場合は、テキストおよびアイコンが中央に配置されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  各文字間に表示される追加のピクセル数。 正の値を指定すると文字間隔が通常より広くなり、負の値を指定すると文字間隔が通常より狭くなります。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts:PieChart" playerVersion="Flash9" type="Boolean">
<description>
  カーニングが有効（<codeph>true</codeph>) か無効（<codeph>false</codeph>）かを示すブール値です。カーニングでは、読みやすくするために、特定の文字ペア間の間隔を調整します。ただし、カーニングは見出しを大きなフォントにする場合など、必要な場合に限って使用してください。 カーニングは、埋め込み FlashType フォントに対してのみサポートされています。 Verdana や、Courier New などの等幅フォントなど、特定のフォントではカーニングはサポートされていません。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"bold"</codeph> です。 LegendItem のデフォルトは <codeph>"bold"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>thickness</codeph> プロパティを設定します。 このプロパティは字形のエッジの太さを指定します。 可能な値は -200 から 200 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルは、システムフォントには影響を与えません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"italic"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 ColorPicker コントロール以外のすべてのコントロールのデフォルト値は 10 です。 ColorPicker コントロールのデフォルト値は 11 です。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>sharpness</codeph> プロパティを設定します。 このプロパティは字形のエッジのシャープネスを指定します。 可能な値は -400 から 400 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>gridFitType</codeph> プロパティを設定します。 可能な値は、<codeph>"none"</codeph>（<codeph>flash.text.GridFitType.NONE</codeph>）、<codeph>"pixel"</codeph>（<codeph>flash.text.GridFitType.PIXEL</codeph>）、および <codeph>"subpixel"</codeph>（<codeph>flash.text.GridFitType.SUBPIXEL</codeph>）です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  使用するフォントの名前です。 完全な CSS 実装と異なり、カンマ区切りリストはサポートされません。 任意のフォントファミリ名を使用できます。 汎用フォント名を指定した場合、適切なデバイスフォントに置換されます。
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  内部 TextField の <codeph>antiAliasType</codeph> プロパティを設定します。 可能な値は、<codeph>"normal"</codeph>（<codeph>flash.text.AntiAliasType.NORMAL</codeph>）および <codeph>"advanced"</codeph>（<codeph>flash.text.AntiAliasType.ADVANCED</codeph>）です。 
  
  <p>デフォルト値は <codeph>"advanced"</codeph> です。この場合、埋め込み FlashType フォントを使用していれば FlashType レンダラーが有効になります。 FlashType レンダラーを無効にするには、<codeph>"normal"</codeph> に設定してください。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
  
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts:PieChart" playerVersion="Flash9" type="uint">
<description>
  コンポーネントが無効な場合のテキストの色です。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts:PieChart" playerVersion="Flash9" type="uint">
<description>
  コンポーネントのラベルを含めたコンポーネント内のテキストの色です。
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:PieChart&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:
  
  <pre>
  &lt;mx:PieChart
    <strong>Styles</strong>
    innerRadius="0"
    textAlign="left"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:PolarChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  PieChart コントロールは、標準的な円グラフでデータ系列を表します。円グラフ内の各区分の大きさは、データプロバイダーのデータにより、他の区分との関連で決定されます。 PieSeries クラスを使用すると、標準的な円グラフ、ドーナツグラフ、および積み上げ円グラフを作成できます。
  
  <p>PieChart コントロールでは、<codeph>series</codeph> プロパティに PieSeries オブジェクトの配列が含まれている必要があります。</p>
   </apiDesc><example conref="PieChartExample.mxml"><swfblock conref="examples/PieChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#PieSeries"><linktext>mx.charts.series.PieSeries</linktext></link></related-links><apiConstructor id="mx.charts:PieChart:PieChart"><apiName>PieChart</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:PieChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:GridLines"><apiName>GridLines</apiName><shortdesc> 
  GridLines クラスはグラフのデータ領域内にグリッド線を描画します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="verticalTickAligned" owner="mx.charts:GridLines" playerVersion="Flash9" type="Boolean">
<description>
  垂直方向のグリッド線を目盛りに揃えるかどうかを指定します。 <codeph>true</codeph> の場合、垂直方向のグリッド線は目盛りに揃えて描画されます。 <codeph>false</codeph> の場合、水平方向のグリッド線は目盛りと目盛りの間に描画されます。 デフォルト値は <codeph>true</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalStroke" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  垂直方向のグリッド線の線スタイルを指定します。 Stroke クラスを使用すると、プロパティを MXML の子タグとして定義したり、ActionScript で Stroke オブジェクトを作成したりできます。  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalShowOrigin" owner="mx.charts:GridLines" playerVersion="Flash9" type="Boolean">
<description>
  垂直方向の原点を描画するかどうかを指定します。 <codeph>true</codeph> の場合、原点がグラフの境界内にあると、<codeph>verticalOriginStroke</codeph> のスタイルを使用して原点が描画されます。 ColumnChart、LineChart、および AreaChart コントロールのデフォルト値は <codeph>false</codeph> です。 PlotChart、BubbleChart、および BarChart コントロールのデフォルト値は <codeph>true</codeph> です。 このプロパティは PieChart コントロールには適用されません。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalOriginStroke" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  垂直方向の原点の線スタイルを指定します。Stroke クラスを使用すると、プロパティを MXML の子タグとして定義したり、ActionScript で Stroke オブジェクトを作成したりできます。  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalFill" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  垂直方向の各グリッド線の間の領域を 1 つおきに定義する塗りのパターンを指定します。IFill クラスを使用すると、塗りのプロパティを MXML の子タグとして定義したり、ActionScript で IFill オブジェクトを作成したりできます。 グリッド線間の領域を塗りつぶさない場合は、<codeph>null</codeph> に設定します。 デフォルト値は <codeph>null</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalChangeCount" owner="mx.charts:GridLines" playerVersion="Flash9" type="int">
<description>
  垂直方向のグリッド線の間にある目盛りの数を指定します。 <codeph>verticalChangeCount</codeph> を <codeph>3</codeph> に設定すると、軸に沿って 2 つおきの目盛りにグリッド線を描画します。 塗りのパターンはグリッド線ごとに交互に変わるため、<codeph>verticalChangeCount</codeph> の値が大きいほど、各パターンの幅が広くなります。 デフォルト値は <codeph>1</codeph> です。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalAlternateFill" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  fill プロパティで定義されていない、垂直方向の各グリッド線の間の領域を交互に塗りつぶすパターンを指定します。 IFill クラスを使用すると、塗りのプロパティを MXML の子タグとして定義したり、ActionScript で IFill オブジェクトを作成したりできます。 グリッド線間の領域を塗りつぶさない場合は、<codeph>null</codeph> に設定します。 デフォルト値は <codeph>null</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalTickAligned" owner="mx.charts:GridLines" playerVersion="Flash9" type="Boolean">
<description>
  水平方向のグリッド線を目盛りに揃えるかどうかを指定します。 <codeph>true</codeph> の場合、水平方向のグリッド線は目盛りに揃えて描画されます。 <codeph>false</codeph> の場合、水平方向のグリッド線は目盛りと目盛りの間に描画されます。 デフォルト値は <codeph>true</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalStroke" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  水平方向のグリッド線の線スタイルを指定します。 Stroke クラスを使用すると、プロパティを MXML の子タグとして定義したり、ActionScript で Stroke オブジェクトを作成したりできます。  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalShowOrigin" owner="mx.charts:GridLines" playerVersion="Flash9" type="Boolean">
<description>
  水平方向の原点を描画するかどうかを指定します。 <codeph>true</codeph> の場合、原点がグラフの境界内にあると、<codeph>horizontalOriginStroke</codeph> のスタイルを使用してグリッド線が描画されます。 ColumnChart、LineChart、PlotChart、BubbleChart、および AreaChart の各コントロールのデフォルト値は <codeph>true</codeph> です。 BarChart コントロールのデフォルト値は <codeph>false</codeph> です。 このプロパティは PieChart コントロールには適用されません。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalOriginStroke" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  水平方向の原点の線スタイルを指定します。Stroke クラスを使用すると、プロパティを MXML の子タグとして定義したり、ActionScript で Stroke オブジェクトを作成したりできます。  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalFill" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  水平方向の各グリッド線の間の領域を 1 つおきに定義する塗りのパターンを指定します。IFill クラスを使用すると、塗りのプロパティを MXML の子タグとして定義したり、ActionScript で IFill オブジェクトを作成したりできます。 グリッド線間の領域を塗りつぶさない場合は、<codeph>null</codeph> に設定します。 デフォルト値は <codeph>null</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalChangeCount" owner="mx.charts:GridLines" playerVersion="Flash9" type="int">
<description>
  水平方向のグリッド線の間にある目盛りの数を指定します。 <codeph>horizontalChangeCount</codeph> を 3 に設定すると、軸に沿って 2 つおきの目盛りにグリッド線を描画します。 塗りのパターンはグリッド線ごとに交互に変わるため、<codeph>horizontalChangeCount</codeph> の値が大きいほど、各パターンの幅が広くなります。 デフォルト値は <codeph>1</codeph> です。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalAlternateFill" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  <codeph>fill</codeph> プロパティで定義されていない、水平方向の各グリッド線の間の領域を交互に塗りつぶすパターンを指定します。 IFill クラスを使用すると、塗りのプロパティを MXML の子タグとして定義したり、ActionScript で IFill オブジェクトを作成したりできます。 グリッド線間の領域を塗りつぶさない場合は、<codeph>null</codeph> に設定します。 デフォルト値は <codeph>null</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="horizontal,vertical,both" inherit="no" name="gridDirection" owner="mx.charts:GridLines" playerVersion="Flash9" type="String">
<description>
  グリッド線の方向を指定します。 有効な値は <codeph>horizontal</codeph>、<codeph>vertical</codeph>、または <codeph>both</codeph> であり、 デフォルト値は <codeph>horizontal</codeph> です。  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:GridLines&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:GridLines
    <strong>Styles</strong>
     gridDirection="horizontal|vertical|both"
     horizontalAlternateFill="null"
     horizontalChangeCount="1"
     horizontalFill="null"
     horizontalOriginStroke="<i>IStroke; No default</i>"
     horizontalShowOrigin="<i>Default depends on type of chart</i>"
     horizontalStroke="<i>IStroke; No default</i>"
     horizontalTickAligned="true|false"
     verticalAlternateFill="null"
     verticalChangeCount="1"
     verticalFill="null"
     verticalOriginStroke="<i>IStroke; No default</i>"
     verticalShowOrigin="<i>Default depends on type of chart</i>"
     verticalStroke="<i>IStroke; No default</i>"
     verticalTickAligned="true|false"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:ChartElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
  GridLines クラスはグラフのデータ領域内にグリッド線を描画します。 水平方向、垂直方向、または両方の線を描画できます。 
  
  <p>親グラフの目盛りに揃えてグリッド線が描画されます。デフォルトでは、適切な軸に沿って目盛りごとに 1 つの線を描画します。</p>
  
  <p>通常、GridLines クラスは、グラフコントロールの <codeph>backgroundElements</codeph> プロパティまたは <codeph>annotationElements</codeph> プロパティの子タグとして使用します。</p>
  
  </apiDesc><example conref="GridLinesExample.mxml"><swfblock conref="examples/GridLinesExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.charts:GridLines:GridLines"><apiName>GridLines</apiName><shortdesc>
	  コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  コンストラクターです。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:GridLines:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts:HLOCChart"><apiName>HLOCChart</apiName><shortdesc>
  HLOCChart（High Low Open Close：高値、安値、始値、終値）コントロールは、データ系列の高値、安値、始値、終値などの財務データを一連のローソク足で示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="maxColumnWidth" owner="mx.charts:HLOCChart" playerVersion="Flash9" type="Number">
<description>
  描画する HLOC 線の幅をピクセル単位で指定します。 実際の幅には、このプロパティと <codeph>columnWidthRatio</codeph> プロパティの値のうち小さい方が使用されます。 このスペースは、複数の HLOC の系列により比率に応じて分割されます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnWidthRatio" owner="mx.charts:HLOCChart" playerVersion="Flash9" type="Number">
<description>
  描画する際の、水平軸のカテゴリの幅を基準にした HLOC 線の比率を指定します。0 ～ 1 の範囲内のパーセンテージで表します。値が 1 の場合は領域全体が使用され、0.6 の場合はカテゴリの使用可能領域の 60% が使用されます。 実際のエレメントの幅には、このスタイルと <codeph>columnWidthRatio</codeph> プロパティと <codeph>maxColumnWidth</codeph> プロパティの値のうち、小さい方が使用されます。 このスペースは、複数のエレメントの系列により比率に応じて分割されます。 デフォルト値は 0.65 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  The <code>&lt;mx:HLOCChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:HLOCChart
    <strong>Styles</strong>
    columnWidthRatio=".65"
    maxColumnWidth="<i>No default</i>"
  /&gt;
  </pre> 
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  HLOCChart（High Low Open Close：高値、安値、始値、終値）コントロールは、データ系列の高値、安値、始値、終値などの財務データを一連のローソク足で示します。各エレメントの垂直線の上端および下端が、データポイントの高値および安値になります。 右向きの目盛りが終値になり、始値を指定した場合には左向きの目盛りが始値になります。 
   
  <p>HLOCChart コントロールでは、<codeph>series</codeph> プロパティに HLOCSeries オブジェクトの配列が含まれている必要があります。</p>
 
  </apiDesc><example conref="HLOCChartExample.mxml"><swfblock conref="examples/HLOCChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#HLOCSeries"><linktext>mx.charts.series.HLOCSeries</linktext></link></related-links><apiConstructor id="mx.charts:HLOCChart:HLOCChart"><apiName>HLOCChart</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:HLOCChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:BarChart"><apiName>BarChart</apiName><shortdesc>
  BarChart コントロールは、データ内の値によって長さが決まる一連の横棒でデータを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="labelClass" owner="mx.charts:BarChart" playerVersion="Flash10.2" type="Class">
<description>
  このコンポーネントがラベルをレンダリングするために使用するクラス。
   <p>mx.controls.Label クラスまたは spark.components.Label クラスのどちらかに設定できます。</p>
   </description>
<default>spark.components.Label
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="maxBarWidth" owner="mx.charts:BarChart" playerVersion="Flash9" type="Number">
<description>
  描画する横棒の幅をピクセル単位で指定します。 実際の横棒の幅には、このプロパティと <codeph>barWidthRatio</codeph> プロパティの値のうち小さい方が使用されます。 集合横棒グラフの場合、このスペースが各集合内の横棒によって均等に分割されます。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="barWidthRatio" owner="mx.charts:BarChart" playerVersion="Flash9" type="Number">
<description>
  横棒を描画する際の、カテゴリの幅を基準にした棒の幅を指定します。0 ～ 1 の範囲内のパーセンテージで表します。値が 1 の場合は領域全体が使用され、0.6 の場合は横棒の使用可能領域の 60% が使用されます。 実際の横棒の幅には、<codeph>barWidthRatio</codeph> プロパティと <codeph>maxbarWidth</codeph> プロパティの値のうち小さい方が使用されます。集合横棒グラフでは、この領域が各集合内の横棒によって均等に分割されます。 デフォルト値は 0.65 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:BarChart&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:</p>
  
  <pre>
  &lt;mx:BarChart
    <strong>Properties</strong>
    type="clustered|overlaid|stacked|100%"
    
    <strong>Styles</strong>
    barWidthRatio=".65"
    maxBarWidth="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  BarChart コントロールは、データ内の値によって長さが決まる一連の横棒でデータを表します。BarChart コントロールは、単純横棒グラフ、集合横棒グラフ、積み上げ横棒グラフ、構成比横棒グラフ、高低横棒グラフなど、各種の横棒グラフを表すことができます。
  
  <p>BarChart コントロールでは、<codeph>series</codeph> プロパティに BarSeries オブジェクトの配列が含まれている必要があります。</p>
  
  <p>積み上げ横棒グラフおよび構成比横棒グラフは、BarSeries オブジェクトの <codeph>minField</codeph> プロパティをオーバーライドします。</p>
   </apiDesc><example conref="Column_BarChartExample.mxml"><swfblock conref="examples/Column_BarChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#BarSeries"><linktext>mx.charts.series.BarSeries</linktext></link></related-links><apiConstructor id="mx.charts:BarChart:BarChart"><apiName>BarChart</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:BarChart:type:get"><apiName>type</apiName><shortdesc>
      レンダリングする横棒グラフの種類を表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      レンダリングする横棒グラフの種類を表します。有効な値は次のとおりです。    
      <ul>
        <li><codeph>"clustered"</codeph>：横棒はカテゴリ別にグループ化されます。 これがデフォルト値です。</li>
      
        <li><codeph>"overlaid"</codeph>：複数の横棒がカテゴリごとに重ねて表示され、最後に指定されたデータ系列が一番上になります。</li>
      
        <li><codeph>"stacked"</codeph>：棒は縦方向に積み上げられ、カテゴリ別にグループ化されます。 各横棒は、その下にあるすべての値の累積値を表します。</li>
      
        <li><codeph>"100%"</codeph>：横棒は縦方向に積み上げられ、合計が 100% になります。 各横棒は、カテゴリの値の合計値に占めるその横棒の構成比を表します。</li>
      </ul>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:BarChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:LegendItem"><apiName>LegendItem</apiName><shortdesc>
  グラフの凡例に含まれる個々の凡例エレメントを制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="stroke" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Object">
<description>
  凡例エレメントの線を指定します。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="markerWidth" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  凡例エレメントの幅を指定します。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="markerHeight" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description> 
  凡例エレメントの高さを指定します。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts:LegendItem" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  凡例アイテムのマーカー部分をレンダリングするクラスを指定します。通常は、凡例アイテムを生成するグラフエレメントによってマーカーが提供されます。ただし、凡例を手動で構築した場合は、マーカーのレンダリングに使用されるクラスが、このスタイルによって指定されます。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="top,bottom,right,left" inherit="yes" name="labelPlacement" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  凡例エレメントのラベルの配置を指定します。 認識される値は <codeph>"top"</codeph>、<codeph>"bottom"</codeph>、<codeph>"left"</codeph>、および <codeph>"right"</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Object">
<description>
  凡例エレメントの塗りを定義する IFill オブジェクトを指定します。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセット（ピクセル単位）です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 可能な値は、<codeph>"none"</codeph> および <codeph>"underline"</codeph> です。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  コンテナ内のテキストの整列。 可能な値は <codeph>"left"</codeph>、<codeph>"right"</codeph>、または <codeph>"center"</codeph> です。
 
  <p>ほとんどのコントロールのデフォルト値は <codeph>left</codeph> です。 Button、LinkButton、および AccordionHeader コンポーネントの場合、デフォルト値は <codeph>"center"</codeph> です。 これらのコンポーネントでは、このプロパティは <codeph>labelPlacement</codeph> プロパティが <codeph>"left"</codeph> または <codeph>"right"</codeph> に設定されている場合にのみ認識されます。 <codeph>labelPlacement</codeph> が <codeph>"top"</codeph> または <codeph>"bottom"</codeph> に設定されている場合は、テキストおよびアイコンが中央に配置されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  各文字間に表示される追加のピクセル数。 正の値を指定すると文字間隔が通常より広くなり、負の値を指定すると文字間隔が通常より狭くなります。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Boolean">
<description>
  カーニングが有効（<codeph>true</codeph>) か無効（<codeph>false</codeph>）かを示すブール値です。カーニングでは、読みやすくするために、特定の文字ペア間の間隔を調整します。ただし、カーニングは見出しを大きなフォントにする場合など、必要な場合に限って使用してください。 カーニングは、埋め込み FlashType フォントに対してのみサポートされています。 Verdana や、Courier New などの等幅フォントなど、特定のフォントではカーニングはサポートされていません。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"bold"</codeph> です。 LegendItem のデフォルトは <codeph>"bold"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>thickness</codeph> プロパティを設定します。 このプロパティは字形のエッジの太さを指定します。 可能な値は -200 から 200 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルは、システムフォントには影響を与えません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"italic"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 ColorPicker コントロール以外のすべてのコントロールのデフォルト値は 10 です。 ColorPicker コントロールのデフォルト値は 11 です。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>sharpness</codeph> プロパティを設定します。 このプロパティは字形のエッジのシャープネスを指定します。 可能な値は -400 から 400 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>gridFitType</codeph> プロパティを設定します。 可能な値は、<codeph>"none"</codeph>（<codeph>flash.text.GridFitType.NONE</codeph>）、<codeph>"pixel"</codeph>（<codeph>flash.text.GridFitType.PIXEL</codeph>）、および <codeph>"subpixel"</codeph>（<codeph>flash.text.GridFitType.SUBPIXEL</codeph>）です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  使用するフォントの名前です。 完全な CSS 実装と異なり、カンマ区切りリストはサポートされません。 任意のフォントファミリ名を使用できます。 汎用フォント名を指定した場合、適切なデバイスフォントに置換されます。
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  内部 TextField の <codeph>antiAliasType</codeph> プロパティを設定します。 可能な値は、<codeph>"normal"</codeph>（<codeph>flash.text.AntiAliasType.NORMAL</codeph>）および <codeph>"advanced"</codeph>（<codeph>flash.text.AntiAliasType.ADVANCED</codeph>）です。 
  
  <p>デフォルト値は <codeph>"advanced"</codeph> です。この場合、埋め込み FlashType フォントを使用していれば FlashType レンダラーが有効になります。 FlashType レンダラーを無効にするには、<codeph>"normal"</codeph> に設定してください。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
  
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts:LegendItem" playerVersion="Flash9" type="uint">
<description>
  コンポーネントが無効な場合のテキストの色です。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts:LegendItem" playerVersion="Flash9" type="uint">
<description>
  コンポーネントのラベルを含めたコンポーネント内のテキストの色です。
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  コントロールの右の境界とコンテンツ領域の右端との間のピクセル数です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  コントロールの左の境界とコンテンツ領域の左端との間のピクセル数です。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  子同士の垂直方向の間隔を示すピクセル数です。 デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合のデフォルト値は 6 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  子同士の水平方向の間隔を示すピクセル数です。デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合のデフォルト値は 8 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:LegendItem&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:LegendItem
    <strong>Properties</strong>
    element="<i>No default</i>"    
    label="<i>No default</i>"
    source="<i>No default</i>"
    legendData="<i>No default</i>"
    marker="<i>No default</i>"
    markerAspectRatio="<i>No default</i>"
 
    <strong>Styles</strong>
    fill="<i>IFill; no default.</i>"
    fontWeight="normal|bold"
    fontSize="10"
    horizontalGap="8"
    labelPlacement="right|left|top|bottom"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    markerHeight="15"
    markerWidth="10"
    paddingLeft="0"
    paddingRight="0"
    stroke="<i>IStroke; no default</i>"
 	  textDecoration="underline|none"
    verticalGap="6"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  グラフの凡例に含まれる個々の凡例エレメントを制御します。
  
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#Legend"><linktext>mx.charts.Legend</linktext></link><link href="mx.charts.chartClasses.xml#LegendData"><linktext>mx.charts.chartClasses.LegendData</linktext></link></related-links><apiConstructor id="mx.charts:LegendItem:LegendItem"><apiName>LegendItem</apiName><shortdesc>
	  コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  コンストラクターです。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:LegendItem:element"><apiName>element</apiName><shortdesc>
	  この凡例アイテムの生成を受け持つグラフエレメントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.charts.chartClasses:IChartElement</apiValueClassifier></apiValueDef><apiDesc>
	  この凡例アイテムの生成を受け持つグラフエレメントです。Legend コントロールの内容がグラフにより自動生成されるときに、このフィールドは、このアイテムが示すエレメント（通常は系列）を参照します。場合によっては、複数のアイテムが同じエレメントを参照します。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:markerAspectRatio"><apiName>markerAspectRatio</apiName><shortdesc>
	  この凡例アイテムに関連付けられたマーカーの縦横比です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  この凡例アイテムに関連付けられたマーカーの縦横比です。グラフ系列により提供される一部のマーカーは、特定の縦横比による表示を目的として作成されています。このプロパティが設定された場合は、凡例アイテムにより、レイアウト中のマーカーが特定の縦横比で表示されます。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:label:get"><apiName>label</apiName><shortdesc>
	  凡例エレメントと共に表示されるテキストを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  凡例エレメントと共に表示されるテキストを指定します。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:marker:get"><apiName>marker</apiName><shortdesc>
	  この凡例アイテムにより表示されるマーカーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexDisplayObject"/></apiValueDef><apiDesc>
	  この凡例アイテムにより表示されるマーカーです。通常は、このアイテムに関連付けられた LegendData を生成したグラフエレメントによって、マーカーが割り当てられます。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:source:get"><apiName>source</apiName><shortdesc>
	  親 Legend コントロールの dataProvider プロパティをグラフコントロールにバインドした場合は、LegendItem の生成元であるデータ系列への参照が含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
	  親 Legend コントロールの <codeph>dataProvider</codeph> プロパティをグラフコントロールにバインドした場合は、LegendItem の生成元であるデータ系列への参照が含まれます。 それ以外の場合、このプロパティには LegendItem に関連付けられたオブジェクトへの参照が含まれます。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:legendData:set"><apiName>legendData</apiName><shortdesc>
	  この LegendItem オブジェクトが表す LegendData インスタンスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Object"/></apiValueDef><apiDesc>
	  この LegendItem オブジェクトが表す LegendData インスタンスです。グラフにより Legend コントロールのコンテンツが生成されるときに、グラフの各エレメントにより 1 つ以上の LegendData 構造が生成され、Legend に表示されます。各 LegendData 構造は、それぞれ 1 つの LegendItem オブジェクトを生成します。  
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts:HitData"><apiName>HitData</apiName><shortdesc>
  HitData クラスは、画面上の特定の位置にあるデータアイテムに関する情報を表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  HitData クラスは、画面上の特定の位置にあるデータアイテムに関する情報を表します。Flex は、グラフのデータポイントのマウスイベントに対して HitData 構造体を返します。現在のマウス位置の下にどのデータポイントがあるかを示します。 
 
  <p>グラフコントロールの <codeph>findDataPoints()</codeph> メソッドを使用して、グラフ内の特定の位置にあるデータポイントを示す HitData 構造体を取得することもできます。</p>
  
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#ChartItem"><linktext>mx.charts.ChartItem</linktext></link></related-links><apiConstructor id="mx.charts:HitData:HitData"><apiName>HitData</apiName><shortdesc>
	  コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>id</apiItemName><apiType value="Number"/><apiDesc>データポイントを表す一意の識別子を指定します。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>distance</apiItemName><apiType value="Number"/><apiDesc>画面上のデータアイテムとマウスポインターの場所の間の距離をピクセル単位で指定します。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>画面上のデータアイテムの x 座標を指定します。
	 
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>画面上のデータアイテムの y 座標を指定します。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>chartItem</apiItemName><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier><apiDesc>ヒットデータにより示されるグラフアイテムです。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  コンストラクターです。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:HitData:chartItem"><apiName>chartItem</apiName><shortdesc>
	  ヒットデータにより示されるグラフアイテムです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.charts:ChartItem</apiValueClassifier></apiValueDef><apiDesc>
	  ヒットデータにより示されるグラフアイテムです。 グラフアイテムは、系列が <codeph>dataProvider</codeph> からの個々のアイテムを表示する場合に使用するデータを表します。 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:contextColor"><apiName>contextColor</apiName><shortdesc>
	  画面上に表示される、関連付けられた chartItem の関連付けに使用できる RGB 値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  画面上に表示される、関連付けられた <codeph>chartItem</codeph> の関連付けに使用できる RGB 値です。 DataTips はデータをレンダリングするときに、このフィールドを使用します。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:dataTipFunction"><apiName>dataTipFunction</apiName><shortdesc>
	  HitData のクリエーターにより提供される関数で、参照されたアイテムを表す、ユーザーに適した画面表示用ストリングを生成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
	  HitData のクリエーターにより提供される関数で、参照されたアイテムを表す、ユーザーに適した画面表示用ストリングを生成します。 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:distance"><apiName>distance</apiName><shortdesc>
	  画面上のデータアイテムとマウスポインターの場所の間の距離をピクセル単位で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  画面上のデータアイテムとマウスポインターの場所の間の距離をピクセル単位で指定します。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:id"><apiName>id</apiName><shortdesc>
	  データポイントを表す一意の識別子を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  データポイントを表す一意の識別子を指定します。この識別子を使用して、2 つの HitData オブジェクトが等しいかどうかをテストできます。 2 つの異なるグラフエレメントが同じ <codeph>dataProvider</codeph> アイテムを表す場合、それぞれに異なる識別子が付きます。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:item"><apiName>item</apiName><shortdesc>
	  HitData 構造体が示すデータアイテムを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
	  HitData 構造体が示すデータアイテムを指定します。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:x"><apiName>x</apiName><shortdesc>
	  画面上のデータアイテムの X 座標を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  画面上のデータアイテムの X 座標を指定します。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:y"><apiName>y</apiName><shortdesc>
	  画面上のデータアイテムの Y 座標を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  画面上のデータアイテムの Y 座標を指定します。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:displayText:get"><apiName>displayText</apiName><shortdesc>
	  画面表示用に関連付けられたアイテムの説明です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
	  画面表示用に関連付けられたアイテムの説明です。 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:element:get"><apiName>element</apiName><shortdesc>
	  HitData 構造体を生成したこのデータアイテムをレンダリングするグラフエレメントを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.charts.chartClasses:IChartElement</apiValueClassifier></apiValueDef><apiDesc>
	  HitData 構造体を生成したこのデータアイテムをレンダリングするグラフエレメントを指定します。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:BubbleChart"><apiName>BubbleChart</apiName><shortdesc>
  BubbleChart コントロールは、各データポイントにつき 3 つの値でデータを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="minRadius" owner="mx.charts:BubbleChart" playerVersion="Flash9" type="Number">
<description>
  最も小さいグラフエレメントの最小半径です（ピクセル単位）。この半径は、値の最も小さいデータポイントに割り当てられます。他のすべてのデータポイントには、最小値および最大値に対するそれぞれの値の相対値に基づいて、より大きい半径が割り当てられます。デフォルト値は 0 ピクセルです。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="maxRadius" owner="mx.charts:BubbleChart" playerVersion="Flash9" type="Number">
<description>
  最も大きいグラフエレメントの最大半径です（ピクセル単位）。この半径は、値の最も大きいデータポイントに割り当てられます。他のすべてのデータポイントには、最小値および最大値に対するそれぞれの値の相対値に基づいて、より小さい半径が割り当てられます。デフォルト値は 50 ピクセルです。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  The <code>&lt;mx:BubbleChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:BubbleChart
    <strong>Properties</strong>
    radiusAxis="<i>LinearAxis</i>"
 
    <strong>Styles</strong>
    maxRadius="50"
    minRadius="0"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  BubbleChart コントロールは、各データポイントにつき 3 つの値でデータを表します。各データポイントは、水平軸に沿った位置を決定する値、垂直軸に沿った位置を決定する値、およびグラフ上の他のデータポイントとの比較でグラフエレメントのサイズを決定する値で定義されます。
  
  <p>BubbleChart コントロールでは、<codeph>series</codeph> プロパティに BubbleSeries オブジェクトの配列が含まれている必要があります。</p>
  
  </apiDesc><example conref="BubbleChartExample.mxml"><swfblock conref="examples/BubbleChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#BubbleSeries"><linktext>mx.charts.series.BubbleSeries</linktext></link></related-links><apiConstructor id="mx.charts:BubbleChart:BubbleChart"><apiName>BubbleChart</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:BubbleChart:radiusAxis:get"><apiName>radiusAxis</apiName><shortdesc>
      バブルの半径のマッピング対象である軸です。バブルグラフでは、個々のバブルのサイズがデータの 3 番目のサイズとして扱われ、x 方向と y 方向の位置の変換と同様の方法で変換されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      バブルの半径のマッピング対象である軸です。バブルグラフでは、個々のバブルのサイズがデータの 3 番目のサイズとして扱われ、x 方向と y 方向の位置の変換と同様の方法で変換されます。 デフォルトでは、<codeph>radiusAxis</codeph> は、<codeph>autoAdjust</codeph> プロパティが <codeph>false</codeph> に設定された LinearAxis です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:BubbleChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:Legend"><apiName>Legend</apiName><shortdesc>
      Legend コントロールを使用すると、グラフに凡例を追加できます。凡例にはグラフ内の各データ系列のラベルや、データ系列のグラフエレメントを示すキーが表示されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="tileWidth"/><Exclude kind="property" name="tileHeight"/><Exclude kind="property" name="label"/><Exclude kind="property" name="icon"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="defaultButton"/><styles><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
      タイルセル内の子の垂直方向の配置です。 指定できる値は、<codeph>"top"</codeph>、<codeph>"middle"</codeph> および <codeph>"bottom"</codeph> です。 値が <codeph>"top"</codeph> の場合、各子の上端がセルの上端に揃えられます。 値が <codeph>"middle"</codeph> の場合、各子がセル内で垂直方向の中央に揃えられます。 値が <codeph>"bottom"</codeph> の場合、各子の下端がセルの下端に揃えられます。
           </description>
<default>"top"
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts:Legend" playerVersion="Flash9" type="Object">
<description>
      凡例エレメントの線を指定します。
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="uint">
<description>
      コンポーネントのシンボルのカラーです。CheckBox のチェックマークや ScrollBar ボタンの矢印などがあります。
       
      </description>
<default>0x000000
     
      </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
      凡例の上の境界線とコンテンツ領域の上部との間のピクセル数です。
           </description>
<default>0
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
      凡例の下の境界線とコンテンツ領域の下部との間のピクセル数です。
           </description>
<default>0
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="markerWidth" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
      凡例エレメントの幅を指定します。
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="markerHeight" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
      凡例エレメントの高さを指定します。
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style enumeration="top,bottom,right,left" inherit="yes" name="labelPlacement" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
      凡例エレメントのラベルの配置を指定します。 有効な値は <codeph>"top"</codeph>、<codeph>"bottom"</codeph>、<codeph>"right"</codeph>、および <codeph>"left"</codeph> です。
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
      タイルセル内の子の水平方向の配置です。 有効な値は <codeph>"left"</codeph>、<codeph>"center"</codeph> および <codeph>"right"</codeph> です。 値が <codeph>"left"</codeph> の場合、各子の左端がセルの左端に揃えられます。 値が <codeph>"center"</codeph> の場合、各子がセル内で水平方向の中央に揃えられます。 値が <codeph>"right"</codeph> の場合、各子の右端がセルの右端に揃えられます。
           </description>
<default>"left"
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="uint">
<description>
      コンポーネントにフォーカスがある場合のフォーカス枠のカラーです。
       
      </description>
<default>0x70B2EE
      
      </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style inherit="no" name="disabledOverlayAlpha" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
      無効になったコンテナの上に配置されるオーバーレイのアルファ値です。
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
      コンポーネントの角に付いている丸みの半径です。 デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合は 0 になります。ApplicationControlBar のデフォルト値は 5 です。
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="uint">
<description>
      コンポーネントのコンテンツ領域のカラーです。
       
      </description>
<default>0xFFFFFF
      
      </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="Number">
<description>
      このコンポーネントのコンテンツの背景のアルファです。
     
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="barColor" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="uint">
<description>
      ProgressBar の色を特定します。ProgressBar は、この色とそれを基に計算されるより明るい色の垂直方向のグラデーションで塗りつぶされます。このスタイルは、他のコンポーネントに対して無効ですが、コンテナに対して設定することで、コンテナ内部にあるすべてのプログレスバーの外観を制御できます。 デフォルト値は <codeph>undefined</codeph> で、未定義であることを意味します。 この場合は、代わりに <codeph>themeColor</codeph> スタイルプロパティが使用されます。
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
      コンポーネントの背景色です。 <codeph>backgroundColor</codeph> と <codeph>backgroundImage</codeph> の両方を設定できます。 一部のコンポーネントには背景色がありません。 DataGrid コントロールでは、このスタイル設定は無視されます。 デフォルト値は <codeph>undefined</codeph> で、未定義であることを意味します。 このスタイルと <codeph>backgroundImage</codeph> スタイルの両方が <codeph>undefined</codeph> である場合、コンポーネントは透明な背景を持ちます。
           <p>Application コンテナの場合、このスタイルはアプリケーションのロード時の背景色と、アプリケーションの実行時の背景のグラデーションを指定します。 指定された色よりもわずかに濃い色とわずかに薄い色の間でグラデーションパターンが計算されます。</p>
     
      <p>ほとんどの Flex コントロールのデフォルトスキンは、部分的に透明です。 この結果、コンテナの背景色が、そのコンテナの中のコントロールに部分的ににじみ出るように表示されます。 コントロールの <codeph>fillAlphas</codeph> プロパティのアルファ値を 1 に設定することで、これを避けることができます。次に例を示します。
      <pre>
      &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
          &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
      &lt;/mx:<i>Container</i>></pre>
      </p>
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
      <codeph>backgroundColor</codeph> プロパティで定義されている、<codeph>backgroundImage</codeph> スタイルで定義されているイメージまたは SWF ファイルの背景色のアルファレベルです。 有効な値の範囲は、0.0 ～ 1.0 です。ほとんどのコントロールではデフォルト値は 1.0 ですが、ToolTip コントロールの場合デフォルト値は 0.95 であり、Alert コントロールの場合デフォルト値は 0.9 です。
      
      </description>
<default>1.0
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAttachment" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
      背景イメージが指定されている場合、このスタイルによって、イメージがビューポートに対して固定（<codeph>"fixed"</codeph>）されているか、コンテンツと共にスクロールするか（<codeph>"scroll"</codeph>）を指定します。
           </description>
<default>"scroll"
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="uint">
<description>
      コンポーネントのスキンで使用されるアクセントカラーです。デフォルトのボタンスキンでは、このカラーで背景が着色されます。スライダートラックのハイライトでは、このカラーが使用されます。 
     
      </description>
<default>#0099FF
     
      </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  子同士の垂直方向の間隔を示すピクセル数です。 デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合のデフォルト値は 6 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  子同士の水平方向の間隔を示すピクセル数です。デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合のデフォルト値は 8 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセット（ピクセル単位）です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.charts:Legend" playerVersion="Flash10" type="Class">
<description>
  IUITextField を実装するクラスです。このクラスはテキストをレンダリングするためにこのコンポーネントで使用されます。
 
  <p>mx.core.UITextField クラス（Flash Player に組み込まれている標準の TextField を使用する場合）または mx.core.UIFTETextField クラス（Text Layout Framework を使用して、双方向レイアウトなどの向上したテキストレンダリングを取得する場合）のいずれかに設定できます。</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 可能な値は、<codeph>"none"</codeph> および <codeph>"underline"</codeph> です。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  コンテナ内のテキストの整列。 可能な値は <codeph>"left"</codeph>、<codeph>"right"</codeph>、または <codeph>"center"</codeph> です。
 
  <p>ほとんどのコントロールのデフォルト値は <codeph>left</codeph> です。 Button、LinkButton、および AccordionHeader コンポーネントの場合、デフォルト値は <codeph>"center"</codeph> です。 これらのコンポーネントでは、このプロパティは <codeph>labelPlacement</codeph> プロパティが <codeph>"left"</codeph> または <codeph>"right"</codeph> に設定されている場合にのみ認識されます。 <codeph>labelPlacement</codeph> が <codeph>"top"</codeph> または <codeph>"bottom"</codeph> に設定されている場合は、テキストおよびアイコンが中央に配置されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.charts:Legend" playerVersion="Flash10" type="String">
<description>
  このコンポーネントで表示されるテキストのロケールです。
 
  <p>FTE および TLF はこのロケールを使用して Unicode 文字をフォント字形にマッピングしたり、フォールバックフォントを検索したりします。</p>
 
  <p>メモ：このスタイルは、MX コンポーネントで、<codeph>textFieldClass</codeph> として UIFTETextField が指定されている場合にのみ適用されます。</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  各文字間に表示される追加のピクセル数。 正の値を指定すると文字間隔が通常より広くなり、負の値を指定すると文字間隔が通常より狭くなります。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts:Legend" playerVersion="Flash9" type="Boolean">
<description>
  カーニングが有効（<codeph>true</codeph>) か無効（<codeph>false</codeph>）かを示すブール値です。カーニングでは、読みやすくするために、特定の文字ペア間の間隔を調整します。ただし、カーニングは見出しを大きなフォントにする場合など、必要な場合に限って使用してください。 カーニングは、高度なアンチエイリアスを適用した埋め込みフォントに対してのみサポートされています。 Verdana や、Courier New などの等幅フォントなど、特定のフォントではカーニングはサポートされていません。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"bold"</codeph> です。 Button コントロールのデフォルト値は <codeph>"bold"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>thickness</codeph> プロパティを設定します。 このプロパティは字形のエッジの太さを指定します。 可能な値は -200 から 200 までの数値です。 
  
  <p>このプロパティが適用されるのは、高度なアンチエイリアスを適用した埋め込みフォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルは、システムフォントには影響を与えません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"italic"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 ColorPicker コントロール以外のすべてのコントロールのデフォルト値は 10 です。 ColorPicker コントロールのデフォルト値は 11 です。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>sharpness</codeph> プロパティを設定します。 このプロパティは字形のエッジのシャープネスを指定します。 可能な値は -400 から 400 までの数値です。 
  
  <p>このプロパティが適用されるのは、高度なアンチエイリアスを適用した埋め込みフォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>gridFitType</codeph> プロパティを設定します。 可能な値は、<codeph>"none"</codeph>（<codeph>flash.text.GridFitType.NONE</codeph>）、<codeph>"pixel"</codeph>（<codeph>flash.text.GridFitType.PIXEL</codeph>）、および <codeph>"subpixel"</codeph>（<codeph>flash.text.GridFitType.SUBPIXEL</codeph>）です。 
  
  <p>このプロパティが適用されるのは、高度なアンチエイリアスを適用した埋め込みフォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  使用するフォントの名前です。 完全な CSS 実装と異なり、カンマ区切りリストはサポートされません。 任意のフォントファミリ名を使用できます。 汎用フォント名を指定した場合、適切なデバイスフォントに置換されます。
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  内部 TextField の <codeph>antiAliasType</codeph> プロパティを設定します。 可能な値は、<codeph>"normal"</codeph>（<codeph>flash.text.AntiAliasType.NORMAL</codeph>）および <codeph>"advanced"</codeph>（<codeph>flash.text.AntiAliasType.ADVANCED</codeph>）です。 
  
  <p>デフォルト値は <codeph>"advanced"</codeph> です。この場合、高度なアンチエイリアスを適用した埋め込みフォントを使用していれば、高度なアンチエイリアスが有効になります。  <codeph>"normal"</codeph> に設定すると、高度なアンチエイリアスが無効になります。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
  
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts:Legend" playerVersion="Flash9" type="uint">
<description>
  コンポーネントが無効な場合のテキストの色です。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts:Legend" playerVersion="Flash9" type="uint">
<description>
  コンポーネントのラベルを含めたコンポーネント内のテキストの色です。
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  コントロールの右の境界とコンテンツ領域の右端との間のピクセル数です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  コントロールの左の境界とコンテンツ領域の左端との間のピクセル数です。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="Number">
<description>
  ドロップシャドウの幅です。このプロパティを負の値に設定すると、シャドウはコンポーネントの上に表示されます。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="String">
<description>
  ドロップシャドウの方向です。 有効な値は <codeph>"left"</codeph>、<codeph>"center"</codeph> および <codeph>"right"</codeph> です。
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropShadowColor" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="uint">
<description>
  ドロップシャドウの色です。
 
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  コンポーネントのドロップシャドウの表示または非表示を指定するブール型プロパティです。 デフォルト値は <codeph>false</codeph> です。
 
  <p><b>メモ：</b>ドロップシャドウをコンテナに表示するには、<codeph>contentBackgroundColor</codeph> プロパティを設定します。 設定しない場合、コンテナのデフォルトの背景は透明なので、シャドウはコンテナの背後に表示されます。</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  コンポーネントのドロップシャドウの表示または非表示を指定するブール型プロパティです。 このスタイルは <codeph>borderStyle="solid"</codeph> と共に使用します。 デフォルト値は <codeph>false</codeph> です。
 
  <p><b>メモ：</b>ドロップシャドウをコンテナに表示するには、<codeph>backgroundColor</codeph> プロパティまたは <codeph>backgroundImage</codeph> プロパティを設定します。 設定しない場合、コンテナのデフォルトの背景は透明なので、シャドウはコンテナの背後に表示されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  境界線の可視性です。
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="Number">
<description>
  境界ボックスの境界線の幅です。 <codeph>borderStyle</codeph> が <codeph>"solid"</codeph> に設定されている場合にのみ使用されます。
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  境界ボックスのスタイルです。 有効な値は <codeph>"none"</codeph>、<codeph>"solid"</codeph>、<codeph>"inset"</codeph> および <codeph>"outset"</codeph> です。 デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合は、<codeph>"inset"</codeph> になります。 ほとんどの Container のデフォルト値は <codeph>"none"</codeph> です。halo テーマで使用できる値は <codeph>"inset"</codeph> と <codeph>"outset"</codeph> のみです。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSkin" owner="mx.charts:Legend" playerVersion="Flash9" type="Class">
<description>
  コンポーネントの境界線のスキンクラスです。 Halo テーマに独自のデフォルトを明示的に設定していないすべてのコンポーネントのデフォルト値は、Halo テーマの場合は <codeph>mx.skins.halo.HaloBorder</codeph> になり、Spark テーマの場合は <codeph>mx.skins.spark.BorderSkin</codeph> になります。Panel コンテナには、Halo テーマのデフォルト値の <codeph>mx.skins.halo.PanelSkin</codeph> と Spark テーマのデフォルト値の <codeph>mx.skins.spark.BorderSkin</codeph> があります。コンポーネントのデフォルト値を確認するには、default.css ファイルを参照してください。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSides" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="String">
<description>
  境界ボックスの境界線のうち、どれが表示されるかを示します。表示する境界線をスペース区切りのストリングで指定します。 ストリングには、<codeph>"left"</codeph>、<codeph>"top"</codeph>、<codeph>"right"</codeph> および <codeph>"bottom"</codeph> を任意の順序で指定できます。 デフォルト値は <codeph>"left top right bottom"</codeph> です。この場合、4 辺すべてを表示します。 このスタイルは、borderStyle が <codeph>"solid"</codeph> の場合にのみ使用されます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  境界線の色です。 デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合、Halo テーマでは <codeph>0xB7BABC</codeph>、Spark テーマでは <codeph>0x696969</codeph> になります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="Number">
<description>
  境界線のアルファです。
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSize" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="String">
<description>
  <codeph>backgroundImage</codeph> で指定されているイメージを、元のサイズとは異なるサイズに拡大および縮小します。 <codeph>"100%"</codeph> に設定すると、コンポーネント全体に収まるサイズにイメージを伸縮します。 パーセント値で指定する場合は、パーセント記号（%）付きで指定する必要があります。 Application コンテナのデフォルトは <codeph>100%</codeph> です。 他のすべてのコンテナのデフォルト値は <codeph>auto</codeph> で、イメージの元のサイズが維持されます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="Object">
<description>
  コンポーネントの背景イメージです。 これには、絶対 URL、相対 URL、絶対クラス、または相対クラスを指定できます。 <codeph>backgroundColor</codeph> または <codeph>backgroundImage</codeph> のいずれかを設定できます。背景色の前面に背景イメージを表示します。 デフォルト値は <codeph>undefined</codeph> で、「未定義」であることを意味します。 このスタイルと <codeph>backgroundColor</codeph> スタイルの両方が undefined である場合、コンポーネントは透明な背景を持ちます。
 
  <p>ほとんどの Flex コントロールのデフォルトスキンは、部分的に透明です。 この結果、コンテナの背景イメージが、そのコンテナの中のコントロールに部分的ににじみ出るように表示されます。 コントロールの <codeph>fillAlphas</codeph> プロパティのアルファ値を 1 に設定することで、これを避けることができます。次に例を示します。
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="backgroundDisabledColor" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="uint">
<description>
  コンポーネントが無効になっている場合のコンポーネント背景色です。 グローバルデフォルト値は <codeph>undefined</codeph> です。 List コントロールのデフォルト値は、<codeph>0xDDDDDD</codeph>（明るい灰色）です。 コンテナが無効になっている場合は、背景がグレー表示されます。このグレー表示の度合いは、<codeph>disabledOverlayAlpha</codeph> スタイルで制御します。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
      <p>The <code>&lt;mx:Legend&gt;</code> tag inherits all the properties
      of its parent classes and adds the following properties:</p>
      
      <pre>
      &lt;mx:Legend
        <strong>Properties</strong>
        autoLayout="true|false"
        clipContent="true|false"
        creationIndex="undefined"
        creationPolicy="auto|all|queued|none"
        dataProvider="<i>No default</i>"
        direction="horizontal|vertical"
        horizontalScrollPosition="0"
        legendItemClass="<i>No default</i>"
        verticalScrollPosition="0"   
     
        <strong>Styles</strong>
        backgroundAlpha="1.0"
        backgroundAttachment="scroll"
        backgroundColor="undefined"
        backgroundDisabledColor="undefined"
        backgroundImage="undefined"
        backgroundSize="auto" 
        barColor="undefined"
        borderColor="0xAAB3B3"
        borderSides="left top right bottom"
        borderSkin="mx.skins.halo.HaloBorder"
        borderStyle="inset|none|solid|outset"
        borderThickness="1"
        color="0x0B333C"
        cornerRadius="0"
        disabledColor="0xAAB3B3"
        disbledOverlayAlpha="undefined"
        dropShadowColor="0x000000"
        dropShadowEnabled="false"
        fontAntiAliasType="advanced"
        fontfamily="Verdana"
        fontGridFitType="pixel"
        fontSharpness="0""
        fontSize="10"
        fontStyle="normal"
        fontThickness="0"
        fontWeight="normal"
        horizontalAlign="left|center|right"
        horizontalGap="<i>8</i>"
        labelPlacement="right|left|top|bottom"
        markerHeight="15"
        markerWidth="10"
        paddingBottom="0"
        paddingLeft="0"
        paddingRight="0"
        paddingTop="0"
        shadowDirection="center"
        shadowDistance="2"
        stroke="<i>IStroke; no default</i>"
        textAlign="left"
        textDecoration="none|underline"
        textIndent="0"
        verticalAlign="top|middle|bottom"
        verticalGap="<i>6</i>"
        
        <strong>Events</strong>
        childAdd="<i>No default</i>"
        childIndexChange="<i>No default</i>"
        childRemove="<i>No default</i>"
        dataChange="<i>No default</i>"
        itemClick="<i>Event; no default</i>"
        itemMouseDown="<i>Event; no default</i>"
        itemMouseOut="<i>Event; no default</i>"
        itemMouseOver="<i>Event; no default</i>"
        itemMouseUp="<i>Event; no default</i>"
      /&gt;
      </pre>
           ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IContainer</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
      Legend コントロールを使用すると、グラフに凡例を追加できます。凡例にはグラフ内の各データ系列のラベルや、データ系列のグラフエレメントを示すキーが表示されます。
      
      <p>Legend コントロールを初期化するには、グラフコントロールの識別子を Legend コントロールの <codeph>dataProvider</codeph> プロパティにバインドするか、または LegendItem オブジェクトの配列を定義します。</p>
           </apiDesc><example conref="PlotChartExample.mxml"><swfblock conref="examples/PlotChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#LegendItem"><linktext>mx.charts.LegendItem</linktext></link></related-links><adobeApiEvent id="mx.charts:Legend_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
      data プロパティが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      <codeph>data</codeph> プロパティが変更されたときに送出されます。
           <p>凡例が List または他のコンポーネントでレンダラーとして使用されている場合、表示するデータを凡例に渡すために <codeph>data</codeph> プロパティが使用されます。</p>
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.events.ChildExistenceChangedEvent.CHILD_REMOVE_childRemove"><apiName>childRemove</apiName><shortdesc>
      凡例の子が削除される前に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ChildExistenceChangedEvent.CHILD_REMOVE</apiEventType><adobeApiEventClassifier>mx.events.ChildExistenceChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      凡例の子が削除される前に送出されます。
           <p>このイベントは、<codeph>removeChild()</codeph>、<codeph>removeChildAt()</codeph> または <codeph>removeAllChildren()</codeph> メソッドが呼び出されたときに送出されます。</p>
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.events.IndexChangedEvent.CHILD_INDEX_CHANGE_childIndexChange"><apiName>childIndexChange</apiName><shortdesc>
      凡例のいずれかの子のインデックスが変更された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.IndexChangedEvent.CHILD_INDEX_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.IndexChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      凡例のいずれかの子のインデックスが変更された後に送出されます。このイベントは、<codeph>setChildIndex()</codeph> メソッドへの引数として指定された子についてのみ送出されます。<codeph>setChildIndex()</codeph> メソッドの呼び出しによる副次的な作用としてインデックスが変更されたそれ以外の子については送出されません。
           <p>子のインデックスは、<codeph>setChildIndex()</codeph> メソッドが呼び出されたときに変更されます。</p>
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.events.ChildExistenceChangedEvent.CHILD_ADD_childAdd"><apiName>childAdd</apiName><shortdesc>
      凡例に子が追加された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ChildExistenceChangedEvent.CHILD_ADD</apiEventType><adobeApiEventClassifier>mx.events.ChildExistenceChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      凡例に子が追加された後に送出されます。
           <p>childAdd イベントは、<codeph>addChild()</codeph> または <codeph>addChildAt()</codeph> メソッドが呼び出されたときに送出されます。 コンテナが最初に作成されたとき、MXML ファイルで宣言されているそれぞれの子コンポーネントについて、<codeph>addChild()</codeph> メソッドが自動的に呼び出されます。 <codeph>addChildAt()</codeph> メソッドは、Repeater オブジェクトが子オブジェクトを追加または削除したときに自動的に呼び出されます。 アプリケーション開発者が、これらのメソッドを手動で呼び出して新しい子を追加することもできます。</p>
           <p>このイベントが送信された時点では、子オブジェクトは初期化されていますが、その幅と高さはまだ計算されておらず、子は画面に描画されていません。 子が完全に初期化されてレンダリングされたときに通知を受けるには、子の <codeph>creationComplete</codeph> イベントのリスナーとして登録します。</p>
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.charts.events.LegendMouseEvent.ITEM_MOUSE_UP_itemMouseUp"><apiName>itemMouseUp</apiName><shortdesc>
      ユーザーが Legend コントロール内の LegendItem 上でマウスボタンを離したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.LegendMouseEvent.ITEM_MOUSE_UP</apiEventType><adobeApiEventClassifier>mx.charts.events.LegendMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      ユーザーが Legend コントロール内の LegendItem 上でマウスボタンを離したときに送出されます。
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.charts.events.LegendMouseEvent.ITEM_MOUSE_OVER_itemMouseOver"><apiName>itemMouseOver</apiName><shortdesc>
      ユーザーが Legend コントロール内の LegendItem 上にマウスを移動したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.LegendMouseEvent.ITEM_MOUSE_OVER</apiEventType><adobeApiEventClassifier>mx.charts.events.LegendMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      ユーザーが Legend コントロール内の LegendItem 上にマウスを移動したときに送出されます。
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.charts.events.LegendMouseEvent.ITEM_MOUSE_OUT_itemMouseOut"><apiName>itemMouseOut</apiName><shortdesc>
      ユーザーが Legend コントロール内の LegendItem の外へマウスを移動したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.LegendMouseEvent.ITEM_MOUSE_OUT</apiEventType><adobeApiEventClassifier>mx.charts.events.LegendMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      ユーザーが Legend コントロール内の LegendItem の外へマウスを移動したときに送出されます。
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.charts.events.LegendMouseEvent.ITEM_MOUSE_DOWN_itemMouseDown"><apiName>itemMouseDown</apiName><shortdesc>
      ユーザーが Legend コントロール内の LegendItem 上でマウスボタンを押したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.LegendMouseEvent.ITEM_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>mx.charts.events.LegendMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      ユーザーが Legend コントロール内の LegendItem 上でマウスボタンを押したときに送出されます。
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.charts.events.LegendMouseEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
      ユーザーが Legend コントロール内の LegendItem をクリックしたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.LegendMouseEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.charts.events.LegendMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      ユーザーが Legend コントロール内の LegendItem をクリックしたときに送出されます。
           </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.charts:Legend:Legend"><apiName>Legend</apiName><shortdesc>
          コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
          コンストラクターです。
          
          </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts:Legend:addChildAt"><apiName>addChildAt</apiName><shortdesc>
          このコンテナに子 DisplayObject を追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject 型のオブジェクトとして追加された子です。通常は戻り値を UIComponent、または追加されるコンポーネントの型にキャストします。
                   </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>このコンテナの子として追加する DisplayObject です。IUIComponent インターフェイスを実装する必要があります。
                   </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>子を追加するインデックス位置です。
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          このコンテナに子 DisplayObject を追加します。子は、指定されたインデックス位置に追加されます。
                   <p><b>メモ：</b>メソッドに対する <codeph>child</codeph> パラメーターは DisplayObject 型として指定されますが、このパラメーターがコンテナの子として追加されるためには、IUIComponent インターフェイスを実装する必要があります。 Flex コンポーネントはすべてこのインターフェイスを実装しています。</p>
                   <p>子は、背面から前面に重ねられます。つまり、子が重なった場合、インデックス 0 の子が最も奥に、インデックス <codeph>numChildren - 1</codeph> の子が最前面に置かれます。このように、新しく追加される子は既存の子の上に重ねられます。</p>
                   <p>他の子によってすでに占有されているインデックスに新しい子を追加する場合、古い子は置き換えられません。古い子とそれ以降のすべての子がスライドし、それぞれのインデックスが 1 ずつ増やされます。例えば、コンテナに子 (A, B, C) があり、D をインデックス 1 に追加するとします。この場合、コンテナの中は (A, D, B, C) になります。古い子を置き換えたい場合は、その子を削除した後に新しい子を追加する必要があります。</p>
                   </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.IUIComponent.xml"><linktext>mx.core.IUIComponent</linktext></link></related-links></apiOperation><apiOperation id="mx.charts:Legend:addChild"><apiName>addChild</apiName><shortdesc>
          このコンテナに子 DisplayObject を追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject 型のオブジェクトとして追加された子です。通常は戻り値を UIComponent、または追加されるコンポーネントの型にキャストします。
                   </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>このコンテナの子として追加する DisplayObject です。IUIComponent インターフェイスを実装する必要があります。
                   </apiDesc></apiParam><apiTipTexts><apiTipText>このコンテナに子オブジェクトを追加します。
          
          </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
          このコンテナに子 DisplayObject を追加します。子は、他の既存の子の後に追加されるため、追加される最初の子のインデックスは 0、次の子のインデックスは 1 になります。
                   <p><b>メモ：</b>メソッドに対する <codeph>child</codeph> パラメーターは DisplayObject 型として指定されますが、このパラメーターがコンテナの子として追加されるためには、IUIComponent インターフェイスを実装する必要があります。 Flex コンポーネントはすべてこのインターフェイスを実装しています。</p>
                   <p>子は、背面から前面に重ねられます。つまり、子が重なった場合、インデックス 0 の子が最も奥に、インデックス <codeph>numChildren - 1</codeph> の子が最前面に置かれます。このように、新しく追加される子は既存の子の上に重ねられます。</p>
                   </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.IUIComponent.xml"><linktext>mx.core.IUIComponent</linktext></link></related-links></apiOperation><apiOperation id="mx.charts:Legend:addElementAt"><apiName>addElementAt</apiName><shortdesc conref="mx.core.IVisualElementContainer#addElementAt()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#addElementAt()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:addElement"><apiName>addElement</apiName><shortdesc conref="mx.core.IVisualElementContainer#addElement()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#addElement()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:protected:attachOverlay"><apiName>attachOverlay</apiName><shortdesc>
          Dissolve エフェクトでコンテナのクロムにオーバーレイを追加するときに内部的に使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          Dissolve エフェクトでコンテナのクロムにオーバーレイを追加するときに内部的に使用されます。 
          
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:contentToGlobal"><apiName>contentToGlobal</apiName><shortdesc conref="mx.core.UIComponent#contentToGlobal()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#contentToGlobal()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:contentToLocal"><apiName>contentToLocal</apiName><shortdesc conref="mx.core.UIComponent#contentToLocal()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#contentToLocal()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:protected:createBorder"><apiName>createBorder</apiName><shortdesc>
          コンテナの境界線のスキンが存在しない場合、必要に応じてスキンを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          コンテナの境界線のスキンが存在しない場合、必要に応じてスキンを作成します。
          
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:createComponentFromDescriptor"><apiName>createComponentFromDescriptor</apiName><shortdesc>
          単一の UIComponentDescriptor を指定すると、対応するコンポーネントが作成され、このコンテナの子としてコンポーネントが追加されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>作成されるコンポーネントです。
         
          </apiDesc><apiType value="mx.core:IFlexDisplayObject"/></apiReturn><apiParam><apiItemName>descriptor</apiItemName><apiType value="mx.core:ComponentDescriptor"/><apiDesc>作成されるコンポーネントの UIComponentDescriptor です。この引数は、UIComponentDescriptor オブジェクトか、コンテナの子のインデックスである 0 ～ n-1 の整数（n はこのコンテナの子の総数）です。
                   </apiDesc></apiParam><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc><codeph>false</codeph> の場合、このコンポーネントは作成されますが、子は作成されません。 <codeph>true</codeph> の場合、Flex はコンポーネントを作成した後、<codeph>createComponentsFromDescriptors()</codeph> メソッドを呼び出し、コンポーネントの <codeph>creationPolicy</codeph> プロパティ値に基づいて、すべての子または一部の子を作成します。
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          単一の UIComponentDescriptor を指定すると、対応するコンポーネントが作成され、このコンテナの子としてコンポーネントが追加されます。
          
          <p>このメソッドにより、新しいオブジェクトがインスタンス化されますが、表示リストには追加されないため、デフォルトではそのオブジェクトは画面に表示されません。新しいオブジェクトを表示リストに追加するには、次の例のように、コンテナの <codeph>validateNow()</codeph> メソッドの呼び出しを、<codeph>createComponentFromDescriptor()</codeph> メソッドの呼び出しの後に行います。
          <pre>
          myVBox.createComponentFromDescriptor(myVBox.childDescriptors[0],false);
          myVBox.validateNow();
          </pre>
          </p>
          
          <p>別の方法として、そのコンテナで <codeph>createComponentsFromDescriptors()</codeph> メソッドを呼び出してすべてのコンポーネントを一度に作成することもできます。この場合は、<codeph>validateNow()</codeph> メソッドの呼び出しを、<codeph>createComponentsFromDescriptors()</codeph> メソッドの呼び出しの後に行う必要はありません。</p>
                   </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.UIComponentDescriptor.xml"><linktext>mx.core.UIComponentDescriptor</linktext></link></related-links></apiOperation><apiOperation id="mx.charts:Legend:createComponentsFromDescriptors"><apiName>createComponentsFromDescriptors</apiName><shortdesc>
          childDescriptors の配列を繰り返し処理し、配列の各要素に対して createComponentFromDescriptor() メソッドを呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc><codeph>true</codeph> の場合、再帰的にコンポーネントを作成します。
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          <codeph>childDescriptors</codeph> の配列を繰り返し処理し、配列の各要素に対して <codeph>createComponentFromDescriptor()</codeph> メソッドを呼び出します。
          
          <p>コンテナの <codeph>creationPolicy</codeph> プロパティの値が <codeph>ContainerCreationPolicy.ALL</codeph> の場合、このメソッドは初期化シーケンスの間に自動的に呼び出されます。</p>
          
          <p>コンテナの <codeph>creationPolicy</codeph> の値が <codeph>ContainerCreationPolicy.AUTO</codeph> の場合、このメソッドは、コンテナの子が表示されるときに自動的に呼び出されます。</p>
          
          <p>コンテナの <codeph>creationPolicy</codeph> プロパティの値が <codeph>ContainerCreationPolicy.NONE</codeph> の場合、このコンテナの子を作成するときにこの関数を呼び出す必要があります。</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:createDeferredContent"><apiName>createDeferredContent</apiName><shortdesc>
          遅延インスタンス化をサポートする IDeferredContentOwner インターフェイスが実装されたコンテナに対し、createComponentsFromDescriptors(true) メソッドを呼び出すのと同等のアクションを実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          遅延インスタンス化をサポートする IDeferredContentOwner インターフェイスが実装されたコンテナに対し、<codeph>createComponentsFromDescriptors(true)</codeph> メソッドを呼び出すのと同等のアクションを実行します。
                   </apiDesc></apiOperationDetail><related-links><link href="mx.charts.xml#Legend/createComponentsFromDescriptors()"><linktext>createComponentsFromDescriptors()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts:Legend:executeBindings"><apiName>executeBindings</apiName><shortdesc>
          このコンテナのすべてのデータバインディングを実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>false</codeph> の場合は、このコンテナのバインディングのみ実行されます。<codeph>true</codeph> の場合は、このコンテナの子、孫、ひ孫などについてもバイディングが実行されます。
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          このコンテナのすべてのデータバインディングを実行します。Flex は、Container が作成されたらこのメソッドを自動的に呼び出し、その中にバインド先のあるデータバインディングをすべて実行します。MXML コンテナとバインディングの問題（177074）を回避するには、BindingManager.executeBindings() の呼び出しで、parentDocument ではなく descriptor.document を優先するように、Container.executeBindings() をオーバーライドします。こうすると、記述子によって作成されたインスタンスは常に正常に動作し、手続き上作成されたインスタンスも元の動作になるはずです。 ただし、後者の場合は、バグが発生することがあります。 アップデーター 1 では、非 DI およびリペアレントコンポーネントのシナリオでの正常な動作を保証する、より完成度の高い解決策の提供を予定しています。
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:executeChildBindings"><apiName>executeChildBindings</apiName><shortdesc>
          この Container の子 UIComponent オブジェクトへのバインディングを実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc><codeph>false</codeph> の場合、この Container の直下の子についてのみバインディングが実行されます。 <codeph>true</codeph> の場合は、このコンテナの孫、ひ孫などについてもバイディングが実行されます。
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          この Container の子 UIComponent オブジェクトへのバインディングを実行します。 このメソッドは、Container が作成されたときに自動的に呼び出されます。
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:getChildAt"><apiName>getChildAt</apiName><shortdesc>
          n 番目の子コンポーネントオブジェクトを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject 型のオブジェクトとしての子への参照です。通常は戻り値を UIComponent、または ComboBox や TextArea などの特定の Flex コントロールの型にキャストします。
          
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>0 ～ (numChildren - 1) までの数値です。
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          <i>n</i> 番目の子コンポーネントオブジェクトを取得します。
                   <p>このメソッドから返される子には、MXML で宣言された子、および <codeph>addChild()</codeph> または <codeph>addChildAt()</codeph> メソッドを使用して追加された子が含まれます。</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:getChildByName"><apiName>getChildByName</apiName><shortdesc>
          指定したストリングの name プロパティを持つ子を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject 型のオブジェクトとして子を表す DisplayObject です。通常は戻り値を UIComponent、または ComboBox や TextArea などの特定の Flex コントロールの型にキャストします。指定した名前の子が存在しない場合は、ランタイムエラーがスローされます。
          
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>子の識別子です。
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          指定したストリングの <codeph>name</codeph> プロパティを持つ子を返します。
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:getChildIndex"><apiName>getChildIndex</apiName><shortdesc>
          特定の子の 0 から始まるインデックスを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>0 ～ (numChildren - 1) の間の数値です。
          
          </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>インデックスを取得する子への参照です。
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          特定の子の 0 から始まるインデックスを取得します。
                   <p>コンテナの最初の子（つまり、MXML 宣言で最初に現れる子タグ）のインデックスは 0、2 番目の子のインデックスは 1 になり、以降も同様に続きます。コンテナの子のインデックスにより、レイアウトされる順番が決まります。例えば、VBox ではインデックス 0 の子が一番上に、インデックス 1 の子がその下にレイアウトされます。</p>
                   <p><codeph>addChild()</codeph> メソッドを呼び出すことによって子を追加すると、新しい子のインデックスは、既存の子の中で最大のインデックスに 1 を足した値に等しくなります。 <codeph>addChildAt()</codeph> メソッドを使用して、指定したインデックス位置に子を挿入できます。その場合、そのインデックス以降の位置にあった子はインデックスが 1 ずつ増やされ、すべてのインデックスが 0 ～ <codeph>(numChildren - 1)</codeph> の範囲に収まります。</p>
                   <p><codeph>removeChild()</codeph> または <codeph>removeChildAt()</codeph> メソッドを呼び出して子を削除すると、残りの子のインデックスが 0 ～ <codeph>(numChildren - 1)</codeph> までになるように調整されます。</p>
                   <p><codeph>myView.getChildIndex(myChild)</codeph> が 5 を返した場合、<codeph>myView.getChildAt(5)</codeph> は myChild を返します。</p>
                   <p>子のインデックスは、<codeph>setChildIndex()</codeph> メソッドを呼び出すことによって変更できます。</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:getChildren"><apiName>getChildren</apiName><shortdesc>
          コンテナのコンテンツである子で構成された DisplayObject オブジェクトの配列を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>コンテナのコンテンツである子で構成された DisplayObject オブジェクトの配列です。
         
          </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
          コンテナのコンテンツである子で構成された DisplayObject オブジェクトの配列を返します。この配列には、コンテナの境界線や背景イメージなど、コンテナの表示エレメントを実装する DisplayObject は<b>含まれません</b>。
                   </apiDesc></apiOperationDetail><related-links><link href="mx.charts.xml#Legend/rawChildren"><linktext>rawChildren</linktext></link></related-links></apiOperation><apiOperation id="mx.charts:Legend:getElementAt"><apiName>getElementAt</apiName><shortdesc conref="mx.core.IVisualElementContainer#getElementAt()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#getElementAt()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:getElementIndex"><apiName>getElementIndex</apiName><shortdesc conref="mx.core.IVisualElementContainer#getElementIndex()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#getElementIndex()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:globalToContent"><apiName>globalToContent</apiName><shortdesc conref="mx.core.UIComponent#globalToContent()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#globalToContent()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:protected:layoutChrome"><apiName>layoutChrome</apiName><shortdesc>
          サイズ変更に応答して、このコンテナの境界線の位置およびサイズを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleX</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位によりコンポーネントの幅を指定します。
                   </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleY</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの高さを指定します。
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          サイズ変更に応答して、このコンテナの境界線の位置およびサイズを設定します。これは、Container のサブクラスを作成するときにオーバーライド可能な高度なメソッドです。
                   <p>Flex が <codeph>layoutChrome()</codeph> メソッドを呼び出すのは、<codeph>addChild()</codeph> メソッドでコンテナが親コンテナに追加されたとき、およびコンテナの <codeph>invalidateDisplayList()</codeph> メソッドが呼び出されたときです。</p>
                   <p><codeph>Container.layoutChrome()</codeph> メソッドは <codeph>autoLayout</codeph> プロパティの値に関係なく呼び出されます。</p>
                   <p><codeph>Container.layoutChrome()</codeph> メソッドは、Container コンテナの境界線の位置とサイズを設定します。Container のすべてのサブクラスでは、境界線の位置を適切に設定するために、サブクラスの <codeph>layoutChrome()</codeph> メソッドで <codeph>super.layoutChrome()</codeph> メソッドを呼び出す必要があります。</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:localToContent"><apiName>localToContent</apiName><shortdesc conref="mx.core.UIComponent#localToContent()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#localToContent()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeAllChildren"><apiName>removeAllChildren</apiName><shortdesc>
          このコンテナの子リストからすべての子を削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          このコンテナの子リストからすべての子を削除します。
          
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeAllElements"><apiName>removeAllElements</apiName><shortdesc conref="mx.core.IVisualElementContainer#removeAllElements()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#removeAllElements()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeChildAt"><apiName>removeChildAt</apiName><shortdesc>
          このコンテナの子リストから、指定されたインデックス位置にある子 DisplayObject を削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject 型のオブジェクトとして削除された子です。通常は戻り値を UIComponent、または削除されるコンポーネントの型にキャストします。
          
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>削除する DisplayObject の子インデックスです。
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          このコンテナの子リストから、指定されたインデックス位置にある子 DisplayObject を削除します。削除された子の <codeph>parent</codeph> プロパティは null に設定されます。削除された子は、明示的に破棄されない限り存在し続けます。その子を別のコンテナに追加した場合、その最後の状態が保持されます。
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeChild"><apiName>removeChild</apiName><shortdesc>
          このコンテナの子リストから子 DisplayObject を削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject 型のオブジェクトとして削除された子です。通常は戻り値を UIComponent、または削除されるコンポーネントの型にキャストします。
          
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>削除する DisplayObject です。
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          このコンテナの子リストから子 DisplayObject を削除します。削除された子の <codeph>parent</codeph> プロパティは null に設定されます。削除された子は、明示的に破棄されない限り存在し続けます。その子を別のコンテナに追加した場合、その最後の状態が保持されます。
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeElementAt"><apiName>removeElementAt</apiName><shortdesc conref="mx.core.IVisualElementContainer#removeElementAt()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#removeElementAt()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeElement"><apiName>removeElement</apiName><shortdesc conref="mx.core.IVisualElementContainer#removeElement()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#removeElement()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:protected:scrollChildren"><apiName>scrollChildren</apiName><shortdesc>
          horizontalScrollPosition プロパティと verticalScrollPosition プロパティの値に基づいて、表示可能領域を基準とするコンテナのコンテンツ領域の相対的な位置を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          horizontalScrollPosition プロパティと verticalScrollPosition プロパティの値に基づいて、表示可能領域を基準とするコンテナのコンテンツ領域の相対的な位置を設定します。表示可能領域に表示されないコンテンツは切り詰められます。このメソッドは、スクロール可能なクロムをコンテンツ領域内に持つサブクラスでオーバーライドしてください。
          
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:setChildIndex"><apiName>setChildIndex</apiName><shortdesc>
          特定の子のインデックスを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>インデックスを設定する子への参照です。
                   </apiDesc></apiParam><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiDesc>新規インデックスを示す数値です。0 ～ (numChildren - 1) の整数であることが必要です。
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          特定の子のインデックスを設定します。子のインデックスの詳細については、<codeph>getChildIndex()</codeph> メソッドを参照してください。
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:setElementIndex"><apiName>setElementIndex</apiName><shortdesc conref="mx.core.IVisualElementContainer#setElementIndex()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#setElementIndex()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc conref="mx.core.IVisualElementContainer#swapElementsAt()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#swapElementsAt()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:swapElements"><apiName>swapElements</apiName><shortdesc conref="mx.core.IVisualElementContainer#swapElements()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#swapElements()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
          サイズ変更に反応して、このコンテナの子の位置およびサイズを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleX</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位によりコンポーネントの幅を指定します。
                   </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleY</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの高さを指定します。
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          サイズ変更に反応して、このコンテナの子の位置およびサイズを設定します。
                   <p><codeph>UIComponent.updateDisplayList()</codeph> メソッドを参照して、<codeph>updateDisplayList()</codeph> メソッドの詳細を確認してください。</p>
                   <p><codeph>Container.updateDisplayList()</codeph> メソッドは、Container コンテナの境界線の位置とサイズを設定します。境界線の位置が適切に決定されるためには、Container のすべてのサブクラスで、そのサブクラスの <codeph>updateDisplayList()</codeph> メソッドが <codeph>super.updateDisplayList()</codeph> メソッドを呼び出す必要があります。</p>
                   </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.UIComponent.xml"><linktext>mx.core.UIComponent</linktext></link></related-links></apiOperation><apiValue id="mx.charts:Legend:protected:actualCreationPolicy"><apiName>actualCreationPolicy</apiName><shortdesc>
          このコンテナの作成ポリシーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
          このコンテナの作成ポリシーです。 
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:legendItemClass"><apiName>legendItemClass</apiName><shortdesc>
          LegendItem オブジェクトのインスタンス化に使用されるクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
          LegendItem オブジェクトのインスタンス化に使用されるクラスです。 凡例の内容がグラフまたはデータに基づいて決定される場合は、<codeph>legendItemClass</codeph> のインスタンスが、<codeph>dataProvider</codeph> が説明する各アイテムに対して 1 つ生成されます。 凡例アイテムでカスタムビヘイビアーを使用する場合は、代わりに、Legend により凡例アイテムの派生タイプのインスタンスが生成されるよう、LegendItem のサブクラスをこのプロパティに割り当てます。  
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:autoLayout:get"><apiName>autoLayout</apiName><shortdesc>
          true の場合、子の位置またはサイズが変更されたときに測定とレイアウトが実行されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
          
          </apiDefaultValue></apiValueDef><apiDesc>
          <codeph>true</codeph> の場合、子の位置またはサイズが変更されたときに測定とレイアウトが実行されます。 <codeph>false</codeph> の場合、測定とレイアウトは、子がコンテナに追加されたとき、またはコンテナから削除されたときに、一度だけ実行されます。
                   <p>Move エフェクトを使用する場合、移動するコンポーネントの周囲のレイアウトは、Move エフェクトがアニメーション化するものに収まるように再調整されません。 コンテナの <codeph>autoLayout</codeph> プロパティを <codeph>true</codeph> に設定しても、この動作には影響しません。</p>
                   <p><codeph>autoLayout</codeph> プロパティが <codeph>false</codeph> の場合、Zoom エフェクトは有効になりません。</p>
                   <p><codeph>autoLayout</codeph> プロパティは、Accordion または ViewStack コンテナには適用されません。</p>
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
          left、top、right、bottom の 4 つのプロパティを持つ EdgeMetrics オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
          <codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph> および <codeph>bottom</codeph> の 4 つのプロパティを持つ EdgeMetrics オブジェクトを返します。 各プロパティの値は、境界線の 1 辺の太さをピクセル単位で表したものです。
                   <p><codeph>viewMetrics</codeph> とは異なり、このプロパティは Container のサブクラスによってオーバーライドされません。</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:childDescriptors:get"><apiName>childDescriptors</apiName><shortdesc>
          MXML コンパイラーによって生成される UIComponentDescriptor オブジェクトの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
          MXML コンパイラーによって生成される UIComponentDescriptor オブジェクトの配列です。
                   <p>各 UIComponentDescriptor オブジェクトには、コンテナの MXML タグの、子 MXML タグの 1 つで指定される情報が含まれます。配列内での UIComponentDescriptor オブジェクトの順序は、子タグの順序と同一です。初期化時には、子の記述子を使用して、コンテナの子 UIComponent オブジェクトとその Repeater オブジェクトが作成され、これらに MXML で指定された初期プロパティ値やイベントハンドラー、エフェクトなどが設定されます。</p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.UIComponentDescriptor.xml"><linktext>mx.core.UIComponentDescriptor</linktext></link></related-links></apiValue><apiValue id="mx.charts:Legend:clipContent:get"><apiName>clipContent</apiName><shortdesc>
          このコンテナの子の位置やサイズが、このコンテナの境界線を超えるように変更された場合に、クリップマスクを適用するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
          
          </apiDefaultValue></apiValueDef><apiDesc>
          このコンテナの子の位置やサイズが、このコンテナの境界線を超えるように変更された場合に、クリップマスクを適用するかどうかを指定します。 <codeph>false</codeph> の場合、このコンテナの子は、移動やサイズ変更によってこのコンテナの外部に出た場合も、表示されたままになります。 <codeph>true</codeph> の場合、このコンテナの子は切り詰められます。
                   <p><codeph>clipContent</codeph> が <codeph>false</codeph> の場合、このコンテナのスクロールが無効になり、スクロールバーが表示されません。 <codeph>clipContent</codeph> が true の場合、コンテナの子がコンテナの外部に拡張されると、通常はスクロールバーが表示されます。 スクロールバーの表示の制御については、<codeph>horizontalScrollPolicy</codeph> および <codeph>verticalScrollPolicy</codeph> を参照してください。</p>
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:contentMouseX:get"><apiName>contentMouseX</apiName><shortdesc conref="mx.core.UIComponent#contentMouseX">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#contentMouseX">
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:contentMouseY:get"><apiName>contentMouseY</apiName><shortdesc conref="mx.core.UIComponent#contentMouseY">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#contentMouseY">
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:creatingContentPane:get"><apiName>creatingContentPane</apiName><shortdesc>
          コンテナは、内部コンテンツペインを使用してスクロールを制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          コンテナは、内部コンテンツペインを使用してスクロールを制御します。 コンテナでコンテンツペインを作成している間は <codeph>creatingContentPane</codeph> が <codeph>true</codeph> になるため、いくつかのイベントを無視またはブロックできます。
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:creationIndex:get"><apiName>creationIndex</apiName><shortdesc>
          コンテナの子をインスタンス化して描画する順序を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
          
          </apiDefaultValue><apiDeprecated><apiDesc>非推奨</apiDesc></apiDeprecated></apiValueDef><apiDesc>
          コンテナの子をインスタンス化して描画する順序を指定します。
                   <p>このプロパティは、<codeph>creationPolicy</codeph> プロパティが <codeph>ContainerCreationPolicy.QUEUED</codeph> に設定されている場合にのみ有効です。 それ以外の場合は無視されます。</p>
                   </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:creationPolicy:get"><apiName>creationPolicy</apiName><shortdesc>
          この MX コンテナの子作成ポリシーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ContainerCreationPolicy.AUTO
          
          </apiDefaultValue></apiValueDef><apiDesc>
          この MX コンテナの子作成ポリシーです。有効な ActionScript 値は、<codeph>ContainerCreationPolicy.AUTO</codeph>、<codeph>ContainerCreationPolicy.ALL</codeph> または <codeph>ContainerCreationPolicy.NONE</codeph> です。有効な MXML 値は、<codeph>auto</codeph>、<codeph>all</codeph> または <codeph>none</codeph> です。
                   <p>コンテナに <codeph>creationPolicy</codeph> が指定されていない場合、そのコンテナは親の <codeph>creationPolicy</codeph> を継承します。 Application に <codeph>creationPolicy</codeph> が指定されていない場合、デフォルトは <codeph>ContainerCreationPolicy.AUTO</codeph> になります。</p>
                   <p><codeph>creationPolicy</codeph> が <codeph>ContainerCreationPolicy.AUTO</codeph> の場合、必要になるまでコンテナの一部またはすべての下位要素の作成が遅延されます（<i>遅延インスタンス化</i>）。 このポリシーを使用した場合、最初に作成される UIComponent が少なくなるため、起動時間が最短になります。 ただし、ユーザーがアプリケーションの別の部分に初めて移動するとき、ナビゲーションの遅延が生じます。 Accordion、TabNavigator、ViewStack などのナビゲーターコンテナは、すべての子を直ちに作成することによって <codeph>ContainerCreationPolicy.AUTO</codeph> ポリシーを実装しますが、ある子がそのナビゲーターコンテナの選択された子になるまでは、その子の下位要素を作成しません。</p>
                   <p><codeph>creationPolicy</codeph> が <codeph>ContainerCreationPolicy.ALL</codeph> である場合、ナビゲーターコンテナは、子が選択されるまで待たずに各子の下位要素を直ちに作成します。 VBox コンテナなどの単一ビューコンテナについては、<codeph>ContainerCreationPolicy.AUTO</codeph> ポリシーと <codeph>ContainerCreationPolicy.ALL</codeph> ポリシーに違いはありません。</p>
                   <p><codeph>creationPolicy</codeph> が <codeph>ContainerCreationPolicy.NONE</codeph> である場合、コンテナは子を作成しません。 この場合は、MXML 作成者が、<codeph>createComponentsFromDescriptors()</codeph> メソッドを呼び出すことによって子を作成します。</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
          Legend で使用する一連のデータです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="collectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
          Legend で使用する一連のデータです。
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:data:get"><apiName>data</apiName><shortdesc>
          アイテムレンダラーまたはアイテムエディターで data プロパティを使用すると、コンポーネントに値を渡すことができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
          </apiDefaultValue></apiValueDef><apiDesc>
          アイテムレンダラーまたはアイテムエディターで <codeph>data</codeph> プロパティを使用すると、コンポーネントに値を渡すことができます。 通常、データバインディングを使用して、<codeph>data</codeph> プロパティのフィールドをこのコンポーネントのプロパティにバインドします。
                   <p>MXML でこのプロパティを設定することはありません。</p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.charts:Legend:deferredContentCreated:get"><apiName>deferredContentCreated</apiName><shortdesc>
          processedDescriptors に相当する IDeferredContentOwner のプロパティ
         
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          processedDescriptors に相当する IDeferredContentOwner のプロパティ
         
          </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.charts.xml#UIComponent/processedDescriptors"><linktext>UIComponent.processedDescriptors</linktext></link></related-links></apiValue><apiValue id="mx.charts:Legend:direction:get"><apiName>direction</apiName><shortdesc>
          コンテナ内に子を配置する方法を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="directionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"horizontal"
         
          </apiDefaultValue></apiValueDef><apiDesc>
          コンテナ内に子を配置する方法を指定します。 有効な MXML 値は、<codeph>"horizontal"</codeph> および <codeph>"vertical"</codeph> です。 ActionScript では、値 TileDirection.HORIZONTAL または TileDirection.VERTICAL を使用して方向を設定できます。デフォルト値は <codeph>"horizontal"</codeph> です （コンテナが Tile のサブクラスである Legend コンテナの場合は <codeph>"vertical"</codeph> になります）。
                   <p>最初の子は、常に Tile コンテナの左上に配置されます。 <codeph>direction</codeph> が <codeph>"horizontal"</codeph> の場合、子は一番上の行の左から右に、次に 2 行目の左から右に、という順序で配置されます。 値が <codeph>"vertical"</codeph> の場合、子は一番左の列の上から下に、次に 2 列目の上から下に、という順序で配置されます。</p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.charts.TileDirection.xml"><linktext>TileDirection</linktext></link></related-links></apiValue><apiValue id="mx.charts:Legend:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
          水平スクロールバーの現在の位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="viewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
          
          </apiDefaultValue></apiValueDef><apiDesc>
          水平スクロールバーの現在の位置です。 これは、スクロールバーサーフェスの左端から、現在表示されているサーフェスの左端部分までの距離（ピクセル単位）と同じです。
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:maxHorizontalScrollPosition:get"><apiName>maxHorizontalScrollPosition</apiName><shortdesc>
          horizontalScrollPosition プロパティの有効な最大値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
          <codeph>horizontalScrollPosition</codeph> プロパティの有効な最大値です。 水平スクロールバーが存在しない場合、デフォルトは 0 です。
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:maxVerticalScrollPosition:get"><apiName>maxVerticalScrollPosition</apiName><shortdesc>
          verticalScrollPosition プロパティの有効な最大値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
          <codeph>verticalScrollPosition</codeph> プロパティの有効な最大値です。 垂直スクロールバーが存在しない場合、デフォルトは 0 です。
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:numChildren:get"><apiName>numChildren</apiName><shortdesc>
          このコンテナの子コンポーネントの数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
          このコンテナの子コンポーネントの数です。
                   <p>子の数は、最初は MXML で宣言された子の数に等しくなります。 実行時には、<codeph>addChild()</codeph> または <codeph>addChildAt()</codeph> の呼び出しによって新しい子が追加されたり、<codeph>removeChild()</codeph>、<codeph>removeChildAt()</codeph> または <codeph>removeAllChildren()</codeph> の呼び出しによって既存の子が削除される可能性があります。</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:numElements:get"><apiName>numElements</apiName><shortdesc conref="mx.core.IVisualElementContainer#numElements">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.IVisualElementContainer#numElements">
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:rawChildren:get"><apiName>rawChildren</apiName><shortdesc>
          通常、コンテナには、Container.getChildAt() メソッドおよび Container.numChildren プロパティを使用して列挙できる子コンポーネントが含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:IChildList"/></apiValueDef><apiDesc>
          通常、コンテナには、<codeph>Container.getChildAt()</codeph> メソッドおよび <codeph>Container.numChildren</codeph> プロパティを使用して列挙できる子コンポーネントが含まれます。 さらに、コンテナには、境界線や背景などのスタイルエレメントおよびスキンが入ることがあります。 Flash Player と AIR では、描画される子コンポーネントとスキンに違いはありません。 子コンポーネントとスキンはすべて、Player の <codeph>getChildAt()</codeph> メソッドおよび <codeph>numChildren</codeph> プロパティを使用してアクセスできます。 ただし、Container クラスは <codeph>getChildAt()</codeph> メソッドおよび <codeph>numChildren</codeph> プロパティ（およびその他のいくつかのメソッド）をオーバーライドして、コンテナの子が唯一の子コンポーネントと見なされるような効果を作成します。
                   <p>コンテナのすべての子（コンテンツである子とスキンの両方）にアクセスする必要がある場合は、通常の Container のメソッドの代わりに、<codeph>rawChildren</codeph> プロパティのメソッドとプロパティを使用します。 例えば、<codeph>Container.rawChildren.getChildAt())</codeph> メソッドを使用します。 ただし、コンテナが子の ContentPane Sprite オブジェクトを作成する場合、<codeph>rawChildren</codeph> プロパティ値は ContentPane だけをカウントし、コンテナの子はカウントしません。 コンテナがいつ ContentPane を持つのかを判断することが常に可能であるとは限りません。</p>
         
          <p><b>メモ：</b> <codeph>addChild</codeph> メソッドまたは <codeph>addChildAt</codeph> メソッドを <codeph>rawChildren</codeph> オブジェクトに対して呼び出す場合は、追加したコンポーネントで <codeph>tabFocusEnabled = false</codeph> を設定してください。 そうすると、ユーザーは追加された表示専用コンポーネントをタブで選択できなくなります。</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc>
          垂直スクロールバーの現在の位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="viewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
          
          </apiDefaultValue></apiValueDef><apiDesc>
          垂直スクロールバーの現在の位置です。 これは、スクロールバーサーフェスの上端から、現在表示されているサーフェスの上端部分までの距離（ピクセル単位）と同じです。
                   </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:viewMetricsAndPadding:get"><apiName>viewMetricsAndPadding</apiName><shortdesc>
          left、top、right および bottom の 4 つのプロパティを持つオブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
          <codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph> および <codeph>bottom</codeph> の 4 つのプロパティを持つオブジェクトを返します。 各プロパティの値は、コンテナの端の周囲にあるクロム（ビジュアルエレメント）の幅にオブジェクトの余白の幅を加えた値と等しくなります。
                   <p>クロムには境界線の幅が含まれます。 <codeph>horizontalScrollPolicy</codeph> または <codeph>verticalScrollPolicy</codeph> プロパティ値が <codeph>ScrollPolicy.ON</codeph> の場合、クロムには対応するスクロールバーの幅も含まれます。 スクロールポリシーが <codeph>ScrollPolicy.AUTO</codeph> の場合は、スクロールバーが表示されていても、クロムの測定にスクロールバーの幅は含まれません。</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:viewMetrics:get"><apiName>viewMetrics</apiName><shortdesc>
          left、top、right および bottom の 4 つのプロパティを持つオブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
          <codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph> および <codeph>bottom</codeph> の 4 つのプロパティを持つオブジェクトを返します。 各プロパティの値は、コンテナの端の周囲にあるクロム（ビジュアルエレメント）の幅と等しくなります。 
                   <p>クロムには境界線の幅が含まれます。 <codeph>horizontalScrollPolicy</codeph> または <codeph>verticalScrollPolicy</codeph> プロパティ値が <codeph>ScrollPolicy.ON</codeph> の場合、クロムには対応するスクロールバーの幅も含まれます。 スクロールポリシーが <codeph>ScrollPolicy.AUTO</codeph> の場合は、スクロールバーが表示されていても、クロムの測定にスクロールバーの幅は含まれません。</p>
                   <p>Container のサブクラスでは、Container の子の位置を決める際に他のクロムが考慮されるように、このメソッドをオーバーライドしてください。 例えば、Panel クラスの <codeph>viewMetrics</codeph> プロパティは、Panel コンテナのタイトルバーの幅を <codeph>top</codeph> プロパティで示しているオブジェクトを返す必要があります。</p>
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:ChartItem"><apiName>ChartItem</apiName><shortdesc>
  ChartItem は、ChartSeries 中の 1 アイテムを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  ChartItem は、ChartSeries 中の 1 アイテムを表します。ほとんどの標準的な系列には、系列の dataProvider コレクション内の各アイテムごとに作成された ChartItem が 1 つあります。ChartItems は、系列の itemRenderer のインスタンスに渡され、レンダリングに使用されます。ほとんどの系列タイプでは、グラフタイプ固有の追加情報を含むことができるよう ChartItem が拡張されます。  
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts:ChartItem:ChartItem"><apiName>ChartItem</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IChartElement</apiOperationClassifier><apiData>null</apiData><apiDesc>ChartItem が属する系列またはエレメントです。
     
      </apiDesc></apiParam><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>ChartItem が表す系列のデータプロバイダーのアイテムです。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>ChartItem が表す系列のデータプロバイダーのデータのインデックスです。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts:ChartItem:clone"><apiName>clone</apiName><shortdesc>
      この ChartItem のコピーを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>この ChartItem のコピーです。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      この ChartItem のコピーを返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts:ChartItem:DISABLED"><apiName>DISABLED</apiName><shortdesc>
      ChartItem が無効状態で表示されており、選択できないことを示す値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>disabled</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ChartItem が無効状態で表示されており、選択できないことを示す値です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:FOCUSEDSELECTED"><apiName>FOCUSEDSELECTED</apiName><shortdesc>
      ChartItem が、フォーカス状態かつ選択状態で表示されていることを示す値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>focusedSelected</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ChartItem が、フォーカス状態かつ選択状態で表示されていることを示す値です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:FOCUSED"><apiName>FOCUSED</apiName><shortdesc>
      ChartItem がフォーカスを持っているものの、選択状態で表示されてはいないことを示す値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>focused</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ChartItem がフォーカスを持っているものの、選択状態で表示されてはいないことを示す値です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:NONE"><apiName>NONE</apiName><shortdesc>
      ChartItem が選択状態で表示されておらず、フォーカスもなく、マウスも合わせられていないことを示す値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ChartItem が選択状態で表示されておらず、フォーカスもなく、マウスも合わせられていないことを示す値です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:ROLLOVER"><apiName>ROLLOVER</apiName><shortdesc>
      ChartItem が、マウスを合わせたような状態で表示されていることを示す値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOver</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ChartItem が、マウスを合わせたような状態で表示されていることを示す値です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:SELECTED"><apiName>SELECTED</apiName><shortdesc>
      ChartItem が選択状態で表示されているものの、フォーカスを持ってはいないことを示す値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selected</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ChartItem が選択状態で表示されているものの、フォーカスを持ってはいないことを示す値です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:element"><apiName>element</apiName><shortdesc>
      ChartItem を所有する系列またはエレメントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.charts.chartClasses:IChartElement</apiValueClassifier></apiValueDef><apiDesc>
      ChartItem を所有する系列またはエレメントです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:index"><apiName>index</apiName><shortdesc>
      ChartItem が表す系列のデータプロバイダーのデータのインデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      ChartItem が表す系列のデータプロバイダーのデータのインデックスです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:itemRenderer"><apiName>itemRenderer</apiName><shortdesc>
      この ChartItem を表すグラフの itemRenderer のインスタンスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:IFlexDisplayObject"/></apiValueDef><apiDesc>
      この ChartItem を表すグラフの itemRenderer のインスタンスです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:item"><apiName>item</apiName><shortdesc>
      ChartItem が表す系列のデータプロバイダーのアイテムです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      ChartItem が表す系列のデータプロバイダーのアイテムです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:currentState:get"><apiName>currentState</apiName><shortdesc>
      ChartItem の外観を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      ChartItem の外観を定義します。 <codeph>currentState</codeph> プロパティは、<codeph>none</codeph>、<codeph>rollOver</codeph>、<codeph>selected</codeph>、<codeph>disabled</codeph>、<codeph>focusSelected</codeph>、および <codeph>focused</codeph> のいずれかの値に設定できます。
     
      <P>アイテムの状態を設定しても、selectedItems 配列にアイテムは追加されません。 グラフアイテムの外観のみ変わります。 また、このプロパティの値を設定しても、<codeph>change</codeph> イベントはトリガーされません。</P>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:LineChart"><apiName>LineChart</apiName><shortdesc>
  LineChart コントロールは、連続する 1 本の線でつながれた点としてデータ系列を表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  The <code>&lt;mx:LineChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:LineChart
  /&gt;
  </pre> 
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  LineChart コントロールは、連続する 1 本の線でつながれた点としてデータ系列を表します。アイコンやシンボルを使用して線上の各データポイントを表すことも、アイコンなしの単純な線を表示することもできます。 
  
  <p>LineChart コントロールでは、<codeph>series</codeph> プロパティに LineSeries オブジェクトの配列が含まれている必要があります。</p>
 
  </apiDesc><example conref="Line_AreaChartExample.mxml"><swfblock conref="examples/Line_AreaChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#LineSeries"><linktext>mx.charts.series.LineSeries</linktext></link></related-links><apiConstructor id="mx.charts:LineChart:LineChart"><apiName>LineChart</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:LineChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:AxisLabel"><apiName>AxisLabel</apiName><shortdesc>
  AxisLabel オブジェクトは、グラフ軸上の 1 つのラベルを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  AxisLabel オブジェクトは、グラフ軸上の 1 つのラベルを表します。AxisLabel オブジェクトは、IAxis オブジェクトによって生成されます。また、AxisLabel オブジェクトはデータとして、IDataRenderer インターフェイスを実装するカスタム AxisLabel オブジェクトに渡されます。
  	
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#AxisRenderer"><linktext>mx.charts.AxisRenderer</linktext></link><link href="mx.charts.chartClasses.xml#IAxis"><linktext>mx.charts.chartClasses.IAxis</linktext></link></related-links><apiConstructor id="mx.charts:AxisLabel:AxisLabel"><apiName>AxisLabel</apiName><shortdesc>
	  コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>position</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>軸に沿ったラベルの位置で、0 と 1 の間の値として指定されます。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>ラベルが表す値です。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>実際には、テキストラベルが軸に沿ってレンダリングされます。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  コンストラクターです。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:AxisLabel:position"><apiName>position</apiName><shortdesc>
	  軸に沿ったラベルの位置で、0 と 1 の間の値として指定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  軸に沿ったラベルの位置で、0 と 1 の間の値として指定されます。位置が 0 の AxisLabel は、軸の最小値に配置されます。位置が 1 の AxisLabel は、軸の最大値に配置されます。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisLabel:text"><apiName>text</apiName><shortdesc>
	  実際には、テキストラベルが軸に沿ってレンダリングされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  実際には、テキストラベルが軸に沿ってレンダリングされます。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisLabel:value"><apiName>value</apiName><shortdesc>
	  ラベルが表す値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
	  ラベルが表す値です。ラベルを生成した軸ごとに固有の、値プロパティの特定のタイプがあります。例えば、LinearAxis により数値が生成され、DateTimeAxis により Date インスタンス値が生成されます。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:LogAxis"><apiName>LogAxis</apiName><shortdesc>
  LogAxis クラスは、最小値から最大値の間の数値を、グラフの軸に沿って対数的にマッピングします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:LogAxis&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:LogAxis
    <strong>Properties</strong>
    interval="10"
    maximum="null"
    maximumLabelPrecision="null"
    minimum="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:NumericAxis</apiBaseClassifier></apiClassifierDef><apiDesc>
  LogAxis クラスは、最小値から最大値の間の数値を、グラフの軸に沿って対数的にマッピングします。 デフォルトでは、画面上のすべてのグラフエレメントに適合するように、<codeph>minimum</codeph>、<codeph>maximum</codeph>、および <codeph>interval</codeph> の値がグラフのデータから決定されます。 これらのプロパティに特定の値を明示的に設定することもできます。 LogAxis オブジェクトでは負の値が正しくレンダリングされません。これは、負の数の Log10() が <codeph>undefined</codeph> であるためです。
 
  </apiDesc><example conref="LogAxisExample.mxml"><swfblock conref="examples/LogAxisExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.chartClasses.xml#IAxis"><linktext>mx.charts.chartClasses.IAxis</linktext></link></related-links><apiConstructor id="mx.charts:LogAxis:LogAxis"><apiName>LogAxis</apiName><shortdesc>
	  コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  コンストラクターです。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:LogAxis:interval:get"><apiName>interval</apiName><shortdesc>
	  軸に沿った乗数ラベル値を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  軸に沿った乗数ラベル値を指定します。 値が 10 である場合は 1、10、100、1000 などにラベルが生成されます。値が 100 である場合は、1、100、10000 などにラベルが生成されます。このプロパティが <codeph>NaN</codeph> に設定されている場合は、Flex によりラベルの間隔が計算されます。 ラベルの間隔は 10 の累乗、かつ 10 以上である必要があります。必要な場合は、LogAxis により間隔が 10 の累乗に切り捨てられます。
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LogAxis:maximum:get"><apiName>maximum</apiName><shortdesc>
	  軸のラベルの最大値を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  軸のラベルの最大値を指定します。 <codeph>NaN</codeph> の場合は、グラフのデータから最大値が決定されます。 最大値は 10 の累乗である必要があります。必要な場合は、LogAxis により明示的な最大値が 10 の累乗に切り上げられます。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LogAxis:minimum:get"><apiName>minimum</apiName><shortdesc>
	  軸のラベルの最小値を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  軸のラベルの最小値を指定します。 <codeph>NaN</codeph> の場合は、グラフのデータから最小値が決定されます。 最小値は 10 の累乗である必要があります。必要な場合は、LogAxis により明示的な最小値が 10 の累乗に切り捨てられます。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LogAxis:maximumLabelPrecision:set"><apiName>maximumLabelPrecision</apiName><shortdesc>
	  この軸によって生成されたラベルで小数値を表すときの最大小数桁数を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  この軸によって生成されたラベルで小数値を表すときの最大小数桁数を指定します。デフォルトでは、軸はこの値をラベル自体から自動生成します。値が 0 の場合、直近の整数値に四捨五入します。値が 2 の場合、値の 1/100 の桁で直近の数に四捨五入します。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:AxisRenderer"><apiName>AxisRenderer</apiName><shortdesc>
  AxisRenderer クラスは、グラフの水平軸および垂直軸を表すために使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style enumeration="flippedVertical,vertical" inherit="no" name="verticalAxisTitleAlignment" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  垂直軸のタイトルのレンダリング方法を指定します。 <codeph>flippedVertical</codeph> はタイトルを上から下に、<codeph>vertical</codeph> はタイトルを下から上にレンダリングします。
 
  </description>
<default>flippedVertical
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="tickStroke" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  軸上の目盛りの属性を指定します。 このスタイルは Stroke クラスのインスタンスである必要があります。  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inside,outside,cross,none" inherit="no" name="tickPlacement" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  目盛りを描画する場所を指定します。オプションは次のとおりです。
  <ul>
    <li><codeph>"inside"</codeph> - 目盛りをデータ領域内に描画します。</li>
     <li><codeph>"outside"</codeph> - 目盛りをラベル領域内に描画します。</li>
     <li><codeph>"cross"</codeph> - 目盛りを軸上に描画します。</li>
     <li><codeph>"none"</codeph> - 目盛りを描画しません。</li>
  </ul>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="tickLength" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  軸上の目盛りの長さをピクセルで指定します。 
  
  </description>
<default>3  
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="showLine" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Boolean">
<description>
  軸を表示するかどうかを指定します。 
  
  </description>
<default>true 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="showLabels" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Boolean">
<description>
  ラベルを軸に沿って表示するかどうかを指定します。 
  
  </description>
<default>true 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="minorTickStroke" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  軸上の小さな目盛りの属性を指定します。このスタイルは Stroke クラスのインスタンスである必要があります。  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inside,outside,cross,none" inherit="no" name="minorTickPlacement" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  小さな目盛りを描画する場所を指定します。オプションは次のとおりです。
  <ul>
    <li><codeph>"inside"</codeph> - 小さな目盛りをデータ領域内に描画します。</li>
     <li><codeph>"outside"</codeph> - 小さな目盛りをラベル領域内に描画します。</li>
     <li><codeph>"cross"</codeph> - 小さな目盛りを軸上に描画します。</li>
     <li><codeph>"none"</codeph> - 小さな目盛りを描画しません。</li>
  </ul>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="minorTickLength" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  軸上の小さな目盛りの長さをピクセルで指定します。 
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="labelRotation" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description> 
  ラベルの回転を指定します。ラベルをデバイスフォントでレンダリングすると、ラベルは常に水平方向に描画されます。このスタイルが負の値である場合、AxisRenderer は、ラベルが重ならないように最も小さく表示するための最適な角度を決定します。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="labelGap" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description> 
  目盛りの末端からラベルの上端までの間隔の幅をピクセルで指定します。 
  
  </description>
<default>3 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="labelClass" owner="mx.charts:AxisRenderer" playerVersion="Flash10.2" type="Class">
<description>
  このコンポーネントがラベルをレンダリングするために使用するクラス。
   <p>mx.controls.Label クラスまたは spark.components.Label クラスのどちらかに設定できます。</p>
   </description>
<default>spark.components.Label
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="left,top,right,bottom,center" inherit="no" name="labelAlign" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  ラベルが指す値の位置に対するラベルの整列を指定します。
 
  </description>
<default>center
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="canStagger" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Boolean">
<description> 
  ラベルを 2 つのラベル行に交互に表示するかどうかを指定します。この設定を使用して、ラベルが占める領域を最小限に抑えます。 デフォルト値は <codeph>true</codeph> で、ラベルを交互に配置します。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="canDropLabels" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Boolean">
<description>
  正確にレイアウトを行うため、必要に応じてラベルを削除する必要があるかどうかを指定します。
   <p><codeph>true</codeph> に設定すると、AxisRenderer はレンダリングの際に重なるラベルを削除します。 ラベルは常に一定の間隔で表示されます。 必要な場合は、AxisRenderer は 1 つおきや 2 つおきに表示することも可能です。ただし、2 つおき、次は 3 つおき、というような間隔で表示することはできません。</p>
   <p><codeph>false</codeph> に設定すると、AxisRenderer は他のスキーム（回転や拡大 / 縮小など）を使用してラベルをレイアウトします。</p>
   <p>このスタイルを明示的に設定しない場合、レンダリングする軸のタイプに基づく適切な値がデフォルトとして設定されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="axisTitleStyleName" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  軸のタイトルを書式設定するときに使用する CSS クラスセレクターの名前です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="axisStroke" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  軸の線の属性を指定します。このスタイルは Stroke クラスのインスタンスである必要があります。  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセット（ピクセル単位）です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 可能な値は、<codeph>"none"</codeph> および <codeph>"underline"</codeph> です。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  コンテナ内のテキストの整列。 可能な値は <codeph>"left"</codeph>、<codeph>"right"</codeph>、または <codeph>"center"</codeph> です。
 
  <p>ほとんどのコントロールのデフォルト値は <codeph>left</codeph> です。 Button、LinkButton、および AccordionHeader コンポーネントの場合、デフォルト値は <codeph>"center"</codeph> です。 これらのコンポーネントでは、このプロパティは <codeph>labelPlacement</codeph> プロパティが <codeph>"left"</codeph> または <codeph>"right"</codeph> に設定されている場合にのみ認識されます。 <codeph>labelPlacement</codeph> が <codeph>"top"</codeph> または <codeph>"bottom"</codeph> に設定されている場合は、テキストおよびアイコンが中央に配置されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  各文字間に表示される追加のピクセル数。 正の値を指定すると文字間隔が通常より広くなり、負の値を指定すると文字間隔が通常より狭くなります。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Boolean">
<description>
  カーニングが有効（<codeph>true</codeph>) か無効（<codeph>false</codeph>）かを示すブール値です。カーニングでは、読みやすくするために、特定の文字ペア間の間隔を調整します。ただし、カーニングは見出しを大きなフォントにする場合など、必要な場合に限って使用してください。 カーニングは、埋め込み FlashType フォントに対してのみサポートされています。 Verdana や、Courier New などの等幅フォントなど、特定のフォントではカーニングはサポートされていません。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"bold"</codeph> です。 LegendItem のデフォルトは <codeph>"bold"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>thickness</codeph> プロパティを設定します。 このプロパティは字形のエッジの太さを指定します。 可能な値は -200 から 200 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルは、システムフォントには影響を与えません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"italic"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 ColorPicker コントロール以外のすべてのコントロールのデフォルト値は 10 です。 ColorPicker コントロールのデフォルト値は 11 です。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>sharpness</codeph> プロパティを設定します。 このプロパティは字形のエッジのシャープネスを指定します。 可能な値は -400 から 400 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>gridFitType</codeph> プロパティを設定します。 可能な値は、<codeph>"none"</codeph>（<codeph>flash.text.GridFitType.NONE</codeph>）、<codeph>"pixel"</codeph>（<codeph>flash.text.GridFitType.PIXEL</codeph>）、および <codeph>"subpixel"</codeph>（<codeph>flash.text.GridFitType.SUBPIXEL</codeph>）です。 
  
  <p>このプロパティが適用されるのは、埋め込み FlashType フォントを使用し、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  使用するフォントの名前です。 完全な CSS 実装と異なり、カンマ区切りリストはサポートされません。 任意のフォントファミリ名を使用できます。 汎用フォント名を指定した場合、適切なデバイスフォントに置換されます。
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  内部 TextField の <codeph>antiAliasType</codeph> プロパティを設定します。 可能な値は、<codeph>"normal"</codeph>（<codeph>flash.text.AntiAliasType.NORMAL</codeph>）および <codeph>"advanced"</codeph>（<codeph>flash.text.AntiAliasType.ADVANCED</codeph>）です。 
  
  <p>デフォルト値は <codeph>"advanced"</codeph> です。この場合、埋め込み FlashType フォントを使用していれば FlashType レンダラーが有効になります。 FlashType レンダラーを無効にするには、<codeph>"normal"</codeph> に設定してください。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
  
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="uint">
<description>
  コンポーネントが無効な場合のテキストの色です。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="uint">
<description>
  コンポーネントのラベルを含めたコンポーネント内のテキストの色です。
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:AxisRenderer&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:</p>
  
  <pre>
  &lt;mx:AxisRenderer
    <strong>Properties</strong>
    axis="<i>IAxis</i>"
    chart="<i>ChartBase</i>"
    gutters="<i>Rectangle</i>"
    heightLimit="<i>Number</i>"
    labelRenderer="<i>IFactory</i>"
    labelFunction="<i>Function</i>"
    length="<i>Number</i>"
    otherAxes="<i>Array</i>"
    placement="right|left|bottom|top"
    ticks="<i>Array</i>"
    titleRenderer="<i>IFactory</i>"
     
    <strong>Styles</strong>
    axisStroke="<i>No default</i>"
    axisTitleStyleName="<i>No default</i>"
    canDropLabels="true|false"
    canStagger="true|false"
    labelAlign="center|left|right" (horizontal axes) or "center|top|bottom" (vertical axes)
    labelGap="3"
    labelRotation="<i>No default</i>"
    minorTickLength="<i>Default depends on axis</i>"
    minorTickPlacement="none|inside|outside|cross"
    minorTickStroke="<i>No default</i>"
    showLabels="true|false"
    showLine="true|false"
    tickLength="<i>Default depends on axis</i>"
    tickPlacement="inside|outside|cross|none"
    tickStroke="<i>No default</i>"
    verticalAxisTitleAlignment="flippedVertical|vertical"
  /&gt;
  </pre>
    
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IAxisRenderer</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:DualStyleObject</apiBaseClassifier></apiClassifierDef><apiDesc>
  AxisRenderer クラスは、グラフの水平軸および垂直軸を表すために使用します。 軸は、その長さに沿って、ラベル、目盛り、およびタイトルを表示する役割を持ちます。 
   
  <p>AxisRenderer オブジェクトは、それを囲むグラフオブジェクトからビジュアルプロパティの一部を継承します。ラベルおよびタイトルのテキストフォーマットには、レンダラーの CSS テキストのプロパティがデフォルトとして設定されます。 これとは別に、軸のタイトルのフォーマットは、AxisRenderer またはグラフで <codeph>axisTitleStyleName</codeph> を指定することで制御できます。</p> 
  
  <p>ラベルを配置およびサイズ設定する際に、AxisRenderer は占有するグラフ内の使用可能な領域を最小限に抑えます。 ラベルの占める領域が大き過ぎる場合は、AxisRenderer によりラベルが縮小されます。ただし、ラベルのポイントサイズが小さくなり過ぎないように調整されます。読みやすいように、AxisRenderer は次のレイアウト方法のうち、拡大 / 縮小が最小限で済む方法を選択します。</p>
   <ul>
    <li>ラベルを水平方向に端から端まで表示します。</li> 
    <li>ラベルを水平方向に 2 行で、交互に 1 つおきに表示します。</li> 
    <li>指定された領域に収まるようにラベルを回転させます。AxisRenderer は、ラベルが重なり合わないよう、回転角度は最小限に抑えます。最大の回転角度は 90 度です。</li>
  </ul>
  
  <p>AxisRenderer は、グラフのデータ領域の境界線を調整して、境界線の外にはみ出さずにラベルを描画できるようにします。</p>
  
  </apiDesc><example conref="HLOCChartExample.mxml"><swfblock conref="examples/HLOCChartExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.charts:AxisRenderer:AxisRenderer"><apiName>AxisRenderer</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts:AxisRenderer:adjustGutters"><apiName>adjustGutters</apiName><shortdesc>
      
      レイアウトを調整し、渡されたふち取りが中に収まるようにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>ふち取りのサイズを定義する矩形で、調整を含みます。
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>workingGutters</apiItemName><apiType value="flash.geom:Rectangle"/><apiDesc>調整するふち取りを定義します。
     
      </apiDesc></apiParam><apiParam><apiItemName>adjustable</apiItemName><apiType value="Object"/><apiDesc>4 つのブール型プロパティ（left=true/false、top=true/false、right=true/false、および bottom=true/false）により構成されます。これらのプロパティは、軸レンダラーが各ふち取りをさらに調整できるかどうかを示します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      レイアウトを調整し、渡されたふち取りが中に収まるようにします。このメソッドは、周りを囲むグラフにより呼び出され、ふち取りと対応するデータ領域のサイズを決定します。 このメソッドにより、AxisRenderer では、新しいふち取りに基づいてレイアウトを計算し、必要に応じてふち取りを調整できるようになります。 ふち取りが調整可能な場合、軸レンダラーはふち取りを内側へ (より太く) 調整できますが、外側へ (より細く) は調整できません。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:AxisRenderer:chartStateChanged"><apiName>chartStateChanged</apiName><shortdesc>
      グラフによって呼び出され、その現在のトランジションの状態が変更された日時を示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>oldState</apiItemName><apiType value="uint"/><apiDesc>古い状態を表す数値です。
           </apiDesc></apiParam><apiParam><apiItemName>newState</apiItemName><apiType value="uint"/><apiDesc>新しい状態を表す数値です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      グラフによって呼び出され、その現在のトランジションの状態が変更された日時を示します。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:AxisRenderer:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts:AxisRenderer:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts:AxisRenderer:protected:measure"><apiName>measure</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts:AxisRenderer:move"><apiName>move</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts:AxisRenderer:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts:AxisRenderer:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="mx.charts:AxisRenderer:axis:get"><apiName>axis</apiName><shortdesc>
      このレンダラーに関連付けられた軸オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      このレンダラーに関連付けられた軸オブジェクトです。 このプロパティは周りを囲むグラフによって管理されるため、複数の軸レンダラーを使用する場合は明示的に設定できます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:protected:chart:get"><apiName>chart</apiName><shortdesc>
      この AxisRenderer の基本グラフです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.charts.chartClasses:ChartBase</apiValueClassifier></apiValueDef><apiDesc>
      この AxisRenderer の基本グラフです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:gutters:get"><apiName>gutters</apiName><shortdesc> 
    
      axisRenderer と周りのグラフの側面との間隔の大きさです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc> 
    
      axisRenderer と周りのグラフの側面との間隔の大きさです。 このプロパティはグラフによって自動的に割り当てられるため、直接割り当てないでください。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:heightLimit:get"><apiName>heightLimit</apiName><shortdesc> 
    
      軸レンダラーがグラフから取得するスペースの最大値（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
    
      軸レンダラーがグラフから取得するスペースの最大値（ピクセル単位）です。 デフォルトでは、軸レンダラーは、グラフ内でそのすべてのラベルをフルサイズでレンダリングするために必要なだけのスペースを取得します。 heightLimit が設定されている場合は、軸の合計サイズが heightLimit より必ず小さくなるよう、AxisRenderer はラベルのサイズを削減します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:highlightElements:get"><apiName>highlightElements</apiName><shortdesc>
      系列などのグラフエレメントを、マウスを合わせたときにハイライト表示するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      系列などのグラフエレメントを、マウスを合わせたときにハイライト表示するかどうかを指定します。
      
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:horizontal:get"><apiName>horizontal</apiName><shortdesc>
      
      軸レンダラーが水平軸として使用されている場合は true です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      軸レンダラーが水平軸として使用されている場合は <codeph>true</codeph> です。 このプロパティは周りの CartesianChart によって管理されるため、直接設定しないでください。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      ラベルとして表示するため、軸レンダラーの値をフォーマットするために呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      ラベルとして表示するため、軸レンダラーの値をフォーマットするために呼び出されます。 <codeph>labelFunction</codeph> には、次のシグネチャがあります。
      <pre>
      function labelFunction(<i>axisRenderer</i>:IAxisRenderer, <i>label</i>:String):String { ... }
      </pre>
      
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:labelRenderer:get"><apiName>labelRenderer</apiName><shortdesc> 
      軸ラベルのレンダリングに使用されるファクトリへの参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/></apiValueDef><apiDesc> 
      軸ラベルのレンダリングに使用されるファクトリへの参照です。このタイプには、IDataRenderer インターフェイスおよび IFlexDisplayObject インターフェイスの実装が必要です。
      <p>AxisRenderer は、軸上の各ラベルに対し、このクラスのインスタンスを 1 つ作成します。labelRenderer のデータプロパティには、レンダリングされる値とラベルを含む AxisLabel オブジェクトが割り当てられます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:length:get"><apiName>length</apiName><shortdesc> 
      軸の長さをスクリーン座標で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
      軸の長さをスクリーン座標で指定します。デフォルトの長さは、グラフのサイズ、ラベルのサイズ、AxisRenderer によるラベル配置の決定方法、グラフの他の部分によって発生する要件など、多数の要素によって変化します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:minorTicks:get"><apiName>minorTicks</apiName><shortdesc>
      
      軸に沿った小さな目盛りの描画位置を指定する配列を含みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      軸に沿った小さな目盛りの描画位置を指定する配列を含みます。 各配列エレメントには、0 から 1 までの値が含まれています。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:placement:get"><apiName>placement</apiName><shortdesc>
      
      グラフで axisRenderer が表示される側です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
      グラフで axisRenderer が表示される側です。 有効な値は、垂直軸レンダラーでは <codeph>"left"</codeph> と <codeph>"right"</codeph>、水平軸レンダラーでは <codeph>"top"</codeph> と <codeph>"bottom"</codeph> です。 デフォルトでは、1 番目の軸が左と上に、2 番目の軸が右と下に配置されます。 CartesianCharts は自動的に、2 番目の軸が 1 番目の軸の反対側にあることが保証されます。例えば、1 番目の垂直軸を明示的に右に配置すると、2 番目の垂直軸は左に配置されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:ticks:get"><apiName>ticks</apiName><shortdesc>
      
      軸に沿った目盛りの描画位置を指定する配列を含みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      軸に沿った目盛りの描画位置を指定する配列を含みます。 各配列エレメントには、0 から 1 までの値が含まれています。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:titleRenderer:get"><apiName>titleRenderer</apiName><shortdesc> 
      軸のタイトルのレンダリングに使用されるファクトリへの参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/></apiValueDef><apiDesc> 
      軸のタイトルのレンダリングに使用されるファクトリへの参照です。このタイプでは、UIComponent を拡張し、IDataRenderer インターフェイスおよび IFlexDisplayObject インターフェイスを実装する必要があります。
      <p>AxisRenderer は、軸のタイトルに対し、このクラスのインスタンスを 1 つ作成します。titleRenderer のデータプロパティは、レンダリングされるタイトルに割り当てられます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.charts:AxisRenderer:otherAxes:set"><apiName>otherAxes</apiName><shortdesc>
      
      軸の配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      軸の配列です。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:CategoryAxis"><apiName>CategoryAxis</apiName><shortdesc>
  CategoryAxis クラスは、グラフの軸に沿って一連の不連続な値を表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:CategoryAxis&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:CategoryAxis
    <strong>Properties</strong>
    categoryField="null"
    dataFunction="<i>No default</i>"
    dataProvider="<i>No default</i>"
    labelFunction="<i>No default</i>"
    padding="<i>Default depends on chart type</i>"
    ticksBetweenLabels="<i>true</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IAxis</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:AxisBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  CategoryAxis クラスは、グラフの軸に沿って一連の不連続な値を表示します。 CategoryAxis クラスは通常、グラフの軸に沿って表示される一連のラベルを定義するために使用します。例えば、このクラスを使用して、グラフのデータを City（市）、Year（年）、Business unit（事業部）別に表示します。
  
  <p>CategoryAxis に対して <codeph>dataProvider</codeph> プロパティを明示的に設定する必要はありません。グラフで使用される CategoryAxis は、それを含むグラフの <codeph>dataProvider</codeph> プロパティを継承します。</p>
  
  <p>同じデータプロバイダーを使用してデータをグラフに、カテゴリを CategoryAxis に取り込むことができますが、CategoryAxis はデータプロバイダーが静的な場合にレンダリングを最適化できます。可能であれば、カテゴリが相対的に静的であり、可変データが個別のデータプロバイダーに格納されるようにしてください。</p>
  
  <p><codeph>dataProvider</codeph> プロパティには、ストリングの配列か、カテゴリ名を指定するプロパティを持つレコード（Object）の配列を使用できます。<codeph>categoryField</codeph> プロパティを指定すると、CategoryAxis はデータプロバイダーがオブジェクトの配列であると見なします。<codeph>categoryField</codeph> プロパティの値が <codeph>null</codeph> の場合、CategoryAxis はデータプロバイダーがストリングの配列であると見なします。</p>
  
  </apiDesc><example conref="HLOCChartExample.mxml"><swfblock conref="examples/HLOCChartExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.charts:CategoryAxis:CategoryAxis"><apiName>CategoryAxis</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts:CategoryAxis:filterCache"><apiName>filterCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#filterCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>変換された値の読み取り元および保管先であるオブジェクトの配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>フィルターの適用前の値を含む、キャッシュ配列の中のオブジェクトのフィールドです。
     
      </apiDesc></apiParam><apiParam><apiItemName>filteredField</apiItemName><apiType value="String"/><apiDesc>フィルターが適用された値の保管先となる、キャッシュ配列の中のオブジェクトのフィールドです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#filterCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:formatForScreen"><apiName>formatForScreen</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#formatForScreen()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>DataTip のテキストです。
      
      </apiDesc></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>ストリングに変換される値です。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#formatForScreen()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:getLabelEstimate"><apiName>getLabelEstimate</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#getLabelEstimate()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier><apiDesc>AxisLabel オブジェクトの配列です。
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#getLabelEstimate()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:getLabels"><apiName>getLabels</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#getLabels()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier><apiDesc>AxisLabel オブジェクトの配列です。
      
      </apiDesc></apiReturn><apiParam><apiItemName>minimumAxisLength</apiItemName><apiType value="Number"/><apiDesc>軸の最小の長さ（ピクセル単位）です。 軸はこの値より長くすることができますが、短くすることはできません。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#getLabels()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:invertTransform"><apiName>invertTransform</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#invertTransform()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>変換された値を保持するオブジェクトです。
      
      </apiDesc></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>軸の境界です。 このパラメーターは 0 と 1 の間である必要があります。ここで 0 は軸の最小の境界を、1 は最大の境界を表します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#invertTransform()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:mapCache"><apiName>mapCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#mapCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>変換された値の読み取り元および保管先であるオブジェクトの配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>変換前の値を含む、キャッシュ配列の中のオブジェクトのフィールドです。
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>変換された値の保管先となる、キャッシュ配列の中のオブジェクトのフィールドです。
     
      </apiDesc></apiParam><apiParam><apiItemName>indexValues</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>このパラメーターは、マップされる値がインデックス値である場合は <codeph>true</codeph>、自然データ値である場合は <codeph>false</codeph> です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#mapCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:preferDropLabels"><apiName>preferDropLabels</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#preferDropLabels()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>データが失われることなく、ラベルをドロップできる場合は <codeph>true</codeph>、そうでない場合は <codeph>false</codeph> です。 
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#preferDropLabels()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:reduceLabels"><apiName>reduceLabels</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#reduceLabels()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier><apiDesc>ラベルの数を減らして重複を解決する新しいラベルのセットです。
      
      </apiDesc></apiReturn><apiParam><apiItemName>intervalStart</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>ラベルが重なる間隔の始まりです。
     
      </apiDesc></apiParam><apiParam><apiItemName>intervalEnd</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>ラベルが重なる間隔の終わりです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#reduceLabels()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:transformCache"><apiName>transformCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#transformCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>マップされた値の読み取り元および保管先であるオブジェクトの配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>マップ前の値を含む、キャッシュ配列の中のオブジェクトのフィールドです。
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>マップされた値の保管先となる、キャッシュ配列の中のオブジェクトのフィールドです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#transformCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:update"><apiName>update</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#update()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#update()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts:CategoryAxis:baseline:get"><apiName>baseline</apiName><shortdesc>
      
      軸のベースライン位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      軸のベースライン位置です。 ColumnSeries や AreaSeries などの一部の系列では、最小値が指定されない場合に、この値を使用して塗りつぶされた領域の下端が定義されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:categoryField:get"><apiName>categoryField</apiName><shortdesc>
      ラベルのテキストを格納するデータプロバイダーのフィールドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ラベルのテキストを格納するデータプロバイダーのフィールドを指定します。 このプロパティが <codeph>null</codeph> の場合、CategoryAxis は dataProvider にストリングの配列が含まれると見なします。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:dataFunction:get"><apiName>dataFunction</apiName><shortdesc>
     現在のアイテムの categoryValue として使用する値を返すメソッドを指定します。このプロパティが設定されている場合、カスタムのデータ関数の戻り値は categoryField よりも優先されます。カスタムの dataFunction には、次のシグネチャがあります。function_name (axis:CategoryAxis, item:Object):Object { ...</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     現在のアイテムの categoryValue として使用する値を返すメソッドを指定します。このプロパティが設定されている場合、カスタムのデータ関数の戻り値は <codeph>categoryField</codeph> よりも優先されます。
     
     <p>カスタムの <codeph>dataFunction</codeph> には、次のシグネチャがあります。
      
     <pre>
     <i>function_name</i> (axis:CategoryAxis, item:Object):Object { ... }
     </pre>
     
     <codeph>axis</codeph> は、この <codeph>dataFunction</codeph> を使用する現在の軸です。<codeph>item</codeph> は、考慮される dataProvider 内のアイテムです。 この関数はオブジェクトを返します。
     </p>
      
     <p>カスタマイズした <codeph>dataFunction</codeph> の使用方法の例としては、ネストされたフィールドを持つアイテムのある dataProvider から値を返させることができます。</p>
       
     </apiDesc><example>
     <pre>
     public function myFunction(axis:CategoryAxis,item:Object):Object {
          return(item.Country.State);
     }     
     </pre>
     
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      ラベルの名前が格納されているデータソースを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      ラベルの名前が格納されているデータソースを指定します。 <codeph>dataProvider</codeph> にはストリングの配列、オブジェクトの配列、あるいは IList または ICollectionView インターフェイスを実装するいずれかのオブジェクトを指定することができます。 <codeph>dataProvider</codeph> がストリングの配列である場合は、<codeph>categoryField</codeph> プロパティが <codeph>null</codeph> に設定されていることを確認します。 dataProvider がオブジェクトの配列の場合は、<codeph>categoryField</codeph> プロパティを、ラベルのテキストを含むフィールドの名前に設定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      CategoryAxis の dataProvider の各アイテム用に生成されたラベルを定義する関数を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      CategoryAxis の <codeph>dataProvider</codeph> の各アイテム用に生成されたラベルを定義する関数を指定します。 <codeph>labelFunction</codeph> を指定しない場合は、デフォルト設定により、カテゴリ自体の値が軸ラベルとなります。
     
      <p>CategoryAxis の <codeph>labelFunction</codeph> メソッドのシグネチャを次に示します。</p>
      <pre>
      function <i>function_name</i>(<i>categoryValue</i>:Object, <i>previousCategoryValue</i>:Object, <i>axis</i>:CategoryAxis, <i>categoryItem</i>:Object):String { ... }
      </pre>
      
      <p>次に、各指定アイテムについて説明します。</p>
      <ul>
       <li><codeph><i>categoryValue</i></codeph> は、表示されるカテゴリの値です。</li>
       <li><codeph><i>previousCategoryValue</i></codeph> は、軸上にある前のカテゴリの値です。</li>
       <li><codeph><i>axis</i></codeph> は、レンダリングされる CategoryAxis です。</li>
       <li><codeph><i>categoryItem</i></codeph> は、表示される <codeph>dataProvider</codeph> からのアイテムです。</li>
      </ul>
      
      <p>返されたストリングが軸のラベルとして表示されます。</p>
     
      <p><codeph>categoryField</codeph> プロパティが設定されていない場合は、<codeph>categoryValue</codeph> プロパティと同じ値となります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:padding:get"><apiName>padding</apiName><shortdesc>
      データを画面上にレンダリングするときに、軸のいずれかの端に追加されるスペースを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.5
      
      </apiDefaultValue></apiValueDef><apiDesc>
      データを画面上にレンダリングするときに、軸のいずれかの端に追加されるスペースを指定します。 0 に設定すると、最初のカテゴリが軸の先端に、最後のカテゴリが末端にマッピングされます。0.5 に設定すると、カテゴリ幅の半分のスペースが、軸の先端と最初のカテゴリの間、および最後のカテゴリと軸の末端の間に挿入されます。
      
      <p>これは、縦棒グラフや横棒グラフなど、カテゴリの境界を超えてレンダリングするタイプのグラフに便利です。ただし、LineChart または AreaChart で horizontalAxis として使用すると、0 にリセットされます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:ticksBetweenLabels:get"><apiName>ticksBetweenLabels</apiName><shortdesc>
      大目盛りの軸上の場所を、カテゴリのラベルに対して相対的に指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      大目盛りの軸上の場所を、カテゴリのラベルに対して相対的に指定します。 <codeph>true</codeph> に設定すると、カテゴリ間に目盛り、および関連するグリッド線が表示されます。 <codeph>false</codeph> の場合は、目盛りがカテゴリの中央に、ラベルと整列して配置されます。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:PlotChart"><apiName>PlotChart</apiName><shortdesc>
  PlotChart コントロールは、各データポイントにつき 2 つの値でデータを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  The <code>&lt;mx:PlotChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:PlotChart
  /&gt;
  </pre> 
  
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  PlotChart コントロールは、各データポイントにつき 2 つの値でデータを表します。1 つの値は水平方向の軸に沿ったデータポイントの位置を、もう 1 つの値は垂直方向の軸に沿った位置を決定します。
  
  <p>PlotChart コントロールでは、<codeph>series</codeph> プロパティに PlotSeries オブジェクトの配列が含まれている必要があります。</p>
 
  </apiDesc><example conref="PlotChartExample.mxml"><swfblock conref="examples/PlotChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#PlotSeries"><linktext>mx.charts.series.PlotSeries</linktext></link></related-links><apiConstructor id="mx.charts:PlotChart:PlotChart"><apiName>PlotChart</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:PlotChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:CandlestickChart"><apiName>CandlestickChart</apiName><shortdesc>
  CandlestickChart コントロールは、データ系列の高値、安値、始値、終値などの財務データを一連のローソク足で示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="maxColumnWidth" owner="mx.charts:CandlestickChart" playerVersion="Flash9" type="Number">
<description>
  描画するローソク足の幅をピクセル単位で指定します。 実際の縦棒の幅には、このプロパティと <codeph>columnWidthRatio</codeph> プロパティの値のうち小さい方が使用されます。 このスペースは、複数のローソク足の系列により比率に応じて分割されます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnWidthRatio" owner="mx.charts:CandlestickChart" playerVersion="Flash9" type="Number">
<description>
  ローソク足を描画する際の、水平軸のカテゴリの幅を基準にしたローソク足の幅の比率を指定します。0 ～ 1 の範囲内のパーセンテージで表します。値が 1 の場合は領域全体が使用され、0.6 の場合は縦棒の使用可能領域の 60% が使用されます。 実際のローソク足の幅には、<codeph>columnWidthRatio</codeph> プロパティと <codeph>maxColumnWidth</codeph> プロパティの値のうち、小さい方が使用されます。 このスペースは、複数のローソク足の系列により比率に応じて分割されます。 デフォルト値は 0.65 です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  The <code>&lt;mx:CandlestickChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:CandlestickChart
    <strong>Styles</strong>
    columnWidthRatio=".65"
    maxColumnWidth="<i>No default</i>"
  /&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  CandlestickChart コントロールは、データ系列の高値、安値、始値、終値などの財務データを一連のローソク足で示します。各ローソク足の垂直線の上部と下部は、データポイントの高値と安値を示しています。一方、塗りつぶされたボックスの上部と下部は始値と終値を示しています。ローソク足の塗りつぶされ方は、データポイントの終値が始値よりも高いかどうかによって異なります。
   
  <p>CandlestickChart コントロールでは、<codeph>series</codeph> プロパティに CandlestickSeries オブジェクトの配列が含まれている必要があります。</p>
   </apiDesc><example conref="CandlestickChartExample.mxml"><swfblock conref="examples/CandlestickChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#CandlestickSeries"><linktext>mx.charts.series.CandlestickSeries</linktext></link></related-links><apiConstructor id="mx.charts:CandlestickChart:CandlestickChart"><apiName>CandlestickChart</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:CandlestickChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:DateTimeAxis"><apiName>DateTimeAxis</apiName><shortdesc>
  DateTimeAxis クラスは、最小値から最大値の間の時間の値をグラフの軸に沿って均等にマッピングします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:DateTimeAxis&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:DateTimeAxis
    <strong>Properties</strong>
    alignLabelsToUnits="true|false"
    dataUnits="milliseconds|seconds|minutes|hours|days|weeks|months|years"
    disabledDays="<i>Array; No default</i>"
    disabledRanges="<i>Array; No default</i>"
    displayLocalTime="<i>false</i>"
    interval="<i>Number</i>"
    labelUnits="milliseconds|seconds|minutes|hours|days|weeks|months|years"
    maximum="<i>Date</i>"
    minimum="<i>Date</i>"
    minorTickInterval="<i>Number</i>"
    minorTickUnits="milliseconds|seconds|minutes|hours|days|weeks|months|years"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:NumericAxis</apiBaseClassifier></apiClassifierDef><apiDesc>
  DateTimeAxis クラスは、最小値から最大値の間の時間の値をグラフの軸に沿って均等にマッピングします。このクラスで、Date クラスのインスタンス、基準時（1970 年 1 月 1 日の午前 0 時 GMT）からのミリ秒数を表す数値、またはカスタム解析関数を提供したときのストリング値のいずれかとして、表示された値を描画することができます。  
 
  <p>DateTimeAxis により、軸の最小値と最大値の間の範囲が検証され、最も適切な単位が選択されて軸に刻まれます。指定された範囲で適切な数のラベルを生成できるように、Axis では最大の単位が選択されます。 <codeph>labelUnits</codeph> プロパティを設定すると、グラフで選択対象となる単位のセットを制限するか、または使用される単位を厳密に指定することができます。</p>
 
  <p>最小値および最大値を明示的に指定することも、グラフでレンダリングされる値を検証して、軸に自動的に最小値および最大値を決定させることもできます。 デフォルトでは、DateTimeAxis により、グラフに表示されるすべての値を含む最小の範囲が選択されます。 オプションで、<codeph>autoAdjust</codeph> プロパティを <codeph>true</codeph> に設定し、最小値および最大値を整数単位（ミリ秒、秒、分、時、日、週、月、年）に切り上げるよう要求することもできます。</p>
  
  <p>最小値と最大値の間のすべての日付ではなく営業日のみを軸に表示するには、無効な曜日および無効な日付範囲を指定します。 これにより、営業日に対応するデータのみがグラフに表示されるようにデータをフィルターすることもできます。</p>
  </apiDesc><example conref="DateTimeAxisExample.mxml"><swfblock conref="examples/DateTimeAxisExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.chartClasses.xml#IAxis"><linktext>mx.charts.chartClasses.IAxis</linktext></link></related-links><apiConstructor id="mx.charts:DateTimeAxis:DateTimeAxis"><apiName>DateTimeAxis</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts:DateTimeAxis:protected:buildMinorTickCache"><apiName>buildMinorTickCache</apiName><shortdesc>
      
      この軸によって生成される小さな目盛りの配列に対する位置の配列を構築します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>小さな目盛りがレンダリングされる箇所の、軸の最小値と最大値の間のポイントを表す 0 から 1 までの位置の配列です。
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      
      この軸によって生成される小さな目盛りの配列に対する位置の配列を構築します。 サブクラスではこの関数を実装する必要があります。 この関数は、NumericAxis によって自動的に呼び出されます。 この関数を直接呼び出すのではなく、<codeph>minorTicks</codeph> プロパティにアクセスする必要があります。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:filterCache"><apiName>filterCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#filterCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>変換された値の読み取り元および保管先であるオブジェクトの配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>フィルターの適用前の値を含む、キャッシュ配列の中のオブジェクトのフィールドです。
     
      </apiDesc></apiParam><apiParam><apiItemName>filteredField</apiItemName><apiType value="String"/><apiDesc>フィルターが適用された値の保管先となる、キャッシュ配列の中のオブジェクトのフィールドです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#filterCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatDays"><apiName>formatDays</apiName><shortdesc>
      軸が日を基準にした labelUnits でレンダリングされるときに使用されるデフォルトのフォーマット関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>書式設定したラベルです。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>書式設定する単位を格納する Date オブジェクトです。
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>現在のデータポイントより前に出現するデータポイントを格納する Date オブジェクトです。
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>ラベルをレンダリングする DateTimeAxis オブジェクト。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      軸が日を基準にした <codeph>labelUnits</codeph> でレンダリングされるときに使用されるデフォルトのフォーマット関数です。 カスタム DateTimeAxis クラスを作成する場合は、このメソッドをオーバーライドして代替のデフォルト書式を提供することができます。
      
      <p>このメソッドは直接呼び出さないでください。 代わりに、このメソッドが呼び出された後、ラベルがレンダリングされ、表示する適切なストリングが取得されます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatMilliseconds"><apiName>formatMilliseconds</apiName><shortdesc>
      軸がミリ秒を基準にした labelUnits でレンダリングされるときに使用されるデフォルトのフォーマット関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>書式設定したラベルです。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>書式設定する単位を格納する Date オブジェクトです。
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>現在のデータポイントより前に出現するデータポイントを格納する Date オブジェクトです。
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>ラベルをレンダリングする DateTimeAxis オブジェクト。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      軸がミリ秒を基準にした <codeph>labelUnits</codeph> でレンダリングされるときに使用されるデフォルトのフォーマット関数です。 カスタム DateTimeAxis クラスを作成する場合は、このメソッドをオーバーライドして代替のデフォルト書式を提供することができます。
      
      <p>このメソッドは直接呼び出さないでください。 代わりに、このメソッドが呼び出された後、ラベルがレンダリングされ、表示する適切なストリングが取得されます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatMinutes"><apiName>formatMinutes</apiName><shortdesc>
      軸が分を基準にした labelUnits でレンダリングされるときに使用されるデフォルトのフォーマット関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>書式設定したラベルです。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>書式設定する単位を格納する Date オブジェクトです。
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>現在のデータポイントより前に出現するデータポイントを格納する Date オブジェクトです。
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>ラベルをレンダリングする DateTimeAxis オブジェクト。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      軸が分を基準にした <codeph>labelUnits</codeph> でレンダリングされるときに使用されるデフォルトのフォーマット関数です。 カスタム DateTimeAxis クラスを作成する場合は、このメソッドをオーバーライドして代替のデフォルト書式を提供することができます。
      
      <p>このメソッドは直接呼び出さないでください。 代わりに、このメソッドが呼び出された後、ラベルがレンダリングされ、表示する適切なストリングが取得されます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatMonths"><apiName>formatMonths</apiName><shortdesc>
      軸が月を基準にした labelUnits でレンダリングされるときに使用されるデフォルトのフォーマット関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>書式設定したラベルです。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>書式設定する単位を格納する Date オブジェクトです。
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>現在のデータポイントより前に出現するデータポイントを格納する Date オブジェクトです。
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>ラベルをレンダリングする DateTimeAxis オブジェクト。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      軸が月を基準にした <codeph>labelUnits</codeph> でレンダリングされるときに使用されるデフォルトのフォーマット関数です。 カスタム DateTimeAxis クラスを作成する場合は、このメソッドをオーバーライドして代替のデフォルト書式を提供することができます。
      
      <p>このメソッドは直接呼び出さないでください。 代わりに、このメソッドが呼び出された後、ラベルがレンダリングされ、表示する適切なストリングが取得されます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatSeconds"><apiName>formatSeconds</apiName><shortdesc>
      軸が秒を基準にした labelUnits でレンダリングされるときに使用されるデフォルトのフォーマット関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>書式設定したラベルです。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>書式設定する単位を格納する Date オブジェクトです。
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>現在のデータポイントより前に出現するデータポイントを格納する Date オブジェクトです。
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>ラベルをレンダリングする DateTimeAxis オブジェクト。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      軸が秒を基準にした <codeph>labelUnits</codeph> でレンダリングされるときに使用されるデフォルトのフォーマット関数です。 カスタム DateTimeAxis クラスを作成する場合は、このメソッドをオーバーライドして代替のデフォルト書式を提供することができます。
      
      <p>このメソッドは直接呼び出さないでください。 代わりに、このメソッドが呼び出された後、ラベルがレンダリングされ、表示する適切なストリングが取得されます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatYears"><apiName>formatYears</apiName><shortdesc> 
      軸が年を基準にした labelUnits でレンダリングされるときに使用されるデフォルトのフォーマット関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>書式設定したラベルです。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>書式設定する単位を格納する Date オブジェクトです。
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>現在のデータポイントより前に出現するデータポイントを格納する Date オブジェクトです。
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>ラベルをレンダリングする DateTimeAxis オブジェクト。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      軸が年を基準にした <codeph>labelUnits</codeph> でレンダリングされるときに使用されるデフォルトのフォーマット関数です。 カスタム DateTimeAxis クラスを作成する場合は、このメソッドをオーバーライドして代替のデフォルト書式を提供することができます。
      
      <p>このメソッドは直接呼び出さないでください。 代わりに、このメソッドが呼び出された後、ラベルがレンダリングされ、表示する適切なストリングが取得されます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:reduceLabels"><apiName>reduceLabels</apiName><shortdesc> 
      AxisRenderer がラベルを重ならないようにレンダリングできず、Axis オブジェクトによりラベルのセットが減らされるようにする場合に起動されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>ラベルの数を減らして重複を解決する新しいラベルのセットです。
      
      </apiDesc><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier></apiReturn><apiParam><apiItemName>intervalStart</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>ラベルが重なる間隔の始まりです。
     
      </apiDesc></apiParam><apiParam><apiItemName>intervalEnd</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>ラベルが重なる間隔の終わりです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      AxisRenderer がラベルを重ならないようにレンダリングできず、Axis オブジェクトによりラベルのセットが減らされるようにする場合に起動されます。 重なった 2 つのラベルがメソッドに渡されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:transformCache"><apiName>transformCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#transformCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>マップされた値の読み取り元および保管先であるオブジェクトの配列です。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>マップ前の値を含む、キャッシュ配列の中のオブジェクトのフィールドです。
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>マップされた値の保管先となる、キャッシュ配列の中のオブジェクトのフィールドです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#transformCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts:DateTimeAxis:alignLabelsToUnits:get"><apiName>alignLabelsToUnits</apiName><shortdesc>
      軸に沿ったラベルの配置を決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      軸に沿ったラベルの配置を決定します。
      <p><codeph>false</codeph> の場合は、グラフでは常に軸の先頭にラベルが表示されます。 例えば、月ごとのラベルを生成する場合に、最初のデータポイントが 7 月 14 日であれば、最初のラベルは 7 月 14 日のものとなります。 <codeph>true</codeph> の場合は、まずラベルの単位が計算されてから、この単位の整数の間隔にラベルが表示されます。 例えば、最初のデータポイントが 7 月 14 日であり、ラベル単位を月にしている場合は（明示的に設定、または動的に計算）、最初のラベルは 8 月 1 日となります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:dataUnits:get"><apiName>dataUnits</apiName><shortdesc>
      グラフ内でデータの表示に使用する単位を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      グラフ内でデータの表示に使用する単位を指定します。 指定できる値は、以下のいずれかです。
      <ul>
       <li><codeph>milliseconds</codeph></li>
       <li><codeph>seconds</codeph></li>
       <li><codeph>minutes</codeph></li>
       <li><codeph>hours</codeph></li>
       <li><codeph>days</codeph></li>
       <li><codeph>weeks</codeph></li>
       <li><codeph>months</codeph></li>
       <li><codeph>years</codeph></li>
      </ul>
     
      <p>この値は、次の 2 つの方法で使用することができます。 まず、適切なラベル単位を選択する場合、DateTimeAxis では、データが表示されている単位より小さい単位は選択されません。 <codeph>dataUnits</codeph> プロパティの値が <codeph>days</codeph> の場合、最小値と最大値の間の範囲にかかわらず、グラフでは時間ごとのラベルはレンダリングされません。</p>
     
      <p>次に、<codeph>dataUnits</codeph> プロパティの値はいくつかの系列で使用され、それらの系列のレンダリングに影響します。 具体的には、ほとんどの縦棒系列（ColumnSeries、BarSeries、CandlestickSeries、および HLOCSeries など）で <codeph>dataUnits</codeph> プロパティにより、レンダリングされる縦棒の幅が決定されます。</p>
     
      <p>例えば、ColumnChart コントロールの水平軸で <codeph>labelUnits</codeph> プロパティが <codeph>weeks</codeph> に、<codeph>dataUnits</codeph> プロパティが <codeph>days</codeph> に設定されている場合は、ColumnChart により、各縦棒が各ラベル間の間隔の 1/7 でレンダリングされます。</p>
     
      <p><codeph>dataUnits</codeph> プロパティを <codeph>null</codeph> に設定すると、縦棒系列により日単位で縦棒がレンダリングされますが、DateTimeAxis により、ラベルの生成時に適切な単位が選択されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:disabledDays:get"><apiName>disabledDays</apiName><shortdesc>
      無効にする曜日です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      無効にする曜日です。指定した曜日に該当するその月のすべての日付が無効になります。この配列のエレメントは 0（日曜日）から 6（土曜日）の範囲の値です。 例えば、<codeph>[ 0, 6 ]</codeph> という値を設定すると、日曜日と土曜日が無効になります。
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:disabledRanges:get"><apiName>disabledRanges</apiName><shortdesc>
      1 日または複数の日を無効にします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
      
      
      </apiDefaultValue></apiValueDef><apiDesc>
      1 日または複数の日を無効にします。
     
      <p>このプロパティは、パラメーターとしてオブジェクトの配列を受け入れます。 この配列にあるオブジェクトはそれぞれ Date オブジェクトです。無効にする 1 日を指定するか、あるいは、Date オブジェクトの値を持つ <codeph>rangeStart</codeph> プロパティおよび <codeph>rangeEnd</codeph> プロパティのいずれか一方または両方を含むオブジェクトを指定します。 これらのプロパティの値は、日付範囲の先頭と末尾を示します。 いずれかのプロパティを省略した場合、そちら側の境界には制限がなくなります。 <codeph>rangeStart</codeph> のみを指定した場合は、<codeph>rangeStart</codeph> の日付を含めて、指定した日付より後の日付がすべて無効になります。 <codeph>rangeEnd</codeph> のみを指定した場合は、<codeph>rangeEnd</codeph> の日付を含めて、指定した日付より前の日付がすべて無効になります。 1 日のみを無効にするには、Array 内の日付を指定する単一の Date オブジェクトを使用します。</p>
     
      <p>次の例では、2006 年 1 月 11 日と、2006 年 1 月 23 日 ～ 2 月 10 日の範囲、および 2006 年 3 月 1 日以降のすべての日付を無効にしています。</p>
     
      <p><codeph>disabledRanges="{[ new Date(2006,0,11), {rangeStart: new Date(2006,0,23), rangeEnd: new Date(2006,1,10)}, {rangeStart: new Date(2006,2,1)} ]}"</codeph></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:displayLocalTime:get"><apiName>displayLocalTime</apiName><shortdesc> 
      true に設定された場合は、DateTimeAxis により、すべてのデータ値がアプリケーションを実行するクライアントマシンのタイムゾーンにあると見なされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
      <codeph>true</codeph> に設定された場合は、DateTimeAxis により、すべてのデータ値がアプリケーションを実行するクライアントマシンのタイムゾーンにあると見なされます。 <codeph>false</codeph> に設定された場合、すべての値は世界標準時（グリニッジ標準時）になります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:interval:get"><apiName>interval</apiName><shortdesc>
      軸に沿ったラベル間の labelUnits の数を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      軸に沿ったラベル間の <codeph>labelUnits</codeph> の数を指定します。 このプロパティが <codeph>null</codeph> に設定されている場合、Flex により間隔が計算されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:labelUnits:get"><apiName>labelUnits</apiName><shortdesc>
      軸によりラベルの生成に使用される単位です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      軸によりラベルの生成に使用される単位です。 デフォルトでは、DateTimeAxis ではすべての有効な単位（<codeph>milliseconds</codeph>、<codeph>seconds</codeph>、<codeph>minutes</codeph>、<codeph>hours</codeph>、<codeph>days</codeph>、<codeph>weeks</codeph>、<codeph>months</codeph>、または <codeph>years</codeph>）が考慮されます。
      
      <p>ただし、<codeph>labelUnits</codeph> プロパティが設定されていない場合は、グラフでのラベルのレンダリングに、<codeph>dataUnits</codeph> プロパティの値より小さい単位は使用されません。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:maximum:get"><apiName>maximum</apiName><shortdesc>
      軸のラベルの最大値を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      軸のラベルの最大値を指定します。 <codeph>null</codeph> の場合は、グラフのデータから最小値が決定されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:minimum:get"><apiName>minimum</apiName><shortdesc>
      軸のラベルの最小値を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      軸のラベルの最小値を指定します。 <codeph>null</codeph> の場合は、グラフのデータから最小値が決定されます。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:minorTickInterval:get"><apiName>minorTickInterval</apiName><shortdesc> 
      軸に沿った小さな目盛りの間の minorTickUnits の数を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
      軸に沿った小さな目盛りの間の <codeph>minorTickUnits</codeph> の数を指定します。 このプロパティが <codeph>NaN</codeph> に設定されている場合は、DateTimeAxis により自動的に計算されます。
      
      <p>通常は、<codeph>minorTickInterval</codeph> プロパティが自動的に 1 に設定されます。 ただし、<codeph>minorTickUnits</codeph> プロパティが <codeph>dataUnits</codeph> プロパティと（明示的な設定または暗黙の計算により）同じ単位である場合は、<codeph>minorTickInterval</codeph> プロパティが最大値の 1 または <codeph>dataInterval</codeph> となります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:minorTickUnits:get"><apiName>minorTickUnits</apiName><shortdesc>
      小さな目盛りの生成時に、軸により考慮される単位です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      小さな目盛りの生成時に、軸により考慮される単位です。 デフォルトでは、DateTimeAxis ではすべての有効な単位（<codeph>milliseconds</codeph>、<codeph>seconds</codeph>、<codeph>minutes</codeph>、<codeph>hours</codeph>、<codeph>days</codeph>、<codeph>weeks</codeph>、<codeph>months</codeph>、または <codeph>years</codeph>）が考慮されます。
      
      <p>このプロパティが設定されていない場合は、グラフにより <codeph>minorTickUnits</codeph> プロパティの値が決定されます。 ラベルの間隔が 1 より大きい場合は、<codeph>minorTickUnits</codeph> プロパティが <codeph>labelUnits</codeph> プロパティの値に、<codeph>minorTickInterval</codeph> プロパティが 1 に設定されます。ラベル間隔が 1 の場合は、<codeph>minorTickUnits</codeph> プロパティが <codeph>labelUnits</codeph> プロパティの次に小さい単位に設定されます。 設定された場合は、<codeph>minorTickUnits</codeph> プロパティが <codeph>dataUnits</codeph> プロパティの値より小さくなることはありません。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:protected:requiredDescribedFields:get"><apiName>requiredDescribedFields</apiName><shortdesc>
      この軸に影響する DescribeData 構造体のフィールドです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
      この軸に影響する DescribeData 構造体のフィールドです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:unitSize:get"><apiName>unitSize</apiName><shortdesc>
      ピクセルで表された 1 つのデータ単位の幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      ピクセルで表された 1 つのデータ単位の幅です。 データ型は <codeph>dataUnits</codeph> プロパティの値により決定されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:dataInterval:set"><apiName>dataInterval</apiName><shortdesc>
      dataUnits で指定されたグラフ内のデータ間の間隔を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
      <codeph>dataUnits</codeph> で指定されたグラフ内のデータ間の間隔を指定します。
      <p>例えば、<codeph>dataUnits</codeph> プロパティが <codeph>"hours"</codeph> に、<codeph>dataInterval</codeph> プロパティが 4 に設定されている場合、グラフではデータが 3 時間おきに発生すると見なされます。 これは、一部の系列（ColumnSeries および CandlestickSeries など）によるデータのレンダリングに影響を及ぼします。 また、ラベルの自動選択方法にも影響します。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="mx.charts.xml#DateTimeAxis/dataUnits"><linktext>dataUnits</linktext></link></related-links></apiValue><apiValue id="mx.charts:DateTimeAxis:parseFunction:set"><apiName>parseFunction</apiName><shortdesc> 
      データポイントの値をカスタマイズするメソッドを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> 
      データポイントの値をカスタマイズするメソッドを指定します。このプロパティを使用して、値を受け入れて Date オブジェクトを返すメソッドを指定します。その後で、Date オブジェクトをグラフの DateTimeAxis オブジェクトの中で使用します。これにより、カスタマイズ可能な日付入力ストリングを提供して、これを Date オブジェクトに変換できます。Flex はこの Date オブジェクトを解釈し、DateTimeAxis で使用できます。
      
      <p>解析メソッドには、1 つのパラメーターのみが渡されます。 このパラメーターは、データ系列に指定したデータポイントの値です。 通常は、何らかの形式の日付を表すストリングです。このパラメーターをオーバーライドすることも、他のパラメーターを追加することもできません。</p>
      
      <p>この Date オブジェクトは直ちに数値に変換されるため、カスタム parseFunctions は同じ Date オブジェクトを再使用することができ、パフォーマンスの向上に役立ちます。 デフォルトでは、DateTimeAxis には、ECMA 標準 <codeph>Date.parse()</codeph> メソッドのストリング解析機能が使用されます。</p>
      
      次の例では、{ yyyy, mm, dd } という形式の日付オブジェクトを定義するデータプロバイダーを使用します。 <codeph>parseFunction</codeph> によって指定されたメソッドはこの値を使用して、軸で使用可能な Date オブジェクトを作成します。
      
      <pre>
      &lt;mx:Script>
          import mx.collections.ArrayCollection;
          [Bindable] 
          public var aapl:ArrayCollection = new ArrayCollection([ 
              {date: "2005, 8, 1", close: 42.71},
              {date: "2005, 8, 2", close: 42.99},
              {date: "2005, 8, 3", close: 44}
          ]);
          
          public function myParseFunction(s:String):Date { 
              // Get an array of Strings from the comma-separated String passed in.
              var a:Array = s.split(",");
      
              // Create the new Date object. Note that the month argument is 0-based (with 0 being January).
              var newDate:Date = new Date(a[0],a[1]-1,a[2]);
              return newDate;
          }
      &lt;/mx:Script>
      &lt;mx:LineChart id="mychart" dataProvider="{aapl}" showDataTips="true">
          &lt;mx:horizontalAxis>
              &lt;mx:DateTimeAxis dataUnits="days" parseFunction="myParseFunction"/>
          &lt;/mx:horizontalAxis>
          &lt;mx:series>
              &lt;mx:LineSeries yField="close" xField="date" displayName="AAPL"/>
          &lt;/mx:series>
      &lt;/mx:LineChart>
      </pre>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>