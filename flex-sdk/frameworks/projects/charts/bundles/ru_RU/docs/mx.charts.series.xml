<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.charts.series"><apiName>mx.charts.series</apiName><apiDetail/><apiClassifier id="mx.charts.series:BarSet"><apiName>BarSet</apiName><shortdesc>
  Набор группировки, который может использоваться для накопления или группировки объектов BarSeries в любой диаграмме.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="series"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IBar</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:StackedSeries</apiBaseClassifier></apiClassifierDef><apiDesc>
  Набор группировки, который может использоваться для накопления или группировки объектов BarSeries в любой диаграмме. Объект BarSet инкапсулирует то же самое поведение группировки, которое используется в элементе управления BarChart, однако он может применяться для компоновки пользовательских диаграмм на основе класса CartesianChart. Объекты BarSet можно использовать для группировки любых типов элементов диаграммы, реализующих интерфейс IBar. Они также обеспечивают накопление любых типов элементов диаграммы, реализующих интерфейсы IStackable и IBar. Поскольку класс BarSet реализует интерфейс IBar, объекты BarSet можно использовать для группировки других объектов BarSet в целях построения более совершенных пользовательских диаграмм.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.series:BarSet:BarSet"><apiName>BarSet</apiName><shortdesc>
	  Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Конструктор.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:BarSet:stack"><apiName>stack</apiName><shortdesc>
	  Обновляет данные серии и использует накапливаемые значения данных серии для обеспечения корректного накапливания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  Обновляет данные серии и использует накапливаемые значения данных серии для обеспечения корректного накапливания.
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:BarSet:barWidthRatio:get"><apiName>barWidthRatio</apiName><shortdesc>
	  Определяет, насколько широкими должны быть отображаемые полосы относительно ширины для категории.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.65
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Определяет, насколько широкими должны быть отображаемые полосы относительно ширины для категории. В случае установки значения <codeph>1</codeph> используется все пространство, в то время как при значении <codeph>0,6</codeph> применяется 60% доступного пространства полосы. Как правило, непосредственная установка именно этого свойства не осуществляется. Фактическая используемая ширина полосы соответствует наименьшему из значений свойств <codeph>barWidthRatio</codeph> и <codeph>maxbarWidth</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSet:maxBarWidth:get"><apiName>maxBarWidth</apiName><shortdesc>
	  Указывает ширину отображаемых полос в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Указывает ширину отображаемых полос в пикселях. Фактически используемая ширина полосы соответствует наименьшему из значений этого стиля и свойства <codeph>barWidthRatio</codeph>. Сгруппированные полосы пропорционально разделяют эту область между полосами в каждом кластере. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSet:offset:get"><apiName>offset</apiName><shortdesc>
	  Указывает, насколько далеко от центра доступной области необходимо сместить центр полос относительно ширины для категории.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Указывает, насколько далеко от центра доступной области необходимо сместить центр полос относительно ширины для категории. Значение в процентах находится в диапазоне от <codeph>-100</codeph> до <codeph>100</codeph>. Значение <codeph>0</codeph> устанавливается для центрирования полос в области. Значение <codeph>-50</codeph> устанавливается для центрирования столбца в начале доступной области. Как правило, непосредственная установка именно этого свойства не осуществляется.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.series:BubbleSeries"><apiName>BubbleSeries</apiName><shortdesc>
  Определяет серию данных для элемента управления BubbleChart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="Array">
<description>
  Определяет массив объектов заливки, задающих заливку каждого элемента в серии. Это свойство имеет приоритет над свойством стиля <codeph>fill</codeph>. Если пользовательский метод определяется с помощью средства <codeph>fillFunction</codeph>, оно имеет приоритет над этим массивом. Если для каждого из элементов не было обеспечено достаточное количество элементов массива, в программе Flex выполняется повторное заполнение массива с самого начала.
  
  <p>Установка значения этого свойства с использованием CSS:
   <pre>
    BubbleSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Установка значения этого свойства с использованием MXML:
   <pre>
    &lt;mx:BubbleSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:BubbleSeries>
   </pre>
  </p>
  
  <p>
  При определении свойства <codeph>fills</codeph> и необходимости использовать элемент управления Legend следует вручную создать элемент управления Legend и соответствующие элементы LegendItem для него.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Класс, используемый в серии для визуализации маркера серии во всех связанных легендах. Если стиль имеет значение <codeph>null</codeph>, в большинстве серий в качестве темы оформления маркера легенды по умолчанию применяется имеющийся экземпляр itemRenderer. Классы, используемые в качестве маркеров легенды, должны обеспечивать реализацию интерфейса IFlexDisplayObject и интерфейсов IDataRenderer и ISimpleStyleClient дополнительно. Если класс, применяемый в виде маркера легенды, реализует интерфейс IDataRenderer, свойство данных присваивается экземпляру LegendData.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Фабрика, представляющая класс, который будет использоваться серией для представления отдельных элементов на диаграмме. Этот класс создается один раз для каждого элемента диаграммы. Классы, используемые в качестве элементов itemRenderer, должны обеспечивать реализацию интерфейсов IFlexDisplayObject, ISimpleStyleClient и IDataRenderer. Свойство <codeph>data</codeph> присваивается элементу chartItem, отображаемому с помощью экземпляра темы оформления.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Обеспечивает установку стиля обводки для этой серии данных. Необходимо указать объект Stroke для определения обводки. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Устанавливает заливку для этой серии данных. Можно указать объект, реализующий интерфейс IFill, или число, представляющее значение чистого цвета. Чистый цвет также может быть указан с использованием CSS. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ <p>
  The <code>&lt;mx:BubbleSeries&gt;</code> tag inherits all the properties of its parent classes, and 
  the following properties:
  </p>
  <pre>
  &lt;mx:BubbleSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    itemType="<i>No default</i>"
    legendData="<i>No default</i>"
    maxRadius="50"
    minRadius="0"
    radiusAxis="<i>No default</i>"
    radiusField="<i>No default</i>"
    renderData="<i>No default</i>"
    renderDataType="<i>No default</i>"
    verticalAxis="<i>No default</i>"
    xField="null"
    yField="null"
    
    <strong>Styles</strong>
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    stroke="<i>IStroke; no default</i>"  
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  Определяет серию данных для элемента управления BubbleChart. Элементом itemRenderer по умолчанию является класс CircleRenderer. Дополнительно можно определить itemRenderer для серии данных. Элемент itemRenderer должен обеспечивать реализацию интерфейса IDataRenderer.
   </apiDesc><example conref="BubbleChartExample.mxml"><swfblock conref="../examples/BubbleChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#BubbleChart"><linktext>mx.charts.BubbleChart</linktext></link></related-links><apiConstructor id="mx.charts.series:BubbleSeries:BubbleSeries"><apiName>BubbleSeries</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:BubbleSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      Обеспечивает применение свойств стиля к указанному элементу DisplayObject.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Создаваемый экземпляр.
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>Ссылка непосредственно на кэш экземпляра.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обеспечивает применение свойств стиля к указанному элементу DisplayObject. Этот метод представляет собой обратный вызов, выполняемый функцией InstanceCache при создании нового средства визуализации.  
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:beginInterpolation"><apiName>beginInterpolation</apiName><shortdesc>
      
      Вызывается эффектом SeriesInterpolate для инициирования эффекта интерполяции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Данные, необходимые в серии для осуществления интерполяции.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>sourceRenderData</apiItemName><apiType value="Object"/><apiDesc>Исходные данные серии для проведения интерполяции.
     
      </apiDesc></apiParam><apiParam><apiItemName>destRenderData</apiItemName><apiType value="Object"/><apiDesc>Целевые данные серии для проведения интерполяции.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Вызывается эффектом SeriesInterpolate для инициирования эффекта интерполяции. Эффект обеспечивает передачу исходных и целевых данных серии для проведения интерполяции. Эффект обеспечивает неоднократную передачу возвращаемого значения этого метода в метод <codeph>interpolate()</codeph> серии для перехода к анимации для длительности эффекта. В серии выполняется расчет данных, необходимых для осуществления интерполяции, которые затем возвращаются в этом методе.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:describeData"><apiName>describeData</apiName><shortdesc>
      
      
      Вызывается управляющим элементом DataTransform для получения описания данных, представляемых этим элементом IChartElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Массив, содержащий экземпляры DataDescription, описывающий отображаемые данные.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>Определяет ось для получения описания данных.
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>Битовое поле, указывающее на значения объекта DataDescription, относящиеся к определенной оси. Оптимизация может осуществляться только путем вычисления необходимых полей.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      Вызывается управляющим элементом DataTransform для получения описания данных, представляемых этим элементом IChartElement. Разработчики осуществляют заполнение и возврат массива объектов mx.charts.chartClasses.DataDescription, что позволяет убедиться в корректном вычислении их данных для любых осей, обеспечивающих автоматическое создание значений из отображаемых данных (например, минимальное и максимальное значения, интервал и значение unitSize). Большинство элементов возвращают массив, содержащий отдельный экземпляр DataDescription. Составные элементы, например BarSet и ColumnSet, могут возвращать несколько объектов DataDescription, описывающих данные, отображаемые подчиненными элементами. При выполнении вызова разработчики осуществляют описание данных вдоль оси, указанной с помощью аргумента <codeph>dimension</codeph>. Эта функция может вызываться для каждой оси, поддерживаемой диаграммой с данными.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:findDataPoints"><apiName>findDataPoints</apiName><shortdesc>
       
      Обеспечивает поиск ближайшей точки данных, представляемой элементом, рядом с заданными координатами.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Массив HitData.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Координата X.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Координата Y.
     
      </apiDesc></apiParam><apiParam><apiItemName>sensitivity</apiItemName><apiType value="Number"/><apiDesc>Число, представляющее расстояние (в пикселях) от точных координат, на котором должен находиться указатель для рассмотрения его, как размещенного «рядом». Это свойство аналогично значению свойства mouseSensitivity элемента управления диаграммы.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
       
      Обеспечивает поиск ближайшей точки данных, представляемой элементом, рядом с заданными координатами.
     
      <p>Этот метод возвращает любой массив структур HitData, описывающий точки данных внутри диапазона. Отдельные экземпляры ChartElement могут возвращать только отдельный объект dataPoint, если их экземпляры dataPoints гарантированно не накладываются друг на друга.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:getElementBounds"><apiName>getElementBounds</apiName><shortdesc>
      
      Обеспечивает заполнение свойств elementBounds, bounds и visibleBounds структуры renderData, создаваемой этими сериями.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderData</apiItemName><apiType value="Object"/><apiDesc>Структура, созданная с помощью этой серии.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Обеспечивает заполнение свойств <codeph>elementBounds</codeph>, <codeph>bounds</codeph> и <codeph>visibleBounds</codeph> структуры renderData, создаваемой этими сериями. Данный метод вызывается классами эффектов для заполнения этих полей и их использования при реализации различных типов эффектов. Полученные классы должны реализовать этот метод для создания границ элементов серии только при запросе.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:getMissingInterpolationValues"><apiName>getMissingInterpolationValues</apiName><shortdesc>
      
      Обеспечивает заполнение отсутствующих значений в структуре интерполяции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sourceProps</apiItemName><apiType value="Object"/><apiDesc>Объект, содержащий исходные значения, интерполированные для определенного элемента. При выходе из этого метода все свойства данного объекта должны иметь значения, отличные от <codeph>NaN</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>srcCache</apiItemName><apiType value="Array"/><apiDesc>Массив интерполируемых элементов исходной диаграммы.
     
      </apiDesc></apiParam><apiParam><apiItemName>destProps</apiItemName><apiType value="Object"/><apiDesc>Объект, содержащий целевые значения, которые интерполируются для определенного элемента. При выходе из этого метода все свойства данного объекта должны иметь значения, отличные от значения <codeph>NaN</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>destCache</apiItemName><apiType value="Array"/><apiDesc>Массив интерполируемых элементов целевой диаграммы.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Индекс элемента, заполняемого в кэше.  
     
      </apiDesc></apiParam><apiParam><apiItemName>customData</apiItemName><apiType value="Object"/><apiDesc>Данные, перенесенные серией в метод <codeph>initializeInterpolationData()</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Обеспечивает заполнение отсутствующих значений в структуре интерполяции. При вызове метода <codeph>initializeInterpolationData()</codeph> серией, он передается в массив исходных и целевых значений для интерполяции. Если любой из двух массивов является неполным, «соответствующие» значения заполнителя для интерполяции должны быть обеспечены серией. Способ определения значений заполнителя зависит от типа серии. Для предоставления этих значений заполнителя средства расширения серий должны обеспечить отмену данного метода.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:styleChanged"><apiName>styleChanged</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateData"><apiName>updateData</apiName><shortdesc>
      
      Вызывается, если основные данные, представляемые в сериях, были изменены и должны быть заново загружены из поставщика данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Вызывается, если основные данные, представляемые в сериях, были изменены и должны быть заново загружены из поставщика данных. При реализации пользовательских типов серий необходимо отменить этот метод и загрузить все данные, необходимые для отображения серий из резервного поставщика данных. Также следует убедиться в том, что в подклассе был вызван метод <codeph>super.updateData()</codeph>. Как правило, непосредственный вызов данного метода не осуществляется. Вместо этого для обеспечения гарантии того, что данные в заданной точке были обновлены, выполните вызов метода <codeph>validateData()</codeph> класса Series.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateFilter"><apiName>updateFilter</apiName><shortdesc>
      
      Вызывается, если основные данные, представляемые в серии, должны быть отфильтрованы в соответствии с диапазонами, представляемыми с помощью осей связанного преобразования данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Вызывается, если основные данные, представляемые в серии, должны быть отфильтрованы в соответствии с диапазонами, представляемыми с помощью осей связанного преобразования данных. Это может произойти по причине изменения основных данных или ввиду того, что был изменен диапазон связанных осей. При реализации пользовательского типа серии необходимо отменить этот метод и отфильтровать все внешние данные с использованием метода <codeph>filterCache()</codeph> осей, управляемых с помощью связанного преобразования данных. Метод <codeph>filterCache()</codeph> обеспечивает преобразование всех значений, находящихся вне диапазона, в значения <codeph>NaN</codeph>. Необходимо убедиться в том, что метод <codeph>super.updateFilter()</codeph> был вызван в подклассе. Как правило, непосредственный вызов данного метода не требуется. Вместо этого при необходимости удостовериться в том, что данные были отфильтрованы в заданной точке, вызовите метод <codeph>validateTransform()</codeph> класса Series. Как правило, в случае необходимости можно предположить, что методы <codeph>updateData()</codeph> и <codeph>updateMapping()</codeph> были вызваны перед этим методом.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateMapping"><apiName>updateMapping</apiName><shortdesc>
      
      Вызывается, если основные данные, представляемые в сериях, должны быть сопоставлены с числовыми представлениями.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Вызывается, если основные данные, представляемые в сериях, должны быть сопоставлены с числовыми представлениями. Это может случиться по причине изменения основных данных или ввиду того, что оси, используемые для отображения серий, были соответствующим образом изменены. При реализации пользовательских серий необходимо отменить этот метод и преобразовать данные, представляемые в виде числовых значений, с использованием метода <codeph>mapCache()</codeph> для осей, управляемых с помощью связанного преобразования данных. Также необходимо убедиться в вызове метода <codeph>super.updateMapping()</codeph> для подкласса. Как правило, непосредственный вызов данного метода не требуется. Вместо этого для гарантии того, что данные в заданной точке были сопоставлены, вызовите метод <codeph>validateData()</codeph> класса Series. Как правило, при необходимости можно предположить, что метод <codeph>updateData()</codeph> был вызван непосредственно перед этим методом.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateTransform"><apiName>updateTransform</apiName><shortdesc>
      
      Вызывается, если основные данные, представляемые в сериях, должны быть преобразованы из данных в экранные значения с помощью осей связанного преобразования данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Вызывается, если основные данные, представляемые в сериях, должны быть преобразованы из данных в экранные значения с помощью осей связанного преобразования данных. Это может произойти по причине изменения основных данных, ввиду изменения диапазона связанных осей или размера области на экране. При реализации пользовательского типа серий необходимо отменить этот метод и выполнить преобразование данных с использованием метода <codeph>transformCache()</codeph> связанного преобразования данных. Следует убедиться в вызове метода <codeph>super.updateTransform()</codeph> в подклассе. Как правило, непосредственный вызов данного метода не требуется. Вместо этого при необходимости убедиться в том, что данные были отфильтрованы в заданной точке, вызовите метод <codeph>valiateTransform()</codeph> класса Series. Как правило, при необходимости можно предположить, что методы <codeph>updateData()</codeph>, <codeph>updateMapping()</codeph> и <codeph>updateFilter()</codeph> были вызваны непосредственно перед этим методом.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:BubbleSeries:RADIUS_AXIS"><apiName>RADIUS_AXIS</apiName><shortdesc>
      Тип оси радиуса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bubbleRadius</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Тип оси радиуса.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:maxRadius"><apiName>maxRadius</apiName><shortdesc>
      Радиус наибольшего элемента, отображенного в этой серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>50</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Радиус наибольшего элемента, отображенного в этой серии. При использовании объекта BubbleSeries в BubbleChart диаграмма обеспечивает автоматическое присвоение значения стиля <codeph>maxRadius</codeph> этому свойству для всех серий диаграммы. При использовании объектов BubbleSeries в элементах управления CartesianChart, управление этим свойством осуществляется вручную.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:minRadius"><apiName>minRadius</apiName><shortdesc>
      Радиус наименьшего элемента, отображенного в этой серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Радиус наименьшего элемента, отображенного в этой серии. При использовании объекта BubbleSeries в BubbleChart диаграмма обеспечивает автоматическое присвоение значения стиля <codeph>minRadius</codeph> этому свойству для всех серий диаграммы. При использовании объектов BubbleSeries в элементах управления CartesianChart, управление этим свойством осуществляется вручную.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Указывает метод, возвращающий заливку текущего элемента диаграммы в серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Указывает метод, возвращающий заливку текущего элемента диаграммы в серии. Если это свойство установлено, возвращаемое значение пользовательской функции заливки будет иметь приоритет над свойствами стиля <codeph>fill</codeph> и <codeph>fills</codeph>. Однако при возвращении значения null предпочтительными будут являться свойства <codeph>fills</codeph> и <codeph>fill</codeph> в указанном порядке.  
     
     <p>Пользовательская функция <codeph>fillFunction</codeph> имеет следующую подпись:
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> является ссылкой на отображаемый элемент диаграммы. <codeph>index</codeph> – индекс элемента диаграммы в кэше renderData. Он отличается от индекса поставщика данных диаграммы, так как он отсортирован на основании значений x, y и z. 
     </p>
      
     <p>Примером использования пользовательской функции <codeph>fillFunction</codeph> является возвращение заливки на основе некоторого порогового значения.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:BubbleSeriesItem = BubbleSeriesItem(item);
          if (curItem.zNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
          <p>
      При указании пользовательской функции заливки для серии диаграммы и при необходимости использовать элемент управления Legend, следует вручную создать элемент управления Legend и добавить к нему экземпляры LegendItem.
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      Определяет метки, вспомогательные деления и положение данных для элементов по оси X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Определяет метки, вспомогательные деления и положение данных для элементов по оси X. Для установки свойств horizontalAxis в качестве нижестоящего тега в MXML или создания объекта LinearAxis или CategoryAxis в ActionScript используется класс LinearAxis или класс CategoryAxis.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      Подтип ChartItem, используемый в этой серии для представления отдельных элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Подтип ChartItem, используемый в этой серии для представления отдельных элементов. Если подклассы необходимо использовать для хранения дополнительной информации в элементах, они могут обеспечить перезапись и возвращение более специализированного класса.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:items:get"><apiName>items</apiName><shortdesc>
      
      Получает все элементы, находящиеся в серии после фильтрации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Получает все элементы, находящиеся в серии после фильтрации.
      <p>Отдельные серии определяют список элементов, которые должны быть возвращены.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:legendData:get"><apiName>legendData</apiName><shortdesc>
      
      Массив экземпляров LegendData, описывающий элементы, которые должны отображаться в легенде, представляющей эту серию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Массив экземпляров LegendData, описывающий элементы, которые должны отображаться в легенде, представляющей эту серию. Полученные классы серии обеспечивают перезапись этого получателя и возвращают данные легенды, специфичные для их стилей и метода представления данных. Несмотря на то что большинство типов серии возвращают только один экземпляр LegendData, некоторые типы серий, например PieSeries и StackedSeries, позволяют возвращать несколько экземпляров, представляющих отдельные элементы массива или несколько способов отображения данных.   
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:radiusAxis:get"><apiName>radiusAxis</apiName><shortdesc>
      Ось, по которой отображается радиус пузырька.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Ось, по которой отображается радиус пузырька. В пузырьковых диаграммах размер отдельных пузырьков определяется как третье изменение данных, которое преобразуется таким же способом, что и позиции по оси X и Y. По умолчанию <codeph>radiusAxis</codeph> является элементом LinearAxis с установленным значением <codeph>false</codeph> свойства <codeph>autoAdjust</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:radiusField:get"><apiName>radiusField</apiName><shortdesc>
      Указывает поле поставщика данных, определяющее радиус каждого символа относительно других точек данных в диаграмме.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Указывает поле поставщика данных, определяющее радиус каждого символа относительно других точек данных в диаграмме.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      Подтип ChartRenderData, используется этой серией для хранения всех данных, необходимых для визуализации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Подтип ChartRenderData, используется этой серией для хранения всех данных, необходимых для визуализации. Если подклассы должны использоваться для хранения дополнительной информации в целях ее отображения, они могут обеспечить замену и возвращение более специализированного класса.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:protected:renderData:get"><apiName>renderData</apiName><shortdesc>
      
      Сохраняет информацию, необходимую для отображения этой серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      Сохраняет информацию, необходимую для отображения этой серии.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      Определяет метки, вспомогательные деления и положение данных для событий на оси Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Определяет метки, вспомогательные деления и положение данных для событий на оси Y. Для установки свойств объекта verticalAxis в качестве нижестоящего тега в MXML или создания объекта LinearAxis или CategoryAxis в ActionScript используется класс LinearAxis или класс CategoryAxis.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:xField:get"><apiName>xField</apiName><shortdesc>
      Указывает поле поставщика данных, определяющее местоположение каждой точки данных по оси X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает поле поставщика данных, определяющее местоположение каждой точки данных по оси X. Если установлено значение <codeph>null</codeph>, визуализация точек данных в программе Flex осуществляется в том порядке, в котором они находятся в поставщике данных. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:yField:get"><apiName>yField</apiName><shortdesc>
      Указывает поле поставщика данных, определяющее местоположение каждой точки данных по оси Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает поле поставщика данных, определяющее местоположение каждой точки данных по оси Y. Если установлено значение <codeph>null</codeph>, в элементе BubbleSeries используется предположение о том, что поставщиком данных является массив из чисел, и эти числа применяются в качестве значений точек данных. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:CandlestickSeries"><apiName>CandlestickSeries</apiName><shortdesc>
  Представляет финансовые данные в виде серии «свечей», характеризующих наибольшее, наименьшее значения, а также значения открытия и закрытия в серии данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="Array">
<description>
  Определяет массив объектов заливки, задающих заливку каждого элемента в серии. Это свойство имеет приоритет над свойством стиля <codeph>fill</codeph>. Если пользовательский метод определяется с помощью средства <codeph>fillFunction</codeph>, оно имеет приоритет над этим массивом. Если для каждого из элементов не было обеспечено достаточное количество элементов массива, в программе Flex выполняется повторное заполнение массива с самого начала.
  
  <p>Установка значения этого свойства с использованием CSS:
   <pre>
    CandlestickSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Установка значения этого свойства с использованием MXML:
   <pre>
    &lt;mx:CandlestickSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:CandlestickSeries>
   </pre>
  </p>
  
  <p>
  При определении свойства <codeph>fills</codeph> и необходимости использовать элемент управления Legend следует вручную создать элемент управления Legend и соответствующие элементы LegendItem для него.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="declineFill" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Устанавливает заливку для отображения спада для этой серии данных, используемую, если значение закрытия элемента меньше значения открытия. Можно указать объект, реализующий интерфейс IFill, или число, представляющее значение чистого цвета. Чистый цвет также может быть указан с использованием CSS. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="boxStroke" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Устанавливает стиль, используемый для обводки окна, определяющего область открытия-закрытия серии.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Обеспечивает установку стиля обводки для этой серии данных. Необходимо указать объект Stroke для определения обводки. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Устанавливает заливку для этой серии данных. Можно указать объект, реализующий интерфейс IFill, или число, представляющее значение чистого цвета. Чистый цвет также может быть указан с использованием CSS. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ <p>
  The <code>&lt;mx:CandlestickSeries&gt;</code> tag inherits all the properties of its parent classes, and 
  the following properties:
  </p>
  <pre>
  &lt;mx:CandlestickSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
 
    <strong>Styles</strong>
    boxStroke="<i>IStroke; no default</i>"
    declineFill="<i>IFill; no default</i>"
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    stroke="<i>IStroke; no default</i>"  
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:HLOCSeriesBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Представляет финансовые данные в виде серии «свечей», характеризующих наибольшее, наименьшее значения, а также значения открытия и закрытия в серии данных. Верхняя и нижняя границы вертикальной линии в каждой «свече» представляют наибольшее и наименьшее значения для точки данных, в то время как верхняя и нижняя граница заполненного окна характеризуют значения открытия и закрытия. Каждая «свеча» заполняется по-своему, в зависимости от того, превышает значение закрытия для точки данных значение открытия или нет.
   </apiDesc><example conref="CandlestickChartExample.mxml"><swfblock conref="../examples/CandlestickChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#CandlestickChart"><linktext>mx.charts.CandlestickChart</linktext></link></related-links><apiConstructor id="mx.charts.series:CandlestickSeries:CandlestickSeries"><apiName>CandlestickSeries</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:CandlestickSeries:findDataPoints"><apiName>findDataPoints</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Array"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>sensitivity</apiItemName><apiType value="Number"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:CandlestickSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Указывает метод, возвращающий заливку текущего элемента диаграммы в серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Указывает метод, возвращающий заливку текущего элемента диаграммы в серии. Если это свойство установлено, возвращаемое значение пользовательской функции заливки будет иметь приоритет над свойствами стиля <codeph>fill</codeph> и <codeph>fills</codeph>. Однако при возвращении значения null предпочтительными будут являться свойства <codeph>fills</codeph> и <codeph>fill</codeph> в указанном порядке.  
     
     <p>Пользовательская функция <codeph>fillFunction</codeph> имеет следующую подпись:
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> является ссылкой на отображаемый элемент диаграммы. <codeph>index</codeph> – индекс элемента диаграммы в кэше renderData. Он отличается от индекса поставщика данных диаграммы, так как он отсортирован на основании значений x, y и z. Эта функция возвращает объект, реализующий интерфейс <codeph>IFill</codeph>.
     </p>
      
     <p>Примером использования пользовательской функции <codeph>fillFunction</codeph> является возвращение заливки на основе некоторого порогового значения.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:HLOCSeriesItem = HLOCSeriesItem(item);
          if (curItem.closeNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
       
     <p>
      При указании пользовательской функции заливки для серии диаграммы и при необходимости использовать элемент управления Legend, следует вручную создать элемент управления Legend и добавить к нему экземпляры LegendItem.
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:CandlestickSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:AreaSet"><apiName>AreaSet</apiName><shortdesc>
  Набор группировки, который может быть использован для накопления объектов AreaSeries в любой диаграмме.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="series"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:StackedSeries</apiBaseClassifier></apiClassifierDef><apiDesc>
  Набор группировки, который может быть использован для накопления объектов AreaSeries в любой диаграмме. Объект AreaSet инкапсулирует поведение накопления, идентичное применяемому в элементе управления AreaChart, но может быть использован для компоновки пользовательских диаграмм на основе класса CartesianChart.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.series:AreaSet:AreaSet"><apiName>AreaSet</apiName><shortdesc>
	  Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Конструктор.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.charts.series:PlotSeries"><apiName>PlotSeries</apiName><shortdesc>
  Определяет серию данных для элемента управления PlotChart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="radius" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="Number">
<description> 
  Указывает радиус элемента диаграммы в каждой точке данных в пикселях. По умолчанию элемент управления PlotChart отображает круг в каждой точке данных. Это свойство может быть установлено в MXML или используемых стилях. По умолчанию применяется значение <codeph>5</codeph> пикселей. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="Array">
<description>
  Определяет массив объектов заливки, задающих заливку каждого элемента в серии. Это свойство имеет приоритет над свойством стиля <codeph>fill</codeph>. Если пользовательский метод определяется с помощью средства <codeph>fillFunction</codeph>, оно имеет приоритет над этим массивом. Если для каждого из элементов не было обеспечено достаточное количество элементов массива, в программе Flex выполняется повторное заполнение массива с самого начала.
  
  <p>Установка значения этого свойства с использованием CSS:
   <pre>
    PlotSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Установка значения этого свойства с использованием MXML:
   <pre>
    &lt;mx:PlotSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:PlotSeries>
   </pre>
  </p>
  
  <p>
  При определении свойства <codeph>fills</codeph> и необходимости использовать элемент управления Legend следует вручную создать элемент управления Legend и соответствующие элементы LegendItem для него.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="adjustedRadius" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="Number">
<description>
  Определяет количество пикселей, на которое должен увеличиваться радиус элемента диаграммы при его выборе или выделении.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Класс, используемый в серии для визуализации маркера серии во всех связанных легендах. Если стиль имеет значение <codeph>null</codeph>, в большинстве серий в качестве темы оформления маркера легенды по умолчанию применяется имеющийся экземпляр itemRenderer. Классы, используемые в качестве маркеров легенды, должны обеспечивать реализацию интерфейса IFlexDisplayObject и интерфейсов IDataRenderer и ISimpleStyleClient дополнительно. Если класс, применяемый в виде маркера легенды, реализует интерфейс IDataRenderer, свойство данных присваивается экземпляру LegendData.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Фабрика, представляющая класс, который будет использоваться серией для представления отдельных элементов на диаграмме. Этот класс создается один раз для каждого элемента диаграммы. Классы, используемые в качестве элементов itemRenderer, должны обеспечивать реализацию интерфейсов IFlexDisplayObject, ISimpleStyleClient и IDataRenderer. Свойство <codeph>data</codeph> присваивается элементу chartItem, отображаемому с помощью экземпляра темы оформления.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Обеспечивает установку стиля обводки для этой серии данных. Необходимо указать объект Stroke для определения обводки. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Устанавливает заливку для этой серии данных. Можно указать объект, реализующий интерфейс IFill, или число, представляющее значение чистого цвета. Чистый цвет также может быть указан с использованием CSS. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;mx:PlotSeries&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:</p>
  
  <pre>
  &lt;mx:PlotSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    verticalAxis="<i>No default</i>"
    xField="null"
    yField="null"
 
    <strong>Styles</strong>
    adjustedRadius="2"
    fill="0xFFFFFF"
    fills="<i>IFill; no default</i>"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    radius="5"
    stroke="<i>IStroke; no default</i>" 
  /&gt;
  </pre>
  </p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  Определяет серию данных для элемента управления PlotChart. Средством визуализации по умолчанию для элемента управления PlotChart является класс DiamondItemRenderer. Дополнительно можно определить средство визуализации элементов для серии данных. Средство визуализации элементов должно обеспечивать реализацию интерфейса IDataRenderer. 
   </apiDesc><example conref="PlotChartExample.mxml"><swfblock conref="../examples/PlotChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#PlotChart"><linktext>mx.charts.PlotChart</linktext></link><link href="mx.charts.renderers.xml#DiamondItemRenderer"><linktext>mx.charts.renderers.DiamondItemRenderer</linktext></link></related-links><apiConstructor id="mx.charts.series:PlotSeries:PlotSeries"><apiName>PlotSeries</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:PlotSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      Обеспечивает настройку экземпляров средств визуализации элементов, используемых для представления диаграммы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Новый создаваемый экземпляр средства визуализации элементов.
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>Утилита InstanceCache, используемая для управления экземплярами средств визуализации элементов.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обеспечивает настройку экземпляров средств визуализации элементов, используемых для представления диаграммы. Этот метод автоматически вызывается каждый раз, когда при визуализации диаграммы требуется новое средство визуализации элементов. При необходимости этот метод можно отменить для добавления собственных пользовательских настроек.
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PlotSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:PlotSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Указывает метод, возвращающий заливку текущего элемента диаграммы в серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Указывает метод, возвращающий заливку текущего элемента диаграммы в серии. Если это свойство установлено, возвращаемое значение пользовательской функции заливки будет иметь приоритет над свойствами стиля <codeph>fill</codeph> и <codeph>fills</codeph>. Однако при возвращении значения null предпочтительными будут являться свойства <codeph>fills</codeph> и <codeph>fill</codeph> в указанном порядке.  
     
     <p>Пользовательская функция <codeph>fillFunction</codeph> имеет следующую подпись:
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> является ссылкой на отображаемый элемент диаграммы. <codeph>index</codeph> – индекс элемента диаграммы в кэше renderData. Он отличается от индекса поставщика данных диаграммы, так как он отсортирован на основании значений x, y и z. Эта функция возвращает объект, реализующий интерфейс <codeph>IFill</codeph>.
     </p>
      
     <p>Примером использования пользовательской функции <codeph>fillFunction</codeph> является возвращение заливки на основе некоторого порогового значения.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:PlotSeriesItem = PlotSeriesItem(item);
          if (curItem.yNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
       
     <p>
      При указании пользовательской функции заливки для серии диаграммы и при необходимости использовать элемент управления Legend, следует вручную создать элемент управления Legend и добавить к нему экземпляры LegendItem.
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      Определяет метки, вспомогательные деления и положение данных для элементов по оси X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Определяет метки, вспомогательные деления и положение данных для элементов по оси X. Для установки свойств horizontalAxis в качестве нижестоящего тега в MXML или создания объекта LinearAxis или CategoryAxis в ActionScript используется класс LinearAxis или класс CategoryAxis.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      Подтип ChartItem, используемый в этой серии для представления отдельных элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Подтип ChartItem, используемый в этой серии для представления отдельных элементов. Если подклассы необходимо использовать для хранения дополнительной информации в элементах, они могут обеспечить перезапись и возвращение более специализированного класса.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:items:get"><apiName>items</apiName><shortdesc>
      
      Получает все элементы, находящиеся в серии после фильтрации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Получает все элементы, находящиеся в серии после фильтрации.
      <p>Отдельные серии определяют список элементов, которые должны быть возвращены.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      Подтип ChartRenderData, используется этой серией для хранения всех данных, необходимых для визуализации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Подтип ChartRenderData, используется этой серией для хранения всех данных, необходимых для визуализации. Если подклассы должны использоваться для хранения дополнительной информации в целях ее отображения, они могут обеспечить замену и возвращение более специализированного класса.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:protected:renderData:get"><apiName>renderData</apiName><shortdesc>
      Подтип ChartRenderData, используется этой серией для хранения всех данных, необходимых для визуализации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Подтип ChartRenderData, используется этой серией для хранения всех данных, необходимых для визуализации. Если подклассы должны использоваться для хранения дополнительной информации в целях ее отображения, они могут обеспечить замену и возвращение более специализированного класса.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      Определяет метки, вспомогательные деления и положение данных для событий на оси Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Определяет метки, вспомогательные деления и положение данных для событий на оси Y. Для установки свойств объекта verticalAxis в качестве нижестоящего тега в MXML или создания объекта LinearAxis или CategoryAxis в ActionScript используется класс LinearAxis или класс CategoryAxis.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:xField:get"><apiName>xField</apiName><shortdesc>
      Указывает поле поставщика данных, определяющее местоположение каждой точки данных по оси X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает поле поставщика данных, определяющее местоположение каждой точки данных по оси X. Если установлено значение <codeph>null</codeph>, в программе Flex точки данных отображаются в том порядке, в котором они находятся в элементе dataProvider. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:yField:get"><apiName>yField</apiName><shortdesc>
      Указывает поле поставщика данных, определяющее местоположение каждой точки данных по оси Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает поле поставщика данных, определяющее местоположение каждой точки данных по оси Y. Если установлено значение <codeph>null</codeph>, в элементе PlotSeries используется предположение о том, что поставщиком данных является массив из чисел, и эти числа будут применяться в качестве значений. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:ColumnSeries"><apiName>ColumnSeries</apiName><shortdesc>
  Определяет серию данных для элемента управления ColumnChart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="labelSizeLimit" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  Определяет пороговое значение размера шрифта в пунктах, ниже которого метки рассматриваются как неразборчивые. В программе Flex метка, имеющая шрифт, не превышающий этого порогового значения, усекается.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,outside,inside" inherit="no" name="labelPosition" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
 Обеспечивает выравнивание меток. Возможными значениями являются <codeph>none</codeph>, <codeph>outside</codeph> и <codeph>inside</codeph>.
 
 </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="labelClass" owner="mx.charts.series:ColumnSeries" playerVersion="Flash10.2" type="Class">
<description>
  Класс, который используется этим компонентом для визуализации меток.
   <p>Может являться классом mx.controls.Label или классом spark.components.Label.</p>
   </description>
<default>spark.components.Label
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,center,bottom" inherit="no" name="labelAlign" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
 Обеспечивает выравнивание метки. Рассматривается только в том случае, если labelPosition имеет значение <codeph>inside</codeph> и метка отображается вертикально. Возможные значения: <codeph>center</codeph>, <codeph>top</codeph> и <codeph>bottom</codeph>.
 
 </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Array">
<description>
  Определяет массив объектов заливки, задающих заливку каждого элемента в серии. Это свойство имеет приоритет над свойством стиля <codeph>fill</codeph>. Если пользовательский метод определяется с помощью средства <codeph>fillFunction</codeph>, оно имеет приоритет над этим массивом. Если для каждого из элементов не было обеспечено достаточное количество элементов массива, в программе Flex выполняется повторное заполнение массива с самого начала.
  
  <p>Установка значения этого свойства с использованием CSS:
   <pre>
    ColumnSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Установка значения этого свойства с использованием MXML:
   <pre>
    &lt;mx:ColumnSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:ColumnSeries>
   </pre>
  </p>
  
  <p>
  При определении свойства <codeph>fills</codeph> и необходимости использовать элемент управления Legend следует вручную создать элемент управления Legend и соответствующие элементы LegendItem для него.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  Смещение первой строки текста с левой стороны контейнера в пикселях.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  Определяет использование подчеркивания текста. Возможными значениями являются <codeph>none</codeph> и <codeph>underline</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  Выравнивание текста внутри контейнера. Возможными значениями являются <codeph>left</codeph>, <codeph>right</codeph> или <codeph>center</codeph>.
 
  <p>По умолчанию большинство элементов управления имеют значение <codeph>left</codeph>. Для компонентов Button, LinkButton и AccordionHeader значением по умолчанию является <codeph>center</codeph>. Для этих компонентов данное свойство распознается только в том случае, если для свойства <codeph>labelPlacement</codeph> было установлено значение <codeph>left</codeph> или <codeph>right</codeph>. Если свойство <codeph>labelPlacement</codeph> установлено на <codeph>top</codeph> или <codeph>bottom</codeph>, текст и любой значок располагаются по центру.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  Число дополнительных пикселей, отображаемых между каждым символом. Положительное значение увеличивает интервал между символами вне стандартного интервала, в то время как отрицательное значение его уменьшает.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Boolean">
<description>
  Логическое значение, указывающее использование кернинга (<codeph>true</codeph> — включено и <codeph>false</codeph> — отключено). Кернинг регулирует промежуток между определенными символьными парами для повышения удобочитаемости и должен использоваться, например, в заголовках при использовании крупных шрифтов. Кернинг поддерживается только для встроенных шрифтов FlashType. Определенные шрифты, например Verdana, и моноширинные шрифты, например Courier New, не поддерживают кернинг.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  Определяет использование жирного шрифта в тексте. Распознаются значения <codeph>normal</codeph> и <codeph>bold</codeph>. Для элемента LegendItem по умолчанию используется значение <codeph>bold</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  Устанавливает свойство <codeph>thickness</codeph> внутреннего класса TextFields, представляющего текст в элементе управления Flex. Это свойство указывает толщину границ глифов. Возможные значения – числа от -200 до 200. 
  
  <p>Это свойство применяется только в случае использования встроенного шрифта FlashType и установки значения <codeph>advanced</codeph> для свойства <codeph>fontAntiAliasType</codeph>.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
 
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления TextField и не может быть применен только к отдельным символам.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  Определяет использование курсива в тексте. Допустимыми значениями являются <codeph>normal</codeph> и <codeph>italic</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  Высота текста в пикселях. Значением по умолчанию является 10 для всех элементов управления, исключая элемент управления ColorPicker. Для элемента управления ColorPicker значением по умолчанию является 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  Устанавливает свойство <codeph>sharpness</codeph> для внутреннего класса TextFields, представляющего текст в элементах управления Flex. Это свойство указывает резкость краев глифа. Возможными значениями являются числа от -400 до 400. 
  
  <p>Это свойство применяется только в случае использования встроенного шрифта FlashType и установки значения <codeph>advanced</codeph> для свойства <codeph>fontAntiAliasType</codeph>.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
 
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления TextField и не может быть применен только к отдельным символам.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  Устанавливает свойство <codeph>gridFitType</codeph> внутреннего класса TextFields, представляющего текст в элементах управления Flex. Допустимыми значениями являются <codeph>none</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>pixel</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) и <codeph>subpixel</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Это свойство применяется только в случае использования встроенного шрифта FlashType и установки значения <codeph>advanced</codeph> для свойства <codeph>fontAntiAliasType</codeph>.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
 
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления TextField и не может быть применен только к отдельным символам.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  Имя используемого шрифта. В отличие от использования в реализации CSS, разделенные запятой списки не поддерживаются. Можно использовать любое имя гарнитуры шрифтов. При указании общего имени шрифта оно преобразовывается в соответствующий шрифт устройства.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  Устанавливает свойство <codeph>antiAliasType</codeph> внутреннего класса TextFields. Возможными значениями являются <codeph>normal</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) и <codeph>advanced</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>По умолчанию применяется значение <codeph>advanced</codeph>, разрешающее применение средства визуализации FlashType при использовании встроенного шрифта FlashType. Значение <codeph>normal</codeph> используется для отключения средства визуализации FlashType.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
  
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления TextField и не может быть применен только к отдельным символам.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="uint">
<description>
  Цвет текста в компоненте при его деактивации.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="uint">
<description>
  Цвет текста в компоненте, включая метку компонента.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Класс, используемый в серии для визуализации маркера серии во всех связанных легендах. Если стиль имеет значение <codeph>null</codeph>, в большинстве серий в качестве темы оформления маркера легенды по умолчанию применяется имеющийся экземпляр itemRenderer. Классы, используемые в качестве маркеров легенды, должны обеспечивать реализацию интерфейса IFlexDisplayObject и интерфейсов IDataRenderer и ISimpleStyleClient дополнительно. Если класс, применяемый в виде маркера легенды, реализует интерфейс IDataRenderer, свойство данных присваивается экземпляру LegendData.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Фабрика, представляющая класс, который будет использоваться серией для представления отдельных элементов на диаграмме. Этот класс создается один раз для каждого элемента диаграммы. Классы, используемые в качестве элементов itemRenderer, должны обеспечивать реализацию интерфейсов IFlexDisplayObject, ISimpleStyleClient и IDataRenderer. Свойство <codeph>data</codeph> присваивается элементу chartItem, отображаемому с помощью экземпляра темы оформления.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Обеспечивает установку стиля обводки для этой серии данных. Необходимо указать объект Stroke для определения обводки. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Устанавливает заливку для этой серии данных. Можно указать объект, реализующий интерфейс IFill, или число, представляющее значение чистого цвета. Чистый цвет также может быть указан с использованием CSS. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ <p>
  The <code>&lt;mx:ColumnSeries&gt;</code> tag inherits all the properties of its parent classes, and 
  the following properties:
  </p>
  <pre>
  &lt;mx:ColumnSeries
    <strong>Properties</strong>
    columnWidthRatio=".65"
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    labelField="<i>No default</i>"
    labelFunction="<i>No default</i>"
    legendData="<i>No default</i>"
    maxColumnWidth="<i>No default</i>"
    minField="null"
    offset="<i>No default</i>"
    sortOnXField="false|true"
    stacker="<i>No default</i>"
    stackTotals="<i>No default</i>"
    verticalAxis="<i>No default</i>"
    xField="null"
    yField="null"
 
    
    <strong>Styles</strong>
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    fontFamily="Verdana"
    fontSize="10"
    fontStyle="italic|normal"
    fontWeight="bold|normal"
    labelAlign="center|left|right"
    labelPosition="none|inside|outside"
    labelSizeLimit="9"
    itemRenderer="<i>BoxItemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    stroke="<i>Stroke; no default</i>"
    textDecoration="underline|none"
  /&gt;
  </pre>
  </p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IColumn</apiBaseInterface><apiBaseInterface>mx.charts.chartClasses:IStackable2</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  Определяет серию данных для элемента управления ColumnChart. По умолчанию этот класс использует класс BoxItemRenderer. Дополнительно можно определить пользовательский itemRenderer для этой серии данных. Пользовательский itemRenderer должен реализовывать интерфейс IDataRenderer. 
   </apiDesc><example conref="Column_BarChartExample.mxml"><swfblock conref="../examples/Column_BarChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#ColumnChart"><linktext>mx.charts.ColumnChart</linktext></link></related-links><apiConstructor id="mx.charts.series:ColumnSeries:ColumnSeries"><apiName>ColumnSeries</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:ColumnSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      Обеспечивает настройку экземпляров средств визуализации элементов, используемых для представления диаграммы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Новый создаваемый экземпляр средства визуализации элементов.
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>Утилита InstanceCache, используемая для управления экземплярами средств визуализации элементов.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обеспечивает настройку экземпляров средств визуализации элементов, используемых для представления диаграммы. Этот метод автоматически вызывается каждый раз, когда при визуализации диаграммы требуется новое средство визуализации элементов. При необходимости этот метод можно отменить для добавления собственных пользовательских настроек.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      
      Обеспечивает передачу информации об изменении основных данных в поставщике данных для серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если установлено значение <codeph>true</codeph>, этот метод инициирует вызовы методов обновления.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Обеспечивает передачу информации об изменении основных данных в поставщике данных для серии. Эта функция инициирует вызов методов <codeph>updateData()</codeph>, <codeph>updateMapping()</codeph>, <codeph>updateFilter()</codeph> и <codeph>updateTransform()</codeph> при следующем вызове метода <codeph>commitProperties()</codeph>. Если любому элементу диаграммы были присвоены какие-либо эффекты данных, этот метод также инициирует эффекты отображения и скрытия.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:protected:invalidateMapping"><apiName>invalidateMapping</apiName><shortdesc>
      
      Обеспечивает передачу информации для серии о том, что сопоставление данных с числовыми значениями было изменено и должно быть вычислено повторно.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если установлено значение <codeph>true</codeph>, этот метод инициирует вызовы методов обновления.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Обеспечивает передачу информации для серии о том, что сопоставление данных с числовыми значениями было изменено и должно быть вычислено повторно. Вызов этой функции приведет к вызову методов <codeph>updateMapping()</codeph>, <codeph>updateFilter()</codeph> и <codeph>updateTransform()</codeph> при следующем вызове метода <codeph>commitProperties()</codeph>. Если любому элементу диаграммы были присвоены какие-либо эффекты данных, этот метод также инициирует эффекты отображения и скрытия.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:stackAll"><apiName>stackAll</apiName><shortdesc>
      
  Обеспечивает накопление серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект, представляющий максимальное и минимальное значения во вновь накопленной серии.	 
  
  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>stackedPosXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Содержит базовые значения, которые должны быть помещены серией в верхнюю область стека. Ключи словаря являются значениями X, а значения – положительными значениями X.
 
  </apiDesc></apiParam><apiParam><apiItemName>stackedNegXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Содержит базовые значения, которые должны быть помещены серией в верхнюю область стека. Ключи словаря являются значениями X, а значения – отрицательными значениями Y.
  
  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable2</apiOperationClassifier><apiDesc>Предыдущий элемент в накоплении. Если элемент, к примеру, имеет тот же самый тип, можно перейти к этому свойству во избежание дублирования работы при выполнении визуализации.
  
  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
  Обеспечивает накопление серии. Как правило, метод <codeph>updateData()</codeph> реализуется серией для загрузки ее данных из поставщика данных. Однако накопленная серия обеспечивает выполнение специальных операций, поскольку ее значения не обязательно сохраняются в поставщике данных. Значениями является информация, сохраненная в поставщике данных, суммируемая со значениями, загружаемыми объектом в верхнюю часть стека.
  <p>Пользовательская серия должна обеспечивать реализацию метода <codeph>stack()</codeph> путем загрузки его данных из поставщика данных, их добавления к основным значениям, хранящимся в словаре, для получения реальных значений, которые должны быть отображены, и замены значений словаря на новые, суммируемые значения.</p>
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:stack"><apiName>stack</apiName><shortdesc>
     
	  Обеспечивает накопление серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Максимальное значение во вновь накопленной серии.	 
	  
	  </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>stackedXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Содержит базовые значения, которые должны быть помещены серией в верхнюю область стека. Ключи словаря являются значениями по оси Y, а значения – значениями по оси X.
	  
	  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable</apiOperationClassifier><apiDesc>Предыдущий элемент в накоплении. Если элемент, к примеру, имеет тот же самый тип, можно перейти к этому свойству во избежание дублирования работы при выполнении визуализации.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
     
	  Обеспечивает накопление серии. Как правило, метод <codeph>updateData()</codeph> реализуется серией для загрузки ее данных из поставщика данных. Однако накопленная серия обеспечивает выполнение специальных операций, поскольку ее значения не обязательно сохраняются в поставщике данных. Значениями является информация, сохраненная в поставщике данных, суммируемая со значениями, загружаемыми объектом в верхнюю часть стека.
	  <p>Пользовательская серия должна обеспечивать реализацию метода <codeph>stack()</codeph> путем загрузки его данных из поставщика данных, их добавления к основным значениям, хранящимся в словаре, для получения реальных значений, которые должны быть отображены, и замены значений словаря на новые, суммируемые значения.</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:ColumnSeries:columnWidthRatio:get"><apiName>columnWidthRatio</apiName><shortdesc>
      Указывает ширину столбцов относительно ширины для категории.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.65
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает ширину столбцов относительно ширины для категории. В случае значения 1 используется все пространство, тогда как в случае значения .6 используется 60% доступного пространства столбца. Как правило, непосредственная установка именно этого свойства не осуществляется. Фактическая используемая ширина столбца представляет собой наименьшее из значений свойств <codeph>columnWidthRatio</codeph> и <codeph>maxColumnWidth</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Указывает метод, возвращающий заливку текущего элемента диаграммы в серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Указывает метод, возвращающий заливку текущего элемента диаграммы в серии. Если это свойство установлено, возвращаемое значение пользовательской функции заливки будет иметь приоритет над свойствами стиля <codeph>fill</codeph> и <codeph>fills</codeph>. Однако при возвращении значения null предпочтительными будут являться свойства <codeph>fills</codeph> и <codeph>fill</codeph> в указанном порядке.  
     
     <p>Пользовательская функция <codeph>fillFunction</codeph> имеет следующую подпись:
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> является ссылкой на отображаемый элемент диаграммы. <codeph>index</codeph> – индекс элемента диаграммы в кэше renderData. Он отличается от индекса поставщика данных диаграммы, так как он отсортирован на основании значений x, y и z. Эта функция возвращает объект, реализующий интерфейс <codeph>IFill</codeph>.
     </p>
      
     <p>Примером использования пользовательской функции <codeph>fillFunction</codeph> является возвращение заливки на основе некоторого порогового значения.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:ColumnSeriesItem = ColumnSeriesItem(item);
          if (curItem.yNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
          <p>
      При указании пользовательской функции заливки для серии диаграммы и при необходимости использовать элемент управления Legend, следует вручную создать элемент управления Legend и добавить к нему экземпляры LegendItem.
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      Определяет метки, вспомогательные деления и положение данных для элементов по оси X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Определяет метки, вспомогательные деления и положение данных для элементов по оси X. Для установки свойств horizontalAxis в качестве нижестоящего тега в MXML или создания объекта LinearAxis или CategoryAxis в ActionScript используется класс LinearAxis или класс CategoryAxis.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      Подтип ChartItem, используемый в этой серии для представления отдельных элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Подтип ChartItem, используемый в этой серии для представления отдельных элементов. Если подклассы должны использоваться для сохранения дополнительной информации в элементах, они могут обеспечить перезапись и возвращение более специализированного класса.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:items:get"><apiName>items</apiName><shortdesc>
      
      Получает все элементы, находящиеся в серии после фильтрации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Получает все элементы, находящиеся в серии после фильтрации.
      <p>Отдельные серии определяют список элементов, которые должны быть возвращены.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:labelField:get"><apiName>labelField</apiName><shortdesc>
     Имя поля в поставщике данных, значение которого появляется в качестве метки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
     Имя поля в поставщике данных, значение которого появляется в качестве метки. Если определено свойство <codeph>labelFunction</codeph>, данное свойство игнорируется.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Указывает функцию обратного вызова, используемую для отображения каждой метки серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Указывает функцию обратного вызова, используемую для отображения каждой метки серии. Функция labelFunction должна иметь следующую подпись:
          <pre>
     function <i>function_name</i>(<i>element</i>:ChartItem, <i>series</i>:Series):String { ... }
     </pre>
     
     <codeph><i>element</i></codeph> является визуализируемым элементом диаграммы. <codeph><i>series</i></codeph> является серией, к которой принадлежит элемент диаграммы. Возвращенная строка является меткой текущего элемента.
          <p>Пример использования настроенной функции labelFunction:</p>
     <pre>
     private function myLabelFunction(element:ChartItem, series:Series):String {
          var item:ColumnSeriesItem = ColumnSeriesItem(element);
          var ser:ColumnSeries = ColumnSeries(series);
          return(item.item.Country + ":" +"" + ser.yField.toString() +":"+ item.yNumber);
     }
     </pre>
           
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:maxColumnWidth:get"><apiName>maxColumnWidth</apiName><shortdesc>
      Указывает ширину столбцов в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Указывает ширину столбцов в пикселях. Фактическая используемая ширина столбца является наименьшей величиной из значения этого стиля и значения свойства <codeph>columnWidthRatio</codeph>. Сгруппированные столбцы пропорционально разделяют эту область между столбцами в каждом кластере. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:minField:get"><apiName>minField</apiName><shortdesc>
      Указывает поле поставщика данных, определяющее местоположение нижней границы столбца по оси Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Указывает поле поставщика данных, определяющее местоположение нижней границы столбца по оси Y. Если установлено значение <codeph>null</codeph>, в столбцах используется минимальное значении для интервала (или максимальное значение, если значение поля отрицательное). По умолчанию используется <codeph>null</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:offset:get"><apiName>offset</apiName><shortdesc>
      Указывает, каким должно быть смещение центра столбцов от центра доступной области относительно ширины для категории.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Указывает, каким должно быть смещение центра столбцов от центра доступной области относительно ширины для категории. Если установлено значение по умолчанию, равное 0, столбцы центрируются относительно области. Значение -50 устанавливается для центрирования столбца в начале доступной области. Как правило, непосредственная установка именно этого свойства не осуществляется. Элемент управления ColumnChart обеспечивает управление этим значением на основе свойства <codeph>columnWidthRatio</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      Подтип ChartRenderData, используется этой серией для хранения всех данных, необходимых для визуализации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Подтип ChartRenderData, используется этой серией для хранения всех данных, необходимых для визуализации. Если подклассы должны использоваться для хранения дополнительной информации в целях ее отображения, они могут обеспечить замену и возвращение более специализированного класса.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:sortOnXField:get"><apiName>sortOnXField</apiName><shortdesc> 
      Запрашивает сортировку столбцов слева направо перед отображением.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Запрашивает сортировку столбцов слева направо перед отображением. По умолчанию элемент ColumnSeries обеспечивает отображение столбцов в том порядке, в котором они появляются в поставщике данных. 
      
      <p>При использовании свойства <codeph>xField</codeph> для определения положения каждого столбца, столбцы могут появляться на экране в различном порядке. Столбцы можно отображать в любом порядке. Однако некоторые пользовательские столбцы могут основываться на столбцах, визуализируемых в направлении слева направо.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:stacker:get"><apiName>stacker</apiName><shortdesc>
      Элемент StackedSeries, связанный с этим элементом BarSeries.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:StackedSeries</apiValueClassifier></apiValueDef><apiDesc>
      Элемент StackedSeries, связанный с этим элементом BarSeries. Накопитель обеспечивает управление поведением серии при накоплении.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      Определяет метки, вспомогательные деления и положение данных для событий на оси Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Определяет метки, вспомогательные деления и положение данных для событий на оси Y. Для установки свойств объекта verticalAxis в качестве нижестоящего тега в MXML или создания объекта LinearAxis или CategoryAxis в ActionScript используется класс LinearAxis или класс CategoryAxis.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:xField:get"><apiName>xField</apiName><shortdesc>
      Указывает поле поставщика данных, определяющее местоположение столбца по оси X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Указывает поле поставщика данных, определяющее местоположение столбца по оси X. Если установлено значение <codeph>null</codeph>, визуализация столбцов в программе Flex выполняется в том порядке, в котором они находятся в поставщике данных. По умолчанию используется <codeph>null</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:yField:get"><apiName>yField</apiName><shortdesc>
      Указывает поле поставщика данных, определяющее местоположение верхней границы столбца по оси Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Указывает поле поставщика данных, определяющее местоположение верхней границы столбца по оси Y. Если установлено значение <codeph>null</codeph>, в элементе ColumnSeries используется предположение о том, что поставщиком данных является массив из чисел, и эти числа применяются в качестве значений. По умолчанию используется <codeph>null</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.charts.series:ColumnSeries:stackTotals:set"><apiName>stackTotals</apiName><shortdesc>
      Итоговые накопленные значения серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      Итоговые накопленные значения серии.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.series:ColumnSet"><apiName>ColumnSet</apiName><shortdesc>
  Элемент ColumnSet представляет собой набор группировки, который может использоваться для накопления и группировки серии столбцов в любой произвольной диаграмме.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="series"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IColumn</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:StackedSeries</apiBaseClassifier></apiClassifierDef><apiDesc>
  Элемент ColumnSet представляет собой набор группировки, который может использоваться для накопления и группировки серии столбцов в любой произвольной диаграмме. Элемент ColumnSet инкапсулирует то же поведение группировки, которое использовалось в ColumnChart, но может применяться для компоновки пользовательских диаграмм на основе CartesianChart. Элементы ColumnSet можно использовать для группировки любых типов элементов диаграммы, реализующих интерфейс IColumn. Он может обеспечить накопление любых типов элементов диаграммы, реализующих интерфейсы IStackable и IColumn. Поскольку элемент ColumnSet самостоятельно реализует интерфейс IColumn, элементы ColumnSet можно применять для группировки других элементов ColumnSet в целях построения более совершенных пользовательских диаграмм.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.series:ColumnSet:ColumnSet"><apiName>ColumnSet</apiName><shortdesc>
	 Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	 Конструктор.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:ColumnSet:protected:buildSubSeries"><apiName>buildSubSeries</apiName><shortdesc> 
	  
      При необходимости обеспечивает обработку массива подсерии для отображения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
	  
      При необходимости обеспечивает обработку массива подсерии для отображения. Этот метод позволяет обеспечить добавление всех подчиненных серий в накопительный набор в качестве нижестоящих элементов и выполнение любой необходимой пользовательской настройки серий (например, присвоения унаследованных поставщиков данных или группировки свойств).
      <p>Этот метод также предназначен для передачи в диаграмму информации о том, что в серии были внесены изменения и в результате требуется повторное присвоение неявных стилей серий. При необходимости этот метод автоматически вызывается накопительным набором. Вместо непосредственного вызова этого метода необходимо рассмотреть возможность вызова метода <codeph>invalidateSeries()</codeph>.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSet:protected:customizeSeries"><apiName>customizeSeries</apiName><shortdesc>
	   
      Обеспечивает применение любой настройки подчиненных серий при формировании поведения накопления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>glyph</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IChartElement</apiOperationClassifier><apiDesc>Элемент диаграммы для настройки.
      
      </apiDesc></apiParam><apiParam><apiItemName>i</apiItemName><apiType value="uint"/><apiDesc>Положение подчиненной серии в массиве серии.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	   
      Обеспечивает применение любой настройки подчиненных серий при формировании поведения накопления. По умолчанию этот метод присваивает унаследованные поставщики данных подчиненным сериям. Полученные классы могут отменить этот метод для применения дальнейшей настройки.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSet:describeData"><apiName>describeData</apiName><shortdesc>
	  
      
      Вызывается управляющим элементом DataTransform для получения описания данных, представляемых этим элементом IChartElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Массив, содержащий экземпляры DataDescription, описывающий отображаемые данные.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>Определяет ось для получения описания данных.
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>Битовое поле, указывающее на значения объекта DataDescription, относящиеся к определенной оси. Оптимизация может осуществляться только путем вычисления необходимых полей.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      
      Вызывается управляющим элементом DataTransform для получения описания данных, представляемых этим элементом IChartElement. Разработчики осуществляют заполнение и возврат массива объектов mx.charts.chartClasses.DataDescription, что позволяет убедиться в корректном вычислении их данных для любых осей, обеспечивающих автоматическое создание значений из отображаемых данных (например, минимальное и максимальное значения, интервал и значение unitSize). Большинство элементов возвращают массив, содержащий отдельный экземпляр DataDescription. Составные элементы, например BarSet и ColumnSet, могут возвращать несколько объектов DataDescription, описывающих данные, отображаемые подчиненными элементами. При выполнении вызова разработчики осуществляют описание данных вдоль оси, указанной с помощью аргумента <codeph>dimension</codeph>. Эта функция может вызываться для каждой оси, поддерживаемой диаграммой с данными.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSet:protected:formatDataTip"><apiName>formatDataTip</apiName><shortdesc>
	  
      Обеспечивает пользовательский текст для объектов DataTip.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Пользовательский текст для объекта DataTip. По умолчанию является пустой строкой. Для предоставления пользовательского текста DataTip необходимо перезаписать этот метод.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>hd</apiItemName><apiOperationClassifier>mx.charts:HitData</apiOperationClassifier><apiDesc>Объект hitData в стеке.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      Обеспечивает пользовательский текст для объектов DataTip. Накопление обеспечивает перезапись текста DataTip содержащихся в них подчиненных серий для отображения дополнительной информации, связанной с поведением накопления. Полученные классы должны обеспечить перезапись этого метода для определения пользовательского текста DataTip.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:ColumnSet:columnWidthRatio:get"><apiName>columnWidthRatio</apiName><shortdesc>
	  Указывает ширину столбцов относительно ширины для категории.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.65
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Указывает ширину столбцов относительно ширины для категории. Если задано значение <codeph>1</codeph>, используется вся область, в то время при установке значения <codeph>.6</codeph> используется 60 % области, доступной для столбцов. Как правило, непосредственная установка именно этого свойства не осуществляется. Фактическая используемая ширина столбца представляет собой наименьшее из значений свойств <codeph>columnWidthRatio</codeph> и <codeph>maxColumnWidth</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSet:maxColumnWidth:get"><apiName>maxColumnWidth</apiName><shortdesc>
	  Указывает ширину столбцов в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Указывает ширину столбцов в пикселях. Фактическая используемая ширина столбца является наименьшей величиной из значения этого стиля и значения свойства <codeph>columnWidthRatio</codeph>. Сгруппированные столбцы пропорционально разделяют эту область между столбцами в каждом кластере. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSet:offset:get"><apiName>offset</apiName><shortdesc>
	  Указывает, каким должно быть смещение центра столбцов от центра доступной области относительно ширины для категории.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Указывает, каким должно быть смещение центра столбцов от центра доступной области относительно ширины для категории. Если установлено значение по умолчанию, равное <codeph>0</codeph>, столбцы центрируются относительно области. Значение <codeph>-50</codeph> устанавливается для центрирования столбца в начале доступной области. Как правило, непосредственная установка именно этого свойства не осуществляется. Элемент управления ColumnChart обеспечивает управление этим значением на основе свойства <codeph>columnWidthRatio</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.series:HLOCSeries"><apiName>HLOCSeries</apiName><shortdesc>
  Представляет финансовые данные в виде серии элементов, соответствующих наибольшему и наименьшему значению, а также значению закрытия и – необязательно – значения открытия в серии данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="style" name="hlocColor"/><styles><style inherit="no" name="stroke" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Обеспечивает установку стиля обводки для этой серии данных. Необходимо указать объект Stroke для определения обводки. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="openTickStroke" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Указывает обводку для использования во вспомогательном делении открытия, если указано значение открытия.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="openTickLength" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="Number">
<description>
  Указывает длину вспомогательного деления открытия в пикселях, если определено значение открытия. Независимо от этого значения элемент HLOCSeries не будет отображать вспомогательное деление открытия вне области, присвоенной отдельному элементу.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="closeTickStroke" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Указывает обводку для использования во вспомогательном делении открытия, если определено значения открытия.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="closeTickLength" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="Number">
<description>
  Указывает длину вспомогательного деления закрытия в пикселях. Независимо от этого значения элемент HLOCSeries не будет отображать вспомогательное деление закрытия вне области, присвоенной отдельному элементу.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:HLOCSeries&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:</p>
  
  <pre>
  &lt;mx:HLOCSeries
    <strong>Styles</strong>
    closeTickLength="<i>No default</i>"
    closeTickStroke="<i>No default</i>"
    openTickLength="<i>No default</i>"
    openTickStroke="<i>No default</i>"
    stroke="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:HLOCSeriesBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Представляет финансовые данные в виде серии элементов, соответствующих наибольшему и наименьшему значению, а также значению закрытия и – необязательно – значения открытия в серии данных. Верхняя и нижняя граница вертикальной линии каждого элемента представляют наибольшее и наименьшее значения точки данных. Правая отметка соответствует значениям закрытия, а левая отметка – значению открытия, если таковое было указано. 
 
  </apiDesc><example conref="HLOCChartExample.mxml"><swfblock conref="../examples/HLOCChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#HLOCChart"><linktext>mx.charts.HLOCChart</linktext></link></related-links><apiConstructor id="mx.charts.series:HLOCSeries:HLOCSeries"><apiName>HLOCSeries</apiName><shortdesc>
	  Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Конструктор.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts.series:HLOCSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:LineSeries"><apiName>LineSeries</apiName><shortdesc>
  Определяет серию данных для элемента управления LineChart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="radius" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="Number">
<description> 
  Указывает радиус элементов диаграммы для точек данных в пикселях. Это свойство применяется только в том случае, если средство визуализации элемента определяется с помощью свойства <codeph>itemRenderer</codeph>. Свойство <codeph>itemRenderer</codeph> может определяться в MXML или с использованием стилей.  
  
  </description>
<default>4 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="lineStroke" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description> 
   Устанавливает обводку для фактических линейных сегментов. Цветом по умолчанию для элемента управления LineChart является оранжевый (<codeph>0xE48701</codeph>). Цветом по умолчанию для элементов LineSeries, используемых в элементе управления CartesianChart, является черный (<codeph>0x000000</codeph>). По умолчанию используется значение ширины, равное 3.
   
   </description>

<playerversion>AIR 1.1
   </playerversion>
	<prolog><asCustoms><langversion>3.0
   </langversion><productversion>Flex 3
  </productversion></asCustoms></prolog></style><style inherit="no" name="lineSegmentRenderer" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Фабрика, представляющая класс, используемый в серии для представления отдельных линейных сегментов серии. Этот класс создается один раз для каждого отличающегося сегмента серии. Классы, используемые в качестве элементов lineSegmentRenderer, должны обеспечивать реализацию интерфейсов IFlexDisplayObject, ISimpleStyleClient и IDataRenderer. Свойство <codeph>data</codeph> присваивается экземпляру mx.charts.series.items.LineSeriesSegment, описывающему сегмент, предназначенный для отображения.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="segment,step,reverseStep,vertical,horizontal,curve" inherit="no" name="form" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="String">
<description>
  Указывает тип линии для диаграммы. Возможные значения:
  <ul>
    <li><codeph>curve</codeph>: между точками данных отображаются кривые.</li>
    
    <li><codeph>horizontal</codeph>: отображается только вертикальная линия, исходящая из точки с координатой по оси X первой точки к точке с координатой по оси X второй точки с использованием координаты по оси Y второй точки. Эти операции повторяются для каждой точки данных.</li>
    
    <li><codeph>vertical</codeph>: отображается только вертикальная линия, исходящая из точки с координатой по оси Y первой точки к точке с координатой по оси Y второй точки с использованием координаты по оси X второй точки. Эти операции повторяются для каждой точки данных.</li>
    
    <li><codeph>segment</codeph>: линии отображаются в виде соединенных сегментов, находящихся под углом для связывания в каждой точке данных серии.</li>
    
    <li><codeph>step</codeph>: линии отображаются в виде горизонтальных сегментов. Из первой точки данных исходит горизонтальная линия, затем отображается вертикальная линия до второй точки, и эти действия повторяются для каждой точки данных.</li>
    
    <li><codeph>reverseStep</codeph>: линии отображаются в виде горизонтальных сегментов. Из первой точки данных исходит вертикальная линия, затем отображается горизонтальная линия ко второй точке, и эти действия повторяются для каждой точки данных.</li>
  </ul>
  Значением по умолчанию является <codeph>segment</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="Array">
<description>
  Определяет массив объектов заливки, задающих заливку каждого элемента в серии. Это свойство имеет приоритет над свойством стиля <codeph>fill</codeph>. Если пользовательский метод определяется с помощью средства <codeph>fillFunction</codeph>, оно имеет приоритет над этим массивом. Если для каждого из элементов не было обеспечено достаточное количество элементов массива, в программе Flex выполняется повторное заполнение массива с самого начала.
  
  <p>Установка значения этого свойства с использованием CSS:
   <pre>
    LineSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Установка значения этого свойства с использованием MXML:
   <pre>
    &lt;mx:LineSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:LineSeries>
   </pre>
  </p>
  
  <p>
  При определении свойства <codeph>fills</codeph> и необходимости использовать элемент управления Legend следует вручную создать элемент управления Legend и соответствующие элементы LegendItem для него.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="adjustedRadius" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="Number">
<description>
  Определяет количество пикселей, на которое должен увеличиваться радиус элемента диаграммы при его выборе или выделении.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Класс, используемый в серии для визуализации маркера серии во всех связанных легендах. Если стиль имеет значение <codeph>null</codeph>, в большинстве серий в качестве темы оформления маркера легенды по умолчанию применяется имеющийся экземпляр itemRenderer. Классы, используемые в качестве маркеров легенды, должны обеспечивать реализацию интерфейса IFlexDisplayObject и интерфейсов IDataRenderer и ISimpleStyleClient дополнительно. Если класс, применяемый в виде маркера легенды, реализует интерфейс IDataRenderer, свойство данных присваивается экземпляру LegendData.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Фабрика, представляющая класс, который будет использоваться серией для представления отдельных элементов на диаграмме. Этот класс создается один раз для каждого элемента диаграммы. Классы, используемые в качестве элементов itemRenderer, должны обеспечивать реализацию интерфейсов IFlexDisplayObject, ISimpleStyleClient и IDataRenderer. Свойство <codeph>data</codeph> присваивается элементу chartItem, отображаемому с помощью экземпляра темы оформления.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Обеспечивает установку стиля обводки для этой серии данных. Необходимо указать объект Stroke для определения обводки. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Устанавливает заливку для этой серии данных. Можно указать объект, реализующий интерфейс IFill, или число, представляющее значение чистого цвета. Чистый цвет также может быть указан с использованием CSS. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:LineSeries&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:LineSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    interpolateValues="false|true"
    sortOnXField="false|true"
    verticalAxis="<i>No default</i>"
    xField="null"
    yField="null"
 
    <strong>Styles</strong>
    adjustedRadius="2"
    fill="0xFFFFFF"
    fills="<i>IFill; no default</i>"
    form="segment|curve|horizontal|reverseStep|step|vertical"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    lineSegmentRenderer="<i>ShadowLineRenderer</i>"
    lineStroke="Stroke(0xE47801,3)"
    radius="4"
    stroke="<i>IStroke; no default</i>" 
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  Определяет серию данных для элемента управления LineChart. По умолчанию этот класс использует класс ShadowLineRenderer. Дополнительно можно определить itemRenderer для серии данных. Элемент itemRenderer должен обеспечивать реализацию интерфейса IDataRenderer. 
   </apiDesc><example conref="Line_AreaChartExample.mxml"><swfblock conref="../examples/Line_AreaChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#LineChart"><linktext>mx.charts.LineChart</linktext></link><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links><apiConstructor id="mx.charts.series:LineSeries:LineSeries"><apiName>LineSeries</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:LineSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      Обеспечивает настройку экземпляров средств визуализации элементов, используемых для представления диаграммы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Новый создаваемый экземпляр средства визуализации элементов.
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>Утилита InstanceCache, используемая для управления экземплярами средств визуализации элементов.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обеспечивает настройку экземпляров средств визуализации элементов, используемых для представления диаграммы. Этот метод автоматически вызывается каждый раз, когда при визуализации диаграммы требуется новое средство визуализации элементов. При необходимости этот метод можно отменить для добавления собственных пользовательских настроек.
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:LineSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:LineSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Указывает метод, возвращающий заливку текущего элемента диаграммы в серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Указывает метод, возвращающий заливку текущего элемента диаграммы в серии. Если это свойство установлено, возвращаемое значение пользовательской функции заливки будет иметь приоритет над свойствами стиля <codeph>fill</codeph> и <codeph>fills</codeph>. Однако при возвращении значения null предпочтительными будут являться свойства <codeph>fills</codeph> и <codeph>fill</codeph> в указанном порядке.  
     
     <p>Пользовательская функция <codeph>fillFunction</codeph> имеет следующую подпись:
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> является ссылкой на отображаемый элемент диаграммы. <codeph>index</codeph> – индекс элемента диаграммы в кэше renderData. Он отличается от индекса поставщика данных диаграммы, так как он отсортирован на основании значений x, y и z. Эта функция возвращает объект, реализующий интерфейс <codeph>IFill</codeph>.
     </p>
      
     <p>Примером использования пользовательской функции <codeph>fillFunction</codeph> является возвращение заливки на основе некоторого порогового значения.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:LineSeriesItem = LineSeriesItem(item);
          if (curItem.yNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
       
     <p>
      При указании пользовательской функции заливки для серии диаграммы и при необходимости использовать элемент управления Legend, следует вручную создать элемент управления Legend и добавить к нему экземпляры LegendItem.
      </p>
           
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      Определяет метки, вспомогательные деления и положение данных для элементов по оси X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Определяет метки, вспомогательные деления и положение данных для элементов по оси X. Для установки свойств horizontalAxis в качестве нижестоящего тега в MXML или создания объекта LinearAxis или CategoryAxis в ActionScript используется класс LinearAxis или класс CategoryAxis.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:interpolateValues:get"><apiName>interpolateValues</apiName><shortdesc> 
      Указывает способ представления отсутствующих данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
     </apiDefaultValue></apiValueDef><apiDesc> 
      Указывает способ представления отсутствующих данных.
           <p>Значение <codeph>false</codeph> устанавливается для прерывания линии при отсутствии значения. Значение <codeph>true</codeph> устанавливается для отображения непрерывной линии путем интерполяции отсутствующего значения.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      Подтип ChartItem, используемый в этой серии для представления отдельных элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Подтип ChartItem, используемый в этой серии для представления отдельных элементов. Если подклассы необходимо использовать для хранения дополнительной информации в элементах, они могут обеспечить перезапись и возвращение более специализированного класса.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:items:get"><apiName>items</apiName><shortdesc>
      
      Получает все элементы, находящиеся в серии после фильтрации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Получает все элементы, находящиеся в серии после фильтрации.
      <p>Отдельные серии определяют список элементов, которые должны быть возвращены.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:protected:lineSegmentType:get"><apiName>lineSegmentType</apiName><shortdesc>
      Класс, используемый этой серией, для хранения всех данных, необходимых для представления сегмента линии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Класс, используемый этой серией, для хранения всех данных, необходимых для представления сегмента линии. Если подклассы должны использоваться для хранения дополнительной информации в целях ее отображения, они могут обеспечить замену и возвращение более специализированного класса.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:radius:get"><apiName>radius</apiName><shortdesc> 
      Указывает радиус элементов диаграммы для точек данных в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Указывает радиус элементов диаграммы для точек данных в пикселях. Это свойство применяется только в том случае, если средство визуализации элемента определяется с помощью свойства <codeph>itemRenderer</codeph>. Свойство <codeph>itemRenderer</codeph> может определяться в MXML или с использованием стилей.  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      Подтип ChartRenderData, используется этой серией для хранения всех данных, необходимых для визуализации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Подтип ChartRenderData, используется этой серией для хранения всех данных, необходимых для визуализации. Если подклассы должны использоваться для хранения дополнительной информации в целях ее отображения, они могут обеспечить замену и возвращение более специализированного класса.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:sortOnXField:get"><apiName>sortOnXField</apiName><shortdesc> 
      Обеспечивает запрос сортировки точек данных линии слева направо перед отображением.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Обеспечивает запрос сортировки точек данных линии слева направо перед отображением.
           <p>По умолчанию в LineSeries точки отображаются слева направо. Свойство <codeph>false</codeph> устанавливается для визуализации элементов в том порядке, в котором они находятся в поставщике данных.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      Определяет метки, вспомогательные деления и положение данных для событий на оси Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Определяет метки, вспомогательные деления и положение данных для событий на оси Y. Для установки свойств объекта verticalAxis в качестве нижестоящего тега в MXML или создания объекта LinearAxis или CategoryAxis в ActionScript используется класс LinearAxis или класс CategoryAxis.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:xField:get"><apiName>xField</apiName><shortdesc>
      Указывает поле поставщика данных, определяющее местоположение каждой точки данных по оси X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает поле поставщика данных, определяющее местоположение каждой точки данных по оси X. Если установлено значение <codeph>null</codeph>, точки данных отображаются в том порядке, в котором они появляются в поставщике данных.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:yField:get"><apiName>yField</apiName><shortdesc>
      Указывает поле поставщика данных, определяющее местоположение каждой точки данных по оси Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает поле поставщика данных, определяющее местоположение каждой точки данных по оси Y. Если установлено значение <codeph>null</codeph>, в LineSeries используется предположение о том, что поставщиком данных является массив из чисел, и эти числа применяются в качестве значений. 
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:AreaSeries"><apiName>AreaSeries</apiName><shortdesc>
  Определяет серию данных для элемента управления AreaChart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="radius" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="Number">
<description> 
  Указывает радиус элементов диаграммы для точек данных в пикселях. Это свойство применяется только в том случае, если было определено свойство <codeph>itemRenderer</codeph>. Свойство itemRenderer можно определить в MXML или с использованием стилей.  
  
  </description>
<default>4 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="segment,step,reverseStep,vertical,horizontal,curve" inherit="no" name="form" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="String">
<description>
  Указывает тип границы для области. Возможные значения:
  
  <ul>
   <li><codeph>curve</codeph> – между точками данных для границы отображаются кривые.</li>
  
   <li><codeph>horizontal</codeph> – отображается только граница, исходящая из координаты первой точки по оси X к координате по оси X второй точки с координатой по оси Y второй точки. Эти операции повторяются для каждой точки данных.</li>
  
   <li><codeph>reverseStep</codeph> – границы области отображаются в виде горизонтальных сегментов. Из первой точки данных исходит вертикальная линия границы, затем отображается горизонтальная линия границы, направленная ко второй точке и эти операции повторяются для каждой точки данных.</li>
  
   <li><codeph>segment</codeph> – границы области отображаются в виде связанных сегментов, находящихся под углом для связывания в каждой точке данных серии.</li>
  
   <li><codeph>step</codeph> – границы области отображаются в виде горизонтальных сегментов. Из первой точки данных исходит горизонтальная линия границы, затем отображается вертикальная линия границы, направленная ко второй точке и эти операции повторяются для каждой точки данных.</li>
  
   <li><codeph>vertical</codeph> – отображается только граница, исходящая из точки с координатой по оси Y первой точки к точке с координатой по оси Y второй точки с использованием координаты по оси X второй точки. Эти операции повторяются для каждой точки данных.</li>
  </ul>
  
  </description>
<default>segment
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="Array">
<description>
  Определяет массив объектов заливки, задающих заливку каждого элемента в серии. Это свойство имеет приоритет над свойством стиля <codeph>fill</codeph>. Если пользовательский метод определяется с помощью средства <codeph>fillFunction</codeph>, оно имеет приоритет над этим массивом. Если для каждого из элементов не было обеспечено достаточное количество элементов массива, в программе Flex выполняется повторное заполнение массива с самого начала.
  
  <p>Установка значения этого свойства с использованием CSS:
   <pre>
    AreaSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Установка значения этого свойства с использованием MXML:
   <pre>
    &lt;mx:AreaSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:AreaSeries>
   </pre>
  </p>
  
  <p>
  При определении свойства <codeph>fills</codeph> и необходимости использовать элемент управления Legend следует вручную создать элемент управления Legend и соответствующие элементы LegendItem для него.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="areaStroke" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description> 
  Устанавливает стиль линии для области. Объект Stroke применяется для определения обводки. Свойство itemRenderer можно определить в MXML или с использованием стилей.  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="areaRenderer" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Класс, используемый серией для представления заполненной области на диаграмме. Для каждой серии этот класс создается только один раз. Классы, используемые в качестве элементов areaRenderers, должны обеспечивать реализацию интерфейсов IFlexDisplayObject, IsimpleStyleClient и IDataRenderer. Свойство данных присваивается элементу AreaSeriesRenderData, описывающему данные области.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="areaFill" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description> 
  Определяет заполнение области. Можно указать объект, реализующий интерфейс IFill, или число, представляющее значение чистого цвета. Чистый цвет также может быть указан с использованием CSS.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="adjustedRadius" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="Number">
<description>
  Определяет количество пикселей, на которое должен увеличиваться радиус элемента диаграммы при его выборе или выделении.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Класс, используемый в серии для визуализации маркера серии во всех связанных легендах. Если стиль имеет значение <codeph>null</codeph>, в большинстве серий в качестве темы оформления маркера легенды по умолчанию применяется имеющийся экземпляр itemRenderer. Классы, используемые в качестве маркеров легенды, должны обеспечивать реализацию интерфейса IFlexDisplayObject и интерфейсов IDataRenderer и ISimpleStyleClient дополнительно. Если класс, применяемый в виде маркера легенды, реализует интерфейс IDataRenderer, свойство данных присваивается экземпляру LegendData.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Фабрика, представляющая класс, который будет использоваться серией для представления отдельных элементов на диаграмме. Этот класс создается один раз для каждого элемента диаграммы. Классы, используемые в качестве элементов itemRenderer, должны обеспечивать реализацию интерфейсов IFlexDisplayObject, ISimpleStyleClient и IDataRenderer. Свойство <codeph>data</codeph> присваивается элементу chartItem, отображаемому с помощью экземпляра темы оформления.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Обеспечивает установку стиля обводки для этой серии данных. Необходимо указать объект Stroke для определения обводки. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Устанавливает заливку для этой серии данных. Можно указать объект, реализующий интерфейс IFill, или число, представляющее значение чистого цвета. Чистый цвет также может быть указан с использованием CSS. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:AreaSeries&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:AreaSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    minField="null"
    sortOnXField="<i>true</i>"
    stacker="<i>No default</i>"
    stackTotals="<i>No default</i>"
    xField="null"
    verticalAxis="<i>No default</i>"
    yField="null"
 
    <strong>Styles</strong>
    adjustedRadius="2"
    areaFill="<i>IFill</i>"
    areaRenderer="<i>areaRenderer</i>"
    areaStroke="<i>Stroke</i>"
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    form="<i>segment|curve|horizontal|reverseStep|step|vertical</i>"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    radius="4"
    stroke="<i>IStroke; no default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IStackable2</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  Определяет серию данных для элемента управления AreaChart. По умолчанию этот класс использует элемент itemRenderer AreaRenderer. Дополнительно можно определить другой элемент itemRenderer для серии данных. Элемент itemRenderer должен обеспечивать реализацию интерфейса IDataRenderer. 
  
  </apiDesc><example conref="Line_AreaChartExample.mxml"><swfblock conref="../examples/Line_AreaChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#AreaChart"><linktext>mx.charts.AreaChart</linktext></link></related-links><apiConstructor id="mx.charts.series:AreaSeries:AreaSeries"><apiName>AreaSeries</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:AreaSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      Обеспечивает пользовательскую настройку экземпляров средств визуализации элементов, используемых для представления диаграммы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Новый создаваемый экземпляр средства визуализации элементов.
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>Утилита InstanceCache, используемая для управления экземплярами средств визуализации элементов.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обеспечивает пользовательскую настройку экземпляров средств визуализации элементов, используемых для представления диаграммы. Этот метод автоматически вызывается каждый раз, когда при визуализации диаграммы требуется новое средство визуализации элементов. При необходимости этот метод можно отменить для добавления собственных пользовательских настроек.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      
      Обеспечивает передачу информации об изменении основных данных в поставщике данных для серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если установлено значение <codeph>true</codeph>, этот метод инициирует вызовы методов обновления.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Обеспечивает передачу информации об изменении основных данных в поставщике данных для серии. Эта функция инициирует вызов методов <codeph>updateData()</codeph>, <codeph>updateMapping()</codeph>, <codeph>updateFilter()</codeph> и <codeph>updateTransform()</codeph> при следующем вызове метода <codeph>commitProperties()</codeph>. Если любому элементу диаграммы были присвоены какие-либо эффекты данных, этот метод также инициирует эффекты отображения и скрытия.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:protected:invalidateMapping"><apiName>invalidateMapping</apiName><shortdesc>
      
      Обеспечивает передачу информации для серии о том, что сопоставление данных с числовыми значениями было изменено и должно быть вычислено повторно.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если установлено значение <codeph>true</codeph>, этот метод инициирует вызовы методов обновления.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Обеспечивает передачу информации для серии о том, что сопоставление данных с числовыми значениями было изменено и должно быть вычислено повторно. Вызов этой функции приведет к вызову методов <codeph>updateMapping()</codeph>, <codeph>updateFilter()</codeph> и <codeph>updateTransform()</codeph> при следующем вызове метода <codeph>commitProperties()</codeph>. Если любому элементу диаграммы были присвоены какие-либо эффекты данных, этот метод также инициирует эффекты отображения и скрытия.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:stackAll"><apiName>stackAll</apiName><shortdesc>
      
  Обеспечивает накопление серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект, представляющий максимальное и минимальное значения во вновь накопленной серии.	 
  
  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>stackedPosXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Содержит базовые значения, которые должны быть помещены серией в верхнюю область стека. Ключи словаря являются значениями X, а значения – положительными значениями X.
 
  </apiDesc></apiParam><apiParam><apiItemName>stackedNegXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Содержит базовые значения, которые должны быть помещены серией в верхнюю область стека. Ключи словаря являются значениями X, а значения – отрицательными значениями Y.
  
  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable2</apiOperationClassifier><apiDesc>Предыдущий элемент в накоплении. Если элемент, к примеру, имеет тот же самый тип, можно перейти к этому свойству во избежание дублирования работы при выполнении визуализации.
  
  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
  Обеспечивает накопление серии. Как правило, метод <codeph>updateData()</codeph> реализуется серией для загрузки ее данных из поставщика данных. Однако накопленная серия обеспечивает выполнение специальных операций, поскольку ее значения не обязательно сохраняются в поставщике данных. Значениями является информация, сохраненная в поставщике данных, суммируемая со значениями, загружаемыми объектом в верхнюю часть стека.
  <p>Пользовательская серия должна обеспечивать реализацию метода <codeph>stack()</codeph> путем загрузки его данных из поставщика данных, их добавления к основным значениям, хранящимся в словаре, для получения реальных значений, которые должны быть отображены, и замены значений словаря на новые, суммируемые значения.</p>
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:stack"><apiName>stack</apiName><shortdesc>
      
	  Обеспечивает накопление серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Максимальное значение во вновь накопленной серии.	 
	  
	  </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>stackedXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Содержит базовые значения, которые должны быть помещены серией в верхнюю область стека. Ключи словаря являются значениями по оси Y, а значения – значениями по оси X.
	  
	  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable</apiOperationClassifier><apiDesc>Предыдущий элемент в накоплении. Если элемент, к примеру, имеет тот же самый тип, можно перейти к этому свойству во избежание дублирования работы при выполнении визуализации.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Обеспечивает накопление серии. Как правило, метод <codeph>updateData()</codeph> реализуется серией для загрузки ее данных из поставщика данных. Однако накопленная серия обеспечивает выполнение специальных операций, поскольку ее значения не обязательно сохраняются в поставщике данных. Значениями является информация, сохраненная в поставщике данных, суммируемая со значениями, загружаемыми объектом в верхнюю часть стека.
	  <p>Пользовательская серия должна обеспечивать реализацию метода <codeph>stack()</codeph> путем загрузки его данных из поставщика данных, их добавления к основным значениям, хранящимся в словаре, для получения реальных значений, которые должны быть отображены, и замены значений словаря на новые, суммируемые значения.</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:AreaSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Указывает метод, возвращающий заливку текущего элемента диаграммы в серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Указывает метод, возвращающий заливку текущего элемента диаграммы в серии. Если это свойство установлено, возвращаемое значение пользовательской функции заливки будет иметь приоритет над свойствами стиля <codeph>fill</codeph> и <codeph>fills</codeph>. Однако при возвращении значения null предпочтительными будут являться свойства <codeph>fills</codeph> и <codeph>fill</codeph> в указанном порядке.
       
     <p>Пользовательская функция <codeph>fillFunction</codeph> имеет следующую подпись:
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> является ссылкой на отображаемый элемент диаграммы. <codeph>index</codeph> – индекс элемента диаграммы в кэше renderData. Он отличается от индекса поставщика данных диаграммы, так как он отсортирован на основании значений x, y и z. Эта функция возвращает объект, реализующий интерфейс <codeph>IFill</codeph>.
     </p>
      
     <p>Примером использования пользовательской функции <codeph>fillFunction</codeph> является возвращение заливки на основе некоторого порогового значения.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill 
     {
          var curItem:AreaSeriesItem = AreaSeriesItem(item);
          if (curItem.yNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
          <p>
      При указании пользовательской функции заливки для серии диаграммы и при необходимости использовать элемент управления Legend, следует вручную создать элемент управления Legend и добавить к нему экземпляры LegendItem.
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      Определяет метки, вспомогательные деления и положение данных для элементов по оси X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Определяет метки, вспомогательные деления и положение данных для элементов по оси X. Для установки свойств horizontalAxis в качестве нижестоящего тега в MXML или создания объекта LinearAxis или CategoryAxis в ActionScript используется класс LinearAxis или класс CategoryAxis.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      Подтип ChartItem, используемый в этой серии для представления отдельных элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Подтип ChartItem, используемый в этой серии для представления отдельных элементов. Если подклассы должны использоваться для сохранения дополнительной информации в элементах, они могут обеспечить перезапись и возвращение более специализированного класса.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:items:get"><apiName>items</apiName><shortdesc>
      
      Получает все элементы, находящиеся в серии после фильтрации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Получает все элементы, находящиеся в серии после фильтрации.
      <p>Отдельные серии определяют список элементов, которые должны быть возвращены.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:minField:get"><apiName>minField</apiName><shortdesc>
      Указывает поле объекта dataProvider, определяющее нижнюю границу области.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает поле объекта dataProvider, определяющее нижнюю границу области. Если установлено значение <codeph>null</codeph>, для области используется минимальное значение диапазона (или максимальное, если значение поля отрицательно). 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      Подтип ChartRenderData, используется этой серией для хранения всех данных, необходимых для визуализации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Подтип ChartRenderData, используется этой серией для хранения всех данных, необходимых для визуализации. Если подклассы должны использоваться для хранения дополнительной информации в целях ее отображения, они могут обеспечить замену и возвращение более специализированного класса.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:sortOnXField:get"><apiName>sortOnXField</apiName><shortdesc> 
      Обеспечивает запрос сортировки точек данных линии слева направо перед отображением.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Обеспечивает запрос сортировки точек данных линии слева направо перед отображением.
           <p>По умолчанию в LineSeries точки отображаются слева направо. Свойство <codeph>false</codeph> устанавливается для визуализации элементов в том порядке, в котором они находятся в поставщике данных.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:stacker:get"><apiName>stacker</apiName><shortdesc>
      Элемент StackedSeries, связанный с этим элементом AreaSeries.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:StackedSeries</apiValueClassifier></apiValueDef><apiDesc>
      Элемент StackedSeries, связанный с этим элементом AreaSeries. Накопитель обеспечивает управление поведением серии при накоплении.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      Определяет метки, вспомогательные деления и положение данных для событий на оси Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Определяет метки, вспомогательные деления и положение данных для событий на оси Y. Для установки свойств объекта verticalAxis в качестве нижестоящего тега в MXML или создания объекта LinearAxis или CategoryAxis в ActionScript используется класс LinearAxis или класс CategoryAxis.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:xField:get"><apiName>xField</apiName><shortdesc>
      Указывает поле поставщика данных, определяющее положение точек данных на горизонтальной оси.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает поле поставщика данных, определяющее положение точек данных на горизонтальной оси. Если установлено значение <codeph>null</codeph>, точки данных отображаются в том порядке, в котором они появляются в поставщике данных.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:yField:get"><apiName>yField</apiName><shortdesc>
      Указывает поле поставщика данных, определяющее положение точек данных на вертикальной оси.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает поле поставщика данных, определяющее положение точек данных на вертикальной оси. Если установлено значение <codeph>null</codeph>, в AreaSeries используется предположение о том, что объект dataProvider является массивом из чисел, и эти числа применяются в качестве значений для точек данных. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.charts.series:AreaSeries:stackTotals:set"><apiName>stackTotals</apiName><shortdesc>
      Итоговые накопленные значения серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      Итоговые накопленные значения серии.
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.series:PieSeries"><apiName>PieSeries</apiName><shortdesc>
  Класс PieSeries определяет серию данных для элемента управления PieChart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="stroke" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Обеспечивает установку стиля обводки для этой серии данных. Необходимо указать объект Stroke для определения обводки. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="clockwise,counterClockwise" inherit="no" name="renderDirection" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Устанавливает направление визуализации серии. Допустимые значения:
  <ul>
    <li><codeph>clockwise</codeph> – Отображение секторов в направлении по часовой стрелке.</li>
  
    <li><codeph>counterClockwise</codeph> – Отображение секторов в направлении против часовой стрелки.</li>
  </ul>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="radialStroke" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Указывает стиль линии, используемый для отображения границы между секторами круга.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,outside,callout,inside,insideWithCallout" inherit="no" name="labelPosition" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description> 
  Указывает способ отображения меток значений. Это свойство может быть установлено в MXML или используемых стилях. Допустимые значения:
  <ul>
    <li><codeph>none</codeph> – метки не отображаются.</li>
  
    <li><codeph>outside</codeph> – метки отображаются вне границы круга.</li>
  
    <li><codeph>callout</codeph> – метки отображаются в двух вертикальных стеках с обеих сторон круга. При необходимости круг сокращается для создания пространства для меток (см. <codeph>maxLabelRadius</codeph>). Отображает заголовки для каждой метки к соответствующему сектору. Для размещения в рамках отведенной области можно уменьшить размер меток.</li>
  
    <li><codeph>inside</codeph> – метки отображаются внутри диаграммы и центрируются на расстоянии в семь десятых от длины каждого сектора. Во избежание наложения одной метки на другую можно размер меток можно уменьшить. Если размер уменьшенных меток будет меньше значения свойства <codeph>insideLabelSizeLimitSize</codeph>, их следует удалить. При наложении двух меток приоритет в программе Flex отдается более большим секторам.</li>
  
    <li><codeph>insideWithCallout</codeph> – метки отображаются внутри круга, но при уменьшении меток ниже указанного размера, они преобразуются в выноски.</li>
  </ul>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="insideLabelSizeLimit" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Указывает пороговое значение размера шрифта в пунктах, ниже которого метки считаются неразборчивыми. В программе Flex при уменьшении ниже этого порога метки удаляются совсем или отображаются в виде выносок на основе параметра, установленного для свойства <codeph>labelPosition</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="innerRadius" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Число от 0 до 1, определяющее расстояние от центра серии до внутренней границы отображаемых секторов и являющееся процентным значением от итогового радиуса, присвоенного серии. Это свойство присваивается непосредственно серии.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Array">
<description>
  Указывает массив объектов заполнения, используемый для отображения каждого сектора элемента управления PieChart. Если для каждого сектора не будет предоставлено достаточное количество элементов массива, операция заполнения будет выполнена повторно с начала массива. При указании метода с использованием свойства <codeph>fillFunction</codeph>, значения, установленные с помощью этого метода, имеют приоритет над данным массивом.
  
  <p>Установка значения этого свойства с использованием CSS:
   <pre>
    PieSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Установка значения этого свойства с использованием MXML:
   <pre>
    &lt;mx:PieSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:PieSeries>
   </pre>
  </p>
  
  <p>
  При определении свойства <codeph>fills</codeph> и необходимости использовать элемент управления Legend следует вручную создать элемент управления Legend и соответствующие элементы LegendItem для него.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="calloutStroke" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Определяет стиль линии, используемый для отображения линий к выноскам.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="calloutGap" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Указывает область в пикселях, которая должна быть вставлена между границей круга и метками при отображении выносок.
  
  </description>
<default>10
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Смещение первой строки текста с левой стороны контейнера в пикселях.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Определяет использование подчеркивания текста. Возможными значениями являются <codeph>none</codeph> и <codeph>underline</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Выравнивание текста внутри контейнера. Возможными значениями являются <codeph>left</codeph>, <codeph>right</codeph> или <codeph>center</codeph>.
 
  <p>По умолчанию большинство элементов управления имеют значение <codeph>left</codeph>. Для компонентов Button, LinkButton и AccordionHeader значением по умолчанию является <codeph>center</codeph>. Для этих компонентов данное свойство распознается только в том случае, если для свойства <codeph>labelPlacement</codeph> было установлено значение <codeph>left</codeph> или <codeph>right</codeph>. Если свойство <codeph>labelPlacement</codeph> установлено на <codeph>top</codeph> или <codeph>bottom</codeph>, текст и любой значок располагаются по центру.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Число дополнительных пикселей, отображаемых между каждым символом. Положительное значение увеличивает интервал между символами вне стандартного интервала, в то время как отрицательное значение его уменьшает.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Boolean">
<description>
  Логическое значение, указывающее использование кернинга (<codeph>true</codeph> — включено и <codeph>false</codeph> — отключено). Кернинг регулирует промежуток между определенными символьными парами для повышения удобочитаемости и должен использоваться, например, в заголовках при использовании крупных шрифтов. Кернинг поддерживается только для встроенных шрифтов FlashType. Определенные шрифты, например Verdana, и моноширинные шрифты, например Courier New, не поддерживают кернинг.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Определяет использование жирного шрифта в тексте. Распознаются значения <codeph>normal</codeph> и <codeph>bold</codeph>. Для элемента LegendItem по умолчанию используется значение <codeph>bold</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Устанавливает свойство <codeph>thickness</codeph> внутреннего класса TextFields, представляющего текст в элементе управления Flex. Это свойство указывает толщину границ глифов. Возможные значения – числа от -200 до 200. 
  
  <p>Это свойство применяется только в случае использования встроенного шрифта FlashType и установки значения <codeph>advanced</codeph> для свойства <codeph>fontAntiAliasType</codeph>.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
 
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления TextField и не может быть применен только к отдельным символам.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Определяет использование курсива в тексте. Допустимыми значениями являются <codeph>normal</codeph> и <codeph>italic</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Высота текста в пикселях. Значением по умолчанию является 10 для всех элементов управления, исключая элемент управления ColorPicker. Для элемента управления ColorPicker значением по умолчанию является 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  Устанавливает свойство <codeph>sharpness</codeph> для внутреннего класса TextFields, представляющего текст в элементах управления Flex. Это свойство указывает резкость краев глифа. Возможными значениями являются числа от -400 до 400. 
  
  <p>Это свойство применяется только в случае использования встроенного шрифта FlashType и установки значения <codeph>advanced</codeph> для свойства <codeph>fontAntiAliasType</codeph>.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
 
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления TextField и не может быть применен только к отдельным символам.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Устанавливает свойство <codeph>gridFitType</codeph> внутреннего класса TextFields, представляющего текст в элементах управления Flex. Допустимыми значениями являются <codeph>none</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>pixel</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) и <codeph>subpixel</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Это свойство применяется только в случае использования встроенного шрифта FlashType и установки значения <codeph>advanced</codeph> для свойства <codeph>fontAntiAliasType</codeph>.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
 
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления TextField и не может быть применен только к отдельным символам.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Имя используемого шрифта. В отличие от использования в реализации CSS, разделенные запятой списки не поддерживаются. Можно использовать любое имя гарнитуры шрифтов. При указании общего имени шрифта оно преобразовывается в соответствующий шрифт устройства.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  Устанавливает свойство <codeph>antiAliasType</codeph> внутреннего класса TextFields. Возможными значениями являются <codeph>normal</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) и <codeph>advanced</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>По умолчанию применяется значение <codeph>advanced</codeph>, разрешающее применение средства визуализации FlashType при использовании встроенного шрифта FlashType. Значение <codeph>normal</codeph> используется для отключения средства визуализации FlashType.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
  
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления TextField и не может быть применен только к отдельным символам.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="uint">
<description>
  Цвет текста в компоненте при его деактивации.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="uint">
<description>
  Цвет текста в компоненте, включая метку компонента.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Класс, используемый в серии для визуализации маркера серии во всех связанных легендах. Если стиль имеет значение <codeph>null</codeph>, в большинстве серий в качестве темы оформления маркера легенды по умолчанию применяется имеющийся экземпляр itemRenderer. Классы, используемые в качестве маркеров легенды, должны обеспечивать реализацию интерфейса IFlexDisplayObject и интерфейсов IDataRenderer и ISimpleStyleClient дополнительно. Если класс, применяемый в виде маркера легенды, реализует интерфейс IDataRenderer, свойство данных присваивается экземпляру LegendData.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Фабрика, представляющая класс, который будет использоваться серией для представления отдельных элементов на диаграмме. Этот класс создается один раз для каждого элемента диаграммы. Классы, используемые в качестве элементов itemRenderer, должны обеспечивать реализацию интерфейсов IFlexDisplayObject, ISimpleStyleClient и IDataRenderer. Свойство <codeph>data</codeph> присваивается элементу chartItem, отображаемому с помощью экземпляра темы оформления.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:PieSeries&gt;</code> tag inherits all the properties
  of its parent classes, and the following properties:</p>
  
  <pre>
  &lt;mx:PieSeries
    <strong>Properties</strong>
    angularAxis=""
    explodeRadius="0"
    field="null"
    fillFunction="<i>Internal fill function</i>"
    itemType="<i>No default</i>"
    labelFunction="<i>No default</i>"
    labelField="<i>No default</i>"
    maxLabelRadius="0.6" 
    nameField="null"
    outerRadius="1"
    perWedgeExplodeRadius="<i>Array, no default</i>"
    renderDataType="<i>No default</i>"
    reserveExplodeRadius="0"
    startAngle="0"
 
    <strong>Styles</strong>
    calloutGap="10"
    calloutStroke="<i>IStroke; no default</i>"
    fills="<i>IFill; no default</i>"
    fontSize="10"
    innerRadius="0"
    insideLabelSizeLimit="9"
    itemRenderer="<i>No default</i>"
    labelPosition="none|callout|inside|insideWithCallout|outside"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    radialStroke="<i>IStroke; no default</i>"
    renderDirection="clockwise|counterClockwise"
    stroke="<i>IStroke; no default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс PieSeries определяет серию данных для элемента управления PieChart. Средством визуализации элемента по умолчанию является класс WedgeItemRenderer. Дополнительно можно определить itemRenderer для серии данных. Элемент itemRenderer должен обеспечивать реализацию интерфейса IDataRenderer.
   </apiDesc><example conref="PieChartExample.mxml"><swfblock conref="../examples/PieChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#PieChart"><linktext>mx.charts.PieChart</linktext></link></related-links><apiConstructor id="mx.charts.series:PieSeries:PieSeries"><apiName>PieSeries</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:PieSeries:beginInterpolation"><apiName>beginInterpolation</apiName><shortdesc>
      
      Вызывается эффектом SeriesInterpolate для инициирования эффекта интерполяции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Данные, необходимые в серии для осуществления интерполяции.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>sourceRenderData</apiItemName><apiType value="Object"/><apiDesc>Исходные данные серии для проведения интерполяции.
     
      </apiDesc></apiParam><apiParam><apiItemName>destRenderData</apiItemName><apiType value="Object"/><apiDesc>Целевые данные серии для проведения интерполяции.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Вызывается эффектом SeriesInterpolate для инициирования эффекта интерполяции. Эффект обеспечивает передачу исходных и целевых данных серии для проведения интерполяции. Эффект обеспечивает неоднократную передачу возвращаемого значения этого метода в метод <codeph>interpolate()</codeph> серии для перехода к анимации для длительности эффекта. В серии выполняется расчет данных, необходимых для осуществления интерполяции, которые затем возвращаются в этом методе.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
	  
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.series:PieSeries:dataToLocal"><apiName>dataToLocal</apiName><shortdesc>
      
      
      Преобразовывает кортеж значений данных в координаты по осям X и Y на экране.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Координаты относительно диаграммы.
      
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>dataValues</apiItemName><apiType value="restParam"/><apiDesc>Значения данных для преобразования в координаты.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      Преобразовывает кортеж значений данных в координаты по осям X и Y на экране. Вызов этой функции необходим для преобразования данных на экране с применением преобразования, используемого отдельными элементами. Например, при создании пользовательского выделения области данных диаграммы можно использовать эту функцию для определения экранных координат требуемого диапазона.
      
      <p>Для элементов диаграмм в прямоугольной системе координат обычно передаются два значения. Первое значение отображает значение относительно горизонтальной оси, а второе – по отношению к вертикальной оси.</p>
      
      <p>При использовании полярных диаграмм первое значение отображается по отношению к угловой оси, а второе – по отношению к радиальной оси.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:getElementBounds"><apiName>getElementBounds</apiName><shortdesc>
      
      Обеспечивает заполнение свойств elementBounds, bounds и visibleBounds структуры renderData, создаваемой этими сериями.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderData</apiItemName><apiType value="Object"/><apiDesc>Структура, созданная с помощью этой серии.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Обеспечивает заполнение свойств <codeph>elementBounds</codeph>, <codeph>bounds</codeph> и <codeph>visibleBounds</codeph> структуры renderData, создаваемой этими сериями. Данный метод вызывается классами эффектов для заполнения этих полей и их использования при реализации различных типов эффектов. Полученные классы должны реализовать этот метод для создания границ элементов серии только при запросе.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:protected:getMissingInterpolationValues"><apiName>getMissingInterpolationValues</apiName><shortdesc> 
      
      Обеспечивает заполнение отсутствующих значений в структуре интерполяции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sourceProps</apiItemName><apiType value="Object"/><apiDesc>Объект, содержащий исходные значения, интерполированные для определенного элемента. При выходе из этого метода все свойства данного объекта должны иметь значения, отличные от <codeph>NaN</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>srcCache</apiItemName><apiType value="Array"/><apiDesc>Массив интерполируемых элементов исходной диаграммы.
     
      </apiDesc></apiParam><apiParam><apiItemName>destProps</apiItemName><apiType value="Object"/><apiDesc>Объект, содержащий целевые значения, которые интерполируются для определенного элемента. При выходе из этого метода все свойства данного объекта должны иметь значения, отличные от значения <codeph>NaN</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>destCache</apiItemName><apiType value="Array"/><apiDesc>Массив интерполируемых элементов целевой диаграммы.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>Индекс элемента, заполняемого в кэше.  
     
      </apiDesc></apiParam><apiParam><apiItemName>customData</apiItemName><apiType value="Object"/><apiDesc>Данные, перенесенные серией в метод <codeph>initializeInterpolationData()</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      
      Обеспечивает заполнение отсутствующих значений в структуре интерполяции. При вызове метода <codeph>initializeInterpolationData()</codeph> серией, он передается в массив исходных и целевых значений для интерполяции. Если любой из двух массивов является неполным, «соответствующие» значения заполнителя для интерполяции должны быть обеспечены серией. Способ определения значений заполнителя зависит от типа серии. Для предоставления этих значений заполнителя средства расширения серий должны обеспечить отмену данного метода.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:interpolate"><apiName>interpolate</apiName><shortdesc>
      
      Вызывается эффектом SeriesInterpolate для расширения эффекта интерполяции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>interpolationValues</apiItemName><apiType value="Array"/><apiDesc>Массив чисел, каждое в пределах от 0 до 1, где число с порядковым номером <i>n</i> указывает процент для способа, которым значение с порядковым номером <i>n</i> интерполируется в серии данных между начальными и конечными значениями.
     
      </apiDesc></apiParam><apiParam><apiItemName>interpolationData</apiItemName><apiType value="Object"/><apiDesc>Данные, возвращенные из метода <codeph>beginInterpolation()</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Вызывается эффектом SeriesInterpolate для расширения эффекта интерполяции. Эффект вызывает этот метод для каждого кадра до завершения интерполяции. Серия отвечает за использование параметров для выполнения визуализации интерполированных значений. По умолчанию серия предполагает, что свойство <codeph>interpolationData</codeph> является структурой данных, возвращаемой методом <codeph>initializeInterpolationData()</codeph>, и передает его в метод <codeph>applyInterpolation()</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:localToData"><apiName>localToData</apiName><shortdesc>
      
      
      Преобразовывает экранную координату в кортеж значений данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Кортеж значений данных.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>v</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Преобразуемый объект Point.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      Преобразовывает экранную координату в кортеж значений данных. Вызов этой функции необходим для определения значений данных, представляемых определенной точкой на экране.
      <p>Некоторые типы диаграмм определяют способ выполнения преобразования. Точка должна быть относительной для пространства координат диаграммы.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:PieSeries:maxLabelRadius"><apiName>maxLabelRadius</apiName><shortdesc>
      Максимальное значение радиуса PieSeries, которое может быть присвоено меткам.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0.6</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Максимальное значение радиуса PieSeries, которое может быть присвоено меткам. Это значение применяется только в том случае, если в серии отображаются выносные метки.
      
      <p>При отображении выносных меток объект PieSeries обеспечивает уменьшение радиуса сектора для освобождения пространства по сторонам для размещения меток. Как только область пространства, присвоенная меткам, достигнет этого лимита, начнется сокращение размера меток, позволяющее им оставаться в рамках данного размера.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:angularAxis:get"><apiName>angularAxis</apiName><shortdesc>
      Объект оси, используемый для отображения значений данных под углом в диапазоне от 0 до 2 PI.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Объект оси, используемый для отображения значений данных под углом в диапазоне от 0 до 2 PI. По умолчанию это линейная ось, для свойства <codeph>autoAdjust</codeph> которой установлено значение <codeph>false</codeph>. Поэтому данные равномерно отображаются вокруг диаграммы.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:explodeRadius:get"><apiName>explodeRadius</apiName><shortdesc>
      Число от 0 до 1, определяющее расстояние, на которое все сектора серии круга должны быть отнесены от центра диаграммы, и являющееся процентным значением от общего радиуса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Число от 0 до 1, определяющее расстояние, на которое все сектора серии круга должны быть отнесены от центра диаграммы, и являющееся процентным значением от общего радиуса. 
      
      <p>Это значение обеспечивает равномерный вынос всех секторов круговой серии. Значение для отдельных секторов может быть установлено с помощью свойства <codeph>perWedgeExplodeRadius</codeph>.</p>
      
      <p>Радиус выноса для любого отдельного сектора определяется в виде суммы значения свойства <codeph>explodeRadius</codeph> и его значения в массиве <codeph>perWedgeExplodeRadius</codeph>.</p>
      
      <p>Для гарантии того, что при выносе секторов круговая серия останется в рамках границ содержащей ее диаграммы, необходимо обеспечить сокращение общего радиуса круга. При динамическом выталкивании секторов во время выполнения общий радиус круга сокращается. Для предотвращения этого эффекта можно «зарезервировать» область и изначально уменьшить общий радиус путем установки в свойство <codeph>reserveExplodeRadius</codeph> максимального радиуса выноса, который предположительно может быть установлен во время выполнения.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:field:get"><apiName>field</apiName><shortdesc>
      Указывает поле поставщика данных, определяющее данные для каждого сектора элемента управления PieChart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает поле поставщика данных, определяющее данные для каждого сектора элемента управления PieChart.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Указывает метод, возвращающий заливку текущего элемента диаграммы в серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Указывает метод, возвращающий заливку текущего элемента диаграммы в серии. Если это свойство установлено, возвращаемое значение пользовательской функции заполнения имеет приоритет над свойством стиля <codeph>fills</codeph>. Но если оно возвращает значение null, приоритет будет иметь свойство <codeph>fills</codeph>.
     
     <p>Пользовательская функция <codeph>fillFunction</codeph> имеет следующую подпись:
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> является ссылкой на отображаемый элемент диаграммы. <codeph>index</codeph> – индекс элемента диаграммы в кэше renderData. Он отличается от индекса поставщика данных диаграммы, так как он отсортирован на основании значений x, y и z. Эта функция возвращает объект, реализующий интерфейс <codeph>IFill</codeph>.
     </p>
      
     <p>Примером использования пользовательской функции <codeph>fillFunction</codeph> является возвращение заливки на основе некоторого порогового значения.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:PieSeriesItem = PieSeriesItem(item);
          if (curItem.number > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
       
     <p>
      При указании пользовательской функции заливки для серии диаграммы и при необходимости использовать элемент управления Legend, следует вручную создать элемент управления Legend и добавить к нему экземпляры LegendItem.
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      Подтип ChartItem, используемый в этой серии для представления отдельных элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Подтип ChartItem, используемый в этой серии для представления отдельных элементов. Если подклассы необходимо использовать для хранения дополнительной информации в элементах, они могут обеспечить перезапись и возвращение более специализированного класса.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:items:get"><apiName>items</apiName><shortdesc>
      
      Получает все элементы, находящиеся в серии после фильтрации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Получает все элементы, находящиеся в серии после фильтрации.
      <p>Отдельные серии определяют список элементов, которые должны быть возвращены.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:labelField:get"><apiName>labelField</apiName><shortdesc>
     Имя поля поставщика данных, значение которого игнорируется метками, при определении функции labelFunction.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
     Имя поля поставщика данных, значение которого игнорируется метками, при определении функции labelFunction.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Указывает функцию обратного вызова, используемую для визуализации каждой метки PieSeries.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Указывает функцию обратного вызова, используемую для визуализации каждой метки PieSeries. Функция обратного вызова имеет следующий формат:
      <pre>
      <i>function_name</i>(<i>data</i>:Object, <i>field</i>:String, <i>index</i>:Number, <i>percentValue</i>:Number):String { ... }
      </pre>
     
      Объект <codeph>data</codeph> является отображаемым элементом dataProvider. Строка <codeph>field</codeph> представляет собой имя поля отображаемых данных. Число <codeph>index</codeph> является индексом оригинального элемента dataProvider отображаемого элемента. Число <codeph>percent</codeph> является процентным значением от итогового значения, представляемого в этом элементе. Эта функция возвращает строку, являющуюся меткой для данной единицы.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:nameField:get"><apiName>nameField</apiName><shortdesc>
      Указывает поле поставщика данных, определяющее имя каждого сектора элемента управления PieChart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает поле поставщика данных, определяющее имя каждого сектора элемента управления PieChart.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:outerRadius:get"><apiName>outerRadius</apiName><shortdesc>
      Процентное значение от общей площади, доступной объекту PieSeries для использования при визуализации содержимого серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Процентное значение от общей площади, доступной объекту PieSeries для использования при визуализации содержимого серии. Это значение подлежит управлению содержащей его диаграммой и его непосредственное присвоение не требуется.
      <p>Допустимыми являются значения от 0 до 1.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:perWedgeExplodeRadius:get"><apiName>perWedgeExplodeRadius</apiName><shortdesc>
      Массив чисел от 0 до 1, указывающих расстояние от центра диаграммы, на котором должен находиться каждый сектор круга, в виде процентного значения от итогового радиуса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Массив чисел от 0 до 1, указывающих расстояние от центра диаграммы, на котором должен находиться каждый сектор круга, в виде процентного значения от итогового радиуса. 
      
      <p>Значение <i>n</i> этого массива соответствует <i>n</i>-ному сектору круга. Например, для выноса третьего сектора наполовину присваивается значение <codeph>perWedgeExplodeRadius = [0, 0, 50];</codeph>.</p>
      
      <p>Значение <codeph>null</codeph> или отсутствующие значения массива обрабатываются как нулевые.</p>
      
      <p>Для гарантии того, что при выносе секторов круговая серия останется в рамках границ содержащей ее диаграммы, необходимо обеспечить сокращение общего радиуса круга.</p>
           
      <p>При динамическом выталкивании секторов во время выполнения общий радиус круга сокращается. Для предотвращения этого эффекта можно «зарезервировать» область и изначально уменьшить общий радиус путем установки в свойство <codeph>reserveExplodeRadius</codeph> максимального радиуса выноса, который предположительно может быть установлен во время выполнения.</p>
      
      <p>Значение для отдельного сектора из массива <codeph>perWedgeExplodeRadius</codeph> добавляется к значению свойства <codeph>explodeRadius</codeph> серии для вычисления общего радиуса выноса для любого заданного сектора.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      Подтип ChartRenderData, используется этой серией для хранения всех данных, необходимых для визуализации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Подтип ChartRenderData, используется этой серией для хранения всех данных, необходимых для визуализации. Если подклассы должны использоваться для хранения дополнительной информации в целях ее отображения, они могут обеспечить замену и возвращение более специализированного класса.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:reserveExplodeRadius:get"><apiName>reserveExplodeRadius</apiName><shortdesc>
      Число от 0 до 1, указывающее долю общего радиуса ряда секторов, которая должна быть зарезервирована для выноса секторов в ходе выполнения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Число от 0 до 1, указывающее долю общего радиуса ряда секторов, которая должна быть зарезервирована для выноса секторов в ходе выполнения. При выносе сектора круга серии должны обеспечивать сокращение общего радиуса круга для гарантии того, что он не превысит границ содержащей его диаграммы. Таким образом, если разработчик изменяет значение выноса для сектора во время выполнения, он фактически может уменьшить все сектора и не получить требуемого эффекта выноса отдельного сектора. Для предотвращения этого установите для свойства <codeph>reserveExplodeRadius</codeph> максимальное значение, которое предположительно может использоваться для выноса любого сектора во время выполнения.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:startAngle:get"><apiName>startAngle</apiName><shortdesc>
      Указывает начальный угол для первого ограничителя элемента управления PieChart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Указывает начальный угол для первого ограничителя элемента управления PieChart. Значение по умолчанию равно 0, что соответствует горизонтальной линии в правой части элемента управления PieChart.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:BarSeries"><apiName>BarSeries</apiName><shortdesc>
  Определяет серию данных для элемента управления BarChart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="labelSizeLimit" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  Определяет пороговое значение размера шрифта в пунктах, ниже которого метки рассматриваются как неразборчивые. В программе Flex метка, имеющая шрифт, не превышающий этого порогового значения, усекается.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,outside,inside" inherit="no" name="labelPosition" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
 Определяет расположение меток. Возможными значениями являются <codeph>none</codeph>, <codeph>outside</codeph> и <codeph>inside</codeph>.
 
 </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="labelClass" owner="mx.charts.series:BarSeries" playerVersion="Flash10.2" type="Class">
<description>
  Класс, который используется этим компонентом для визуализации меток.
   <p>Может являться классом mx.controls.Label или классом spark.components.Label.</p>
   </description>
<default>spark.components.Label
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="labelAlign" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
 Обеспечивает выравнивание метки. Рассматривается только в том случае, если для свойства <codeph>labelPostion</codeph> установлено значение <codeph>inside</codeph>. Возможными значениями являются <codeph>center</codeph>, <codeph>left</codeph> и <codeph>right</codeph>.
 
 </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Array">
<description>
  Определяет массив объектов заливки, задающих заливку каждого элемента в серии. Это свойство имеет приоритет над свойством стиля <codeph>fill</codeph>. Если пользовательский метод определяется с помощью средства <codeph>fillFunction</codeph>, оно имеет приоритет над этим массивом. Если для каждого из элементов не было обеспечено достаточное количество элементов массива, в программе Flex выполняется повторное заполнение массива с самого начала.
  
  <p>Установка значения этого свойства с использованием CSS:
   <pre>
    BarSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>Установка значения этого свойства с использованием MXML:
   <pre>
    &lt;mx:BarSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:BarSeries>
   </pre>
  </p>
  
  <p>
  При определении свойства <codeph>fills</codeph> и необходимости использовать элемент управления Legend следует вручную создать элемент управления Legend и соответствующие элементы LegendItem для него.
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  Смещение первой строки текста с левой стороны контейнера в пикселях.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  Определяет использование подчеркивания текста. Возможными значениями являются <codeph>none</codeph> и <codeph>underline</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  Выравнивание текста внутри контейнера. Возможными значениями являются <codeph>left</codeph>, <codeph>right</codeph> или <codeph>center</codeph>.
 
  <p>По умолчанию большинство элементов управления имеют значение <codeph>left</codeph>. Для компонентов Button, LinkButton и AccordionHeader значением по умолчанию является <codeph>center</codeph>. Для этих компонентов данное свойство распознается только в том случае, если для свойства <codeph>labelPlacement</codeph> было установлено значение <codeph>left</codeph> или <codeph>right</codeph>. Если свойство <codeph>labelPlacement</codeph> установлено на <codeph>top</codeph> или <codeph>bottom</codeph>, текст и любой значок располагаются по центру.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  Число дополнительных пикселей, отображаемых между каждым символом. Положительное значение увеличивает интервал между символами вне стандартного интервала, в то время как отрицательное значение его уменьшает.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Boolean">
<description>
  Логическое значение, указывающее использование кернинга (<codeph>true</codeph> — включено и <codeph>false</codeph> — отключено). Кернинг регулирует промежуток между определенными символьными парами для повышения удобочитаемости и должен использоваться, например, в заголовках при использовании крупных шрифтов. Кернинг поддерживается только для встроенных шрифтов FlashType. Определенные шрифты, например Verdana, и моноширинные шрифты, например Courier New, не поддерживают кернинг.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  Определяет использование жирного шрифта в тексте. Распознаются значения <codeph>normal</codeph> и <codeph>bold</codeph>. Для элемента LegendItem по умолчанию используется значение <codeph>bold</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  Устанавливает свойство <codeph>thickness</codeph> внутреннего класса TextFields, представляющего текст в элементе управления Flex. Это свойство указывает толщину границ глифов. Возможные значения – числа от -200 до 200. 
  
  <p>Это свойство применяется только в случае использования встроенного шрифта FlashType и установки значения <codeph>advanced</codeph> для свойства <codeph>fontAntiAliasType</codeph>.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
 
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления TextField и не может быть применен только к отдельным символам.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  Определяет использование курсива в тексте. Допустимыми значениями являются <codeph>normal</codeph> и <codeph>italic</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  Высота текста в пикселях. Значением по умолчанию является 10 для всех элементов управления, исключая элемент управления ColorPicker. Для элемента управления ColorPicker значением по умолчанию является 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  Устанавливает свойство <codeph>sharpness</codeph> для внутреннего класса TextFields, представляющего текст в элементах управления Flex. Это свойство указывает резкость краев глифа. Возможными значениями являются числа от -400 до 400. 
  
  <p>Это свойство применяется только в случае использования встроенного шрифта FlashType и установки значения <codeph>advanced</codeph> для свойства <codeph>fontAntiAliasType</codeph>.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
 
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления TextField и не может быть применен только к отдельным символам.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  Устанавливает свойство <codeph>gridFitType</codeph> внутреннего класса TextFields, представляющего текст в элементах управления Flex. Допустимыми значениями являются <codeph>none</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>pixel</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) и <codeph>subpixel</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Это свойство применяется только в случае использования встроенного шрифта FlashType и установки значения <codeph>advanced</codeph> для свойства <codeph>fontAntiAliasType</codeph>.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
 
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления TextField и не может быть применен только к отдельным символам.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  Имя используемого шрифта. В отличие от использования в реализации CSS, разделенные запятой списки не поддерживаются. Можно использовать любое имя гарнитуры шрифтов. При указании общего имени шрифта оно преобразовывается в соответствующий шрифт устройства.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  Устанавливает свойство <codeph>antiAliasType</codeph> внутреннего класса TextFields. Возможными значениями являются <codeph>normal</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) и <codeph>advanced</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>По умолчанию применяется значение <codeph>advanced</codeph>, разрешающее применение средства визуализации FlashType при использовании встроенного шрифта FlashType. Значение <codeph>normal</codeph> используется для отключения средства визуализации FlashType.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
  
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления TextField и не может быть применен только к отдельным символам.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="uint">
<description>
  Цвет текста в компоненте при его деактивации.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="uint">
<description>
  Цвет текста в компоненте, включая метку компонента.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Класс, используемый в серии для визуализации маркера серии во всех связанных легендах. Если стиль имеет значение <codeph>null</codeph>, в большинстве серий в качестве темы оформления маркера легенды по умолчанию применяется имеющийся экземпляр itemRenderer. Классы, используемые в качестве маркеров легенды, должны обеспечивать реализацию интерфейса IFlexDisplayObject и интерфейсов IDataRenderer и ISimpleStyleClient дополнительно. Если класс, применяемый в виде маркера легенды, реализует интерфейс IDataRenderer, свойство данных присваивается экземпляру LegendData.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  Фабрика, представляющая класс, который будет использоваться серией для представления отдельных элементов на диаграмме. Этот класс создается один раз для каждого элемента диаграммы. Классы, используемые в качестве элементов itemRenderer, должны обеспечивать реализацию интерфейсов IFlexDisplayObject, ISimpleStyleClient и IDataRenderer. Свойство <codeph>data</codeph> присваивается элементу chartItem, отображаемому с помощью экземпляра темы оформления.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  Обеспечивает установку стиля обводки для этой серии данных. Необходимо указать объект Stroke для определения обводки. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  Устанавливает заливку для этой серии данных. Можно указать объект, реализующий интерфейс IFill, или число, представляющее значение чистого цвета. Чистый цвет также может быть указан с использованием CSS. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:BarSeries&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:BarSeries
    <strong>Properties</strong>
    barWidthRatio=".65"
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    labelField="<i>No default</i>"
    labelFunction="<i>No default</i>"
    maxBarWidth="<i>No default</i>"
    minField="null"
    offset="<i>No default</i>"
    stacker="<i>No default</i>"
    stackTotals="<i>No default</i>"
    verticalAxis="<i>No default</i>" 
    xField="null"
    yField="null"
  
    <strong>Styles</strong>
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    fontFamily="Verdana"
    fontSize="10"
    fontStyle="italic|normal"
    fontWeight="bold|normal"
    labelAlign="center|left|right"
    labelPosition="none|inside|outside"
    labelSizeLimit="9"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    stroke="<i>IStroke; no default</i>"
    textDecoration="underline|none"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IStackable2</apiBaseInterface><apiBaseInterface>mx.charts.chartClasses:IBar</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  Определяет серию данных для элемента управления BarChart. По умолчанию этот класс использует класс BoxItemRenderer. Дополнительно можно определить itemRenderer для серии данных. Элемент itemRenderer должен обеспечивать реализацию интерфейса IDataRenderer. 
   </apiDesc><example conref="Column_BarChartExample.mxml"><swfblock conref="../examples/Column_BarChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#BarChart"><linktext>mx.charts.BarChart</linktext></link></related-links><apiConstructor id="mx.charts.series:BarSeries:BarSeries"><apiName>BarSeries</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:BarSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      Обеспечивает настройку экземпляров средств визуализации элементов, используемых для представления диаграммы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Новый создаваемый экземпляр средства визуализации элементов.
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>Утилита InstanceCache, используемая для управления экземплярами средств визуализации элементов.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обеспечивает настройку экземпляров средств визуализации элементов, используемых для представления диаграммы. Этот метод автоматически вызывается каждый раз, когда при визуализации диаграммы требуется новое средство визуализации элементов. При необходимости этот метод можно отменить для добавления собственных пользовательских настроек.
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.series:BarSeries:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      
      Обеспечивает передачу информации об изменении основных данных в поставщике данных для серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если установлено значение <codeph>true</codeph>, этот метод инициирует вызовы методов обновления.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Обеспечивает передачу информации об изменении основных данных в поставщике данных для серии. Эта функция инициирует вызов методов <codeph>updateData()</codeph>, <codeph>updateMapping()</codeph>, <codeph>updateFilter()</codeph> и <codeph>updateTransform()</codeph> при следующем вызове метода <codeph>commitProperties()</codeph>. Если любому элементу диаграммы были присвоены какие-либо эффекты данных, этот метод также инициирует эффекты отображения и скрытия.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:protected:invalidateMapping"><apiName>invalidateMapping</apiName><shortdesc>
      
      Обеспечивает передачу информации для серии о том, что сопоставление данных с числовыми значениями было изменено и должно быть вычислено повторно.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если установлено значение <codeph>true</codeph>, этот метод инициирует вызовы методов обновления.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Обеспечивает передачу информации для серии о том, что сопоставление данных с числовыми значениями было изменено и должно быть вычислено повторно. Вызов этой функции приведет к вызову методов <codeph>updateMapping()</codeph>, <codeph>updateFilter()</codeph> и <codeph>updateTransform()</codeph> при следующем вызове метода <codeph>commitProperties()</codeph>. Если любому элементу диаграммы были присвоены какие-либо эффекты данных, этот метод также инициирует эффекты отображения и скрытия.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:stackAll"><apiName>stackAll</apiName><shortdesc>
      Обеспечивает накопление серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект, представляющий максимальное и минимальное значения во вновь накопленной серии.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>stackedPosYValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Содержит базовые значения, которые должны быть помещены серией в верхнюю область стека. Ключи объекта Dictionary являются значениями Y, а значения – положительными значениями X.
     
      </apiDesc></apiParam><apiParam><apiItemName>stackedNegYValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Содержит базовые значения, которые должны быть помещены серией в верхнюю область стека. Ключи объекта Dictionary являются значениями Y, а значения – отрицательными значениями X.
      
      </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable2</apiOperationClassifier><apiDesc>Предыдущий элемент в накоплении. Если элемент, к примеру, имеет тот же самый тип, можно перейти к этому свойству во избежание дублирования работы при выполнении визуализации.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обеспечивает накопление серии. Как правило, метод <codeph>updateData()</codeph> реализуется серией для загрузки ее данных из поставщика данных. Однако накопленная серия обеспечивает выполнение специальных операций, поскольку ее значения не обязательно сохраняются в поставщике данных. Значениями является информация, сохраненная в поставщике данных, суммируемая со значениями, загружаемыми объектом в верхнюю часть стека.
      <p>Пользовательская накопительная серия должна реализовывать метод <codeph>stackAll()</codeph> путем загрузки его данных из поставщика данных, добавления их к основным значениям, сохраненным в объекте Dictionary, для получения реальных значений, которые должны быть отображены, и замеры значений в объекте Dictionary на новые суммированные значения.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:stack"><apiName>stack</apiName><shortdesc>
      Обеспечивает накопление серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Максимальное значение во вновь накопленной серии.
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>stackedYValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>Содержит базовые значения, которые должны быть помещены серией в верхнюю область стека. Ключи словаря являются значениями X, а значения – значениями Y.
      
      </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable</apiOperationClassifier><apiDesc>Предыдущий элемент в накоплении. Если элемент, к примеру, имеет тот же самый тип, можно перейти к этому свойству во избежание дублирования работы при выполнении визуализации.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обеспечивает накопление серии. Как правило, метод <codeph>updateData()</codeph> реализуется серией для загрузки ее данных из поставщика данных. Однако накопленная серия обеспечивает выполнение специальных операций, поскольку ее значения не обязательно сохраняются в поставщике данных. Значениями является информация, сохраненная в поставщике данных, суммируемая со значениями, загружаемыми объектом в верхнюю часть стека.
      <p>Пользовательская серия должна обеспечивать реализацию метода <codeph>stack()</codeph> путем загрузки его данных из поставщика данных, их добавления к основным значениям, хранящимся в словаре, для получения реальных значений, которые должны быть отображены, и замены значений словаря на новые, суммируемые значения.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:BarSeries:barWidthRatio:get"><apiName>barWidthRatio</apiName><shortdesc>
      Определяет, насколько широкими должны быть отображаемые полосы относительно ширины для категории.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>.65
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет, насколько широкими должны быть отображаемые полосы относительно ширины для категории. В случае установки значения 1 используется все пространство, в то время как при значении .6 применяется 60 % доступного пространства полосы. Как правило, непосредственная установка именно этого свойства не осуществляется. Фактическая используемая ширина полосы соответствует наименьшему из значений свойств <codeph>barWidthRatio</codeph> и <codeph>maxbarWidth</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     Указывает метод, возвращающий заливку текущего элемента диаграммы в серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     Указывает метод, возвращающий заливку текущего элемента диаграммы в серии. Если это свойство установлено, возвращаемое значение пользовательской функции заливки будет иметь приоритет над свойствами стиля <codeph>fill</codeph> и <codeph>fills</codeph>. Однако при возвращении значения null предпочтительными будут являться свойства <codeph>fills</codeph> и <codeph>fill</codeph> в указанном порядке.  
     
     <p>Пользовательская функция <codeph>fillFunction</codeph> имеет следующую подпись:
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> является ссылкой на отображаемый элемент диаграммы. <codeph>index</codeph> – индекс элемента диаграммы в кэше renderData. Он отличается от индекса поставщика данных диаграммы, так как он отсортирован на основании значений x, y и z. Эта функция возвращает объект, реализующий интерфейс <codeph>IFill</codeph>.
     </p>
      
     <p>Примером использования пользовательской функции <codeph>fillFunction</codeph> является возвращение заливки на основе некоторого порогового значения.</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill
     {
          var curItem:BarSeriesItem = BarSeriesItem(item);
          if (curItem.xNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
          <p>
      При указании пользовательской функции заливки для серии диаграммы и при необходимости использовать элемент управления Legend, следует вручную создать элемент управления Legend и добавить к нему экземпляры LegendItem.
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      Определяет метки, вспомогательные деления и положение данных для элементов по оси X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Определяет метки, вспомогательные деления и положение данных для элементов по оси X. Для установки свойств horizontalAxis в качестве нижестоящего тега в MXML или создания объекта LinearAxis или CategoryAxis в ActionScript используется класс LinearAxis или класс CategoryAxis.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      Подтип ChartItem, используемый в этой серии для представления отдельных элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Подтип ChartItem, используемый в этой серии для представления отдельных элементов. Если подклассы необходимо использовать для хранения дополнительной информации в элементах, они могут обеспечить перезапись и возвращение более специализированного класса.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:items:get"><apiName>items</apiName><shortdesc>
      
      Получает все элементы, находящиеся в серии после фильтрации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Получает все элементы, находящиеся в серии после фильтрации.
      <p>Отдельные серии определяют список элементов, которые должны быть возвращены.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:labelField:get"><apiName>labelField</apiName><shortdesc>
     Имя поля в поставщике данных, значение которого появляется в качестве метки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
     Имя поля в поставщике данных, значение которого появляется в качестве метки. Если определено свойство <codeph>labelFunction</codeph>, данное свойство игнорируется.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Указывает функцию обратного вызова, используемую для отображения каждой метки серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Указывает функцию обратного вызова, используемую для отображения каждой метки серии. Функция labelFunction должна иметь следующую подпись:
          <pre>
     function <i>function_name</i>(<i>element</i>:ChartItem, <i>series</i>:Series):String { ... }
     </pre>
     
     <codeph><i>element</i></codeph> является визуализируемым элементом диаграммы. <codeph><i>series</i></codeph> является серией, к которой принадлежит элемент диаграммы. Возвращенная строка является меткой текущего элемента.
          <p>Пример использования настроенной функции labelFunction:</p>
     <pre>
     private function myLabelFunction(element:ChartItem, series:Series):String {
          var item:BarSeriesItem = BarSeriesItem(element);
          var ser:BarSeries = BarSeries(series);
          return(item.item.Country + ":" +"" + ser.xField.toString() +":"+ item.xNumber);
     }
     </pre>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:maxBarWidth:get"><apiName>maxBarWidth</apiName><shortdesc>
      Определяет ширину полос в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Определяет ширину полос в пикселях. Фактически используемая ширина полосы соответствует наименьшему из значений этого стиля и свойства <codeph>barWidthRatio</codeph>. Сгруппированные полосы пропорционально разделяют эту область между полосами в каждом кластере. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:minField:get"><apiName>minField</apiName><shortdesc>
      Указывает поле поставщика данных, определяющее нижнюю границу каждой полосы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает поле поставщика данных, определяющее нижнюю границу каждой полосы. Если установлено значение <codeph>null</codeph>, в столбцах используется минимальное значении для интервала (или максимальное значение, если значение поля отрицательное). 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:offset:get"><apiName>offset</apiName><shortdesc>
      Указывает, насколько далеко от центра доступной области необходимо сместить центр полос относительно ширины для категории.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает, насколько далеко от центра доступной области необходимо сместить центр полос относительно ширины для категории. Значение в процентах находится в диапазоне от <codeph>-100</codeph> до <codeph>100</codeph>. Значение <codeph>0</codeph> устанавливается для центрирования полос в области. Значение <codeph>-50</codeph> устанавливается для центрирования столбца в начале доступной области. Как правило, непосредственная установка именно этого свойства не осуществляется.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      Подтип ChartRenderData, используется этой серией для хранения всех данных, необходимых для визуализации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Подтип ChartRenderData, используется этой серией для хранения всех данных, необходимых для визуализации. Если подклассы должны использоваться для хранения дополнительной информации в целях ее отображения, они могут обеспечить замену и возвращение более специализированного класса.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:stacker:get"><apiName>stacker</apiName><shortdesc>
      Элемент StackedSeries, связанный с этим элементом BarSeries.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:StackedSeries</apiValueClassifier></apiValueDef><apiDesc>
      Элемент StackedSeries, связанный с этим элементом BarSeries. Накопитель обеспечивает управление поведением серии при накоплении.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      Определяет метки, вспомогательные деления и положение данных для событий на оси Y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      Определяет метки, вспомогательные деления и положение данных для событий на оси Y. Для установки свойств объекта verticalAxis в качестве нижестоящего тега в MXML или создания объекта LinearAxis или CategoryAxis в ActionScript используется класс LinearAxis или класс CategoryAxis.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:xField:get"><apiName>xField</apiName><shortdesc>
      Указывает поле поставщика данных, определяющее местоположение верхней границы каждой полосы по оси X.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает поле поставщика данных, определяющее местоположение верхней границы каждой полосы по оси X. Если задано значение <codeph>null</codeph>, в BarSeries используется предположение о том, что поставщиком данных является массив из чисел, и эти числа применяются в качестве значений.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:yField:get"><apiName>yField</apiName><shortdesc> 
      Указывает поле поставщика данных, определяющее местоположение нижней границы полосы по оси Y в диаграмме.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Указывает поле поставщика данных, определяющее местоположение нижней границы полосы по оси Y в диаграмме. Если задано значение <codeph>null</codeph> в программе Flex полосы размещаются в порядке расположения данных в поставщике данных. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.charts.series:BarSeries:stackTotals:set"><apiName>stackTotals</apiName><shortdesc>
      Итоговые накопленные значения серии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      Итоговые накопленные значения серии.
           </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>