<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.charts.series"><apiName>mx.charts.series</apiName><apiDetail/><apiClassifier id="mx.charts.series:BarSet"><apiName>BarSet</apiName><shortdesc>
  可用于在任意图表中堆栈 BarSeries 对象或使这些对象群集化的分组集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="series"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IBar</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:StackedSeries</apiBaseClassifier></apiClassifierDef><apiDesc>
  可用于在任意图表中堆栈 BarSeries 对象或使这些对象群集化的分组集。BarSet 将封装在 BarChart 控件中使用的相同分组行为，但可用于组装基于 CartesianChart 类的自定义图表。BarSet 可用于群集化实现 IBar 接口的任何图表元素类型。它可以堆栈实现 IBar 和 IStackable 接口的任何图表元素类型。由于 BarSet 类实现 IBar 接口，您可以使用 BarSet 群集化其它 BarSet 以构建更高级的自定义图表。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.series:BarSet:BarSet"><apiName>BarSet</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  构造函数。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:BarSet:stack"><apiName>stack</apiName><shortdesc>
	  更新系列数据，并使用作为堆叠基础的系列数据值，以确保正确堆叠。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  更新系列数据，并使用作为堆叠基础的系列数据值，以确保正确堆叠。
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:BarSet:barWidthRatio:get"><apiName>barWidthRatio</apiName><shortdesc>
	  指定相对于类别宽度呈示的条形图宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.65
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  指定相对于类别宽度呈示的条形图宽度。值 <codeph>1</codeph> 表示占用整个空间，而值 <codeph>.6</codeph> 表示占用条形图可用空间的 60%。通常不直接设置此属性。条形图实际采用的宽度是 <codeph>barWidthRatio</codeph> 和 <codeph>maxbarWidth</codeph> 属性中的较小者。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSet:maxBarWidth:get"><apiName>maxBarWidth</apiName><shortdesc>
	  指定要绘制的条形图的宽度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  指定要绘制的条形图的宽度（以像素为单位）。条形图实际采用的宽度是此样式和 <codeph>barWidthRatio</codeph> 属性中的较小者。群集化的条形图在每个群集的条形图之间按比例分配空间。 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSet:offset:get"><apiName>offset</apiName><shortdesc>
	  指定相对于类别宽度，条形图中心偏离可用空间中心的距离。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  指定相对于类别宽度，条形图中心偏离可用空间中心的距离。值的范围是介于 <codeph>-100</codeph> 和 <codeph>100</codeph> 之间的一个百分比。设置为 <codeph>0</codeph> 可使条形图在空间中居中显示。设置为 <codeph>-50</codeph> 可使列在可用空间开始处居中显示。通常不直接设置此属性。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.series:BubbleSeries"><apiName>BubbleSeries</apiName><shortdesc>
  定义 BubbleChart 控件的数据系列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="Array">
<description>
  指定用于定义系列中每个项目填充内容的填充对象数组。它优先于 <codeph>fill</codeph> 样式属性。如果自定义方法是由 <codeph>fillFunction</codeph> 属性指定的，则它优先于此 Array。如果为每个项目提供的 Array 元素不足，则 Flex 将从 Array 的开始部分重复填充。
  
  <p>使用 CSS 设置此属性的值：
   <pre>
    BubbleSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>使用 MXML 设置此属性的值：
   <pre>
    &lt;mx:BubbleSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:BubbleSeries>
   </pre>
  </p>
  
  <p>
  如果您指定了 <codeph>fills</codeph> 属性并希望包含 Legend 控件，则必须手动创建 Legend 控件，然后向其中添加 LegendItems。
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列用来在任何关联图例中呈示该系列标记的类。如果此样式为 <codeph>null</codeph>，则大多数系列将默认改为使用其 itemRenderer 作为图例标记外观。用作图例标记的类应实现 IFlexDisplayObject 接口、ISimpleStyleClient 和 IDataRenderer 接口（可选）。如果用作图例标记的类实现 IDataRenderer 接口，则为该 data 属性分配 LegendData 实例。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  表示系列将用来表示图表上单个项目的类工厂。针对图表中的每个元素实例化此类一次。用作 itemRenderer 的类将实现 IFlexDisplayObject、ISimpleStyleClient 和 IDataRenderer 接口。为 <codeph>data</codeph> 属性分配外观实例呈示的 chartItem。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  设置此数据系列的笔触样式。必须指定某个 Stroke 对象来定义笔触。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:BubbleSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  设置此数据系列的填充。您可以指定实现 IFill 接口的对象，也可以指定代表纯颜色值的数字。您还可以使用 CSS 指定实心填充。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ <p>
  The <code>&lt;mx:BubbleSeries&gt;</code> tag inherits all the properties of its parent classes, and 
  the following properties:
  </p>
  <pre>
  &lt;mx:BubbleSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    itemType="<i>No default</i>"
    legendData="<i>No default</i>"
    maxRadius="50"
    minRadius="0"
    radiusAxis="<i>No default</i>"
    radiusField="<i>No default</i>"
    renderData="<i>No default</i>"
    renderDataType="<i>No default</i>"
    verticalAxis="<i>No default</i>"
    xField="null"
    yField="null"
    
    <strong>Styles</strong>
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    stroke="<i>IStroke; no default</i>"  
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  定义 BubbleChart 控件的数据系列。默认的 itemRenderer 为 CircleRenderer 类。此外，您也可以为此数据系列定义 itemRenderer。ItemRenderer 必须实现 IDataRenderer 接口。
   </apiDesc><example conref="BubbleChartExample.mxml"><swfblock conref="../examples/BubbleChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#BubbleChart"><linktext>mx.charts.BubbleChart</linktext></link></related-links><apiConstructor id="mx.charts.series:BubbleSeries:BubbleSeries"><apiName>BubbleSeries</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:BubbleSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      对指定的 DisplayObject 应用样式属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>要创建的实例。
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>对实例缓存自身的引用。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      对指定的 DisplayObject 应用样式属性。此方法是 InstanceCache 在创建新呈示器时调用的回调。  
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:beginInterpolation"><apiName>beginInterpolation</apiName><shortdesc>
      
      此方法由 SeriesInterpolate 效果调用，用以启动 interpolation 效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>系列执行 interpolation 所需的数据。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>sourceRenderData</apiItemName><apiType value="Object"/><apiDesc>系列要进行插补的源数据。
     
      </apiDesc></apiParam><apiParam><apiItemName>destRenderData</apiItemName><apiType value="Object"/><apiDesc>系列要进行插补的目标数据。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      此方法由 SeriesInterpolate 效果调用，用以启动 interpolation 效果。此效果传入源数据和目标数据，以便系列在二者之间进行插补。此效果将该方法的返回值重复传递给系列的 <codeph>interpolate()</codeph> 方法，以改进呈示此效果期间的动画效果。此系列计算执行 interpolation 所需的数据，并在此方法中将其返回。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:describeData"><apiName>describeData</apiName><shortdesc>
      
      
      由具有控制地位的 DataTransform 调用，以获得由此 IChartElement 表示的数据描述。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个 Array，其中包含用于描述显示数据的 DataDescription 实例。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>确定从中获取数据描述的轴。
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>一个位域，指示特定轴需要关注 DataDescription 对象的哪些值。实现器通过仅计算必要字段即可实现优化。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      由具有控制地位的 DataTransform 调用，以获得由此 IChartElement 表示的数据描述。实现器填充并返回 mx.charts.chartClasses.DataDescription 对象 Array，以保证它们的数据能够按任一条轴进行正确显示，而这里的轴是根据所显示的数据（如最小值、最大值、间隔和单位大小）自动生成值的。多数元素类型都会返回包含一个 DataDescription 的 Array。聚合元素（如 BarSet 和 ColumnSet）可能会返回多个 DataDescription 实例，用于描述由其子元素显示的数据。调用此方法时，实现器会沿 <codeph>dimension</codeph> 参数说明的轴显示数据。对于所包含的图表支持的每条轴，都有可能调用此函数。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:findDataPoints"><apiName>findDataPoints</apiName><shortdesc>
       
      在给定坐标“下方”查找由该元素表示的最近数据点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>HitData 的数组。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>X 坐标。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Y 坐标。
     
      </apiDesc></apiParam><apiParam><apiItemName>sensitivity</apiItemName><apiType value="Number"/><apiDesc>将指针视为位于精确坐标“下方”时二者的接近程度，以像素为单位。此属性类似于图表控件的 mouseSensitivity 属性值。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
       
      在给定坐标“下方”查找由该元素表示的最近数据点。
     
      <p>此方法将返回描述范围内数据点的 HitData 结构的数组。如果能够保证 dataPoint 不重叠，则各个 ChartElement 可以选择仅返回一个 dataPoint。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:getElementBounds"><apiName>getElementBounds</apiName><shortdesc>
      
      填充由该系列生成 renderData 结构的 elementBounds、bounds 和 visibleBounds 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderData</apiItemName><apiType value="Object"/><apiDesc>此系列生成的结构。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      填充由该系列生成的 renderData 结构的 <codeph>elementBounds</codeph>、<codeph>bounds</codeph> 和 <codeph>visibleBounds</codeph> 属性。效果类调用此方法来填充这些字段，用于实现各种效果类型。仅当被请求时，派生的类才应该实现此方法，以生成系列项目的绑定。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:getMissingInterpolationValues"><apiName>getMissingInterpolationValues</apiName><shortdesc>
      
      在 interpolation 结构中填充缺失值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sourceProps</apiItemName><apiType value="Object"/><apiDesc>包含为特定项目插补的源值的对象。此方法退出时，该对象中的所有属性都应该具有 <codeph>NaN</codeph> 以外的值。
     
      </apiDesc></apiParam><apiParam><apiItemName>srcCache</apiItemName><apiType value="Array"/><apiDesc>要进行插补的源图表项目 Array。
     
      </apiDesc></apiParam><apiParam><apiItemName>destProps</apiItemName><apiType value="Object"/><apiDesc>包含为特定项目插补的目标值的对象。此方法退出时，该 Object 中的所有属性都应该具有 <codeph>NaN</codeph> 以外的值。
     
      </apiDesc></apiParam><apiParam><apiItemName>destCache</apiItemName><apiType value="Array"/><apiDesc>要进行插补的目标图表项目 Array。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>缓存中正在进行填充操作的项目的索引。  
     
      </apiDesc></apiParam><apiParam><apiItemName>customData</apiItemName><apiType value="Object"/><apiDesc>由系列传递到 <codeph>initializeInterpolationData()</codeph> 方法中的数据。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      在 interpolation 结构中填充缺失值。当系列调用 <codeph>initializeInterpolationData()</codeph> 方法时，会为 interpolation 传递源值和目标值数组。如果其中一个数组不完整，则此系列必须为 interpolation 提供“适当的”占位符值。这些占位符值是特定于系列类型确定的。系列扩展者应覆盖此方法，以提供上述占位符值。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:styleChanged"><apiName>styleChanged</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateData"><apiName>updateData</apiName><shortdesc>
      
      当系列表示的基础数据发生更改，并且需要重新从数据提供程序加载时调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      当系列表示的基础数据发生更改，并且需要重新从数据提供程序加载时调用此方法。若要实现一个自定义系列类型，则应覆盖此方法，并加载从备用数据提供程序中呈示系列的必要数据。您还必须确保在子类中调用 <codeph>super.updateData()</codeph> 方法。通常不直接调用此方法，而是调用 Series 类的 <codeph>validateData()</codeph> 方法，从而保证您的数据已在给定点进行了更新。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateFilter"><apiName>updateFilter</apiName><shortdesc>
      
      当系列表示的基础数据需要根据由相关的数据转换轴表示的范围进行过滤时，调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      当系列表示的基础数据需要根据由相关的数据转换轴表示的范围进行过滤时，调用此方法。这适用于以下情况：基础数据发生更改；关联轴的范围发生更改。若要实现一个自定义系列类型，则应覆盖此方法，并使用由自身的关联数据转换管理的轴的 <codeph>filterCache()</codeph> 方法筛选出超出范围的数据。<codeph>filterCache()</codeph> 方法将所有超出范围的值转换为 <codeph>NaN</codeph>。您必须确保在子类中调用了 <codeph>super.updateFilter()</codeph> 方法。通常不直接调用此方法，如果需要保证您的数据已在给定点进行了筛选，则调用 Series 类的 <codeph>validateTransform()</codeph> 方法。通常情况下，您可以假定调用此方法之前已经调用了 <codeph>updateData()</codeph> 和 <codeph>updateMapping()</codeph> 方法（如有必要）。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateMapping"><apiName>updateMapping</apiName><shortdesc>
      
      当需要将此系列表示的基础数据映射到数字表示形式时调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      当需要将此系列表示的基础数据映射到数字表示形式时调用此方法。这适用于以下情况：基础数据发生更改；用于呈示系列的轴发生了某种相关更改。若要实现一个自定义系列，则应覆盖此方法，并使用由自身的关联数据转换管理的轴的 <codeph>mapCache()</codeph> 方法，将表示的数据转换为数值。您还必须确保在子类中调用了 <codeph>super.updateMapping()</codeph> 方法。通常不直接调用此方法，而是调用 Series 类的 <codeph>validateData()</codeph> 方法，从而保证您的数据已在给定点进行了映射。通常情况下，您可以假定调用此方法之前已经调用了 <codeph>updateData()</codeph> 方法（如有必要）。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BubbleSeries:protected:updateTransform"><apiName>updateTransform</apiName><shortdesc>
      
      当需要按关联数据转换的轴将由系列表示的基础数据转换为屏幕值时，调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      当需要按关联数据转换的轴将由系列表示的基础数据转换为屏幕值时，调用此方法。这适用于以下情况：基础数据发生更改；关联轴的范围发生更改；屏幕上的区域大小发生更改。若要实现一个自定义系列类型，则应覆盖此方法，并使用关联数据转换的 <codeph>transformCache()</codeph> 方法转换数据。您必须确保在子类中调用 <codeph>super.updateTransform()</codeph> 方法。通常不直接调用此方法，如果需要保证您的数据已在给定点进行了筛选，则调用 Series 类的 <codeph>valiateTransform()</codeph> 方法。通常情况下，您可以假定调用此方法之前，已经调用了 <codeph>updateData()</codeph>、<codeph>updateMapping()</codeph> 和 <codeph>updateFilter()</codeph> 方法（如有必要）。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:BubbleSeries:RADIUS_AXIS"><apiName>RADIUS_AXIS</apiName><shortdesc>
      半径轴的类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bubbleRadius</apiData><apiType value="String"/></apiValueDef><apiDesc>
      半径轴的类型。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:maxRadius"><apiName>maxRadius</apiName><shortdesc>
      在此系列中呈示的最大项目的半径。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>50</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      在此系列中呈示的最大项目的半径。在 BubbleChart 中使用 BubbleSeries 对象时，图表会自动将其 <codeph>maxRadius</codeph> 样式值分配给图表中所有系列的此属性。在 CartesianChart 控件中使用 BubbleSeries 对象时，您可以手动管理此属性。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:minRadius"><apiName>minRadius</apiName><shortdesc>
      在此系列中呈示的最小项目的半径。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      在此系列中呈示的最小项目的半径。在 BubbleChart 中使用 BubbleSeries 对象时，图表会自动将其 <codeph>minRadius</codeph> 样式值分配给图表中所有系列的此属性。在 CartesianChart 控件中使用 BubbleSeries 对象时，您可以手动管理此属性。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     指定返回系列中当前图表项目的填充的方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     指定返回系列中当前图表项目的填充的方法。如果已设置此属性，则自定义填充函数返回的值将优先于 <codeph>fill</codeph> 和 <codeph>fills</codeph> 样式属性。但是，如果返回 null，则在该顺序中将优先选择 <codeph>fills</codeph> 和 <codeph>fill</codeph>。  
     
     <p>自定义 <codeph>fillFunction</codeph> 包含以下签名：
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> 表示对要呈示的图表项目的引用。<codeph>index</codeph> 表示 renderData 的缓存中的图表项目的索引。这与图表的数据提供程序的索引不同，因为后者是基于 x、y 和 z 值进行排序的。
     </p>
      
     <p>自定义的 <codeph>fillFunction</codeph> 的使用示例是基于某些阈值返回填充。</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:BubbleSeriesItem = BubbleSeriesItem(item);
          if (curItem.zNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
          <p>
      如果您为图表系列指定了自定义填充函数，并希望包含 Legend 控件，则必须手动创建 Legend 控件，然后向其中添加 LegendItems。
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      为 x 轴上的项定义标签、刻度线和数据位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      为 x 轴上的项定义标签、刻度线和数据位置。使用 LinearAxis 类或 CategoryAxis 类可以设置 horizontalAxis 的属性，将其作为 MXML 中的子标签，或者在 ActionScript 中创建一个 LinearAxis 或 CategoryAxis 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      此系列用于表示各项目的 ChartItem 的子类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      此系列用于表示各项目的 ChartItem 的子类型。如果子类需要在项目中存储其它信息，则可以覆盖和返回更特定化的类。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:items:get"><apiName>items</apiName><shortdesc>
      
      获取系列中筛选之后所得的所有项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      获取系列中筛选之后所得的所有项目。
      <p>单个系列确定要返回的项目列表。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:legendData:get"><apiName>legendData</apiName><shortdesc>
      
      一个 LegendData 实例 Array，描述应在表示此系列的图例中显示的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      一个 LegendData 实例 Array，描述应在表示此系列的图例中显示的项目。派生的系列类会覆盖此 getter 函数并返回特定于其样式和数据表示方法的图例数据。虽然大多数系列类型仅返回一个 LegendData 实例，但仍有部分系列类型（如 PieSeries 和 StackedSeries）会返回多个实例，表示 Array 中的各个项目或多种数据呈示方式。   
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:radiusAxis:get"><apiName>radiusAxis</apiName><shortdesc>
      冒泡半径映射的轴。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      冒泡半径映射的轴。冒泡图表将各个冒泡的大小视为数据的第三个尺寸，其转换方式与 x 和 y 位置的转换方式相似。默认情况下，<codeph>radiusAxis</codeph> 为 LinearAxis，其中 <codeph>autoAdjust</codeph> 属性设置为 <codeph>false</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:radiusField:get"><apiName>radiusField</apiName><shortdesc>
      指定相对于图表中的其它数据点确定每个元件半径的数据提供程序字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      指定相对于图表中的其它数据点确定每个元件半径的数据提供程序字段。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      此系列用于存储所有必须呈示的数据的 ChartRenderData 子类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      此系列用于存储所有必须呈示的数据的 ChartRenderData 子类型。如果子类需要存储其它信息以供显示，则可以覆盖和返回更特定化的类。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:protected:renderData:get"><apiName>renderData</apiName><shortdesc>
      
      存储必要信息以呈示此系列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      存储必要信息以呈示此系列。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      为 y 轴上的项目定义标签、刻度线和数据位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      为 y 轴上的项目定义标签、刻度线和数据位置。使用 LinearAxis 类或 CategoryAxis 类可将 verticalAxis 的属性设置为 MXML 中的子标签，也可以在 ActionScript 中创建 LinearAxis 或 CategoryAxis 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:xField:get"><apiName>xField</apiName><shortdesc>
      指定用于确定每个数据点的 x 轴位置的数据提供程序字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定用于确定每个数据点的 x 轴位置的数据提供程序字段。如果为 <codeph>null</codeph>，则 Flex 将按数据点在数据提供程序中的显示顺序来呈示它们。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:yField:get"><apiName>yField</apiName><shortdesc>
      指定用于确定每个数据点的 y 轴位置的数据提供程序字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定用于确定每个数据点的 y 轴位置的数据提供程序字段。如果为 <codeph>null</codeph>，则 BubbleSeries 将假定数据提供程序为数字 Array，并使用这些数字作为数据点的值。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BubbleSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:CandlestickSeries"><apiName>CandlestickSeries</apiName><shortdesc>
  以一系列烛台图表代表财务数据，这些烛台图表代表数据系列的最高值、最低值、起始值和结束值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="Array">
<description>
  指定用于定义系列中每个项目填充内容的填充对象数组。它优先于 <codeph>fill</codeph> 样式属性。如果自定义方法是由 <codeph>fillFunction</codeph> 属性指定的，则它优先于此 Array。如果为每个项目提供的 Array 元素不足，则 Flex 将从 Array 的开始部分重复填充。
  
  <p>使用 CSS 设置此属性的值：
   <pre>
    CandlestickSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>使用 MXML 设置此属性的值：
   <pre>
    &lt;mx:CandlestickSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:CandlestickSeries>
   </pre>
  </p>
  
  <p>
  如果您指定了 <codeph>fills</codeph> 属性并希望包含 Legend 控件，则必须手动创建 Legend 控件，然后向其中添加 LegendItems。
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="declineFill" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  设置在元素的结束值小于起始值时使用的数据系列逐渐减小的填充。您可以指定实现 IFill 接口的对象，也可以指定代表纯颜色值的数字。您还可以使用 CSS 指定实心填充。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="boxStroke" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  设置用于绘制定义系列起始-结束区域的框之轮廓的笔触样式。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  设置此数据系列的笔触样式。必须指定某个 Stroke 对象来定义笔触。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:CandlestickSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  设置此数据系列的填充。您可以指定实现 IFill 接口的对象，也可以指定代表纯颜色值的数字。您还可以使用 CSS 指定实心填充。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ <p>
  The <code>&lt;mx:CandlestickSeries&gt;</code> tag inherits all the properties of its parent classes, and 
  the following properties:
  </p>
  <pre>
  &lt;mx:CandlestickSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
 
    <strong>Styles</strong>
    boxStroke="<i>IStroke; no default</i>"
    declineFill="<i>IFill; no default</i>"
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    stroke="<i>IStroke; no default</i>"  
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:HLOCSeriesBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  以一系列烛台图表代表财务数据，这些烛台图表代表数据系列的最高值、最低值、起始值和结束值。每个烛台图表中垂直线的顶部和底部分别表示数据点的高值和低值，而填充框的顶部和底部分别表示起始值和结束值。每个烛台图表的填充方式不同，具体取决于数据点的结束值是高于还是低于起始值。
   </apiDesc><example conref="CandlestickChartExample.mxml"><swfblock conref="../examples/CandlestickChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#CandlestickChart"><linktext>mx.charts.CandlestickChart</linktext></link></related-links><apiConstructor id="mx.charts.series:CandlestickSeries:CandlestickSeries"><apiName>CandlestickSeries</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:CandlestickSeries:findDataPoints"><apiName>findDataPoints</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="Array"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>sensitivity</apiItemName><apiType value="Number"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:CandlestickSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     指定返回系列中当前图表项目的填充的方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     指定返回系列中当前图表项目的填充的方法。如果已设置此属性，则自定义填充函数返回的值将优先于 <codeph>fill</codeph> 和 <codeph>fills</codeph> 样式属性。但是，如果返回 null，则在该顺序中将优先选择 <codeph>fills</codeph> 和 <codeph>fill</codeph>。  
     
     <p>自定义 <codeph>fillFunction</codeph> 包含以下签名：
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> 表示对要呈示的图表项目的引用。<codeph>index</codeph> 表示 renderData 的缓存中的图表项目的索引。这与图表的数据提供程序的索引不同，因为后者是基于 x、y 和 z 值进行排序的。此函数将返回实现 <codeph>IFill</codeph> 接口的对象。
     </p>
      
     <p>自定义的 <codeph>fillFunction</codeph> 的使用示例是基于某些阈值返回填充。</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:HLOCSeriesItem = HLOCSeriesItem(item);
          if (curItem.closeNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
       
     <p>
      如果您为图表系列指定了自定义填充函数，并希望包含 Legend 控件，则必须手动创建 Legend 控件，然后向其中添加 LegendItems。
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:CandlestickSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:AreaSet"><apiName>AreaSet</apiName><shortdesc>
  可用于堆栈任意图表中 AreaSeries 对象的分组集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="series"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:StackedSeries</apiBaseClassifier></apiClassifierDef><apiDesc>
  可用于堆栈任意图表中 AreaSeries 对象的分组集。AreaSet 将封装在 AreaChart 控件中使用的相同堆栈行为，但它可用于组装基于 CartesianChart 类的自定义图表。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.series:AreaSet:AreaSet"><apiName>AreaSet</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  构造函数。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.charts.series:PlotSeries"><apiName>PlotSeries</apiName><shortdesc>
  定义 PlotChart 控件的数据系列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="radius" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="Number">
<description> 
  指定每个数据点处图表元素的半径（以像素为单位）。默认情况下，PlotChart 控件在每个数据点上绘制一个圆。您可以通过 MXML 或使用样式来设置此属性。默认值为 <codeph>5</codeph> 像素。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="Array">
<description>
  指定用于定义系列中每个项目填充内容的填充对象数组。它优先于 <codeph>fill</codeph> 样式属性。如果自定义方法是由 <codeph>fillFunction</codeph> 属性指定的，则它优先于此 Array。如果为每个项目提供的 Array 元素不足，则 Flex 将从 Array 的开始部分重复填充。
  
  <p>使用 CSS 设置此属性的值：
   <pre>
    PlotSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>使用 MXML 设置此属性的值：
   <pre>
    &lt;mx:PlotSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:PlotSeries>
   </pre>
  </p>
  
  <p>
  如果您指定了 <codeph>fills</codeph> 属性并希望包含 Legend 控件，则必须手动创建 Legend 控件，然后向其中添加 LegendItems。
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="adjustedRadius" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="Number">
<description>
  指定在突显或选择图表项目时其半径要增加的像素数目。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列用来在任何关联图例中呈示该系列标记的类。如果此样式为 <codeph>null</codeph>，则大多数系列将默认改为使用其 itemRenderer 作为图例标记外观。用作图例标记的类应实现 IFlexDisplayObject 接口、ISimpleStyleClient 和 IDataRenderer 接口（可选）。如果用作图例标记的类实现 IDataRenderer 接口，则为该 data 属性分配 LegendData 实例。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  表示系列将用来表示图表上单个项目的类工厂。针对图表中的每个元素实例化此类一次。用作 itemRenderer 的类将实现 IFlexDisplayObject、ISimpleStyleClient 和 IDataRenderer 接口。为 <codeph>data</codeph> 属性分配外观实例呈示的 chartItem。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  设置此数据系列的笔触样式。必须指定某个 Stroke 对象来定义笔触。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:PlotSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  设置此数据系列的填充。您可以指定实现 IFill 接口的对象，也可以指定代表纯颜色值的数字。您还可以使用 CSS 指定实心填充。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;mx:PlotSeries&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:</p>
  
  <pre>
  &lt;mx:PlotSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    verticalAxis="<i>No default</i>"
    xField="null"
    yField="null"
 
    <strong>Styles</strong>
    adjustedRadius="2"
    fill="0xFFFFFF"
    fills="<i>IFill; no default</i>"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    radius="5"
    stroke="<i>IStroke; no default</i>" 
  /&gt;
  </pre>
  </p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  定义 PlotChart 控件的数据系列。PlotChart 控件的默认项呈示器为 DiamondItemRenderer 类。此外，您也可以为数据系列定义项呈示器。项呈示器必须实现 IDataRenderer 接口。 
   </apiDesc><example conref="PlotChartExample.mxml"><swfblock conref="../examples/PlotChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#PlotChart"><linktext>mx.charts.PlotChart</linktext></link><link href="mx.charts.renderers.xml#DiamondItemRenderer"><linktext>mx.charts.renderers.DiamondItemRenderer</linktext></link></related-links><apiConstructor id="mx.charts.series:PlotSeries:PlotSeries"><apiName>PlotSeries</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:PlotSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      自定义用于表示图表的项呈示器实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>正在创建的新项呈示器实例。
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>用于管理项呈示器实例的 InstanceCache。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      自定义用于表示图表的项呈示器实例。如果在呈示图表时需要新的项呈示器，则会自动调用此方法。您可以覆盖此方法以根据需要添加自己的自定义方法。
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PlotSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:PlotSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     指定返回系列中当前图表项目的填充的方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     指定返回系列中当前图表项目的填充的方法。如果已设置此属性，则自定义填充函数返回的值将优先于 <codeph>fill</codeph> 和 <codeph>fills</codeph> 样式属性。但是，如果返回 null，则在该顺序中将优先选择 <codeph>fills</codeph> 和 <codeph>fill</codeph>。  
     
     <p>自定义 <codeph>fillFunction</codeph> 包含以下签名：
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> 表示对要呈示的图表项目的引用。<codeph>index</codeph> 表示 renderData 的缓存中的图表项目的索引。这与图表的数据提供程序的索引不同，因为后者是基于 x、y 和 z 值进行排序的。此函数将返回实现 <codeph>IFill</codeph> 接口的对象。
     </p>
      
     <p>自定义的 <codeph>fillFunction</codeph> 的使用示例是基于某些阈值返回填充。</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:PlotSeriesItem = PlotSeriesItem(item);
          if (curItem.yNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
       
     <p>
      如果您为图表系列指定了自定义填充函数，并希望包含 Legend 控件，则必须手动创建 Legend 控件，然后向其中添加 LegendItems。
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      为 x 轴上的项定义标签、刻度线和数据位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      为 x 轴上的项定义标签、刻度线和数据位置。使用 LinearAxis 类或 CategoryAxis 类可以设置 horizontalAxis 的属性，将其作为 MXML 中的子标签，或者在 ActionScript 中创建一个 LinearAxis 或 CategoryAxis 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      此系列用于表示各项目的 ChartItem 的子类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      此系列用于表示各项目的 ChartItem 的子类型。如果子类需要在项目中存储其它信息，则可以覆盖和返回更特定化的类。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:items:get"><apiName>items</apiName><shortdesc>
      
      获取系列中筛选之后所得的所有项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      获取系列中筛选之后所得的所有项目。
      <p>单个系列确定要返回的项目列表。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      此系列用于存储所有必须呈示的数据的 ChartRenderData 子类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      此系列用于存储所有必须呈示的数据的 ChartRenderData 子类型。如果子类需要存储其它信息以供显示，则可以覆盖和返回更特定化的类。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:protected:renderData:get"><apiName>renderData</apiName><shortdesc>
      此系列用于存储所有必须呈示的数据的 ChartRenderData 子类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      此系列用于存储所有必须呈示的数据的 ChartRenderData 子类型。如果子类需要存储其它信息以供显示，则可以覆盖和返回更特定化的类。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      为 y 轴上的项目定义标签、刻度线和数据位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      为 y 轴上的项目定义标签、刻度线和数据位置。使用 LinearAxis 类或 CategoryAxis 类可将 verticalAxis 的属性设置为 MXML 中的子标签，也可以在 ActionScript 中创建 LinearAxis 或 CategoryAxis 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:xField:get"><apiName>xField</apiName><shortdesc>
      指定用于确定每个数据点的 x 轴位置的数据提供程序字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定用于确定每个数据点的 x 轴位置的数据提供程序字段。如果为 <codeph>null</codeph>，则 Flex 将按照数据点在 dataProvider 中的显示顺序呈示它们。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:yField:get"><apiName>yField</apiName><shortdesc>
      指定用于确定每个数据点的 y 轴位置的数据提供程序字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定用于确定每个数据点的 y 轴位置的数据提供程序字段。如果为 <codeph>null</codeph>，则 PlotSeries 会假定数据提供程序为数字 Array，并使用这些数字作为值。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PlotSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:ColumnSeries"><apiName>ColumnSeries</apiName><shortdesc>
  定义 ColumnChart 控件的数据系列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="labelSizeLimit" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  指定字体大小阈值（以磅为单位），小于该阈值的标签将被视为不合格。小于此阈值，Flex 将截断标签。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,outside,inside" inherit="no" name="labelPosition" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
 确定标签的位置，可能值为 <codeph>none</codeph>、<codeph>outside</codeph> 和 <codeph>inside</codeph>。
 
 </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="labelClass" owner="mx.charts.series:ColumnSeries" playerVersion="Flash10.2" type="Class">
<description>
  由此组件用来呈示标签的类。
   <p>可以将此类设置为 mx.controls.Label 类或 spark.components.Label 类。</p>
   </description>
<default>spark.components.Label
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,center,bottom" inherit="no" name="labelAlign" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
 确定标签的对齐方式。仅当 labelPosition 为 <codeph>inside</codeph> 且标签垂直显示时才考虑使用。可能的值为 <codeph>center</codeph>、<codeph>top</codeph> 和 <codeph>bottom</codeph>。
 
 </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Array">
<description>
  指定用于定义系列中每个项目填充内容的填充对象数组。它优先于 <codeph>fill</codeph> 样式属性。如果自定义方法是由 <codeph>fillFunction</codeph> 属性指定的，则它优先于此 Array。如果为每个项目提供的 Array 元素不足，则 Flex 将从 Array 的开始部分重复填充。
  
  <p>使用 CSS 设置此属性的值：
   <pre>
    ColumnSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>使用 MXML 设置此属性的值：
   <pre>
    &lt;mx:ColumnSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:ColumnSeries>
   </pre>
  </p>
  
  <p>
  如果您指定了 <codeph>fills</codeph> 属性并希望包含 Legend 控件，则必须手动创建 Legend 控件，然后向其中添加 LegendItems。
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  容器内文本的对齐方式。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数控件的默认值都为 <codeph>left</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>。对于这些组件，只有将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Boolean">
<description>
  一个布尔值，表示是启用 (<codeph>true</codeph>) 还是禁用 (<codeph>false</codeph>) 字距调整。字距调整会调整某些字符对之间的间隔以提高可读性，并应只在必要时（例如使用大字体标题时）使用。仅嵌入的 FlashType 字体支持字距调整。某些字体（如宋体）和等宽字体（如 Courier New）不支持字距调整。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"bold"</codeph>。对于 LegendItem，默认为 <codeph>"bold"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>thickness</codeph> 属性。此属性指定字型边缘的粗细。可能值为从 -200 到 200 之间的数字。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  文本的高度，以像素为单位。除 ColorPicker 控件之外，所有控件的默认值都为 10。ColorPicker 控件的默认值为 11。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>sharpness</codeph> 属性。此属性指定字型边缘的清晰度。可能值为从 -400 到 400 之间的数字。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>gridFitType</codeph> 属性。可能值为 <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>)、<codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) 和<codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>)。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="String">
<description>
  设置内部 TextField 的 <codeph>antiAliasType</codeph> 属性。可能值为 <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) 和 <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>)。 
  
  <p>默认值为 <codeph>"advanced"</codeph>。如果您使用的是嵌入的 FlashType 字体，此设置将启用 FlashType 呈示器。设置为 <codeph>"normal"</codeph> 可禁用 FlashType 呈示器。</p>
  
  <p>此样式对系统字体不起作用。</p>
  
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="uint">
<description>
  禁用时组件中文本的颜色。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列用来在任何关联图例中呈示该系列标记的类。如果此样式为 <codeph>null</codeph>，则大多数系列将默认改为使用其 itemRenderer 作为图例标记外观。用作图例标记的类应实现 IFlexDisplayObject 接口、ISimpleStyleClient 和 IDataRenderer 接口（可选）。如果用作图例标记的类实现 IDataRenderer 接口，则为该 data 属性分配 LegendData 实例。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  表示系列将用来表示图表上单个项目的类工厂。针对图表中的每个元素实例化此类一次。用作 itemRenderer 的类将实现 IFlexDisplayObject、ISimpleStyleClient 和 IDataRenderer 接口。为 <codeph>data</codeph> 属性分配外观实例呈示的 chartItem。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  设置此数据系列的笔触样式。必须指定某个 Stroke 对象来定义笔触。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:ColumnSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  设置此数据系列的填充。您可以指定实现 IFill 接口的对象，也可以指定代表纯颜色值的数字。您还可以使用 CSS 指定实心填充。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ <p>
  The <code>&lt;mx:ColumnSeries&gt;</code> tag inherits all the properties of its parent classes, and 
  the following properties:
  </p>
  <pre>
  &lt;mx:ColumnSeries
    <strong>Properties</strong>
    columnWidthRatio=".65"
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    labelField="<i>No default</i>"
    labelFunction="<i>No default</i>"
    legendData="<i>No default</i>"
    maxColumnWidth="<i>No default</i>"
    minField="null"
    offset="<i>No default</i>"
    sortOnXField="false|true"
    stacker="<i>No default</i>"
    stackTotals="<i>No default</i>"
    verticalAxis="<i>No default</i>"
    xField="null"
    yField="null"
 
    
    <strong>Styles</strong>
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    fontFamily="Verdana"
    fontSize="10"
    fontStyle="italic|normal"
    fontWeight="bold|normal"
    labelAlign="center|left|right"
    labelPosition="none|inside|outside"
    labelSizeLimit="9"
    itemRenderer="<i>BoxItemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    stroke="<i>Stroke; no default</i>"
    textDecoration="underline|none"
  /&gt;
  </pre>
  </p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IColumn</apiBaseInterface><apiBaseInterface>mx.charts.chartClasses:IStackable2</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  定义 ColumnChart 控件的数据系列。默认情况下，此类使用 BoxItemRenderer 类。此外，您也可以为数据系列定义一个自定义 itemRenderer。自定义 itemRenderer 必须实现 IDataRenderer 接口。 
   </apiDesc><example conref="Column_BarChartExample.mxml"><swfblock conref="../examples/Column_BarChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#ColumnChart"><linktext>mx.charts.ColumnChart</linktext></link></related-links><apiConstructor id="mx.charts.series:ColumnSeries:ColumnSeries"><apiName>ColumnSeries</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:ColumnSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      自定义用于表示图表的项呈示器实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>正在创建的新项呈示器实例。
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>用于管理项呈示器实例的 InstanceCache。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      自定义用于表示图表的项呈示器实例。如果在呈示图表时需要新的项呈示器，则会自动调用此方法。您可以覆盖此方法以根据需要添加自己的自定义方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      
      通知系列数据提供程序中的基础数据已更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果为 <codeph>true</codeph>，则此方法将触发对更新方法的调用。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      通知系列数据提供程序中的基础数据已更改。此函数将在下次调用 <codeph>commitProperties()</codeph> 方法时触发对 <codeph>updateData()</codeph>、<codeph>updateMapping()</codeph>、<codeph>updateFilter()</codeph> 和 <codeph>updateTransform()</codeph> 方法的调用。如果为图表的任何元素分配了数据效果，则此方法还可触发显示和隐藏效果。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:protected:invalidateMapping"><apiName>invalidateMapping</apiName><shortdesc>
      
      通知系列从数据到数值的映射已发生更改，并且必须重新计算。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果为 <codeph>true</codeph>，则此方法将触发对更新方法的调用。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      通知系列从数据到数值的映射已发生更改，并且必须重新计算。调用此函数将在下次调用 <codeph>commitProperties()</codeph> 方法时调用 <codeph>updateMapping()</codeph>、<codeph>updateFilter()</codeph> 和 <codeph>updateTransform()</codeph> 方法。如果为图表的任何元素分配了数据效果，则此方法还可触发显示和隐藏效果。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:stackAll"><apiName>stackAll</apiName><shortdesc>
      
  堆叠系列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>表示新堆栈的系列中最大值和最小值的对象。	 
  
  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>stackedPosXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>包含系列应在其上堆叠的基础值。dictionary 中的键都是 x 值，值都是正的 x 值。
 
  </apiDesc></apiParam><apiParam><apiItemName>stackedNegXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>包含系列应在其上堆叠的基础值。dictionary 中的键都是 x 值，值都是负的 y 值。
  
  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable2</apiOperationClassifier><apiDesc>堆栈中的上一元素。例如，如果元素类型相同，您就可以访问此属性，以避免在呈示时执行重复工作。
  
  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
  堆叠系列。通常，系列通过实现 <codeph>updateData()</codeph> 方法，加载来自数据提供程序的数据。但是，堆叠的系列需要执行特殊操作，因为此类系列的值不一定存储在数据提供程序中。此类系列的值为存储在其数据提供程序中的任何值，与它堆叠在其上的对象加载的值之和。
  <p>自定义堆叠系列应加载来自数据提供程序的数据，并将其与存储在 dictionary 中的基值相加以获取应该呈示的实际值，最后使用新的和值替换 dictionary 中的值，从而实现 <codeph>stack()</codeph> 方法。</p>
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSeries:stack"><apiName>stack</apiName><shortdesc>
     
	  堆叠系列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>新堆叠的系列中的最大值。	 
	  
	  </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>stackedXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>包含系列应在其上堆叠的基础值。dictionary 中的键是 y 值，值是 x 值。
	  
	  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable</apiOperationClassifier><apiDesc>堆栈中的上一元素。例如，如果元素类型相同，您就可以访问此属性，以避免在呈示时执行重复工作。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
     
	  堆叠系列。通常，系列通过实现 <codeph>updateData()</codeph> 方法，加载来自数据提供程序的数据。但是，堆叠的系列需要执行特殊操作，因为此类系列的值不一定存储在数据提供程序中。此类系列的值为存储在其数据提供程序中的任何值，与它堆叠在其上的对象加载的值之和。
	  <p>自定义堆叠系列应加载来自数据提供程序的数据，并将其与存储在 dictionary 中的基值相加以获取应该呈示的实际值，最后使用新的和值替换 dictionary 中的值，从而实现 <codeph>stack()</codeph> 方法。</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:ColumnSeries:columnWidthRatio:get"><apiName>columnWidthRatio</apiName><shortdesc>
      指定相对于类别宽度的列宽。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.65
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定相对于类别宽度的列宽。值 1 表示占用整个空间，而值 .6 表示占用列可用空间的 60%。通常不直接设置此属性。列实际采用的宽度是 <codeph>columnWidthRatio</codeph> 和 <codeph>maxColumnWidth</codeph> 属性中的较小者。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     指定返回系列中当前图表项目的填充的方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     指定返回系列中当前图表项目的填充的方法。如果已设置此属性，则自定义填充函数返回的值将优先于 <codeph>fill</codeph> 和 <codeph>fills</codeph> 样式属性。但是，如果返回 null，则在该顺序中将优先选择 <codeph>fills</codeph> 和 <codeph>fill</codeph>。  
     
     <p>自定义 <codeph>fillFunction</codeph> 包含以下签名：
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> 表示对要呈示的图表项目的引用。<codeph>index</codeph> 表示 renderData 的缓存中的图表项目的索引。这与图表的数据提供程序的索引不同，因为后者是基于 x、y 和 z 值进行排序的。此函数将返回实现 <codeph>IFill</codeph> 接口的对象。
     </p>
      
     <p>自定义的 <codeph>fillFunction</codeph> 的使用示例是基于某些阈值返回填充。</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:ColumnSeriesItem = ColumnSeriesItem(item);
          if (curItem.yNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
          <p>
      如果您为图表系列指定了自定义填充函数，并希望包含 Legend 控件，则必须手动创建 Legend 控件，然后向其中添加 LegendItems。
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      为 x 轴上的项定义标签、刻度线和数据位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      为 x 轴上的项定义标签、刻度线和数据位置。使用 LinearAxis 类或 CategoryAxis 类可以设置 horizontalAxis 的属性，将其作为 MXML 中的子标签，或者在 ActionScript 中创建一个 LinearAxis 或 CategoryAxis 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      此系列用于表示各项目的 ChartItem 的子类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      此系列用于表示各项目的 ChartItem 的子类型。如果需要通过子类存储项目中的其他信息，则它们可以覆盖并返回更特定的类
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:items:get"><apiName>items</apiName><shortdesc>
      
      获取系列中筛选之后所得的所有项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      获取系列中筛选之后所得的所有项目。
      <p>单个系列确定要返回的项目列表。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:labelField:get"><apiName>labelField</apiName><shortdesc>
     其值显示为标签的数据提供程序中字段的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
     其值显示为标签的数据提供程序中字段的名称。如果已指定 <codeph>labelFunction</codeph> 属性，则将忽略此属性。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      指定用于呈示每个 Series 标签的回调函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      指定用于呈示每个 Series 标签的回调函数。labelFunction 必须包含以下签名：
          <pre>
     function <i>function_name</i>(<i>element</i>:ChartItem, <i>series</i>:Series):String { ... }
     </pre>
     
     <codeph><i>element</i></codeph> 是要呈示的图表项目。<codeph><i>series</i></codeph> 是图表项目所属的系列。返回的 String 是当前项目的标签。
          <p>自定义的 labelFunction 的使用示例如下：</p>
     <pre>
     private function myLabelFunction(element:ChartItem, series:Series):String {
          var item:ColumnSeriesItem = ColumnSeriesItem(element);
          var ser:ColumnSeries = ColumnSeries(series);
          return(item.item.Country + ":" +"" + ser.yField.toString() +":"+ item.yNumber);
     }
     </pre>
           
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:maxColumnWidth:get"><apiName>maxColumnWidth</apiName><shortdesc>
      指定列的宽度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      指定列的宽度（以像素为单位）。列实际采用的宽度是此样式和 <codeph>columnWidthRatio</codeph> 属性中的较小者。群集化的列在每个群集的列之间按比例分配空间。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:minField:get"><apiName>minField</apiName><shortdesc>
      指定用于确定列底部 y 轴位置的数据提供程序字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      指定用于确定列底部 y 轴位置的数据提供程序字段。如果为 <codeph>null</codeph>，则这些列基于范围的最小值（或最大值，如果字段值为负数）。默认值为 <codeph>null</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:offset:get"><apiName>offset</apiName><shortdesc>
      指定相对于类别宽度，列中心偏离可用空间中心的距离。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      指定相对于类别宽度，列中心偏离可用空间中心的距离。设置为默认值 0 时，列在空间中居中显示。设置为 -50 可使列在可用空间开始处居中显示。通常不直接设置此属性。ColumnChart 控件基于其 <codeph>columnWidthRatio</codeph> 属性管理此值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      此系列用于存储所有必须呈示的数据的 ChartRenderData 子类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      此系列用于存储所有必须呈示的数据的 ChartRenderData 子类型。如果子类需要存储其它信息以供显示，则可以覆盖和返回更特定化的类。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:sortOnXField:get"><apiName>sortOnXField</apiName><shortdesc> 
      在呈示之前请求从左到右对列进行排序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      在呈示之前请求从左到右对列进行排序。默认情况下，ColumnSeries 将按照列在数据提供程序中的显示顺序呈示它们。 
      
      <p>如果使用 <codeph>xField</codeph> 属性确定每列的位置，则这些列可以在屏幕上以不同的顺序显示。列可以任何顺序呈示。但是，某些自定义列可能依赖于从左到右呈示的列。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:stacker:get"><apiName>stacker</apiName><shortdesc>
      与此 BarSeries 相关联的 StackedSeries。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:StackedSeries</apiValueClassifier></apiValueDef><apiDesc>
      与此 BarSeries 相关联的 StackedSeries。栈式存储器管理系列的堆叠行为。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      为 y 轴上的项目定义标签、刻度线和数据位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      为 y 轴上的项目定义标签、刻度线和数据位置。使用 LinearAxis 类或 CategoryAxis 类可将 verticalAxis 的属性设置为 MXML 中的子标签，也可以在 ActionScript 中创建 LinearAxis 或 CategoryAxis 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:xField:get"><apiName>xField</apiName><shortdesc>
      指定用于确定列的 x 轴位置的数据提供程序字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      指定用于确定列的 x 轴位置的数据提供程序字段。如果为 <codeph>null</codeph>，则 Flex 将按照列在数据提供程序中的显示顺序呈示它们。默认值为 <codeph>null</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:yField:get"><apiName>yField</apiName><shortdesc>
      指定用于确定列顶部 y 轴位置的数据提供程序字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      指定用于确定列顶部 y 轴位置的数据提供程序字段。如果为 <codeph>null</codeph>，则 ColumnSeries 将假定数据提供程序为数字 Array，并使用这些数字作为值。默认值为 <codeph>null</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.charts.series:ColumnSeries:stackTotals:set"><apiName>stackTotals</apiName><shortdesc>
      系列的堆栈总数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      系列的堆栈总数。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.series:ColumnSet"><apiName>ColumnSet</apiName><shortdesc>
  ColumnSet 是可用于在任意图表中堆栈或群集化列系列的分组集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="series"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IColumn</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:StackedSeries</apiBaseClassifier></apiClassifierDef><apiDesc>
  ColumnSet 是可用于在任意图表中堆栈或群集化列系列的分组集。ColumnSet 将封装在 ColumnChart 中使用的相同分组行为，但可用于组装基于 CartesianChart 的自定义图表。ColumnSet 可用于群集化实现 IColumn 接口的任何图表元素类型。它可以堆栈实现 IColumn 和 IStackable 接口的任何图表元素类型。由于 ColumnSet 本身实现 IColumn 接口，因此您可以使用 ColumnSet 群集化其他 ColumnSet 以构建更高级的自定义图表。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.series:ColumnSet:ColumnSet"><apiName>ColumnSet</apiName><shortdesc>
	 构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	 构造函数。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:ColumnSet:protected:buildSubSeries"><apiName>buildSubSeries</apiName><shortdesc> 
	  
      必要时，可以处理子系列的 Array 供显示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
	  
      必要时，可以处理子系列的 Array 供显示。此方法可确保将所有子系列添加为此堆叠组的子项，并在必要时应用每系列自定义（例如，分配继承的数据提供程序或 clustering 属性）。
      <p>此方法还会在系列发生更改时向图表发出通知，这就必须重新分配隐式系列样式。必要时，堆叠组自动调用此方法。您应该考虑调用 <codeph>invalidateSeries()</codeph> 方法，而非直接调用上述方法。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSet:protected:customizeSeries"><apiName>customizeSeries</apiName><shortdesc>
	   
      构建堆叠行为时对子系列应用任何自定义。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>glyph</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IChartElement</apiOperationClassifier><apiDesc>要自定义的图表元素。
      
      </apiDesc></apiParam><apiParam><apiItemName>i</apiItemName><apiType value="uint"/><apiDesc>子系列在系列数组中的位置。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	   
      构建堆叠行为时对子系列应用任何自定义。默认情况下，此方法将为子系列分配继承的数据提供程序。派生的类可以覆盖此方法，以便进一步应用自定义。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSet:describeData"><apiName>describeData</apiName><shortdesc>
	  
      
      由具有控制地位的 DataTransform 调用，以获得由此 IChartElement 表示的数据描述。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个 Array，其中包含用于描述显示数据的 DataDescription 实例。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>确定从中获取数据描述的轴。
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>一个位域，指示特定轴需要关注 DataDescription 对象的哪些值。实现器通过仅计算必要字段即可实现优化。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      
      由具有控制地位的 DataTransform 调用，以获得由此 IChartElement 表示的数据描述。实现器填充并返回 mx.charts.chartClasses.DataDescription 对象 Array，以保证它们的数据能够按任一条轴进行正确显示，而这里的轴是根据所显示的数据（如最小值、最大值、间隔和单位大小）自动生成值的。多数元素类型都会返回包含一个 DataDescription 的 Array。聚合元素（如 BarSet 和 ColumnSet）可能会返回多个 DataDescription 实例，用于描述由其子元素显示的数据。调用此方法时，实现器会沿 <codeph>dimension</codeph> 参数说明的轴显示数据。对于所包含的图表支持的每条轴，都有可能调用此函数。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:ColumnSet:protected:formatDataTip"><apiName>formatDataTip</apiName><shortdesc>
	  
      提供 DataTip 对象的自定义文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>DataTip 的自定义文本。默认值为空字符串。必须覆盖此方法才能提供自定义 DataTip。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>hd</apiItemName><apiOperationClassifier>mx.charts:HitData</apiOperationClassifier><apiDesc>堆栈中的 hitData 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      提供 DataTip 对象的自定义文本。堆叠组会覆盖其包含的子系列的 DataTip 文本，以显示与堆叠行为有关的其他信息。派生的类必须覆盖此方法才能定义自定义 DataTip 文本。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:ColumnSet:columnWidthRatio:get"><apiName>columnWidthRatio</apiName><shortdesc>
	  指定相对于类别宽度的列宽。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.65
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  指定相对于类别宽度的列宽。值 <codeph>1</codeph> 表示占用整个空间，而值 <codeph>.6</codeph> 表示占用列可用空间的 60%。通常不直接设置此属性。列实际采用的宽度是 <codeph>columnWidthRatio</codeph> 和 <codeph>maxColumnWidth</codeph> 属性中的较小者。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSet:maxColumnWidth:get"><apiName>maxColumnWidth</apiName><shortdesc>
	  指定列的宽度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  指定列的宽度（以像素为单位）。列实际采用的宽度是此样式和 <codeph>columnWidthRatio</codeph> 属性中的较小者。群集化的列在每个群集的列之间按比例分配空间。 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:ColumnSet:offset:get"><apiName>offset</apiName><shortdesc>
	  指定相对于类别宽度，列中心偏离可用空间中心的距离。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  指定相对于类别宽度，列中心偏离可用空间中心的距离。设置为默认值 <codeph>0</codeph> 时，列在空间中居中显示。设置为 <codeph>-50</codeph> 可使列在可用空间开始处居中显示。通常不直接设置此属性。ColumnChart 控件基于其 <codeph>columnWidthRatio</codeph> 属性管理此值。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.series:HLOCSeries"><apiName>HLOCSeries</apiName><shortdesc>
  以一系列代表数据系列的最高值、最低值、结束值以及起始值（可选）的元素来代表财务数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="style" name="hlocColor"/><styles><style inherit="no" name="stroke" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  设置此数据系列的笔触样式。必须指定某个 Stroke 对象来定义笔触。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="openTickStroke" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  如果指定了起始值，则指定用于起始刻度线的笔触。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="openTickLength" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="Number">
<description>
  如果指定了起始值，则指定起始刻度线的长度（以像素为单位）。无论此值为何，HLOCSeries 都不会呈示分配给单个元素的区域之外的起始刻度线。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="closeTickStroke" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  如果指定了起始值，则指定用于结束刻度线的笔触。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="closeTickLength" owner="mx.charts.series:HLOCSeries" playerVersion="Flash9" type="Number">
<description>
  指定结束刻度线的长度（以像素为单位）。无论此值为何，HLOCSeries 都不会呈示分配给单个元素的区域之外的结束刻度线。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:HLOCSeries&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:</p>
  
  <pre>
  &lt;mx:HLOCSeries
    <strong>Styles</strong>
    closeTickLength="<i>No default</i>"
    closeTickStroke="<i>No default</i>"
    openTickLength="<i>No default</i>"
    openTickStroke="<i>No default</i>"
    stroke="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:HLOCSeriesBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  以一系列代表数据系列的最高值、最低值、结束值以及起始值（可选）的元素来代表财务数据。每个元素中垂直线的顶部和底部分别代表数据点的最高值和最低值。右侧的刻度线代表结束值，左侧刻度线代表起始值（如果指定了某个值）。 
 
  </apiDesc><example conref="HLOCChartExample.mxml"><swfblock conref="../examples/HLOCChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#HLOCChart"><linktext>mx.charts.HLOCChart</linktext></link></related-links><apiConstructor id="mx.charts.series:HLOCSeries:HLOCSeries"><apiName>HLOCSeries</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  构造函数。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts.series:HLOCSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:LineSeries"><apiName>LineSeries</apiName><shortdesc>
  定义 LineChart 控件的数据系列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="radius" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="Number">
<description> 
  指定数据点的图表元素的半径（以像素为单位）。仅当使用 <codeph>itemRenderer</codeph> 属性指定项呈示器时，才会应用此属性。您可以通过 MXML 或使用样式来指定 <codeph>itemRenderer</codeph>。  
  
  </description>
<default>4 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="lineStroke" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description> 
   设置实际线段的笔触。LineChart 控件的默认值为橙色 (<codeph>0xE48701</codeph>)。在 CartesianChart 控件中使用的 LineSeries 的默认颜色为黑色 (<codeph>0x000000</codeph>)。宽度的默认值为 3。
   
   </description>

<playerversion>AIR 1.1
   </playerversion>
	<prolog><asCustoms><langversion>3.0
   </langversion><productversion>Flex 3
  </productversion></asCustoms></prolog></style><style inherit="no" name="lineSegmentRenderer" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  表示系列用于表示系列中各线段的类的类工厂。此类针对系列的每个不同线段都进行一次实例化。用作 lineSegmentRenderer 的类应实现 IFlexDisplayObject、ISimpleStyleClient 和 IDataRenderer 接口。为 <codeph>data</codeph> 属性分配描述要呈示的线段的 mx.charts.series.items.LineSeriesSegment 实例。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="segment,step,reverseStep,vertical,horizontal,curve" inherit="no" name="form" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="String">
<description>
  指定图表的线条类型。可能的值包括：
  <ul>
    <li><codeph>"curve"</codeph>：在数据点之间绘制曲线。</li>
    
    <li><codeph>"horizontal"</codeph>：在第二个点的 y 坐标处仅绘制从第一个点的 x 坐标到第二个点的 x 坐标的垂直线。对每个数据点重复此操作。</li>
    
    <li><codeph>"vertical"</codeph>：在第二个点的 x 坐标处仅绘制从第一个点的 y 坐标到第二个点的 y 坐标的垂直线。对每个数据点重复此操作。</li>
    
    <li><codeph>"segment"</codeph>：将线条绘制为连接的线段，使它们呈一定角度以便连接系列的各个数据点。</li>
    
    <li><codeph>"step"</codeph>：将线条绘制为水平线段。在第一个数据点处，先绘制一条水平线，然后绘制到第二个点的垂直线，并对每个数据点重复此操作。</li>
    
    <li><codeph>"reverseStep"</codeph>：将线条绘制为水平线段。在第一个数据点处，先绘制一条垂直线，然后绘制到第二个点的水平线，并对每个数据点重复此操作。</li>
  </ul>
  默认值为 <codeph>"segment"</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="Array">
<description>
  指定用于定义系列中每个项目填充内容的填充对象数组。它优先于 <codeph>fill</codeph> 样式属性。如果自定义方法是由 <codeph>fillFunction</codeph> 属性指定的，则它优先于此 Array。如果为每个项目提供的 Array 元素不足，则 Flex 将从 Array 的开始部分重复填充。
  
  <p>使用 CSS 设置此属性的值：
   <pre>
    LineSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>使用 MXML 设置此属性的值：
   <pre>
    &lt;mx:LineSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:LineSeries>
   </pre>
  </p>
  
  <p>
  如果您指定了 <codeph>fills</codeph> 属性并希望包含 Legend 控件，则必须手动创建 Legend 控件，然后向其中添加 LegendItems。
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="adjustedRadius" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="Number">
<description>
  指定在突显或选择图表项目时其半径要增加的像素数目。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列用来在任何关联图例中呈示该系列标记的类。如果此样式为 <codeph>null</codeph>，则大多数系列将默认改为使用其 itemRenderer 作为图例标记外观。用作图例标记的类应实现 IFlexDisplayObject 接口、ISimpleStyleClient 和 IDataRenderer 接口（可选）。如果用作图例标记的类实现 IDataRenderer 接口，则为该 data 属性分配 LegendData 实例。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  表示系列将用来表示图表上单个项目的类工厂。针对图表中的每个元素实例化此类一次。用作 itemRenderer 的类将实现 IFlexDisplayObject、ISimpleStyleClient 和 IDataRenderer 接口。为 <codeph>data</codeph> 属性分配外观实例呈示的 chartItem。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  设置此数据系列的笔触样式。必须指定某个 Stroke 对象来定义笔触。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:LineSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  设置此数据系列的填充。您可以指定实现 IFill 接口的对象，也可以指定代表纯颜色值的数字。您还可以使用 CSS 指定实心填充。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:LineSeries&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:LineSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    interpolateValues="false|true"
    sortOnXField="false|true"
    verticalAxis="<i>No default</i>"
    xField="null"
    yField="null"
 
    <strong>Styles</strong>
    adjustedRadius="2"
    fill="0xFFFFFF"
    fills="<i>IFill; no default</i>"
    form="segment|curve|horizontal|reverseStep|step|vertical"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    lineSegmentRenderer="<i>ShadowLineRenderer</i>"
    lineStroke="Stroke(0xE47801,3)"
    radius="4"
    stroke="<i>IStroke; no default</i>" 
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  定义 LineChart 控件的数据系列。默认情况下，此类使用 ShadowLineRenderer 类。此外，您也可以为此数据系列定义 itemRenderer。ItemRenderer 必须实现 IDataRenderer 接口。 
   </apiDesc><example conref="Line_AreaChartExample.mxml"><swfblock conref="../examples/Line_AreaChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#LineChart"><linktext>mx.charts.LineChart</linktext></link><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links><apiConstructor id="mx.charts.series:LineSeries:LineSeries"><apiName>LineSeries</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:LineSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      自定义用于表示图表的项呈示器实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>正在创建的新项呈示器实例。
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>用于管理项呈示器实例的 InstanceCache。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      自定义用于表示图表的项呈示器实例。如果在呈示图表时需要新的项呈示器，则会自动调用此方法。您可以覆盖此方法以根据需要添加自己的自定义方法。
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:LineSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:LineSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     指定返回系列中当前图表项目的填充的方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     指定返回系列中当前图表项目的填充的方法。如果已设置此属性，则自定义填充函数返回的值将优先于 <codeph>fill</codeph> 和 <codeph>fills</codeph> 样式属性。但是，如果返回 null，则在该顺序中将优先选择 <codeph>fills</codeph> 和 <codeph>fill</codeph>。  
     
     <p>自定义 <codeph>fillFunction</codeph> 包含以下签名：
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> 表示对要呈示的图表项目的引用。<codeph>index</codeph> 表示 renderData 的缓存中的图表项目的索引。这与图表的数据提供程序的索引不同，因为后者是基于 x、y 和 z 值进行排序的。此函数将返回实现 <codeph>IFill</codeph> 接口的对象。
     </p>
      
     <p>自定义的 <codeph>fillFunction</codeph> 的使用示例是基于某些阈值返回填充。</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:LineSeriesItem = LineSeriesItem(item);
          if (curItem.yNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
       
     <p>
      如果您为图表系列指定了自定义填充函数，并希望包含 Legend 控件，则必须手动创建 Legend 控件，然后向其中添加 LegendItems。
      </p>
           
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      为 x 轴上的项定义标签、刻度线和数据位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      为 x 轴上的项定义标签、刻度线和数据位置。使用 LinearAxis 类或 CategoryAxis 类可以设置 horizontalAxis 的属性，将其作为 MXML 中的子标签，或者在 ActionScript 中创建一个 LinearAxis 或 CategoryAxis 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:interpolateValues:get"><apiName>interpolateValues</apiName><shortdesc> 
      指定如何表示丢失的数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
     </apiDefaultValue></apiValueDef><apiDesc> 
      指定如何表示丢失的数据。
           <p>设置为 <codeph>false</codeph> 可在丢失值处换行。设置为 <codeph>true</codeph> 可通过插补丢失的值绘制一条连续线条。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      此系列用于表示各项目的 ChartItem 的子类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      此系列用于表示各项目的 ChartItem 的子类型。如果子类需要在项目中存储其它信息，则可以覆盖和返回更特定化的类。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:items:get"><apiName>items</apiName><shortdesc>
      
      获取系列中筛选之后所得的所有项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      获取系列中筛选之后所得的所有项目。
      <p>单个系列确定要返回的项目列表。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:protected:lineSegmentType:get"><apiName>lineSegmentType</apiName><shortdesc>
      此系列使用该类存储表示线段必需的所有数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      此系列使用该类存储表示线段必需的所有数据。如果子类需要存储其它信息以供显示，则可以覆盖和返回更特定化的类。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:radius:get"><apiName>radius</apiName><shortdesc> 
      指定数据点的图表元素的半径（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      指定数据点的图表元素的半径（以像素为单位）。仅当使用 <codeph>itemRenderer</codeph> 属性指定项呈示器时，才会应用此属性。您可以通过 MXML 或使用样式来指定 <codeph>itemRenderer</codeph>。  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      此系列用于存储所有必须呈示的数据的 ChartRenderData 子类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      此系列用于存储所有必须呈示的数据的 ChartRenderData 子类型。如果子类需要存储其它信息以供显示，则可以覆盖和返回更特定化的类。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:sortOnXField:get"><apiName>sortOnXField</apiName><shortdesc> 
      在呈示之前请求从左到右对线段数据点进行排序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      在呈示之前请求从左到右对线段数据点进行排序。
           <p>默认情况下，LineSeries 从左到右显示点。将此属性设置为 <codeph>false</codeph> 可使项目按照在数据提供程序中的显示顺序呈示。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      为 y 轴上的项目定义标签、刻度线和数据位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      为 y 轴上的项目定义标签、刻度线和数据位置。使用 LinearAxis 类或 CategoryAxis 类可将 verticalAxis 的属性设置为 MXML 中的子标签，也可以在 ActionScript 中创建 LinearAxis 或 CategoryAxis 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:xField:get"><apiName>xField</apiName><shortdesc>
      指定用于确定每个数据点的 x 轴位置的数据提供程序字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定用于确定每个数据点的 x 轴位置的数据提供程序字段。如果为 <codeph>null</codeph>，则数据点将按照在数据提供程序中的显示顺序呈示。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:yField:get"><apiName>yField</apiName><shortdesc>
      指定用于确定每个数据点的 y 轴位置的数据提供程序字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定用于确定每个数据点的 y 轴位置的数据提供程序字段。如果为 <codeph>null</codeph>，则 LineSeries 将假定数据提供程序为数字 Array，并使用这些数字作为值。 
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:LineSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:AreaSeries"><apiName>AreaSeries</apiName><shortdesc>
  定义 AreaChart 控件的数据系列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="radius" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="Number">
<description> 
  指定数据点的图表元素的半径（以像素为单位）。仅当指定 <codeph>itemRenderer</codeph> 属性时，此属性才可用。您可以通过 MXML 或使用样式来指定 itemRenderer。  
  
  </description>
<default>4 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="segment,step,reverseStep,vertical,horizontal,curve" inherit="no" name="form" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="String">
<description>
  指定区域的边界类型。可能的值包括：
  
  <ul>
   <li><codeph>"curve"</codeph> — 在数据点之间绘制边界曲线。</li>
  
   <li><codeph>"horizontal"</codeph> - 在第二个点的 y 坐标处仅绘制从第一个点的 x 坐标到第二个点的 x 坐标的边界。对每个数据点重复此操作。</li>
  
   <li><codeph>"reverseStep"</codeph> — 将区域的边界绘制为水平线段。在第一个数据点，先绘制一条垂直边界线，然后绘制到第二个点的水平边界线，并对每个数据点重复此操作。</li>
  
   <li><codeph>"segment"</codeph> — 将区域边界绘制为连接的段，使这些边界线呈一定角度以便连接系列的每个数据点。</li>
  
   <li><codeph>"step"</codeph> — 将区域边界绘制为水平线段。在第一个数据点，先绘制一条水平边界线，然后绘制到第二个点的垂直边界线，并对每个数据点重复此操作。</li>
  
   <li><codeph>"vertical"</codeph> - 在第二个点的 x 坐标处仅绘制从第一个点的 y 坐标到第二个点的 y 坐标的边界。对每个数据点重复此操作。</li>
  </ul>
  
  </description>
<default>segment
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="Array">
<description>
  指定用于定义系列中每个项目填充内容的填充对象数组。它优先于 <codeph>fill</codeph> 样式属性。如果自定义方法是由 <codeph>fillFunction</codeph> 属性指定的，则它优先于此 Array。如果为每个项目提供的 Array 元素不足，则 Flex 将从 Array 的开始部分重复填充。
  
  <p>使用 CSS 设置此属性的值：
   <pre>
    AreaSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>使用 MXML 设置此属性的值：
   <pre>
    &lt;mx:AreaSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:AreaSeries>
   </pre>
  </p>
  
  <p>
  如果您指定了 <codeph>fills</codeph> 属性并希望包含 Legend 控件，则必须手动创建 Legend 控件，然后向其中添加 LegendItems。
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="areaStroke" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description> 
  设置区域的线条样式。您可以使用 Stroke 对象定义笔触。您可以通过 MXML 或使用样式来指定 itemRenderer。  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="areaRenderer" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列用于表示图表上填充区域的类。此类针对每个系列都进行一次实例化。用作 areaRenderer 的类应实现 IFlexDisplayObject、ISimpleStyleClient 和 IDataRenderer 接口。为描述区域数据的 AreaSeriesRenderData 分配 data 属性。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="areaFill" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description> 
  设置区域的填充。您可以指定实现 IFill 接口的对象，也可以指定代表纯颜色值的数字。您还可以使用 CSS 指定实心填充。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="adjustedRadius" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="Number">
<description>
  指定在突显或选择图表项目时其半径要增加的像素数目。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列用来在任何关联图例中呈示该系列标记的类。如果此样式为 <codeph>null</codeph>，则大多数系列将默认改为使用其 itemRenderer 作为图例标记外观。用作图例标记的类应实现 IFlexDisplayObject 接口、ISimpleStyleClient 和 IDataRenderer 接口（可选）。如果用作图例标记的类实现 IDataRenderer 接口，则为该 data 属性分配 LegendData 实例。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  表示系列将用来表示图表上单个项目的类工厂。针对图表中的每个元素实例化此类一次。用作 itemRenderer 的类将实现 IFlexDisplayObject、ISimpleStyleClient 和 IDataRenderer 接口。为 <codeph>data</codeph> 属性分配外观实例呈示的 chartItem。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  设置此数据系列的笔触样式。必须指定某个 Stroke 对象来定义笔触。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:AreaSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  设置此数据系列的填充。您可以指定实现 IFill 接口的对象，也可以指定代表纯颜色值的数字。您还可以使用 CSS 指定实心填充。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:AreaSeries&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:AreaSeries
    <strong>Properties</strong>
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    minField="null"
    sortOnXField="<i>true</i>"
    stacker="<i>No default</i>"
    stackTotals="<i>No default</i>"
    xField="null"
    verticalAxis="<i>No default</i>"
    yField="null"
 
    <strong>Styles</strong>
    adjustedRadius="2"
    areaFill="<i>IFill</i>"
    areaRenderer="<i>areaRenderer</i>"
    areaStroke="<i>Stroke</i>"
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    form="<i>segment|curve|horizontal|reverseStep|step|vertical</i>"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    radius="4"
    stroke="<i>IStroke; no default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IStackable2</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  定义 AreaChart 控件的数据系列。默认情况下，此类使用 AreaRenderer itemRenderer。此外，您也可以为数据系列定义不同的 itemRenderer。ItemRenderer 必须实现 IDataRenderer 接口。 
  
  </apiDesc><example conref="Line_AreaChartExample.mxml"><swfblock conref="../examples/Line_AreaChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#AreaChart"><linktext>mx.charts.AreaChart</linktext></link></related-links><apiConstructor id="mx.charts.series:AreaSeries:AreaSeries"><apiName>AreaSeries</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:AreaSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      自定义用于表示图表的项呈示器实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>正在创建的新项呈示器实例。
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>用于管理项呈示器实例的 InstanceCache。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      自定义用于表示图表的项呈示器实例。如果在呈示图表时需要新的项呈示器，则会自动调用此方法。您可以覆盖此方法以根据需要添加自己的自定义方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      
      通知系列数据提供程序中的基础数据已更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果为 <codeph>true</codeph>，则此方法将触发对更新方法的调用。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      通知系列数据提供程序中的基础数据已更改。此函数将在下次调用 <codeph>commitProperties()</codeph> 方法时触发对 <codeph>updateData()</codeph>、<codeph>updateMapping()</codeph>、<codeph>updateFilter()</codeph> 和 <codeph>updateTransform()</codeph> 方法的调用。如果为图表的任何元素分配了数据效果，则此方法还可触发显示和隐藏效果。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:protected:invalidateMapping"><apiName>invalidateMapping</apiName><shortdesc>
      
      通知系列从数据到数值的映射已发生更改，并且必须重新计算。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果为 <codeph>true</codeph>，则此方法将触发对更新方法的调用。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      通知系列从数据到数值的映射已发生更改，并且必须重新计算。调用此函数将在下次调用 <codeph>commitProperties()</codeph> 方法时调用 <codeph>updateMapping()</codeph>、<codeph>updateFilter()</codeph> 和 <codeph>updateTransform()</codeph> 方法。如果为图表的任何元素分配了数据效果，则此方法还可触发显示和隐藏效果。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:stackAll"><apiName>stackAll</apiName><shortdesc>
      
  堆叠系列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>表示新堆栈的系列中最大值和最小值的对象。	 
  
  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>stackedPosXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>包含系列应在其上堆叠的基础值。dictionary 中的键都是 x 值，值都是正的 x 值。
 
  </apiDesc></apiParam><apiParam><apiItemName>stackedNegXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>包含系列应在其上堆叠的基础值。dictionary 中的键都是 x 值，值都是负的 y 值。
  
  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable2</apiOperationClassifier><apiDesc>堆栈中的上一元素。例如，如果元素类型相同，您就可以访问此属性，以避免在呈示时执行重复工作。
  
  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
  堆叠系列。通常，系列通过实现 <codeph>updateData()</codeph> 方法，加载来自数据提供程序的数据。但是，堆叠的系列需要执行特殊操作，因为此类系列的值不一定存储在数据提供程序中。此类系列的值为存储在其数据提供程序中的任何值，与它堆叠在其上的对象加载的值之和。
  <p>自定义堆叠系列应加载来自数据提供程序的数据，并将其与存储在 dictionary 中的基值相加以获取应该呈示的实际值，最后使用新的和值替换 dictionary 中的值，从而实现 <codeph>stack()</codeph> 方法。</p>
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:AreaSeries:stack"><apiName>stack</apiName><shortdesc>
      
	  堆叠系列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>新堆叠的系列中的最大值。	 
	  
	  </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>stackedXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>包含系列应在其上堆叠的基础值。dictionary 中的键是 y 值，值是 x 值。
	  
	  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable</apiOperationClassifier><apiDesc>堆栈中的上一元素。例如，如果元素类型相同，您就可以访问此属性，以避免在呈示时执行重复工作。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  堆叠系列。通常，系列通过实现 <codeph>updateData()</codeph> 方法，加载来自数据提供程序的数据。但是，堆叠的系列需要执行特殊操作，因为此类系列的值不一定存储在数据提供程序中。此类系列的值为存储在其数据提供程序中的任何值，与它堆叠在其上的对象加载的值之和。
	  <p>自定义堆叠系列应加载来自数据提供程序的数据，并将其与存储在 dictionary 中的基值相加以获取应该呈示的实际值，最后使用新的和值替换 dictionary 中的值，从而实现 <codeph>stack()</codeph> 方法。</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:AreaSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     指定返回系列中当前图表项目的填充的方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     指定返回系列中当前图表项目的填充的方法。如果已设置此属性，则自定义填充函数返回的值将优先于 <codeph>fill</codeph> 和 <codeph>fills</codeph> 样式属性。但是，如果返回 null，则在该顺序中将优先选择 <codeph>fills</codeph> 和 <codeph>fill</codeph>。
       
     <p>自定义 <codeph>fillFunction</codeph> 包含以下签名：
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> 表示对要呈示的图表项目的引用。<codeph>index</codeph> 表示 renderData 的缓存中的图表项目的索引。这与图表的数据提供程序的索引不同，因为它是根据 x、y 和 z 值分类的。此函数将返回实现 <codeph>IFill</codeph> 接口的对象。
     </p>
      
     <p>自定义的 <codeph>fillFunction</codeph> 的使用示例是基于某些阈值返回填充。</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill 
     {
          var curItem:AreaSeriesItem = AreaSeriesItem(item);
          if (curItem.yNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
          <p>
      如果您为图表系列指定了自定义填充函数，并希望包含 Legend 控件，则必须手动创建 Legend 控件，然后向其中添加 LegendItems。
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      为 x 轴上的项定义标签、刻度线和数据位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      为 x 轴上的项定义标签、刻度线和数据位置。使用 LinearAxis 类或 CategoryAxis 类可以设置 horizontalAxis 的属性，将其作为 MXML 中的子标签，或者在 ActionScript 中创建一个 LinearAxis 或 CategoryAxis 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      此系列用于表示各项目的 ChartItem 的子类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      此系列用于表示各项目的 ChartItem 的子类型。如果需要通过子类存储项目中的其他信息，则它们可以覆盖并返回更特定的类
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:items:get"><apiName>items</apiName><shortdesc>
      
      获取系列中筛选之后所得的所有项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      获取系列中筛选之后所得的所有项目。
      <p>单个系列确定要返回的项目列表。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:minField:get"><apiName>minField</apiName><shortdesc>
      指定用于确定区域底部边界的 dataProvider 字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定用于确定区域底部边界的 dataProvider 字段。如果为 <codeph>null</codeph>，则区域基于范围的最小值（或最大值，如果字段值为负数）。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      此系列用于存储所有必须呈示的数据的 ChartRenderData 子类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      此系列用于存储所有必须呈示的数据的 ChartRenderData 子类型。如果子类需要存储其它信息以供显示，则可以覆盖和返回更特定化的类。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:sortOnXField:get"><apiName>sortOnXField</apiName><shortdesc> 
      在呈示之前请求从左到右对线段数据点进行排序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      在呈示之前请求从左到右对线段数据点进行排序。
           <p>默认情况下，LineSeries 从左到右显示点。将此属性设置为 <codeph>false</codeph> 可使项目按照在数据提供程序中的显示顺序呈示。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:stacker:get"><apiName>stacker</apiName><shortdesc>
      与此 AreaSeries 相关联的 StackedSeries。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:StackedSeries</apiValueClassifier></apiValueDef><apiDesc>
      与此 AreaSeries 相关联的 StackedSeries。栈式存储器管理系列的堆叠行为。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      为 y 轴上的项目定义标签、刻度线和数据位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      为 y 轴上的项目定义标签、刻度线和数据位置。使用 LinearAxis 类或 CategoryAxis 类可将 verticalAxis 的属性设置为 MXML 中的子标签，也可以在 ActionScript 中创建 LinearAxis 或 CategoryAxis 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:xField:get"><apiName>xField</apiName><shortdesc>
      指定用于确定水平轴上数据点位置的数据提供程序字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定用于确定水平轴上数据点位置的数据提供程序字段。如果为 <codeph>null</codeph>，则数据点将按照在数据提供程序中的显示顺序呈示。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:yField:get"><apiName>yField</apiName><shortdesc>
      指定用于确定垂直轴上数据点位置的数据提供程序字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定用于确定垂直轴上数据点位置的数据提供程序字段。如果为 <codeph>null</codeph>，则 AreaSeries 会假定 dataProvider 为数字 Array，并使用这些数字作为数据点的值。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:AreaSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.charts.series:AreaSeries:stackTotals:set"><apiName>stackTotals</apiName><shortdesc>
      系列的堆栈总数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      系列的堆栈总数。
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.series:PieSeries"><apiName>PieSeries</apiName><shortdesc>
  PieSeries 类用于定义 PieChart 控件的数据系列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="stroke" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  设置此数据系列的笔触样式。必须指定某个 Stroke 对象来定义笔触。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="clockwise,counterClockwise" inherit="no" name="renderDirection" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  设置呈示系列的方向。有效值为：
  <ul>
    <li><codeph>"clockwise"</codeph> - 以顺时针方向绘制楔形。</li>
  
    <li><codeph>"counterClockwise"</codeph> - 以逆时针方向绘制楔形。</li>
  </ul>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="radialStroke" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  指定用于绘制饼图楔形之间边框的线条样式。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,outside,callout,inside,insideWithCallout" inherit="no" name="labelPosition" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description> 
  指定如何呈示值标签。您可以通过 MXML 或使用样式来设置此属性。有效值为：
  <ul>
    <li><codeph>"none"</codeph> — 不绘制标签。</li>
  
    <li><codeph>"outside"</codeph> — 沿饼图边界绘制标签。</li>
  
    <li><codeph>"callout"</codeph> — 在饼图两侧的两个垂直堆栈中绘制标签。如果需要，可收缩饼图来为标签提供空间（请参阅 <codeph>maxLabelRadius</codeph>）。绘制从每个标签到相关楔形的主要线条。根据需要收缩标签以适合所提供的空间。</li>
  
    <li><codeph>"inside"</codeph> - 在图表内绘制标签，大约在每个楔形的 70％ 处居中显示。收缩标签以确保它们不会相互干扰。如果收缩后的标签低于 <codeph>insideLabelSizeLimitSize</codeph> 属性，则会将其删除。两个标签重叠时，Flex 将优先选择拥有较大片段的标签。</li>
  
    <li><codeph>"insideWithCallout"</codeph> - 在饼图内部绘制标签，但是，如果收缩后的标签低于可读大小，Flex 会将其转换为标注。</li>
  </ul>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="insideLabelSizeLimit" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  指定字体大小阈值（以磅为单位），小于该阈值的内部标签将被视为不合格。低于此阈值时，Flex 会根据 <codeph>labelPosition</codeph> 属性设置完全删除标签或将其显示为标注。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="innerRadius" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  从 0 到 1 的数字指定从系列中心到呈示的楔形内部边缘之间的距离，以分配给该系列的总半径百分比形式表示。此属性将直接分配给系列。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Array">
<description>
  指定用于呈示 PieChart 控件的每个楔形的填充对象数组。如果为每个片段提供的 Array 元素不足，则 Flex 将从 Array 的开始处重复填充。如果使用 <codeph>fillFunction</codeph> 属性指定方法，则该方法设置的值优先于此 Array。
  
  <p>使用 CSS 设置此属性的值：
   <pre>
    PieSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>使用 MXML 设置此属性的值：
   <pre>
    &lt;mx:PieSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:PieSeries>
   </pre>
  </p>
  
  <p>
  如果您指定了 <codeph>fills</codeph> 属性并希望包含 Legend 控件，则必须手动创建 Legend 控件，然后向其中添加 LegendItems。
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="calloutStroke" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  指定绘制到标注的线条时所用的线条样式。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="calloutGap" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  指定呈示标注时在饼图边缘和标签之间插入的空间（以像素为单位）。
  
  </description>
<default>10
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  容器内文本的对齐方式。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数控件的默认值都为 <codeph>left</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>。对于这些组件，只有将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Boolean">
<description>
  一个布尔值，表示是启用 (<codeph>true</codeph>) 还是禁用 (<codeph>false</codeph>) 字距调整。字距调整会调整某些字符对之间的间隔以提高可读性，并应只在必要时（例如使用大字体标题时）使用。仅嵌入的 FlashType 字体支持字距调整。某些字体（如宋体）和等宽字体（如 Courier New）不支持字距调整。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"bold"</codeph>。对于 LegendItem，默认为 <codeph>"bold"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>thickness</codeph> 属性。此属性指定字型边缘的粗细。可能值为从 -200 到 200 之间的数字。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  文本的高度，以像素为单位。除 ColorPicker 控件之外，所有控件的默认值都为 10。ColorPicker 控件的默认值为 11。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>sharpness</codeph> 属性。此属性指定字型边缘的清晰度。可能值为从 -400 到 400 之间的数字。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>gridFitType</codeph> 属性。可能值为 <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>)、<codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) 和<codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>)。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="String">
<description>
  设置内部 TextField 的 <codeph>antiAliasType</codeph> 属性。可能值为 <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) 和 <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>)。 
  
  <p>默认值为 <codeph>"advanced"</codeph>。如果您使用的是嵌入的 FlashType 字体，此设置将启用 FlashType 呈示器。设置为 <codeph>"normal"</codeph> 可禁用 FlashType 呈示器。</p>
  
  <p>此样式对系统字体不起作用。</p>
  
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="uint">
<description>
  禁用时组件中文本的颜色。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列用来在任何关联图例中呈示该系列标记的类。如果此样式为 <codeph>null</codeph>，则大多数系列将默认改为使用其 itemRenderer 作为图例标记外观。用作图例标记的类应实现 IFlexDisplayObject 接口、ISimpleStyleClient 和 IDataRenderer 接口（可选）。如果用作图例标记的类实现 IDataRenderer 接口，则为该 data 属性分配 LegendData 实例。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:PieSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  表示系列将用来表示图表上单个项目的类工厂。针对图表中的每个元素实例化此类一次。用作 itemRenderer 的类将实现 IFlexDisplayObject、ISimpleStyleClient 和 IDataRenderer 接口。为 <codeph>data</codeph> 属性分配外观实例呈示的 chartItem。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:PieSeries&gt;</code> tag inherits all the properties
  of its parent classes, and the following properties:</p>
  
  <pre>
  &lt;mx:PieSeries
    <strong>Properties</strong>
    angularAxis=""
    explodeRadius="0"
    field="null"
    fillFunction="<i>Internal fill function</i>"
    itemType="<i>No default</i>"
    labelFunction="<i>No default</i>"
    labelField="<i>No default</i>"
    maxLabelRadius="0.6" 
    nameField="null"
    outerRadius="1"
    perWedgeExplodeRadius="<i>Array, no default</i>"
    renderDataType="<i>No default</i>"
    reserveExplodeRadius="0"
    startAngle="0"
 
    <strong>Styles</strong>
    calloutGap="10"
    calloutStroke="<i>IStroke; no default</i>"
    fills="<i>IFill; no default</i>"
    fontSize="10"
    innerRadius="0"
    insideLabelSizeLimit="9"
    itemRenderer="<i>No default</i>"
    labelPosition="none|callout|inside|insideWithCallout|outside"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    radialStroke="<i>IStroke; no default</i>"
    renderDirection="clockwise|counterClockwise"
    stroke="<i>IStroke; no default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  PieSeries 类用于定义 PieChart 控件的数据系列。默认项呈示器是 WedgeItemRenderer 类。此外，您也可以为此数据系列定义 itemRenderer。ItemRenderer 必须实现 IDataRenderer 接口。
   </apiDesc><example conref="PieChartExample.mxml"><swfblock conref="../examples/PieChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#PieChart"><linktext>mx.charts.PieChart</linktext></link></related-links><apiConstructor id="mx.charts.series:PieSeries:PieSeries"><apiName>PieSeries</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:PieSeries:beginInterpolation"><apiName>beginInterpolation</apiName><shortdesc>
      
      此方法由 SeriesInterpolate 效果调用，用以启动 interpolation 效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>系列执行 interpolation 所需的数据。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>sourceRenderData</apiItemName><apiType value="Object"/><apiDesc>系列要进行插补的源数据。
     
      </apiDesc></apiParam><apiParam><apiItemName>destRenderData</apiItemName><apiType value="Object"/><apiDesc>系列要进行插补的目标数据。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      此方法由 SeriesInterpolate 效果调用，用以启动 interpolation 效果。此效果传入源数据和目标数据，以便系列在二者之间进行插补。此效果将该方法的返回值重复传递给系列的 <codeph>interpolate()</codeph> 方法，以改进呈示此效果期间的动画效果。此系列计算执行 interpolation 所需的数据，并在此方法中将其返回。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
	  
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.series:PieSeries:dataToLocal"><apiName>dataToLocal</apiName><shortdesc>
      
      
      将数据值元组转换为屏幕上的 x-y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>相对于图表的坐标。
      
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>dataValues</apiItemName><apiType value="restParam"/><apiDesc>要转换为坐标的数据值。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      将数据值元组转换为屏幕上的 x-y 坐标。调用此函数可借助单个元素使用的转换将数据转换到屏幕上。例如，要为图表的数据区域创建自定义加亮效果，则可以使用此函数来确定相关区域的屏幕上坐标。
      
      <p>对于笛卡尔图表元素，通常需要传递两个值。第一个值映射到水平轴，第二个值映到垂直轴。</p>
      
      <p>对于极性图表，第一个值映射到角度轴，第二个值映射到半径轴。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:getElementBounds"><apiName>getElementBounds</apiName><shortdesc>
      
      填充由该系列生成 renderData 结构的 elementBounds、bounds 和 visibleBounds 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderData</apiItemName><apiType value="Object"/><apiDesc>此系列生成的结构。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      填充由该系列生成的 renderData 结构的 <codeph>elementBounds</codeph>、<codeph>bounds</codeph> 和 <codeph>visibleBounds</codeph> 属性。效果类调用此方法来填充这些字段，用于实现各种效果类型。仅当被请求时，派生的类才应该实现此方法，以生成系列项目的绑定。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:protected:getMissingInterpolationValues"><apiName>getMissingInterpolationValues</apiName><shortdesc> 
      
      在 interpolation 结构中填充缺失值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sourceProps</apiItemName><apiType value="Object"/><apiDesc>包含为特定项目插补的源值的对象。此方法退出时，该对象中的所有属性都应该具有 <codeph>NaN</codeph> 以外的值。
     
      </apiDesc></apiParam><apiParam><apiItemName>srcCache</apiItemName><apiType value="Array"/><apiDesc>要进行插补的源图表项目 Array。
     
      </apiDesc></apiParam><apiParam><apiItemName>destProps</apiItemName><apiType value="Object"/><apiDesc>包含为特定项目插补的目标值的对象。此方法退出时，该 Object 中的所有属性都应该具有 <codeph>NaN</codeph> 以外的值。
     
      </apiDesc></apiParam><apiParam><apiItemName>destCache</apiItemName><apiType value="Array"/><apiDesc>要进行插补的目标图表项目 Array。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>缓存中正在进行填充操作的项目的索引。  
     
      </apiDesc></apiParam><apiParam><apiItemName>customData</apiItemName><apiType value="Object"/><apiDesc>由系列传递到 <codeph>initializeInterpolationData()</codeph> 方法中的数据。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      
      在 interpolation 结构中填充缺失值。当系列调用 <codeph>initializeInterpolationData()</codeph> 方法时，会为 interpolation 传递源值和目标值数组。如果其中一个数组不完整，则此系列必须为 interpolation 提供“适当的”占位符值。这些占位符值是特定于系列类型确定的。系列扩展者应覆盖此方法，以提供上述占位符值。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:interpolate"><apiName>interpolate</apiName><shortdesc>
      
      此方法由 SeriesInterpolate 效果调用，用于改进 interpolation。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>interpolationValues</apiItemName><apiType value="Array"/><apiDesc>一个从 0 到 1 的数值 Array，其中的第 <i>n</i> 个数值表示数据系列中第 <i>n</i> 个值在起始值与结束值之间的插入位置的百分比。
     
      </apiDesc></apiParam><apiParam><apiItemName>interpolationData</apiItemName><apiType value="Object"/><apiDesc>从 <codeph>beginInterpolation()</codeph> 方法返回的数据。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      此方法由 SeriesInterpolate 效果调用，用于改进 interpolation。在 interpolation 完成之前，该效果每帧对其调用一次。此系列负责使用参数来呈示插入的值。默认情况下，系列假定 <codeph>interpolationData</codeph> 是由 <codeph>initializeInterpolationData()</codeph> 方法返回的数据结构，并将其传递给 <codeph>applyInterpolation()</codeph> 方法。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:localToData"><apiName>localToData</apiName><shortdesc>
      
      
      将屏幕上的坐标转换成数据值元组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>数据值的元组。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>v</apiItemName><apiType value="flash.geom:Point"/><apiDesc>要转换的点。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      将屏幕上的坐标转换成数据值元组。调用此函数可确定屏幕上的特定点代表哪些数据值。
      <p>各个图表类型可确定发生此转换的方式。该点应随图表的坐标空间而转移。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:PieSeries:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:PieSeries:maxLabelRadius"><apiName>maxLabelRadius</apiName><shortdesc>
      可以分配给标签的 PieSeries 半径最大量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0.6</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      可以分配给标签的 PieSeries 半径最大量。仅当系列呈示标注标签时，此值才可用。
      
      <p>呈示标注标签时，PieSeries 将缩短楔形的半径以便为沿侧面显示的标签提供空间。分配给标签的空间量达到此限制后，系列将开始缩短标签的大小以使其保持在此大小范围内。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:angularAxis:get"><apiName>angularAxis</apiName><shortdesc>
      用于将数据值映射到 0 与 2 PI 之间的某个角度的轴对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      用于将数据值映射到 0 与 2 PI 之间的某个角度的轴对象。默认情况下，该对象是一个线性轴，其 <codeph>autoAdjust</codeph> 属性设置为 <codeph>false</codeph>。因此，数据值会在图表周围均匀映射。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:explodeRadius:get"><apiName>explodeRadius</apiName><shortdesc>
      从 0 到 1 的数字，指定按整个半径的百分比，饼图系列的所有楔形应从图表中心展开多远。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      从 0 到 1 的数字，指定按整个半径的百分比，饼图系列的所有楔形应从图表中心展开多远。 
      
      <p>此值表示统一展开图饼系列中的所有楔形。您可以通过 <codeph>perWedgeExplodeRadius</codeph> 属性设置各楔形的值。</p>
      
      <p>任意一个楔形的展开半径都是 <codeph>explodeRadius</codeph> 属性的值与其在 <codeph>perWedgeExplodeRadius</codeph> Array 中的值之和。</p>
      
      <p>为了保证移出楔形后饼图系列仍位于其包含的图表范围内，饼图系列可能需要收缩饼图的总半径。如果在运行时动态移出楔形，则整个饼图半径都会收缩。为避免此影响，您可以通过将 <codeph>reserveExplodeRadius</codeph> 属性设置为计划在运行时设置的最大展开半径，以“保存”空间并收缩最初的总半径。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:field:get"><apiName>field</apiName><shortdesc>
      指定用于确定 PieChart 控件每个楔形的数据的数据提供程序字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定用于确定 PieChart 控件每个楔形的数据的数据提供程序字段。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     指定返回系列中当前图表项目的填充的方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     指定返回系列中当前图表项目的填充的方法。如果设置了此属性，则自定义填充函数的返回值将优先于 <codeph>fills</codeph> 样式属性。但是，如果返回 null，则优先选择 <codeph>fills</codeph>。
     
     <p>自定义 <codeph>fillFunction</codeph> 包含以下签名：
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> 表示对要呈示的图表项目的引用。<codeph>index</codeph> 表示 renderData 的缓存中的图表项目的索引。这与图表的数据提供程序的索引不同，因为后者是基于 x、y 和 z 值进行排序的。此函数将返回实现 <codeph>IFill</codeph> 接口的对象。
     </p>
      
     <p>自定义的 <codeph>fillFunction</codeph> 的使用示例是基于某些阈值返回填充。</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill {
          var curItem:PieSeriesItem = PieSeriesItem(item);
          if (curItem.number > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
       
     <p>
      如果您为图表系列指定了自定义填充函数，并希望包含 Legend 控件，则必须手动创建 Legend 控件，然后向其中添加 LegendItems。
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      此系列用于表示各项目的 ChartItem 的子类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      此系列用于表示各项目的 ChartItem 的子类型。如果子类需要在项目中存储其它信息，则可以覆盖和返回更特定化的类。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:items:get"><apiName>items</apiName><shortdesc>
      
      获取系列中筛选之后所得的所有项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      获取系列中筛选之后所得的所有项目。
      <p>单个系列确定要返回的项目列表。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:labelField:get"><apiName>labelField</apiName><shortdesc>
     指定了 labelFunction 时，其值显示为“忽略标签”的数据提供程序中字段的名称。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
     指定了 labelFunction 时，其值显示为“忽略标签”的数据提供程序中字段的名称。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      指定用于呈示 PieSeries 的每个标签的回调函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      指定用于呈示 PieSeries 的每个标签的回调函数。回调函数具有以下格式：
      <pre>
      <i>function_name</i>(<i>data</i>:Object, <i>field</i>:String, <i>index</i>:Number, <i>percentValue</i>:Number):String { ... }
      </pre>
     
      <codeph>data</codeph> Object 是要呈示的 dataProvider 项目。<codeph>field</codeph> String 是要呈示的数据中字段的名称。<codeph>index</codeph> Number 是要呈示的项目的原始 dataProvider 中的索引。<codeph>percent</codeph> Number 是此项目表示的总数的百分比。此函数将返回一个 String，表示此项目的标签。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:nameField:get"><apiName>nameField</apiName><shortdesc>
      指定用于确定 PieChart 控件的每个楔形名称的数据提供程序字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定用于确定 PieChart 控件的每个楔形名称的数据提供程序字段。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:outerRadius:get"><apiName>outerRadius</apiName><shortdesc>
      呈示系列内容时，用于 PieSeries 的整个可用空间的百分比。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      呈示系列内容时，用于 PieSeries 的整个可用空间的百分比。此值由所含图表管理，并且不应直接分配。
      <p>此值的范围为从 0 到 1。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:perWedgeExplodeRadius:get"><apiName>perWedgeExplodeRadius</apiName><shortdesc>
      从 0 到 1 的数字 Array，指定从图表中心到饼图系列的每个楔形应展开的距离，以总半径的百分比形式表示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      从 0 到 1 的数字 Array，指定从图表中心到饼图系列的每个楔形应展开的距离，以总半径的百分比形式表示。 
      
      <p>此 Array 中的第 <i>n</i> 个值与第 <i>n</i> 个饼图楔形对应。例如，要移出第三个楔形的一半，您可以分配 <codeph>perWedgeExplodeRadius = [ 0, 0, 50];</codeph>。</p>
      
      <p><codeph>null</codeph> 或 Array 中的丢失值将被视为 0。</p>
      
      <p>为了保证移出楔形后饼图系列仍位于其包含的图表范围内，饼图系列可能需要收缩饼图的总半径。</p>
           
      <p>如果在运行时动态移出楔形，则整个饼图半径都会收缩。为避免此影响，您可以通过将 <codeph>reserveExplodeRadius</codeph> 属性设置为计划在运行时设置的最大展开半径，以“保存”空间并收缩最初的总半径。</p>
      
      <p>将 <codeph>perWedgeExplodeRadius</codeph> Array 中单个楔形的值与系列的 <codeph>explodeRadius</codeph> 属性值相加以计算任何给定楔形的总展开半径。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      此系列用于存储所有必须呈示的数据的 ChartRenderData 子类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      此系列用于存储所有必须呈示的数据的 ChartRenderData 子类型。如果子类需要存储其它信息以供显示，则可以覆盖和返回更特定化的类。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:reserveExplodeRadius:get"><apiName>reserveExplodeRadius</apiName><shortdesc>
      从 0 到 1 的数字，指定应保留的饼图系列总半径的大小以在运行时展开楔形。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      从 0 到 1 的数字，指定应保留的饼图系列总半径的大小以在运行时展开楔形。展开饼图楔形时，系列必须收缩饼图的总半径以确保不会超出其所含图表的范围。因此，如果开发人员在运行时更改楔形的展开值，则可以有效收缩所有楔形，而不会出现所需的移出单个楔形的效果。为避免这种情况，请将 <codeph>reserveExplodeRadius</codeph> 设置为计划在运行时展开任意楔形的最大值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:startAngle:get"><apiName>startAngle</apiName><shortdesc>
      指定 PieChart 控件第一个片段的起始角度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      指定 PieChart 控件第一个片段的起始角度。默认值为 0，水平位于 PieChart 控件的右侧。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:PieSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.series:BarSeries"><apiName>BarSeries</apiName><shortdesc>
  定义 BarChart 控件的数据系列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="labelSizeLimit" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  指定字体大小阈值（以磅为单位），小于该阈值的标签将被视为不合格。小于此阈值，Flex 将截断标签。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,outside,inside" inherit="no" name="labelPosition" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
 确定标签的位置，可能值为 <codeph>"none"</codeph>、<codeph>"outside"</codeph> 和 <codeph>"inside"</codeph>。
 
 </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="labelClass" owner="mx.charts.series:BarSeries" playerVersion="Flash10.2" type="Class">
<description>
  由此组件用来呈示标签的类。
   <p>可以将此类设置为 mx.controls.Label 类或 spark.components.Label 类。</p>
   </description>
<default>spark.components.Label
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="labelAlign" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
 确定标签的对齐方式。仅当 <codeph>labelPostion</codeph> 为 <codeph>inside</codeph> 时才考虑使用。可能值为 <codeph>center</codeph>、<codeph>left</codeph> 和 <codeph>right</codeph>。
 
 </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="mx.graphics.IFill" inherit="no" name="fills" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Array">
<description>
  指定用于定义系列中每个项目填充内容的填充对象数组。它优先于 <codeph>fill</codeph> 样式属性。如果自定义方法是由 <codeph>fillFunction</codeph> 属性指定的，则它优先于此 Array。如果为每个项目提供的 Array 元素不足，则 Flex 将从 Array 的开始部分重复填充。
  
  <p>使用 CSS 设置此属性的值：
   <pre>
    BarSeries {
      fills:#CC66FF, #9966CC, #9999CC;
    }
   </pre>
  </p>
  
  <p>使用 MXML 设置此属性的值：
   <pre>
    &lt;mx:BarSeries ... >
     &lt;mx:fills>
      &lt;mx:SolidColor color="0xCC66FF"/>
      &lt;mx:SolidColor color="0x9966CC"/>
      &lt;mx:SolidColor color="0x9999CC"/>
     &lt;/mx:fills>
    &lt;/mx:BarSeries>
   </pre>
  </p>
  
  <p>
  如果您指定了 <codeph>fills</codeph> 属性并希望包含 Legend 控件，则必须手动创建 Legend 控件，然后向其中添加 LegendItems。
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  容器内文本的对齐方式。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数控件的默认值都为 <codeph>left</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>。对于这些组件，只有将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Boolean">
<description>
  一个布尔值，表示是启用 (<codeph>true</codeph>) 还是禁用 (<codeph>false</codeph>) 字距调整。字距调整会调整某些字符对之间的间隔以提高可读性，并应只在必要时（例如使用大字体标题时）使用。仅嵌入的 FlashType 字体支持字距调整。某些字体（如宋体）和等宽字体（如 Courier New）不支持字距调整。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"bold"</codeph>。对于 LegendItem，默认为 <codeph>"bold"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>thickness</codeph> 属性。此属性指定字型边缘的粗细。可能值为从 -200 到 200 之间的数字。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  文本的高度，以像素为单位。除 ColorPicker 控件之外，所有控件的默认值都为 10。ColorPicker 控件的默认值为 11。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>sharpness</codeph> 属性。此属性指定字型边缘的清晰度。可能值为从 -400 到 400 之间的数字。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>gridFitType</codeph> 属性。可能值为 <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>)、<codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) 和<codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>)。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="String">
<description>
  设置内部 TextField 的 <codeph>antiAliasType</codeph> 属性。可能值为 <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) 和 <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>)。 
  
  <p>默认值为 <codeph>"advanced"</codeph>。如果您使用的是嵌入的 FlashType 字体，此设置将启用 FlashType 呈示器。设置为 <codeph>"normal"</codeph> 可禁用 FlashType 呈示器。</p>
  
  <p>此样式对系统字体不起作用。</p>
  
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="uint">
<description>
  禁用时组件中文本的颜色。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列用来在任何关联图例中呈示该系列标记的类。如果此样式为 <codeph>null</codeph>，则大多数系列将默认改为使用其 itemRenderer 作为图例标记外观。用作图例标记的类应实现 IFlexDisplayObject 接口、ISimpleStyleClient 和 IDataRenderer 接口（可选）。如果用作图例标记的类实现 IDataRenderer 接口，则为该 data 属性分配 LegendData 实例。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  表示系列将用来表示图表上单个项目的类工厂。针对图表中的每个元素实例化此类一次。用作 itemRenderer 的类将实现 IFlexDisplayObject、ISimpleStyleClient 和 IDataRenderer 接口。为 <codeph>data</codeph> 属性分配外观实例呈示的 chartItem。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  设置此数据系列的笔触样式。必须指定某个 Stroke 对象来定义笔触。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.series:BarSeries" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  设置此数据系列的填充。您可以指定实现 IFill 接口的对象，也可以指定代表纯颜色值的数字。您还可以使用 CSS 指定实心填充。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:BarSeries&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:BarSeries
    <strong>Properties</strong>
    barWidthRatio=".65"
    fillFunction="<i>Internal fill function</i>"
    horizontalAxis="<i>No default</i>"
    labelField="<i>No default</i>"
    labelFunction="<i>No default</i>"
    maxBarWidth="<i>No default</i>"
    minField="null"
    offset="<i>No default</i>"
    stacker="<i>No default</i>"
    stackTotals="<i>No default</i>"
    verticalAxis="<i>No default</i>" 
    xField="null"
    yField="null"
  
    <strong>Styles</strong>
    fill="<i>IFill; no default</i>"
    fills="<i>IFill; no default</i>"
    fontFamily="Verdana"
    fontSize="10"
    fontStyle="italic|normal"
    fontWeight="bold|normal"
    labelAlign="center|left|right"
    labelPosition="none|inside|outside"
    labelSizeLimit="9"
    itemRenderer="<i>itemRenderer</i>"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    stroke="<i>IStroke; no default</i>"
    textDecoration="underline|none"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IStackable2</apiBaseInterface><apiBaseInterface>mx.charts.chartClasses:IBar</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  定义 BarChart 控件的数据系列。默认情况下，此类使用 BoxItemRenderer 类。此外，您也可以为此数据系列定义 itemRenderer。ItemRenderer 必须实现 IDataRenderer 接口。 
   </apiDesc><example conref="Column_BarChartExample.mxml"><swfblock conref="../examples/Column_BarChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#BarChart"><linktext>mx.charts.BarChart</linktext></link></related-links><apiConstructor id="mx.charts.series:BarSeries:BarSeries"><apiName>BarSeries</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.series:BarSeries:protected:applyItemRendererProperties"><apiName>applyItemRendererProperties</apiName><shortdesc>
      自定义用于表示图表的项呈示器实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>instance</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>正在创建的新项呈示器实例。
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiOperationClassifier>mx.charts.chartClasses:InstanceCache</apiOperationClassifier><apiDesc>要用于管理项呈示器实例的 InstanceCache。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      自定义用于表示图表的项呈示器实例。如果在呈示图表时需要新的项呈示器，则会自动调用此方法。您可以覆盖此方法以根据需要添加自己的自定义方法。
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.series:BarSeries:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      
      通知系列数据提供程序中的基础数据已更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果为 <codeph>true</codeph>，则此方法将触发对更新方法的调用。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      通知系列数据提供程序中的基础数据已更改。此函数将在下次调用 <codeph>commitProperties()</codeph> 方法时触发对 <codeph>updateData()</codeph>、<codeph>updateMapping()</codeph>、<codeph>updateFilter()</codeph> 和 <codeph>updateTransform()</codeph> 方法的调用。如果为图表的任何元素分配了数据效果，则此方法还可触发显示和隐藏效果。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:protected:invalidateMapping"><apiName>invalidateMapping</apiName><shortdesc>
      
      通知系列从数据到数值的映射已发生更改，并且必须重新计算。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果为 <codeph>true</codeph>，则此方法将触发对更新方法的调用。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      通知系列从数据到数值的映射已发生更改，并且必须重新计算。调用此函数将在下次调用 <codeph>commitProperties()</codeph> 方法时调用 <codeph>updateMapping()</codeph>、<codeph>updateFilter()</codeph> 和 <codeph>updateTransform()</codeph> 方法。如果为图表的任何元素分配了数据效果，则此方法还可触发显示和隐藏效果。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:stackAll"><apiName>stackAll</apiName><shortdesc>
      堆叠系列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>表示新堆栈的系列中最大值和最小值的对象。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>stackedPosYValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>包含系列应在其上堆叠的基础值。词典中的键是 y 值，而值是正 x 值。
     
      </apiDesc></apiParam><apiParam><apiItemName>stackedNegYValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>包含系列应在其上堆叠的基础值。词典中的键是 y 值，而值是负 x 值。
      
      </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable2</apiOperationClassifier><apiDesc>堆栈中的上一元素。例如，如果元素类型相同，您就可以访问此属性，以避免在呈示时执行重复工作。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      堆叠系列。通常，系列通过实现 <codeph>updateData()</codeph> 方法，加载来自数据提供程序的数据。但是，堆叠的系列需要执行特殊操作，因为此类系列的值不一定存储在数据提供程序中。此类系列的值为存储在其数据提供程序中的任何值，与它堆叠在其上的对象加载的值之和。
      <p>自定义堆栈系列应通过以下方式来实现 <codeph>stackAll()</codeph> 方法：加载其数据提供程序之外的数据，将其添加到词典中存储的基本值以获得它们应呈示的实际值，并使用新的合计值替换词典中的值。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.series:BarSeries:stack"><apiName>stack</apiName><shortdesc>
      堆叠系列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>新堆叠的系列中的最大值。
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>stackedYValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>包含系列应在其上堆叠的基础值。词典中的键是 x 值，而值为 y 值。
      
      </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable</apiOperationClassifier><apiDesc>堆栈中的上一元素。例如，如果元素类型相同，您就可以访问此属性，以避免在呈示时执行重复工作。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      堆叠系列。通常，系列通过实现 <codeph>updateData()</codeph> 方法，加载来自数据提供程序的数据。但是，堆叠的系列需要执行特殊操作，因为此类系列的值不一定存储在数据提供程序中。此类系列的值为存储在其数据提供程序中的任何值，与它堆叠在其上的对象加载的值之和。
      <p>自定义堆叠系列应加载来自数据提供程序的数据，并将其与存储在 dictionary 中的基值相加以获取应该呈示的实际值，最后使用新的和值替换 dictionary 中的值，从而实现 <codeph>stack()</codeph> 方法。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.series:BarSeries:barWidthRatio:get"><apiName>barWidthRatio</apiName><shortdesc>
      指定相对于类别宽度呈示的条形图宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>.65
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定相对于类别宽度呈示的条形图宽度。值 1 表示占用整个空间，而值 .6 表示占用条形图可用空间的 60%。通常不直接设置此属性。条形图实际采用的宽度是 <codeph>barWidthRatio</codeph> 和 <codeph>maxbarWidth</codeph> 属性中的较小者。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:fillFunction:get"><apiName>fillFunction</apiName><shortdesc>
     指定返回系列中当前图表项目的填充的方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     指定返回系列中当前图表项目的填充的方法。如果已设置此属性，则自定义填充函数返回的值将优先于 <codeph>fill</codeph> 和 <codeph>fills</codeph> 样式属性。但是，如果返回 null，则在该顺序中将优先选择 <codeph>fills</codeph> 和 <codeph>fill</codeph>。  
     
     <p>自定义 <codeph>fillFunction</codeph> 包含以下签名：
      
     <pre>
     <i>function_name</i> (item:ChartItem, index:Number):IFill { ... }
     </pre>
     
     <codeph>item</codeph> 表示对要呈示的图表项目的引用。<codeph>index</codeph> 表示 renderData 的缓存中的图表项目的索引。这与图表的数据提供程序不同，因为它是根据 x、y 和 z 值分类的。此函数将返回实现 <codeph>IFill</codeph> 接口的对象。
     </p>
      
     <p>自定义的 <codeph>fillFunction</codeph> 的使用示例是基于某些阈值返回填充。</p>
       
     </apiDesc><example><pre>
     public function myFillFunction(item:ChartItem, index:Number):IFill
     {
          var curItem:BarSeriesItem = BarSeriesItem(item);
          if (curItem.xNumber > 10)
              return(new SolidColor(0x123456, .75));
          else
              return(new SolidColor(0x563412, .75));
     }
     </pre>
          <p>
      如果您为图表系列指定了自定义填充函数，并希望包含 Legend 控件，则必须手动创建 Legend 控件，然后向其中添加 LegendItems。
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      为 x 轴上的项定义标签、刻度线和数据位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      为 x 轴上的项定义标签、刻度线和数据位置。使用 LinearAxis 类或 CategoryAxis 类可以设置 horizontalAxis 的属性，将其作为 MXML 中的子标签，或者在 ActionScript 中创建一个 LinearAxis 或 CategoryAxis 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      此系列用于表示各项目的 ChartItem 的子类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      此系列用于表示各项目的 ChartItem 的子类型。如果子类需要在项目中存储其它信息，则可以覆盖和返回更特定化的类。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:items:get"><apiName>items</apiName><shortdesc>
      
      获取系列中筛选之后所得的所有项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      获取系列中筛选之后所得的所有项目。
      <p>单个系列确定要返回的项目列表。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:labelField:get"><apiName>labelField</apiName><shortdesc>
     其值显示为标签的数据提供程序中字段的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
     其值显示为标签的数据提供程序中字段的名称。如果已指定 <codeph>labelFunction</codeph> 属性，则将忽略此属性。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      指定用于呈示每个 Series 标签的回调函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      指定用于呈示每个 Series 标签的回调函数。labelFunction 必须包含以下签名：
          <pre>
     function <i>function_name</i>(<i>element</i>:ChartItem, <i>series</i>:Series):String { ... }
     </pre>
     
     <codeph><i>element</i></codeph> 是要呈示的图表项目。<codeph><i>series</i></codeph> 是图表项目所属的系列。返回的 String 是当前项目的标签。
          <p>自定义的 labelFunction 的使用示例如下：</p>
     <pre>
     private function myLabelFunction(element:ChartItem, series:Series):String {
          var item:BarSeriesItem = BarSeriesItem(element);
          var ser:BarSeries = BarSeries(series);
          return(item.item.Country + ":" +"" + ser.xField.toString() +":"+ item.xNumber);
     }
     </pre>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:maxBarWidth:get"><apiName>maxBarWidth</apiName><shortdesc>
      指定条形图的宽度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      指定条形图的宽度（以像素为单位）。条形图实际采用的宽度是此样式和 <codeph>barWidthRatio</codeph> 属性中的较小者。群集化的条形图在每个群集的条形图之间按比例分配空间。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:minField:get"><apiName>minField</apiName><shortdesc>
      指定用于确定每个条形图底部的数据提供程序字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定用于确定每个条形图底部的数据提供程序字段。如果为 <codeph>null</codeph>，则这些列基于范围的最小值（或最大值，如果字段值为负数）。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:offset:get"><apiName>offset</apiName><shortdesc>
      指定相对于类别宽度，条形图中心偏离可用空间中心的距离。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定相对于类别宽度，条形图中心偏离可用空间中心的距离。值的范围是介于 <codeph>-100</codeph> 和 <codeph>100</codeph> 之间的一个百分比。设置为 <codeph>0</codeph> 可使条形图在空间中居中显示。设置为 <codeph>-50</codeph> 可使列在可用空间开始处居中显示。通常不直接设置此属性。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      此系列用于存储所有必须呈示的数据的 ChartRenderData 子类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      此系列用于存储所有必须呈示的数据的 ChartRenderData 子类型。如果子类需要存储其它信息以供显示，则可以覆盖和返回更特定化的类。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:stacker:get"><apiName>stacker</apiName><shortdesc>
      与此 BarSeries 相关联的 StackedSeries。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:StackedSeries</apiValueClassifier></apiValueDef><apiDesc>
      与此 BarSeries 相关联的 StackedSeries。栈式存储器管理系列的堆叠行为。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      为 y 轴上的项目定义标签、刻度线和数据位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      为 y 轴上的项目定义标签、刻度线和数据位置。使用 LinearAxis 类或 CategoryAxis 类可将 verticalAxis 的属性设置为 MXML 中的子标签，也可以在 ActionScript 中创建 LinearAxis 或 CategoryAxis 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:xField:get"><apiName>xField</apiName><shortdesc>
      指定用于确定每个条形图顶部 x 轴位置的数据提供程序字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定用于确定每个条形图顶部 x 轴位置的数据提供程序字段。如果为 <codeph>null</codeph>，则 BarSeries 将假定数据提供程序为数字 Array，并使用这些数字作为值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:yField:get"><apiName>yField</apiName><shortdesc> 
      指定用于确定图表中每个条形图底部 y 轴位置的数据提供程序字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      指定用于确定图表中每个条形图底部 y 轴位置的数据提供程序字段。如果为 <codeph>null</codeph>，则 Flex 将按照数据在数据提供程序中的顺序排列这些条形图。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.series:BarSeries:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.charts.series:BarSeries:stackTotals:set"><apiName>stackTotals</apiName><shortdesc>
      系列的堆栈总数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      系列的堆栈总数。
           </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>