<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.charts.chartClasses"><apiName>mx.charts.chartClasses</apiName><apiDetail/><apiClassifier id="mx.charts.chartClasses:CartesianCanvasValue"><apiName>CartesianCanvasValue</apiName><shortdesc>
     定义对象在数据画布上的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
     定义对象在数据画布上的位置。此类包含数据坐标和可选偏移量，供 CartesianDataCanvas 类计算像素坐标。
     
     </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.chartClasses.xml#CartesianDataCanvas"><linktext>mx.charts.chartClasses.CartesianDataCanvas</linktext></link></related-links><apiConstructor id="mx.charts.chartClasses:CartesianCanvasValue:CartesianCanvasValue"><apiName>CartesianCanvasValue</apiName><shortdesc>
         构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>点的数据坐标。
         </apiDesc></apiParam><apiParam><apiItemName>offset</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>在 <codeph>value</codeph> 中指定的数据坐标偏移量，以像素为单位。
          
          </apiDesc></apiParam></apiConstructorDef><apiDesc>
         构造函数。
         
         </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.charts.chartClasses:IAxisRenderer"><apiName>IAxisRenderer</apiName><shortdesc>
  IAxis 类是用于定义图表轴的标签、刻度线和数据定位属性的抽象接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IAxis 类是用于定义图表轴的标签、刻度线和数据定位属性的抽象接口。
 
  <p>类实现此接口以提供范围定义功能。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#CategoryAxis"><linktext>mx.charts.CategoryAxis</linktext></link><link href="mx.charts.xml#LinearAxis"><linktext>mx.charts.LinearAxis</linktext></link></related-links><apiOperation id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:adjustGutters"><apiName>adjustGutters</apiName><shortdesc>
      调整其布局以适应传入的装订线。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>定义装订线尺寸（包括调整）的矩形。
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>workingGutters</apiItemName><apiType value="flash.geom:Rectangle"/><apiDesc>定义要调整的装订线。
     
      </apiDesc></apiParam><apiParam><apiItemName>adjustable</apiItemName><apiType value="Object"/><apiDesc>包含四个布尔值（left=true/false、top=true/false、right=true/false 和 bottom=true/false），指示轴呈示器是否可以进一步调整各条装订线。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      调整其布局以适应传入的装订线。此方法可由闭合图表调用，用以确定装订线的大小以及对应的数据区域。此方法使得 AxisRenderer 能够基于新装订线计算布局，并根据需要进行调整。如果给定装订线是可调整的，则轴呈示器对装订线可以向内（使装订线变大）调整，但不能向外（使装订线变小）调整。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:chartStateChanged"><apiName>chartStateChanged</apiName><shortdesc>
      封闭图表调用此方法来指示该图表的当前状态已更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>oldState</apiItemName><apiType value="uint"/><apiDesc>一个表示上一状态的整数。
     
      </apiDesc></apiParam><apiParam><apiItemName>v</apiItemName><apiType value="uint"/><apiDesc>一个表示新状态的整数。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      封闭图表调用此方法来指示该图表的当前状态已更改。实现元素应该响应此方法，以同步对由元素显示的数据所做的更改。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:axis:get"><apiName>axis</apiName><shortdesc>
      与此呈示器相关的轴对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      与此呈示器相关的轴对象。此属性由闭合图表管理，不应进行显式设置。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:gutters:get"><apiName>gutters</apiName><shortdesc>
      axisRenderer 与附近图表的边之间的距离。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      axisRenderer 与附近图表的边之间的距离。此属性由图表自动分配，不应直接分配。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:horizontal:get"><apiName>horizontal</apiName><shortdesc>
      如果将轴呈示器用作水平轴，则为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果将轴呈示器用作水平轴，则为 <codeph>true</codeph>。此属性由闭合 CartesianChart 管理，不应直接设置。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:minorTicks:get"><apiName>minorTicks</apiName><shortdesc>
      此属性包含一个数组，用于指定 Flex 沿轴绘制次刻度标记的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      此属性包含一个数组，用于指定 Flex 沿轴绘制次刻度标记的位置。每个数组元素都包含一个介于 0 和 1 之间的值。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:placement:get"><apiName>placement</apiName><shortdesc>
      用于显示 axisRenderer 的图表的边。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      用于显示 axisRenderer 的图表的边。垂直轴呈示器的合法值为 <codeph>"left"</codeph> 和 <codeph>"right"</codeph>，水平轴呈示器的合法值为 <codeph>"top"</codeph> 和 <codeph>"bottom"</codeph>。默认情况下，主轴放在左侧和顶部，辅轴放在右侧和底部。CartesianCharts 可自动保证将辅轴与主轴反向放置；例如，如果您已显式将主垂直轴放在了右侧，则辅垂直轴将自动变换到左侧。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:ticks:get"><apiName>ticks</apiName><shortdesc>
      包含一个数组，用于指定 Flex 沿轴绘制刻度线的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      包含一个数组，用于指定 Flex 沿轴绘制刻度线的位置。每个数组元素都包含一个介于 0 和 1 之间的值。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:heightLimit:set"><apiName>heightLimit</apiName><shortdesc>
      轴呈示器可在图表中占据的最大空间（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      轴呈示器可在图表中占据的最大空间（以像素为单位）。默认情况下，轴呈示器将在图表中占据尽可能多的空间，以便用完整大小显示其中所有的标签。如果设置了 heightLimit，AxisRenderer 将会缩短标签大小以保证轴的总大小低于 heightLimit。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxisRenderer:mx.charts.chartClasses:IAxisRenderer:otherAxes:set"><apiName>otherAxes</apiName><shortdesc>
      一个轴 Array。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Array"/></apiValueDef><apiDesc>
      一个轴 Array。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:IChartElement"><apiName>IChartElement</apiName><shortdesc>
  IChartElement 定义在图表的数据空间中显示 UIComponent 所需的一组基本属性和方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IChartElement 定义在图表的数据空间中显示 UIComponent 所需的一组基本属性和方法。分配到此系列的任何组件（图表的 backgroundElement 或者 annotationElement 数组）都必须实现此接口。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:chartStateChanged"><apiName>chartStateChanged</apiName><shortdesc>
      封闭图表调用此方法来指示该图表的当前状态已更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>oldState</apiItemName><apiType value="uint"/><apiDesc>一个表示上一状态的整数。
     
      </apiDesc></apiParam><apiParam><apiItemName>v</apiItemName><apiType value="uint"/><apiDesc>一个表示新状态的整数。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      封闭图表调用此方法来指示该图表的当前状态已更改。实现元素应该响应此方法，以同步对由元素显示的数据所做的更改。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:claimStyles"><apiName>claimStyles</apiName><shortdesc>
      图表调用此方法来允许相关元素声明其 chartSeriesStyles Array 中的样式选择器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>声明任何样式（例如 <codeph>firstAvailable</codeph> + <codeph>N</codeph>）之后 <i>firstAvailable</i> 的新值。
      
      </apiDesc><apiType value="uint"/></apiReturn><apiParam><apiItemName>styles</apiItemName><apiType value="Array"/><apiDesc>要声明的样式 Array。
     
      </apiDesc></apiParam><apiParam><apiItemName>firstAvailable</apiItemName><apiType value="uint"/><apiDesc>要声明的样式 Array 中的第一个样式选择器。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      图表调用此方法来允许相关元素声明其 chartSeriesStyles Array 中的样式选择器。每个图表都有一组相关的选择器，这些选择器被隐式分配给图表中包含的需要它们的元素中。实现此函数可以使元素根据需要“声明”该组中的元素。需要 <i>N</i> 个样式选择器的元素声明值介于 <codeph>styles[firstAvailable]</codeph> 和 <codeph>styles[firstAvailable + <i>N</i> - 1]</codeph> 之间。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:collectTransitions"><apiName>collectTransitions</apiName><shortdesc>
      封闭图表调用此方法来收集特定元素在图表状态发生更改时可能执行的任何过渡。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>chartState</apiItemName><apiType value="Number"/><apiDesc>图表执行新过渡时的状态。
     
      </apiDesc></apiParam><apiParam><apiItemName>transitions</apiItemName><apiType value="Array"/><apiDesc>要添加到图表要执行的过渡列表中的过渡 Array。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      封闭图表调用此方法来收集特定元素在图表状态发生更改时可能执行的任何过渡。图表将收集所有元素的过渡，并确保这些过渡并行执行。此图表等待所有过渡完成之后，才会进入另一个状态。实现器应将所有的必要过渡追加到过渡 Array 参数。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:describeData"><apiName>describeData</apiName><shortdesc>
      由具有控制地位的 DataTransform 调用，以获得由此 IChartElement 表示的数据描述。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>一个 Array，其中包含用于描述显示数据的 DataDescription 实例。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>确定从中获取数据描述的轴。
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>一个位域，指示特定轴需要关注 DataDescription 对象的哪些值。实现器通过仅计算必要字段即可实现优化。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      由具有控制地位的 DataTransform 调用，以获得由此 IChartElement 表示的数据描述。实现器填充并返回 mx.charts.chartClasses.DataDescription 对象 Array，以保证它们的数据能够按任一条轴进行正确显示，而这里的轴是根据所显示的数据（如最小值、最大值、间隔和单位大小）自动生成值的。多数元素类型都会返回包含一个 DataDescription 的 Array。聚合元素（如 BarSet 和 ColumnSet）可能会返回多个 DataDescription 实例，用于描述由其子元素显示的数据。调用此方法时，实现器会沿 <codeph>dimension</codeph> 参数说明的轴显示数据。对于所包含的图表支持的每条轴，都有可能调用此函数。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.charts.chartClasses.xml#DataDescription"><linktext>mx.charts.chartClasses.DataDescription</linktext></link><link href="mx.charts.chartClasses.xml#DataTransform"><linktext>mx.charts.chartClasses.DataTransform</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:findDataPoints"><apiName>findDataPoints</apiName><shortdesc>
      返回一个 HitData 对象，用于描述距离传递给方法的坐标位置最近的数据点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>描述 <codeph>sensitivity2</codeph> 像素内最近数据点的 HitData 对象。
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>关于 ChartBase 对象的 x 坐标。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>关于 ChartBase 对象的 y 坐标。
      
      </apiDesc></apiParam><apiParam><apiItemName>sensitivity2</apiItemName><apiType value="Number"/><apiDesc>距 x/y 坐标位置所示数据点的最大距离。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回一个 HitData 对象，用于描述距离传递给方法的坐标位置最近的数据点。<codeph>x</codeph> 和 <codeph>y</codeph> 参数应为元素坐标系中的值。寻找附近数据点的过程中，此方法遵守由 <codeph>sensitivity2</codeph> 参数指定的限制。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.charts.xml#HitData"><linktext>mx.charts.HitData</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:mappingChanged"><apiName>mappingChanged</apiName><shortdesc>
      向元素指示相关轴的数据映射已更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      向元素指示相关轴的数据映射已更改。实现器应处理缓存的数据并适当地进行重新显示。如果需要，相关联的 DataTransform 将自动调用此函数。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:labelContainer:get"><apiName>labelContainer</apiName><shortdesc>
      用于显示由此元素显示的标签的 DisplayObject。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      用于显示由此元素显示的标签的 DisplayObject。在多数情况下，在图表的数据区域中显示的标签显示在所有元素上方，而不是插入到数据中。如果正在实现的元素存在要显示的标签，则可以将其放置在 Sprite 对象中，并将其作为 <codeph>labelContainer</codeph> 属性的值返回。封闭图表将从所有封闭的元素中呈示 labelContainer，并将其放在数据区域中所有其他元素的上方。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:chartDataProvider:set"><apiName>chartDataProvider</apiName><shortdesc>
      分配给封闭图表的数据提供程序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Object"/></apiValueDef><apiDesc>
      分配给封闭图表的数据提供程序。必要时，元素类型可以选择从封闭图表中继承数据提供程序，或者允许开发人员专门为此元素指定数据提供程序。并非所有元素都必须由数据提供程序驱动。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IChartElement:mx.charts.chartClasses:IChartElement:dataTransform:set"><apiName>dataTransform</apiName><shortdesc>
      元素在数据和屏幕坐标之间进行映射使用的 DataTransform 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiValueClassifier>mx.charts.chartClasses:DataTransform</apiValueClassifier></apiValueDef><apiDesc>
      元素在数据和屏幕坐标之间进行映射使用的 DataTransform 对象。此属性由封闭图表分配。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:LegendData"><apiName>LegendData</apiName><shortdesc>
  LegendData 结构，供图表用于描述应显示在自动生成的图例中的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  LegendData 结构，供图表用于描述应显示在自动生成的图例中的项目。图表的 <codeph>legendData</codeph> 属性包含一个 LegendData 对象 Array，这些对象与图例中的每个项目对应。 
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:LegendData:LegendData"><apiName>LegendData</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  构造函数。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts.chartClasses:LegendData:aspectRatio"><apiName>aspectRatio</apiName><shortdesc>
	  确定图例标记的大小和位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  确定图例标记的大小和位置。如果设置了标记的大小，则 LegendItem 将确保标记的宽度和高度与此值相匹配。如果未设置 (<codeph>NaN</codeph>)，则图例项目将选择适当的默认宽度和高度。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:LegendData:element"><apiName>element</apiName><shortdesc>
	  生成此图例项目的图表项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.charts.chartClasses:IChartElement</apiValueClassifier></apiValueDef><apiDesc>
	  生成此图例项目的图表项目。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:LegendData:label"><apiName>label</apiName><shortdesc>
	  用于标识图例项目中显示的系列或项目的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  用于标识图例项目中显示的系列或项目的文本。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:LegendData:marker"><apiName>marker</apiName><shortdesc>
	  一个可视指示符，用于将图例项目与要显示的系列或项目关联起来。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:IFlexDisplayObject"/></apiValueDef><apiDesc>
	  一个可视指示符，用于将图例项目与要显示的系列或项目关联起来。此 DisplayObject 将作为子项添加到 LegendItem 中。 
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:InstanceCache"><apiName>InstanceCache</apiName><shortdesc>
  InstanceCache 是一个实用程序，用于控制一组（n 个）对象实例的创建和管理任务，其中 n 可以随意更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  InstanceCache 是一个实用程序，用于控制一组（<i>n</i> 个）对象实例的创建和管理任务，其中 <i>n</i> 可以随意更改。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:InstanceCache:InstanceCache"><apiName>InstanceCache</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="Object"/><apiDesc>要构建的对象的类型。可以是类也可以是 IFactory。
     
      </apiDesc></apiParam><apiParam><apiItemName>parent</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>可添加新实例的 DisplayObject（可选）。
     
      </apiDesc></apiParam><apiParam><apiItemName>insertPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>在父项的子列表中插入实例的位置。设置为 -1 表示将子项添加到子列表的末端。
     
      </apiDesc></apiParam><apiParam><apiItemName>moduleFactory</apiItemName><apiType value="mx.core:IFlexModuleFactory"/><apiData>null</apiData><apiDesc>上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts.chartClasses:InstanceCache:creationCallback"><apiName>creationCallback</apiName><shortdesc>
      创建新实例时调用的回调。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      创建新实例时调用的回调。此回调包含以下签名：
      <pre>
      function creationCallback(<i>newInstance</i>:Object, <i>cache</i>:InstanceCache):void;
      </pre>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:discard"><apiName>discard</apiName><shortdesc> 
      确定是否放弃不需要的实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef><apiDesc> 
      确定是否放弃不需要的实例。如果设置为 <codeph>true</codeph>，则当缓存计数减少时将放弃额外的元素。否则，额外的元素将保留在单独的缓存中，并在计数增加时重用。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:hide"><apiName>hide</apiName><shortdesc>
      确定是否应隐藏不需要的实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      确定是否应隐藏不需要的实例。如果为 <codeph>true</codeph>，则当缓存计数减少时将每个额外元素的 <codeph>visible</codeph> 设置为 <codeph>false</codeph>，当缓存计数增加时设置为 <codeph>true</codeph>。
      
      <p>此属性仅当类工厂生成 DisplayObjects 时相关。将其他类工厂类型的此属性设置为 <codeph>true</codeph> 将生成运行时错误。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:remove"><apiName>remove</apiName><shortdesc>
      确定是否应将不需要的实例从其父项中删除。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      确定是否应将不需要的实例从其父项中删除。如果为 <codeph>true</codeph>，则当缓存计数减少时，在每个额外元素的父项上调用 <codeph>removeChild()</codeph> 方法。
      
      <p>此属性仅当类工厂生成 DisplayObjects 时相关。将其他类工厂类型的此属性设置为 <codeph>true</codeph> 将生成运行时错误。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:count:get"><apiName>count</apiName><shortdesc>
      缓存中当前需要的项数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      缓存中当前需要的项数。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:factory:get"><apiName>factory</apiName><shortdesc>
      生成要缓存的对象类型的类工厂。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/></apiValueDef><apiDesc>
      生成要缓存的对象类型的类工厂。分配此项将放弃当前所有实例，并重新创建正确类型的新实例。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:format:get"><apiName>format</apiName><shortdesc>
      要应用到已创建的所有实例的 TextFormat。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.text:TextFormat"/></apiValueDef><apiDesc>
      要应用到已创建的所有实例的 TextFormat。如果设置此属性，则此格式将用作已创建的所有实例内容的当前格式和默认格式。此属性仅在类工厂生成 TextField 实例时相关。  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:instances:get"><apiName>instances</apiName><shortdesc>
      缓存的实例的 Array。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      缓存的实例的 Array。此 Array 中包含的实例数可能多于当前所需数目。您应遵循实例缓存的 <codeph>count</codeph> 属性而不是此 Array 的长度。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:properties:get"><apiName>properties</apiName><shortdesc>
      要分配给新实例的属性 hashmap。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      要分配给新实例的属性 hashmap。此 hashmap 中的每个键/值对都将分配到创建的各个新实例中。设置此属性后，属性 hashmap 将分配到现有的所有实例中。
      
      <p>hashmap 中的值不进行克隆，对象值由所有的实例共享。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:InstanceCache:insertPosition:set"><apiName>insertPosition</apiName><shortdesc> 
      实例在父项的子列表中的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="int"/></apiValueDef><apiDesc> 
      实例在父项的子列表中的位置。 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:CartesianTransform"><apiName>CartesianTransform</apiName><shortdesc>
  CartesianTransform 对象表示一组轴，用于实现数据值与 x/y 笛卡尔屏幕坐标之间的双向映射。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:DataTransform</apiBaseClassifier></apiClassifierDef><apiDesc>
  CartesianTransform 对象表示一组轴，用于实现数据值与 x/y 笛卡尔屏幕坐标之间的双向映射。
 
  <p>在应用程序中使用图表时，通常不需要与 CartesianTransform 对象交互。转换根据内置的图表类型自动创建并供其中包含的系列使用，以便将数据转换为呈示的坐标。</p> 
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:CartesianTransform:CartesianTransform"><apiName>CartesianTransform</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:CartesianTransform:invertTransform"><apiName>invertTransform</apiName><shortdesc> 
      将 DataTransform 坐标系中的 x 和 y 坐标转换成数据空间中的二维值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个包含转换后的值的 Array。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiType value="restParam"/><apiDesc>x 和 y 位置（按该顺序）。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      将 DataTransform 坐标系中的 x 和 y 坐标转换成数据空间中的二维值。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianTransform:transformCache"><apiName>transformCache</apiName><shortdesc>
      将一组表示数据的数值映射到屏幕坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>字段中包含数据值的对象数组。此函数还将在该数组中存储转换后的数值。
     
      </apiDesc></apiParam><apiParam><apiItemName>xField</apiItemName><apiType value="String"/><apiDesc>用于存储 x 轴的数据值的字段。
     
      </apiDesc></apiParam><apiParam><apiItemName>xConvertedField</apiItemName><apiType value="String"/><apiDesc>用于存储映射后的 x 屏幕坐标的字段。
     
      </apiDesc></apiParam><apiParam><apiItemName>yField</apiItemName><apiType value="String"/><apiDesc>用于存储 y 轴的数据值的字段。
     
      </apiDesc></apiParam><apiParam><apiItemName>yConvertedField</apiItemName><apiType value="String"/><apiDesc>用于存储映射后的 y 屏幕坐标的字段。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将一组表示数据的数值映射到屏幕坐标。此方法假设值都为数字，因此，必须使用 <codeph>mapCache()</codeph> 方法预先转换所有非数字的值。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:CartesianTransform:HORIZONTAL_AXIS"><apiName>HORIZONTAL_AXIS</apiName><shortdesc>
      一个表示水平轴的 String。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>h</apiData><apiType value="String"/></apiValueDef><apiDesc>
      一个表示水平轴的 String。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianTransform:VERTICAL_AXIS"><apiName>VERTICAL_AXIS</apiName><shortdesc>
      一个表示垂直轴的 String。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>v</apiData><apiType value="String"/></apiValueDef><apiDesc>
      一个表示垂直轴的 String。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianTransform:pixelHeight:set"><apiName>pixelHeight</apiName><shortdesc>
      CartesianTransform 表示的数据区域的高度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
      CartesianTransform 表示的数据区域的高度（以像素为单位）。包含的图表将在设置布局期间显式设置此属性。CartesianTransform 使用此属性将数据值映射到屏幕坐标。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianTransform:pixelWidth:set"><apiName>pixelWidth</apiName><shortdesc>
      CartesianTransform 表示的数据区域的宽度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
      CartesianTransform 表示的数据区域的宽度（以像素为单位）。包含的图表将在设置布局期间显式设置此属性。CartesianTransform 使用此属性将数据值映射到屏幕坐标。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:ChartState"><apiName>ChartState</apiName><shortdesc>
  描述图表的当前状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  描述图表的当前状态。系列实现可以检查 Chart.state 值，从而确定此图表是显示还是隐藏数据，以及响应后如何显示数据。
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.charts.chartClasses:ChartState:HIDING_DATA"><apiName>HIDING_DATA</apiName><shortdesc>
	  此图表当前正在运行过渡以隐藏旧图表数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  此图表当前正在运行过渡以隐藏旧图表数据。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartState:NONE"><apiName>NONE</apiName><shortdesc>
	  无状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  无状态。此图表仅显示其数据。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartState:PREPARING_TO_HIDE_DATA"><apiName>PREPARING_TO_HIDE_DATA</apiName><shortdesc>
	  此图表中的数据显示已更改，并将开始过渡以隐藏当前数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  此图表中的数据显示已更改，并将开始过渡以隐藏当前数据。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartState:PREPARING_TO_SHOW_DATA"><apiName>PREPARING_TO_SHOW_DATA</apiName><shortdesc>
	  此图表已完成所有隐藏旧数据的过渡，并准备运行显示新数据的过渡
	  
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  此图表已完成所有隐藏旧数据的过渡，并准备运行显示新数据的过渡
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartState:SHOWING_DATA"><apiName>SHOWING_DATA</apiName><shortdesc>
	  此图表当前正在运行过渡以显示新图表数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>4</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  此图表当前正在运行过渡以显示新图表数据。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:HLOCSeriesBase"><apiName>HLOCSeriesBase</apiName><shortdesc>
  HLOCSeriesBase 是 HLOCSeries 和 CandlestickSeries 这两种财务系列类型的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="legendMarkerRenderer" owner="mx.charts.chartClasses:HLOCSeriesBase" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  系列用来在任何关联图例中呈示该系列标记的类。如果此样式为 <codeph>null</codeph>，则大多数系列将默认改为使用其 itemRenderer 作为图例标记外观。用作图例标记的类应实现 IFlexDisplayObject 接口、ISimpleStyleClient 和 IDataRenderer 接口（可选）。如果用作图例标记的类实现 IDataRenderer 接口，则为该 data 属性分配 LegendData 实例。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemRenderer" owner="mx.charts.chartClasses:HLOCSeriesBase" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  表示系列将用来表示图表上单个项目的类工厂。针对图表中的每个元素实例化此类一次。用作 itemRenderer 的类将实现 IFlexDisplayObject、ISimpleStyleClient 和 IDataRenderer 接口。为 <codeph>data</codeph> 属性分配外观实例呈示的 chartItem。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IColumn</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  HLOCSeriesBase 是 HLOCSeries 和 CandlestickSeries 这两种财务系列类型的基类。与绘制打开值、关闭值、高值和低值图表相关的大部分行为都位于此类中。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:HLOCSeriesBase:HLOCSeriesBase"><apiName>HLOCSeriesBase</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:beginInterpolation"><apiName>beginInterpolation</apiName><shortdesc>
      
      此方法由 SeriesInterpolate 效果调用，用以启动 interpolation 效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>系列执行 interpolation 所需的数据。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>sourceRenderData</apiItemName><apiType value="Object"/><apiDesc>系列要进行插补的源数据。
     
      </apiDesc></apiParam><apiParam><apiItemName>destRenderData</apiItemName><apiType value="Object"/><apiDesc>系列要进行插补的目标数据。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      此方法由 SeriesInterpolate 效果调用，用以启动 interpolation 效果。此效果传入源数据和目标数据，以便系列在二者之间进行插补。此效果将该方法的返回值重复传递给系列的 <codeph>interpolate()</codeph> 方法，以改进呈示此效果期间的动画效果。此系列计算执行 interpolation 所需的数据，并在此方法中将其返回。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:describeData"><apiName>describeData</apiName><shortdesc>
      
      
      由具有控制地位的 DataTransform 调用，以获得由此 IChartElement 表示的数据描述。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个 Array，其中包含用于描述显示数据的 DataDescription 实例。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>确定从中获取数据描述的轴。
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>一个位域，指示特定轴需要关注 DataDescription 对象的哪些值。实现器通过仅计算必要字段即可实现优化。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      由具有控制地位的 DataTransform 调用，以获得由此 IChartElement 表示的数据描述。实现器填充并返回 mx.charts.chartClasses.DataDescription 对象 Array，以保证它们的数据能够按任一条轴进行正确显示，而这里的轴是根据所显示的数据（如最小值、最大值、间隔和单位大小）自动生成值的。多数元素类型都会返回包含一个 DataDescription 的 Array。聚合元素（如 BarSet 和 ColumnSet）可能会返回多个 DataDescription 实例，用于描述由其子元素显示的数据。调用此方法时，实现器会沿 <codeph>dimension</codeph> 参数说明的轴显示数据。对于所包含的图表支持的每条轴，都有可能调用此函数。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:formatDataTip"><apiName>formatDataTip</apiName><shortdesc> 
      生成适合显示为 DataTip 的 ChartItem 的文本说明。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>项目的 DataTip。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>hd</apiItemName><apiOperationClassifier>mx.charts:HitData</apiOperationClassifier><apiDesc>ChartItem 的 HitData。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      生成适合显示为 DataTip 的 ChartItem 的文本说明。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:getElementBounds"><apiName>getElementBounds</apiName><shortdesc>
      
      填充由该系列生成 renderData 结构的 elementBounds、bounds 和 visibleBounds 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderData</apiItemName><apiType value="Object"/><apiDesc>此系列生成的结构。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      填充由该系列生成的 renderData 结构的 <codeph>elementBounds</codeph>、<codeph>bounds</codeph> 和 <codeph>visibleBounds</codeph> 属性。效果类调用此方法来填充这些字段，用于实现各种效果类型。仅当被请求时，派生的类才应该实现此方法，以生成系列项目的绑定。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:getItemsInRegion"><apiName>getItemsInRegion</apiName><shortdesc>
      
      获取此系列矩形区域中的所有项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>位于指定矩形区域的 ChartItem 对象数组。
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>r</apiItemName><apiType value="flash.geom:Rectangle"/><apiDesc>定义区域的 Rectangle 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      获取此系列矩形区域中的所有项目。调用此函数以确定该系列特定矩形区域中包含的项目。
      <p>各系列都可确定其图表项目是否在其区域中。点应位于全局坐标空间内。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:getMissingInterpolationValues"><apiName>getMissingInterpolationValues</apiName><shortdesc>
      
      在 interpolation 结构中填充缺失值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sourceProps</apiItemName><apiType value="Object"/><apiDesc>包含为特定项目插补的源值的对象。此方法退出时，该对象中的所有属性都应该具有 <codeph>NaN</codeph> 以外的值。
     
      </apiDesc></apiParam><apiParam><apiItemName>srcCache</apiItemName><apiType value="Array"/><apiDesc>要进行插补的源图表项目 Array。
     
      </apiDesc></apiParam><apiParam><apiItemName>destProps</apiItemName><apiType value="Object"/><apiDesc>包含为特定项目插补的目标值的对象。此方法退出时，该 Object 中的所有属性都应该具有 <codeph>NaN</codeph> 以外的值。
     
      </apiDesc></apiParam><apiParam><apiItemName>destCache</apiItemName><apiType value="Array"/><apiDesc>要进行插补的目标图表项目 Array。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>缓存中正在进行填充操作的项目的索引。  
     
      </apiDesc></apiParam><apiParam><apiItemName>customData</apiItemName><apiType value="Object"/><apiDesc>由系列传递到 <codeph>initializeInterpolationData()</codeph> 方法中的数据。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      在 interpolation 结构中填充缺失值。当系列调用 <codeph>initializeInterpolationData()</codeph> 方法时，会为 interpolation 传递源值和目标值数组。如果其中一个数组不完整，则此系列必须为 interpolation 提供“适当的”占位符值。这些占位符值是特定于系列类型确定的。系列扩展者应覆盖此方法，以提供上述占位符值。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:styleChanged"><apiName>styleChanged</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:updateData"><apiName>updateData</apiName><shortdesc>
      
      当系列表示的基础数据发生更改，并且需要重新从数据提供程序加载时调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      当系列表示的基础数据发生更改，并且需要重新从数据提供程序加载时调用此方法。若要实现一个自定义系列类型，则应覆盖此方法，并加载从备用数据提供程序中呈示系列的必要数据。您还必须确保在子类中调用 <codeph>super.updateData()</codeph> 方法。通常不直接调用此方法，而是调用 Series 类的 <codeph>validateData()</codeph> 方法，从而保证您的数据已在给定点进行了更新。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:updateFilter"><apiName>updateFilter</apiName><shortdesc>
      
      当系列表示的基础数据需要根据由相关的数据转换轴表示的范围进行过滤时，调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      当系列表示的基础数据需要根据由相关的数据转换轴表示的范围进行过滤时，调用此方法。这适用于以下情况：基础数据发生更改；关联轴的范围发生更改。若要实现一个自定义系列类型，则应覆盖此方法，并使用由自身的关联数据转换管理的轴的 <codeph>filterCache()</codeph> 方法筛选出超出范围的数据。<codeph>filterCache()</codeph> 方法将所有超出范围的值转换为 <codeph>NaN</codeph>。您必须确保在子类中调用了 <codeph>super.updateFilter()</codeph> 方法。通常不直接调用此方法，如果需要保证您的数据已在给定点进行了筛选，则调用 Series 类的 <codeph>validateTransform()</codeph> 方法。通常情况下，您可以假定调用此方法之前已经调用了 <codeph>updateData()</codeph> 和 <codeph>updateMapping()</codeph> 方法（如有必要）。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:updateMapping"><apiName>updateMapping</apiName><shortdesc>
      
      当需要将此系列表示的基础数据映射到数字表示形式时调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      当需要将此系列表示的基础数据映射到数字表示形式时调用此方法。这适用于以下情况：基础数据发生更改；用于呈示系列的轴发生了某种相关更改。若要实现一个自定义系列，则应覆盖此方法，并使用由自身的关联数据转换管理的轴的 <codeph>mapCache()</codeph> 方法，将表示的数据转换为数值。您还必须确保在子类中调用了 <codeph>super.updateMapping()</codeph> 方法。通常不直接调用此方法，而是调用 Series 类的 <codeph>validateData()</codeph> 方法，从而保证您的数据已在给定点进行了映射。通常情况下，您可以假定调用此方法之前已经调用了 <codeph>updateData()</codeph> 方法（如有必要）。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:HLOCSeriesBase:protected:updateTransform"><apiName>updateTransform</apiName><shortdesc>
      
      当需要按关联数据转换的轴将由系列表示的基础数据转换为屏幕值时，调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      当需要按关联数据转换的轴将由系列表示的基础数据转换为屏幕值时，调用此方法。这适用于以下情况：基础数据发生更改；关联轴的范围发生更改；屏幕上的区域大小发生更改。若要实现一个自定义系列类型，则应覆盖此方法，并使用关联数据转换的 <codeph>transformCache()</codeph> 方法转换数据。您必须确保在子类中调用 <codeph>super.updateTransform()</codeph> 方法。通常不直接调用此方法，如果需要保证您的数据已在给定点进行了筛选，则调用 Series 类的 <codeph>valiateTransform()</codeph> 方法。通常情况下，您可以假定调用此方法之前，已经调用了 <codeph>updateData()</codeph>、<codeph>updateMapping()</codeph> 和 <codeph>updateFilter()</codeph> 方法（如有必要）。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:closeField:get"><apiName>closeField</apiName><shortdesc>
      指定确定元素结束值在 y 轴上位置的数据提供程序的字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定确定元素结束值在 y 轴上位置的数据提供程序的字段。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:columnWidthRatio:get"><apiName>columnWidthRatio</apiName><shortdesc>
      指定元素相对于类别宽度的宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.65.
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定元素相对于类别宽度的宽度。值 <codeph>1</codeph> 表示使用整个空间，而值 <codeph>0.6</codeph> 表示使用元素可用空间的 60%。通常不直接设置此属性。元素实际采用的宽度为 <codeph>columnWidthRatio</codeph> 和 <codeph>maxColumnWidth</codeph> 属性之中的较小者。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:highField:get"><apiName>highField</apiName><shortdesc>
      指定确定元素较高值在 y 轴上位置的数据提供程序的字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定确定元素较高值在 y 轴上位置的数据提供程序的字段。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      为 x 轴上的项定义标签、刻度线和数据位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      为 x 轴上的项定义标签、刻度线和数据位置。使用 LinearAxis 类或 CategoryAxis 类可以设置 horizontalAxis 的属性，将其作为 MXML 中的子标签，或者在 ActionScript 中创建一个 LinearAxis 或 CategoryAxis 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:protected:itemType:get"><apiName>itemType</apiName><shortdesc>
      此系列用于表示各项目的 ChartItem 的子类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      此系列用于表示各项目的 ChartItem 的子类型。如果子类需要在项目中存储其它信息，则可以覆盖和返回更特定化的类。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:items:get"><apiName>items</apiName><shortdesc>
      
      获取系列中筛选之后所得的所有项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      获取系列中筛选之后所得的所有项目。
      <p>单个系列确定要返回的项目列表。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:legendData:get"><apiName>legendData</apiName><shortdesc>
      
      一个 LegendData 实例 Array，描述应在表示此系列的图例中显示的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      一个 LegendData 实例 Array，描述应在表示此系列的图例中显示的项目。派生的系列类会覆盖此 getter 函数并返回特定于其样式和数据表示方法的图例数据。虽然大多数系列类型仅返回一个 LegendData 实例，但仍有部分系列类型（如 PieSeries 和 StackedSeries）会返回多个实例，表示 Array 中的各个项目或多种数据呈示方式。   
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:lowField:get"><apiName>lowField</apiName><shortdesc>
      指定确定元素较低值在 y 轴上位置的数据提供程序的字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定确定元素较低值在 y 轴上位置的数据提供程序的字段。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:maxColumnWidth:get"><apiName>maxColumnWidth</apiName><shortdesc>
      指定这些元素的宽度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      指定这些元素的宽度（以像素为单位）。元素实际采用的宽度为此样式和 <codeph>columnWidthRatio</codeph> 属性之中的较小者。通常，不直接设置此值；封闭图表会分配此值。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:offset:get"><apiName>offset</apiName><shortdesc>
      指定元素中心偏离可用空间中心的距离（相对于类别宽度）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      指定元素中心偏离可用空间中心的距离（相对于类别宽度）。默认值为 <codeph>0</codeph>，元素位于空间的中心位置。将此值设置为 <codeph>-50</codeph> 可将元素中心置于可用空间的开始处。通常不直接设置此属性。封闭图表控件根据其 <codeph>columnWidthRatio</codeph> 属性的值管理此值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:openField:get"><apiName>openField</apiName><shortdesc>
      指定确定元素起始值在 y 轴上位置的数据提供程序的字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定确定元素起始值在 y 轴上位置的数据提供程序的字段。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:protected:renderDataType:get"><apiName>renderDataType</apiName><shortdesc>
      此系列用于存储所有必须呈示的数据的 ChartRenderData 子类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      此系列用于存储所有必须呈示的数据的 ChartRenderData 子类型。如果子类需要存储其它信息以供显示，则可以覆盖和返回更特定化的类。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:protected:renderData:get"><apiName>renderData</apiName><shortdesc>
      
      存储必要信息以呈示此系列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      存储必要信息以呈示此系列。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      为 y 轴上的项目定义标签、刻度线和数据位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      为 y 轴上的项目定义标签、刻度线和数据位置。使用 LinearAxis 类或 CategoryAxis 类可以设置 horizontalAxis 的属性，将其作为 MXML 中的子标签，或者在 ActionScript 中创建一个 LinearAxis 或 CategoryAxis 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:HLOCSeriesBase:xField:get"><apiName>xField</apiName><shortdesc>
      指定确定元素在 x 轴上位置的数据提供程序的字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定确定元素在 x 轴上位置的数据提供程序的字段。如果设置为空字符串 (<codeph>""</codeph>)，则 Flex 将按 dataProvider 中的显示顺序呈示这些列。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:DataDescription"><apiName>DataDescription</apiName><shortdesc>
  ChartElement 将使用 DataDescription 结构来描述它们向 Axis 对象显示的数据特征，这些对象将根据图表中显示的数据自动生成值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ChartElement 将使用 DataDescription 结构来描述它们向 Axis 对象显示的数据特征，这些对象将根据图表中显示的数据自动生成值。显示数据的 ChartElement 应在调用 <codeph>describeData()</codeph> 方法时根据该方法构造并返回 DataDescription。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:DataDescription:DataDescription"><apiName>DataDescription</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  构造函数。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts.chartClasses:DataDescription:REQUIRED_BOUNDED_VALUES"><apiName>REQUIRED_BOUNDED_VALUES</apiName><shortdesc>
	  一个由轴传递到元素的 describeData() 方法的位标志。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x2</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  一个由轴传递到元素的 <codeph>describeData()</codeph> 方法的位标志。如果已设置此标志，则该元素将设置 <codeph>boundedValues</codeph> 属性。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:REQUIRED_MIN_INTERVAL"><apiName>REQUIRED_MIN_INTERVAL</apiName><shortdesc>
	  一个由轴传递到元素的 describeData() 方法的位标志。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x1</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  一个由轴传递到元素的 <codeph>describeData()</codeph> 方法的位标志。如果已设置此标志，则该元素将设置 <codeph>minInterval</codeph> 属性。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:REQUIRED_MIN_MAX"><apiName>REQUIRED_MIN_MAX</apiName><shortdesc>
	  一个由轴传递到元素的 describeData() 方法的位标志。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x4</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  一个由轴传递到元素的 <codeph>describeData()</codeph> 方法的位标志。如果已设置此标志，则此元素将设置 <codeph>DescribeData.min</codeph> 和 <codeph>DescribeData.max</codeph> 属性。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:REQUIRED_PADDING"><apiName>REQUIRED_PADDING</apiName><shortdesc>
	  一个由轴传递到元素的 describeData() 方法的位标志。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x8</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  一个由轴传递到元素的 <codeph>describeData()</codeph> 方法的位标志。如果已设置此标志，则此元素将设置 <codeph>DescribeData.padding</codeph> 属性。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:boundedValues"><apiName>boundedValues</apiName><shortdesc> 
	  一个 BoundedValue 对象数组，用于描述元素中的数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc> 
	  一个 BoundedValue 对象数组，用于描述元素中的数据。BoundedValue 是在图表数据区域中的数据点附近保留有额外空间的数据点。如果需要，图表元素会使用任何 BoundedValue 所需的内容填充此属性以确保在图表数据区域可以看到足够的空间。例如，在每列上方需要 20 像素来显示数据标签的 ColumnSeries。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:max"><apiName>max</apiName><shortdesc>
	  元素显示的最大数据值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  元素显示的最大数据值。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:minInterval"><apiName>minInterval</apiName><shortdesc>
	  元素所显示的任何两个值之间的最小间隔（以数据单位表示）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  元素所显示的任何两个值之间的最小间隔（以数据单位表示）。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:min"><apiName>min</apiName><shortdesc>
	  元素显示的最小数据值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  元素显示的最小数据值。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataDescription:padding"><apiName>padding</apiName><shortdesc>
	  元素正确显示其完整值需要低于其最小值或超出最大值的填充量（以数据单位表示）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  元素正确显示其完整值需要低于其最小值或超出最大值的填充量（以数据单位表示）。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:ChartBase"><apiName>ChartBase</apiName><shortdesc>
  ChartBase 类是 Flex 组件体系结构和 DualStyleObject 体系结构之间的链接。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/><styles><style inherit="no" name="showDataTipTargets" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Boolean">
<description>
  指示在 <codeph>showDataTips</codeph> 设置为 true 时是否基于数据点显示目标。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  指定图表的顶部边界与其内容区域之间的像素数目。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  指定图表的底部边界与其内容区域之间的像素数目。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="maximumDataTipCount" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="int">
<description>
  指定图表将显示的最大数据提示数。如果图表范围中所含的数据点数超出了此样式的允许值，则按距离排列其先后顺序，最近的数据点最先显示。
  
  <p>默认值为 NaN，这表示所有数据提示都在范围之内。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="itemSelectionColor" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="uint">
<description>
  图表中所选 chartitem 的颜色。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="itemRollOverColor" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="uint">
<description>
  图表中的 rolledOver chartitem 的颜色。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="itemDisabledColor" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="uint">
<description>
  图表中禁用的 chartitem 的颜色。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  指定用于图表背景的填充样式。可以使用简单的颜色值进行填充，也可以使用实现了 mx.graphics.IFill 接口的对象进行填充。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dataTipRenderer" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Class">
<description>
  指定用于显示数据提示的类。此类必须实现 IFlexDisplayObject 和 IDataRenderer 接口。图表将自定义数据提示的 <codeph>data</codeph> 属性分配给 HitData 结构，该结构描述正在描述的数据点。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dataTipCalloutStroke" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  用于将提示线条从数据提示目标显示为数据提示的笔触。如果设置为 <codeph>null</codeph>，则不绘制任何笔触
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="String" inherit="no" name="chartSeriesStyles" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Array">
<description>
  包含一个字符串列表，其中每个字符串都对应一个 CSS 类型选择器，用作系列的默认 CSS 样式。图表中的每个系列都在 <codeph>chartSeriesStyles</codeph> 样式包含的列表中绘制一个 CSS 类型选择器。第一个系列使用第一个选择器，第二个系列使用第二个选择器，依此类推。此类型选择器中的样式属性可以通过指定系列的 <codeph>styleName</codeph> 属性来重写。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="String">
<description>
  容器内文本的对齐方式。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数控件的默认值都为 <codeph>left</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>。对于这些组件，只有将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Boolean">
<description>
  一个布尔值，表示是启用 (<codeph>true</codeph>) 还是禁用 (<codeph>false</codeph>) 字距调整。字距调整会调整某些字符对之间的间隔以提高可读性，并应只在必要时（例如使用大字体标题时）使用。仅嵌入的 FlashType 字体支持字距调整。某些字体（如宋体）和等宽字体（如 Courier New）不支持字距调整。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"bold"</codeph>。对于 LegendItem，默认为 <codeph>"bold"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>thickness</codeph> 属性。此属性指定字型边缘的粗细。可能值为从 -200 到 200 之间的数字。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  文本的高度，以像素为单位。除 ColorPicker 控件之外，所有控件的默认值都为 10。ColorPicker 控件的默认值为 11。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>sharpness</codeph> 属性。此属性指定字型边缘的清晰度。可能值为从 -400 到 400 之间的数字。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="String">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>gridFitType</codeph> 属性。可能值为 <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>)、<codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) 和<codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>)。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="String">
<description>
  设置内部 TextField 的 <codeph>antiAliasType</codeph> 属性。可能值为 <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) 和 <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>)。 
  
  <p>默认值为 <codeph>"advanced"</codeph>。如果您使用的是嵌入的 FlashType 字体，此设置将启用 FlashType 呈示器。设置为 <codeph>"normal"</codeph> 可禁用 FlashType 呈示器。</p>
  
  <p>此样式对系统字体不起作用。</p>
  
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="uint">
<description>
  禁用时组件中文本的颜色。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  控件右边框与内容区域右边缘之间的像素数目。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.charts.chartClasses:ChartBase" playerVersion="Flash9" type="Number">
<description>
  控件左边框与内容区域左边缘之间的像素数目。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>Flex components inherit the following properties
  from the ChartBase class:</p>
   <pre>
  &lt;mx:<i>tagname</i>
    <strong>Properties</strong>
    allElements="<i>Array; No default</i>"
    annotationElements="<i>Array; No default</i>"
    backgroundElements="<i>Array; No default</i>"
    chartState="<i></i>"
    clipContent="false|true"
    dataProvider="<i>No default</i>"
    dataRegion"<i>No default</i>"
    dataTipFunction="<i>No default</i>"
    dataTipLayerIndex"<i>No default</i>"
    dataTipMode"<i>No default</i>"
    description"<i>No default</i>"
    dragEnabled="false|true"
    dragMoveEnabled="false|true"
    dropEnabled="false|true"
    labelElements"<i>No default</i>"
    legendData"<i>No default</i>"
    mouseSensitivity="5"
    selectedChartItem=<i>ChartItem; No default</i>"
    selectedChartItems=<i>Array; No default</i>"
    selectionMode="none|single|multiple"
    series="<i>No default</i>"
    seriesFilters"<i>No default</i>"
    showAllDataTips="true|false"
    showDataTips="true|false"
    transforms="<i>No default</i>"
    
    <strong>Styles</strong>
    chartSeriesStyles="<i>Style; No default</i>"
    dataTipCalloutStroke="<i>Stroke; No default</i>"
    dataTipRenderer="<i>Renderer; No default</i>"
    fill="<i>IFill; No default</i>"
    fontFamily="<i>Verdana</i>"
    fontSize="<i>10</i>"
    itemDisabledColor="<i>uint; No default</i>"
    itemRollOverColor="<i>uint; No default</i>"
    itemSelectionColor="<i>uint; No default</i>"
    maximumDataTipCount="NaN"
    paddingBottom="<i>No default</i>"
    paddingTop="<i>No default</i>"
    paddingLeft="<i>0</i>"
    paddingRight="<i>0</i>"
    showDataTipTargets="true|false"  
    
   <strong>Events</strong>
    change="<i>Event; No default</i>"
    itemClick="<i>Event; No default</i>"
    itemDoubleClick="<i>Event; No default</i>"
    itemMouseDown="<i>Event; No default</i>"
    itemMouseMove="<i>Event; No default</i>"
    itemMouseUp="<i>Event; No default</i>"
    itemRollOut="<i>Event; No default</i>"
    itemRollOver="<i>Event; No default</i>"
  &gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  ChartBase 类是 Flex 组件体系结构和 DualStyleObject 体系结构之间的链接。它扩展 Flex UIComponent 基类，但包含 DualStyleObject 类。
   <p>通常不直接使用 ChartBase 类，而是使用该类的一个子类，如 PlotChart 或 BubbleChart。它充当 mx.charts 包中提供的公用图表类型的基类。</p>
  
  <p>此类定义了大量的 CSS 样式和属性，这为访问框架的更多常见功能提供了便利。</p>
  
  <p>图表的最小大小是 20 x 20 像素。图表的最大大小没有限制。图表的首选大小是 400 x 400 像素。</p>
  
  <p>ChartBase 对象及其子类在常用的鼠标事件对象上添加了一些附加数据，用于描述鼠标下方最近的图表数据点。鼠标事件的事件对象包含一个附加属性 <codeph>hitData</codeph>，该属性中包含一个用于描述最近的数据点的 HitData 对象。有关 HitData 对象内容的详细信息，请参阅 mx.charts.HitData。</p>
  
  <p>ChartBase 对象仅考虑鼠标指针周围特定半径范围内的数据点。您可以使用 <codeph>mouseSensitivity</codeph> 属性设置此半径。如果 <codeph>mouseSensitivity</codeph> 半径范围内不存在数据点，则 event.hitData 为 <codeph>null</codeph>。</p>
   </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#HitData"><linktext>mx.charts.HitData</linktext></link><link href="mx.charts.xml#CategoryAxis"><linktext>mx.charts.CategoryAxis</linktext></link><link href="mx.charts.xml#LinearAxis"><linktext>mx.charts.LinearAxis</linktext></link></related-links><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.ITEM_ROLL_OVER_itemRollOver"><apiName>itemRollOver</apiName><shortdesc>
  当在鼠标指针下方找到新数据点时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.ITEM_ROLL_OVER</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当在鼠标指针下方找到新数据点时分派。Flex 仅考虑 <codeph>mouseSensitivity</codeph> 属性确定的半径范围内的数据点。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.ITEM_ROLL_OUT_itemRollOut"><apiName>itemRollOut</apiName><shortdesc>
  当鼠标指针下方最近的数据点更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.ITEM_ROLL_OUT</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当鼠标指针下方最近的数据点更改时分派。Flex 仅考虑 <codeph>mouseSensitivity</codeph> 属性确定的半径范围内的数据点。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.ITEM_MOUSE_UP_itemMouseUp"><apiName>itemMouseUp</apiName><shortdesc>
  在释放鼠标时在鼠标指针下方找到数据点的情况下分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.ITEM_MOUSE_UP</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在释放鼠标时在鼠标指针下方找到数据点的情况下分派。Flex 仅考虑 <codeph>mouseSensitivity</codeph> 属性确定的半径范围内的数据点。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.ITEM_MOUSE_MOVE_itemMouseMove"><apiName>itemMouseMove</apiName><shortdesc>
  当鼠标指针在数据点上方移动时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.ITEM_MOUSE_MOVE</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当鼠标指针在数据点上方移动时分派。Flex 仅考虑 <codeph>mouseSensitivity</codeph> 属性确定的半径范围内的数据点。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.ITEM_MOUSE_DOWN_itemMouseDown"><apiName>itemMouseDown</apiName><shortdesc>
  在按下鼠标时在鼠标指针下方找到数据点的情况下分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.ITEM_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在按下鼠标时在鼠标指针下方找到数据点的情况下分派。Flex 仅考虑 <codeph>mouseSensitivity</codeph> 属性确定的半径范围内的数据点。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.ITEM_DOUBLE_CLICK_itemDoubleClick"><apiName>itemDoubleClick</apiName><shortdesc>
  在双击鼠标时在鼠标指针下方找到数据点的情况下分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.ITEM_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在双击鼠标时在鼠标指针下方找到数据点的情况下分派。Flex 仅考虑 <codeph>mouseSensitivity</codeph> 属性确定的半径范围内的数据点。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.MOUSE_CLICK_DATA_itemClick"><apiName>itemClick</apiName><shortdesc>
  在单击鼠标时在鼠标指针下方找到数据点的情况下分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.MOUSE_CLICK_DATA</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在单击鼠标时在鼠标指针下方找到数据点的情况下分派。Flex 仅考虑 <codeph>mouseSensitivity</codeph> 属性确定的半径范围内的数据点。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartEvent.CHART_DOUBLE_CLICK_chartDoubleClick"><apiName>chartDoubleClick</apiName><shortdesc>
  在图表上双击鼠标时没有在鼠标指针下方找到任何数据点的情况下分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartEvent.CHART_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在图表上双击鼠标时没有在鼠标指针下方找到任何数据点的情况下分派。Flex 仅考虑 <codeph>mouseSensitivity</codeph> 属性确定的半径范围内的数据点。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartEvent.CHART_CLICK_chartClick"><apiName>chartClick</apiName><shortdesc>
  在图表上单击鼠标时没有在鼠标指针下方找到任何数据点的情况下分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartEvent.CHART_CLICK</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在图表上单击鼠标时没有在鼠标指针下方找到任何数据点的情况下分派。Flex 仅考虑 <codeph>mouseSensitivity</codeph> 属性确定的半径范围内的数据点。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:ChartBase_mx.charts.events.ChartItemEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  当图表中的选定内容发生更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.ChartItemEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.charts.events.ChartItemEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当图表中的选定内容发生更改时分派。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.charts.chartClasses:ChartBase:ChartBase"><apiName>ChartBase</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:ChartBase:protected:addDragData"><apiName>addDragData</apiName><shortdesc>
      将所选项目作为拖放操作的一部分添加到 DragSource 对象中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>ds</apiItemName><apiType value="Object"/><apiDesc>将数据添加到的 DragSource 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将所选项目作为拖放操作的一部分添加到 DragSource 对象中。您可以覆盖此方法以将其他数据添加到拖动源中。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:applySeriesSet"><apiName>applySeriesSet</apiName><shortdesc>
      预处理系列和转换以便进行显示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>包含已应用的系列集的系列数组。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>seriesSet</apiItemName><apiType value="Array"/><apiDesc>要预处理的系列数组。
      </apiDesc></apiParam><apiParam><apiItemName>transform</apiItemName><apiOperationClassifier>mx.charts.chartClasses:DataTransform</apiOperationClassifier><apiDesc>系列使用的转换。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      预处理系列和转换以便进行显示。通常不会直接调用此方法。相反，如果通过调用 <codeph>invalidateSeries()</codeph> 方法使系列无效，则将在图表控件的 <codeph>commitProperties()</codeph> 循环期间自动调用此方法。
      <p>默认情况下，此方法将针对系列集中的每一系列调用一次 <codeph>customizeSeries()</codeph> 方法。图表子类可覆盖此方法来添加通用于整个系列集的自定义逻辑。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:clearSelection"><apiName>clearSelection</apiName><shortdesc>
      取消对图表控件中的所有所选图表项的选择。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      取消对图表控件中的所有所选图表项的选择。将图表中所有图表项的 <codeph>currentState</codeph> 属性设置为 <codeph>none</codeph>。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:customizeSeries"><apiName>customizeSeries</apiName><shortdesc>
      将每系列自定义和格式应用到图表系列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>seriesGlyph</apiItemName><apiOperationClassifier>mx.charts.chartClasses:Series</apiOperationClassifier><apiDesc>要自定义的系列。
      </apiDesc></apiParam><apiParam><apiItemName>i</apiItemName><apiType value="uint"/><apiDesc>系列数组中的系列索引。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将每系列自定义和格式应用到图表系列。通过调用 <codeph>invalidateSeries()</codeph> 方法更改系列后，将针对每一系列调用一次此方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:dragCompleteHandler"><apiName>dragCompleteHandler</apiName><shortdesc>
      处理 DragEvent.DRAG_COMPLETE 类型的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>DragEvent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理 <codeph>DragEvent.DRAG_COMPLETE</codeph> 类型的事件。此方法从数据提供程序中删除项目。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:dragDropHandler"><apiName>dragDropHandler</apiName><shortdesc>
      处理 DragEvent.DRAG_DROP 类型的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>DragEvent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理 <codeph>DragEvent.DRAG_DROP</codeph> 类型的事件。此方法通过调用 <codeph>hideDropFeedback()</codeph> 方法隐藏 UI 反馈。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:dragEnterHandler"><apiName>dragEnterHandler</apiName><shortdesc>
      处理 DragEvent.DRAG_ENTER 类型的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>DragEvent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理 <codeph>DragEvent.DRAG_ENTER</codeph> 类型的事件。此方法可确定 DragSource 对象是否包含有效的元素，并使用 <codeph>showDropFeedback()</codeph> 方法来设置 UI 反馈。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:dragExitHandler"><apiName>dragExitHandler</apiName><shortdesc>
      处理 DragEvent.DRAG_EXIT 类型的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>DragEvent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理 <codeph>DragEvent.DRAG_EXIT</codeph> 类型的事件。此方法通过调用 <codeph>hideDropFeedback()</codeph> 方法隐藏 UI 反馈。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:dragOverHandler"><apiName>dragOverHandler</apiName><shortdesc>
      处理 DragEvent.DRAG_OVER 类型的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>DragEvent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理 <codeph>DragEvent.DRAG_OVER</codeph> 类型的事件。此方法可确定 DragSource 对象是否包含有效的元素，并使用 <codeph>showDropFeedback()</codeph> 方法来设置 UI 反馈。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:dragStartHandler"><apiName>dragStartHandler</apiName><shortdesc>
      dragStart 事件的默认处理函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>DragEvent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>dragStart</codeph> 事件的默认处理函数。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:findDataPoints"><apiName>findDataPoints</apiName><shortdesc>
      返回一个 HitData 对象数组，描述距离传递给方法的坐标最近的数据点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>HitData 对象的数组。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>关于 ChartBase 对象的 x 坐标。
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>关于 ChartBase 对象的 y 坐标。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回一个 HitData 对象数组，描述距离传递给方法的坐标最近的数据点。<codeph>x</codeph> 和 <codeph>y</codeph> 参数应为 ChartBase 对象在坐标系内的值。
      <p>此方法在查找附近的数据点时遵循由 ChartBase 对象的 <codeph>mouseSensitivity</codeph> 属性所指定的限制。</p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.charts.xml#HitData"><linktext>mx.charts.HitData</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:getAllDataPoints"><apiName>getAllDataPoints</apiName><shortdesc>
      返回一个 HitData 对象数组，表示实现 IChartElement2 接口的基础对象中的图表项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>一个表示数据点的 HitData 对象数组。
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      返回一个 HitData 对象数组，表示实现 IChartElement2 接口的基础对象中的图表项目。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:getFirstItem"><apiName>getFirstItem</apiName><shortdesc>
      获取图表中的第一个（相对于轴）项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>对应的 ChartItem 对象。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>第一个项目应返回的方向。可能的值有 <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> 和 <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      获取图表中的第一个（相对于轴）项目。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:getItemsInRegion"><apiName>getItemsInRegion</apiName><shortdesc>
      获取定义的矩形区域内的所有图表项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>一个 ChartItem 对象数组。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="flash.geom:Rectangle"/><apiDesc>矩形区域。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      获取定义的矩形区域内的所有图表项目。调用此方法可确定特定的矩形区域内存在哪些图表项目。
      <p>各图表类型确定其图表项目是否在区域之内。点应位于全局坐标空间内。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:getLastItem"><apiName>getLastItem</apiName><shortdesc>
      获取此图表中的最后一个（相对于轴）项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>对应的 ChartItem 对象。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>最后一项应该返回的方向。可能的值有 <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> 和 <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      获取此图表中的最后一个（相对于轴）项目。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:getNextItem"><apiName>getNextItem</apiName><shortdesc>
      获取图表中当前焦点项目旁边（相对于轴）的图表项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>对应的 ChartItem 对象。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>下一项目应该返回的方向。可能的值有 <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> 和 <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      获取图表中当前焦点项目旁边（相对于轴）的图表项目。如果当前未选中任何图表项目，则此方法将返回第一个系列中的第一个项目。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:getPreviousItem"><apiName>getPreviousItem</apiName><shortdesc>
      获取图表中当前焦点项之前（相对于轴）的图表项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>对应的 ChartItem 对象。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>上一项目应返回的方向。可能的值有 <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> 和 <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      获取图表中当前焦点项之前（相对于轴）的图表项目。如果当前未选中任何图表项目，则此方法将返回第一个系列中的第一个项目。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:hideData"><apiName>hideData</apiName><shortdesc>
      通知图表在图表中显示的基础数据已更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      通知图表在图表中显示的基础数据已更改。当图表系列和元素的显示内容发生更改时调用此函数，以协调执行显示和隐藏数据的效果。通常不直接在图表上调用此方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:hideDropFeedback"><apiName>hideDropFeedback</apiName><shortdesc>
      隐藏用于指示允许拖放操作的拖放指示符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>包含鼠标位置信息的 DragEvent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      隐藏用于指示允许拖放操作的拖放指示符。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:invalidateChildOrder"><apiName>invalidateChildOrder</apiName><shortdesc>
      通知图表其子列表已被修改，应对子列表重新进排序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      通知图表其子列表已被修改，应对子列表重新进排序。派生的图表类可调用此方法以触发在下一 <codeph>commitProperties()</codeph> 循环中对图表的内部 <codeph>updateChildOrder()</codeph> 方法的调用。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      重新绘制图表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      重新绘制图表。添加或更改图表的系列和数据提供程序时调用此方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:invalidateSeriesStyles"><apiName>invalidateSeriesStyles</apiName><shortdesc>
      重新绘制图表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      重新绘制图表。更改图表系列的样式属性时调用此方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:invalidateSeries"><apiName>invalidateSeries</apiName><shortdesc>
      通知图表其系列数组已经修改，应该重新处理。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      通知图表其系列数组已经修改，应该重新处理。派生的图表类可以调用此方法来实现在下一个 <codeph>commitProperties()</codeph> 循环中调用图表的内部 <codeph>updateSeries()</codeph> 方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:legendDataChanged"><apiName>legendDataChanged</apiName><shortdesc>
      分派新的 LegendDataChanged 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      分派新的 LegendDataChanged 事件。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:positionAllDataTips"><apiName>positionAllDataTips</apiName><shortdesc>
      当 showAllDataTips 属性设置为 true 时，定义 DataTip 对象在图表上的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>hitSet</apiItemName><apiType value="Array"/><apiDesc>HitData 对象的数组。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当 <codeph>showAllDataTips</codeph> 属性设置为 <codeph>true</codeph> 时，定义 DataTip 对象在图表上的位置。此方法可确保 DataTip 不会相互重叠（如果多个 DataTip 可见）或覆盖其目标数据项。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:protected:positionDataTips"><apiName>positionDataTips</apiName><shortdesc>
      定义 DataTip 对象在图表上的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      定义 DataTip 对象在图表上的位置。此方法可确保 DataTip 对象不会相互重叠（如果多个 DataTip 对象可见）或覆盖其目标数据项。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:showDropFeedback"><apiName>showDropFeedback</apiName><shortdesc>
      在鼠标指针下显示拖放指示符以指示允许拖放操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>DragEvent 对象包含有关鼠标指针位置的信息。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      在鼠标指针下显示拖放指示符以指示允许拖放操作。拖放指示符还指示可将项目拖放到的位置。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartBase:updateAllDataTips"><apiName>updateAllDataTips</apiName><shortdesc>
      如果设置了 showAllDataTips，则将显示所有非交互式数据提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      如果设置了 <codeph>showAllDataTips</codeph>，则将显示所有非交互式数据提示。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:ChartBase:HORIZONTAL"><apiName>HORIZONTAL</apiName><shortdesc>
      此常量的值传递给 getNextItem() 和 getPrevItem() 等方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontal</apiData><apiType value="String"/></apiValueDef><apiDesc>
      此常量的值传递给 <codeph>getNextItem()</codeph> 和 <codeph>getPrevItem()</codeph> 等方法。这些方法使用此常量确定用户按下某个键（如向左键）时要选择的项目或系列。例如，如果按向左键或向右键，则将 direction 设置为“horizontal”(<codeph>ChartBase.HORIZONTAL</codeph>)。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:VERTICAL"><apiName>VERTICAL</apiName><shortdesc>
      此常量的值传递给 getNextItem() 和 getPrevItem() 等方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>vertical</apiData><apiType value="String"/></apiValueDef><apiDesc>
      此常量的值传递给 <codeph>getNextItem()</codeph> 和 <codeph>getPrevItem()</codeph> 等方法。这些方法使用此常量确定用户按下某个键（如向左键）时要选择的项目或系列。例如，如果按向上键或向下键，则将 direction 设置为“vertical”(<codeph>ChartBase.VERTICAL</codeph>)。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:protected:allElements"><apiName>allElements</apiName><shortdesc>
      图表中显示的所有图表元素集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
      图表中显示的所有图表元素集。此集包括系列、第二系列、背景元素和注释元素。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:dataTipFunction"><apiName>dataTipFunction</apiName><shortdesc>
      指定用于根据值生成数据提示的回调方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      指定用于根据值生成数据提示的回调方法。此方法将使用以下签名：
      <pre>
      function dataTipFunction(<i>hitData</i>:HitData):String
      </pre>
      <p>此方法返回为每个数据点显示的字符串。该文本可以包含 HTML 格式设置。单个参数是描述数据点的 HitData 对象。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:protected:labelElements"><apiName>labelElements</apiName><shortdesc>
      表示图表元素标签的显示对象集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
      表示图表元素标签的显示对象集。某些系列、注释和背景类型包括叠加层（如元素和标注）。元素可以将显示对象传递到包含需要放置到其他所有图表元素上方的叠加层的图表。图表实现器可以访问 <codeph>labelElements</codeph> 数组中的这些叠加层对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:mouseSensitivity"><apiName>mouseSensitivity</apiName><shortdesc>
      指定鼠标指针在图表附近移动时，Flex 认为与其相距多远（以像素为单位）的数据点算是位于指针下。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>5</apiData><apiType value="Number"/><apiDefaultValue>5
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定鼠标指针在图表附近移动时，Flex 认为与其相距多远（以像素为单位）的数据点算是位于指针下。Flex 认为在 <codeph>mouseSensitivity</codeph> 像素之内的任何数据点均位于鼠标指针下。<codeph>findDataPoints</codeph> 方法也可使用此值。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:annotationElements:get"><apiName>annotationElements</apiName><shortdesc>
      设置显示在图表呈示的任何数据系列上方的 ChartElement 对象数组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      设置显示在图表呈示的任何数据系列上方的 ChartElement 对象数组。数组中的每个项目都必须扩展 mx.charts.DualStyleObject 类并实现 IChartElement2 接口。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:backgroundElements:get"><apiName>backgroundElements</apiName><shortdesc>
      设置显示在图表呈示的任何数据系列下方的背景 ChartElement 对象数组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      设置显示在图表呈示的任何数据系列下方的背景 ChartElement 对象数组。数组中的每个项目都必须扩展 mx.charts.DualStyleObject 类并实现 IChartElement2 接口。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:chartState:get"><apiName>chartState</apiName><shortdesc>
      图表的当前过渡状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
      图表的当前过渡状态。使用此属性确定图表当前处于下列哪一状态：从旧数据中过渡、过渡到新数据，或已完成所有过渡并且正在显示当前数据集。请查看可能值的 mx.charts.chartClasses.ChartState 枚举。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:clipContent:get"><apiName>clipContent</apiName><shortdesc>
      确定 Flex 是否将图表剪辑到由轴限定的区域中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      确定 Flex 是否将图表剪辑到由轴限定的区域中。设置为 <codeph>false</codeph> 以剪裁图表。设置为 <codeph>true</codeph> 以避免呈示数据时进行剪辑。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      指定图表的数据提供程序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      指定图表的数据提供程序。将图表呈示的数据系列指定到此数据提供程序。若要在同一图表中呈示不同的数据系列，可对单个系列使用 <codeph>dataProvider</codeph> 属性。
      
      <p>此属性可接受实现 IList 或 ICollectionView 接口的数组或任何其他对象。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:protected:dataRegion:get"><apiName>dataRegion</apiName><shortdesc>
      用于显示数据的图表区域。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      用于显示数据的图表区域。此矩形不包括用于装订线、轴线和标签及填充的区域。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:protected:dataTipLayerIndex:get"><apiName>dataTipLayerIndex</apiName><shortdesc>
      负责呈示数据提示的子索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      负责呈示数据提示的子索引。将可视元素添加到图表的派生类应将这些元素添加到此图层的下方。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:dataTipMode:get"><apiName>dataTipMode</apiName><shortdesc>
      指定 Flex 如何显示图表的 DataTip 控件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      指定 Flex 如何显示图表的 DataTip 控件。DataTip 控件与 ToolTip 控件相似，只不过它们显示代表鼠标指针下最近的图表数据点的相应值。
     
      <p><codeph>dataTipMode</codeph> 的可能值：
       <ul>
        <li><codeph>"single"</codeph> — 为距鼠标光标最近的数据点显示数据提示。</li>
      
        <li><codeph>"multiple"</codeph> — 为鼠标光标范围内的任一 DataTip 控件显示数据提示。可以使用 <codeph>mouseSensitivity</codeph> 属性控制敏感度。</li>
       </ul>
      </p>
     
      <p>可以使用 <codeph>dataTipFunction</codeph> 属性自定义 DataTip 控件。</p>
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:description:get"><apiName>description</apiName><shortdesc>
      对图表中数据的简短说明。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      对图表中数据的简短说明。如果启用了辅助功能，屏幕阅读器将使用此属性来描述图表。
      <p>此字符串默认为空字符串，必须由开发人员显式分配才能具有意义。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:dragEnabled:get"><apiName>dragEnabled</apiName><shortdesc>
      指定是否可以将项目拖出此图表并将其拖放到其他控件上。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定是否可以将项目拖出此图表并将其拖放到其他控件上。如果设置为 <codeph>true</codeph>，则可以对图表进行拖动。如果 <codeph>dropEnabled</codeph> 属性也为 <codeph>true</codeph>，则可以在图表中拖放项目以对项目进行重新排序。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:protected:dragImage:get"><apiName>dragImage</apiName><shortdesc>
      获取在拖放操作期间显示视觉效果的类的实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:IUIComponent"/><apiDefaultValue>mx.controls.chartClasses.ChartItemDragProxy
      
      </apiDefaultValue></apiValueDef><apiDesc>
      获取在拖放操作期间显示视觉效果的类的实例。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:dragMoveEnabled:get"><apiName>dragMoveEnabled</apiName><shortdesc>
      指示要显示为拖动反馈的显示光标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指示要显示为拖动反馈的显示光标。如果设置为 <codeph>true</codeph>，并且 <codeph>dragEnabled</codeph> 属性为 <codeph>true</codeph> 且没有按住 Ctrl 键，则将显示 <codeph>moveCursor</codeph> 作为反馈。如果按住 Ctrl 键，将显示 <codeph>copyCursor</codeph>。如果 <codeph>false</codeph> 和 <codeph>dragEnabled</codeph> 属性为 <codeph>true</codeph>，无论是否按住 Ctrl 键，都将显示 <codeph>copyCursor</codeph>。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:dropEnabled:get"><apiName>dropEnabled</apiName><shortdesc>
      用于指定是否可将拖动项目拖放到图表上的标志。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      用于指定是否可将拖动项目拖放到图表上的标志。
           <p>如果将此属性设置为 <codeph>true</codeph>，则图表将接受所有数据格式并假定拖动数据与数据提供程序中的数据格式相匹配。若要显式检查将要拖动的数据的数据格式，必须处理一个或多个拖动事件（如 <codeph>dragOver</codeph>）并调用 DragEvent 的 <codeph>preventDefault()</codeph> 方法以自定义 list 类接受拖放数据的方式。</p>
           <p>如果 <codeph>dropEnabled</codeph> 设置为 <codeph>true</codeph>，Flex 将自动调用 <codeph>showDropFeedback()</codeph> 方法和 <codeph>hideDropFeedback()</codeph> 方法以显示拖放指示符。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:legendData:get"><apiName>legendData</apiName><shortdesc>
      图例项数组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="legendDataChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      图例项数组。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:selectedChartItem:get"><apiName>selectedChartItem</apiName><shortdesc>
      指定图表中的所选 ChartItem。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.charts:ChartItem</apiValueClassifier></apiValueDef><apiDesc>
      指定图表中的所选 ChartItem。如果选择了多个项目，此属性将指定上一次选择的项目。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:selectedChartItems:get"><apiName>selectedChartItems</apiName><shortdesc>
      指定图表中所有所选 ChartItem 对象的数组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      指定图表中所有所选 ChartItem 对象的数组。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:selectionMode:get"><apiName>selectionMode</apiName><shortdesc>
      指定是否可以选择 ChartItem 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>none
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定是否可以选择 ChartItem 对象。可能的值是 <codeph>none</codeph>、<codeph>single</codeph> 或 <codeph>multiple</codeph>。设置为 <codeph>none</codeph> 可避免选中任何图表项。设置为 <codeph>single</codeph> 可允许一次仅选中一个项目。设置为 <codeph>multiple</codeph> 可允许一次选中一个或多个图表项。
      
      <P>如果将此值设置为 <codeph>single</codeph> 或 <codeph>multiple</codeph>，可以通过将系列的 <codeph>selectable</codeph> 属性设置为 <codeph>false</codeph> 来覆盖所有系列的此项设置。如果将 <codeph>selectionMode</codeph> 属性的值设置为 <codeph>none</codeph>，则无论系列的 <codeph>selectable</codeph> 属性为何值，图表项都将处于不可选状态。</P>
           </apiDesc></apiValueDetail><related-links><link href="mx.charts.xml#ChartItem"><linktext>mx.charts.ChartItem</linktext></link><link href="mx.charts.chartClasses.xml#Series"><linktext>mx.charts.chartClasses.Series</linktext></link></related-links></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:seriesFilters:get"><apiName>seriesFilters</apiName><shortdesc>
      应用于图表中的所有系列的滤镜数组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      应用于图表中的所有系列的滤镜数组。将位图滤镜数组分配给此属性以立刻对所有系列应用这些滤镜。将 <codeph>seriesFilter</codeph> 属性设置为空数组以清除图表系列上的默认滤镜。将滤镜分配给适用于所有系列的 <codeph>seriesFilters</codeph> 属性比将其分配给单个系列更为有效。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:series:get"><apiName>series</apiName><shortdesc>
      定义图表数据的 Series 对象数组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      定义图表数据的 Series 对象数组。每个图表均定义用于填充此数组的 Series 对象类型。例如，ColumnChart 控件将 ColumnSeries 对象视为此数组的一部分。某些图表可将 IChartElement2 类型的任何对象作为数组的一部分纳入其中，但通常每个图表要求特定的类型。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:showAllDataTips:get"><apiName>showAllDataTips</apiName><shortdesc>
      指定 Flex 是否显示图表的所有 DataTip 控件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      指定 Flex 是否显示图表的所有 DataTip 控件。DataTip 控件与工具提示相似，只不过它们显示表示图表数据点的相应值。
      
      <p>不同的图表元素可能显示不同样式的 DataTip 控件。例如，堆叠的图表元素可能既显示列值，又显示它在整个图表中所占的百分比。</p>
           <p>可以使用 <codeph>dataTipFunction</codeph> 属性自定义 DataTip 控件。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:showDataTips:get"><apiName>showDataTips</apiName><shortdesc>
      指定 Flex 是否显示图表的 DataTip 控件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      指定 Flex 是否显示图表的 DataTip 控件。DataTip 控件与工具提示相似，只不过它们显示代表鼠标指针下最近的图表数据点的相应值。
      
      <p>不同的图表元素可能显示不同样式的 DataTip 控件。例如，堆叠的图表元素可能既显示列值，又显示它在整个图表中所占的百分比。</p>
           <p>可以使用 <codeph>dataTipFunction</codeph> 属性自定义 DataTip 控件。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartBase:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:IChartElement2"><apiName>IChartElement2</apiName><shortdesc>
  IChartElement2 定义为了使 UIComponent 可在图表的数据空间中表示所需的基本属性和方法组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IChartElement</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IChartElement2 定义为了使 UIComponent 可在图表的数据空间中表示所需的基本属性和方法组。分配到此系列的任何组件（图表的 backgroundElement 或者 annotationElement 数组）都必须实现此接口。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.charts.chartClasses:IChartElement2:mx.charts.chartClasses:IChartElement2:dataToLocal"><apiName>dataToLocal</apiName><shortdesc>
      将数据值元组转换为屏幕上的 x-y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>相对于图表的坐标。
      
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>dataValues</apiItemName><apiType value="restParam"/><apiDesc>要转换为坐标的数据值。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将数据值元组转换为屏幕上的 x-y 坐标。调用此函数可借助单个元素使用的转换将数据转换到屏幕上。例如，要为图表的数据区域创建自定义加亮效果，则可以使用此函数来确定相关区域的屏幕上坐标。
      
      <p>对于笛卡尔图表元素，通常需要传递两个值。第一个值映射到水平轴，第二个值映到垂直轴。</p>
      
      <p>对于极性图表，第一个值映射到角度轴，第二个值映射到半径轴。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IChartElement2:mx.charts.chartClasses:IChartElement2:getAllDataPoints"><apiName>getAllDataPoints</apiName><shortdesc>
      返回所有基础对象的项目的 HitData 数组，这些对象用于实现 IChartElement2，在针对图表将 showAllDataTips 设置为 true 时，将显示其数据提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>描述数据点的 HitData 对象
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      返回所有基础对象的项目的 HitData 数组。这些对象用于实现 <codeph>IChartElement2</codeph>，在 <codeph>showAllDataTips</codeph> 设置为 <codeph>true</codeph> 时，将在图表上显示其数据提示。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IChartElement2:mx.charts.chartClasses:IChartElement2:localToData"><apiName>localToData</apiName><shortdesc>
      将屏幕上的坐标转换成数据值元组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>数据值的元组。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>pt</apiItemName><apiType value="flash.geom:Point"/><apiDesc>要转换的点。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将屏幕上的坐标转换成数据值元组。调用此函数可确定屏幕上的特定点代表哪些数据值。
      <p>各个图表类型可确定发生此转换的方式。该点应随图表的坐标空间而转移。</p>
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.charts.chartClasses:PolarTransform"><apiName>PolarTransform</apiName><shortdesc>
  PolarTransform 对象给出一组轴，用于在数据值与角度/距离极坐标之间进行双向映射。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:DataTransform</apiBaseClassifier></apiClassifierDef><apiDesc>
  PolarTransform 对象给出一组轴，用于在数据值与角度/距离极坐标之间进行双向映射。  
 
  <p>通常不需要与 PolarTransform 对象进行交互。转换由内置的图表类型自动创建，由其中包含的系列用于将数据转换为显示的坐标。</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:PolarTransform:PolarTransform"><apiName>PolarTransform</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:PolarTransform:setSize"><apiName>setSize</apiName><shortdesc>
      设置 PolarTransform 在计算原点和半径时使用的宽度和高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>PolarTransform 的宽度（以像素为单位）。
      
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>PolarTransform 的高度（以像素为单位）。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      设置 PolarTransform 在计算原点和半径时使用的宽度和高度。包含图表将调用此方法。通常不直接调用此方法， 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarTransform:transformCache"><apiName>transformCache</apiName><shortdesc>
      
      将一组表示数据的数值映射到屏幕坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>字段中包含数据值的对象数组。此函数还使用此数组来存储转换后的数值。
     
      </apiDesc></apiParam><apiParam><apiItemName>aField</apiItemName><apiType value="String"/><apiDesc>用于存储 x 轴的数据值的字段。
     
      </apiDesc></apiParam><apiParam><apiItemName>aConvertedField</apiItemName><apiType value="String"/><apiDesc>用于存储映射的 x 屏幕坐标的字段。
     
      </apiDesc></apiParam><apiParam><apiItemName>rField</apiItemName><apiType value="String"/><apiDesc>用于存储 y 轴的数据值的字段。
     
      </apiDesc></apiParam><apiParam><apiItemName>rConvertedField</apiItemName><apiType value="String"/><apiDesc>用于存储映射的 y 屏幕坐标的字段。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      将一组表示数据的数值映射到屏幕坐标。此方法假设值都为数字，因此，必须使用 <codeph>mapCache()</codeph> 方法预先转换所有非数字的值。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:PolarTransform:ANGULAR_AXIS"><apiName>ANGULAR_AXIS</apiName><shortdesc>
      表示角轴的字符串。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>a</apiData><apiType value="String"/></apiValueDef><apiDesc>
      表示角轴的字符串。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarTransform:RADIAL_AXIS"><apiName>RADIAL_AXIS</apiName><shortdesc>
      表示半径轴的字符串。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>r</apiData><apiType value="String"/></apiValueDef><apiDesc>
      表示半径轴的字符串。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarTransform:origin:get"><apiName>origin</apiName><shortdesc>
      极性转换的原点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Point"/></apiValueDef><apiDesc>
      极性转换的原点。相关系列将使用此点将数据单位转换为屏幕坐标。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarTransform:radius:get"><apiName>radius</apiName><shortdesc>
      转换将数据单位转换为极坐标时使用的半径。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      转换将数据单位转换为极坐标时使用的半径。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:DataTip"><apiName>DataTip</apiName><shortdesc>
  DataTip 控件为图表用户提供有关数据点的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Color" inherit="yes" name="shadowColor" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="uint">
<description>
  按钮外观的内底层颜色。三维边框的一部分。默认值为 <codeph>0xEEEEEE</codeph>（浅灰色）。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  datatip 的上边框与其内容区域之间的像素数目。默认值为 0。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  datatip 的下边框与内容区域之间的像素数目。默认值为 0。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  边框样式。可能值为 <codeph>"none"</codeph>、<codeph>"solid"</codeph>、<codeph>"inset"</codeph> 和 <codeph>"outset"</codeph>。默认值为 <codeph>"inset"</codeph>。
 
  <p>注意：Button 控件或 Panel 容器不支持 <codeph>borderStyle</codeph> 样式。要制作实线边框面板，请设置 <codeph>borderThickness</codeph> 属性，并根据需要将 <codeph>dropShadow</codeph> 属性设置为 <codeph>false</codeph>。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="uint">
<description>
  三维边框的黑色部分或二维边框的彩色部分。下列组件支持此样式：Button、CheckBox、ComboBox、MenuBar、NumericStepper、ProgressBar、RadioButton、ScrollBar、Slider 以及支持 <codeph>borderStyle</codeph> 样式的所有组件。默认值取决于组件类；如果未针对类进行覆盖，则默认值为 <codeph>0xAAB3B3</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="uint">
<description>
  组件的背景色。您可以使用 <codeph>backgroundColor</codeph> 或 <codeph>backgroundImage</codeph>，但是二者不可同时使用。请注意，某些组件（如 Button）没有背景，它们完全由按钮表面或其他图形填充。DataGrid 控件也不使用此样式。默认值为 <codeph>undefined</codeph>。如果此样式和 backgroundImage 样式都未定义，控件将采用透明背景。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash10" type="Class">
<description>
  实现此组件用来呈示文本的 IUITextField 的类。
 
  <p>它可以设置为 mx.core.UITextField 类（以使用 Flash Player 内置经典 TextField 类）或 mx.core.UIFTETextField 类（以使用 Text Layout Framework 改进文本呈示，包括双向布局）。</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  容器内文本的对齐方式。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数控件的默认值都为 <codeph>left</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>。对于这些组件，只有将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的区域设置。
 
  <p>FTE 和 TLF 使用此区域设置将 Unicode 字符映射到字体字型并查找后备字体。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Boolean">
<description>
  一个布尔值，表示是启用 (<codeph>true</codeph>) 还是禁用 (<codeph>false</codeph>) 字距调整。字距调整会调整某些字符对之间的间隔以提高可读性，并应只在必要时（例如使用大字体标题时）使用。仅嵌入的高级消除锯齿字体支持字距调整。某些字体（如宋体）和等宽字体（如 Courier New）不支持字距调整。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"bold"</codeph>。对于 Button 控件，默认值为 <codeph>"bold"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>thickness</codeph> 属性。此属性指定字型边缘的粗细。可能值为从 -200 到 200 之间的数字。 
  
  <p>仅当使用嵌入的高级消除锯齿字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，此属性才适用。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  文本的高度，以像素为单位。除 ColorPicker 控件之外，所有控件的默认值都为 10。ColorPicker 控件的默认值为 11。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>sharpness</codeph> 属性。此属性指定字型边缘的清晰度。可能值为从 -400 到 400 之间的数字。 
  
  <p>仅当使用嵌入的高级消除锯齿字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，此属性才适用。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>gridFitType</codeph> 属性。可能值为 <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>)、<codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) 和<codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>)。 
  
  <p>仅当使用嵌入的高级消除锯齿字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，此属性才适用。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="String">
<description>
  设置内部 TextField 的 <codeph>antiAliasType</codeph> 属性。可能值为 <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) 和 <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>)。 
  
  <p>默认值为 <codeph>"advanced"</codeph>。如果您使用的是嵌入的高级消除锯齿字体，此设置将启用高级消除锯齿功能。设置为 <codeph>"normal"</codeph> 可禁用高级消除锯齿功能。</p>
  
  <p>此样式对系统字体不起作用。</p>
  
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="uint">
<description>
  禁用时组件中文本的颜色。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  控件右边框与内容区域右边缘之间的像素数目。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  控件左边框与内容区域左边缘之间的像素数目。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.charts.chartClasses:DataTip" playerVersion="Flash9" type="Number">
<description>
  文本行之间附加的垂直空间。
 
  <p>默认值为 2。</p>
  <p>ComboBox 控件的默认值为 0。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  DataTip 控件为图表用户提供有关数据点的信息。当用户将鼠标移动到图形元素上方时，DataTip 控件将显示文本以提供该元素的相关信息。您可以使用 DataTip 控件引导用户使用您的应用程序，也可以自定义 DataTips 以提供附加功能。
 
  <p>要在图表上启用 DataTips，请将其 <codeph>showDataTips</codeph> 属性设置为 <codeph>true</codeph>。</p>
 
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.charts.chartClasses:DataTip_mx.events.FlexEvent.SHOW_show"><apiName>show</apiName><shortdesc>
  当组件可见时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SHOW</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当组件可见时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts.chartClasses:DataTip_mx.events.FlexEvent.HIDE_hide"><apiName>hide</apiName><shortdesc>
  当对象的状态从可见变为不可见时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.HIDE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当对象的状态从可见变为不可见时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.charts.chartClasses:DataTip:DataTip"><apiName>DataTip</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:DataTip:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:DataTip:protected:measure"><apiName>measure</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:DataTip:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="mx.charts.chartClasses:DataTip:maxTipWidth"><apiName>maxTipWidth</apiName><shortdesc>
      指定新 DataTip 控件的最大边框宽度，以像素为单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>300</apiData><apiType value="Number"/><apiDefaultValue>300
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定新 DataTip 控件的最大边框宽度，以像素为单位。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataTip:data:get"><apiName>data</apiName><shortdesc>
      HitData 结构，用于描述 DataTip 呈示的数据点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      HitData 结构，用于描述 DataTip 呈示的数据点。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataTip:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:ChartItemDragProxy"><apiName>ChartItemDragProxy</apiName><shortdesc>
  从图表控件中拖动项目时使用的默认拖动代理。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  从图表控件中拖动项目时使用的默认拖动代理。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:ChartItemDragProxy:ChartItemDragProxy"><apiName>ChartItemDragProxy</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.charts.chartClasses:IColumn"><apiName>IColumn</apiName><shortdesc>
  可以沿垂直轴进行群集化的 ChartElement 都应实现此接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  可以沿垂直轴进行群集化的 ChartElement 都应实现此接口。实现此接口的任何元素都可用作 <codeph>type</codeph> 属性设置为 "clustered" 的 ColumnSet 元素的子系列。ColumnSeries、HLOCSeries、CandleStickSeries 和 ColumnSet 类都实现了此接口。
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.charts.chartClasses:IColumn:mx.charts.chartClasses:IColumn:columnWidthRatio:set"><apiName>columnWidthRatio</apiName><shortdesc>
	  指定项目相对于类别大小的宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
	  指定项目相对于类别大小的宽度。值 <codeph>1</codeph> 表示使用整个空间，值 <codeph>0.6</codeph> 表示使用项目可用空间的 60%。通常不直接设置此属性。处于控制地位的 ColumSet 或 ColumnChart 会隐式指定此值。项目实际采用的宽度为 <codeph>columnWidthRatio</codeph> 和 <codeph>maxColumnWidth</codeph> 属性之中的较小者。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IColumn:mx.charts.chartClasses:IColumn:maxColumnWidth:set"><apiName>maxColumnWidth</apiName><shortdesc>
	  指定项目的绘制宽度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
	  指定项目的绘制宽度（以像素为单位）。项目实际采用的宽度为此属性和 <codeph>columnWidthRatio</codeph> 属性之中的较小者。通常不直接设置此属性。ColumSet 或 ColumnChart 对象将指定此值。项目实际采用的宽度为 <codeph>columnWidthRatio</codeph> 和 <codeph>maxColumnWidth</codeph> 属性之中的较小者。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IColumn:mx.charts.chartClasses:IColumn:offset:set"><apiName>offset</apiName><shortdesc>
	  指定项目中心偏离可用空间中心的距离（相对于类别大小）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/><apiDefaultValue>0
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  指定项目中心偏离可用空间中心的距离（相对于类别大小）。值的范围是介于 <codeph>-100</codeph> 和 <codeph>100</codeph> 之间的一个百分比。设置为 <codeph>0</codeph> 可使项目位于空间的中心位置。设置为 <codeph>-50</codeph> 可使项目的中心位于可用空间的开始处。通常不直接设置此属性。ColumSet 或 ColumnChart 对象将指定此值。
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:StackedSeries"><apiName>StackedSeries</apiName><shortdesc>
  堆叠的系列用作所有堆叠组系列（BarSet、ColumnSet 和 AreaSet）的公用基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:Series</apiBaseClassifier></apiClassifierDef><apiDesc>
  堆叠的系列用作所有堆叠组系列（BarSet、ColumnSet 和 AreaSet）的公用基类。StackedSeries 接受子系列元素 Array，并执行相应的计算将其垂直堆叠，以便每个系列都显示上一个系列的数据与自身值之和。此类不能直接使用。  
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:StackedSeries:StackedSeries"><apiName>StackedSeries</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:StackedSeries:protected:buildSubSeries"><apiName>buildSubSeries</apiName><shortdesc>
      必要时，可以处理子系列的 Array 供显示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      必要时，可以处理子系列的 Array 供显示。此方法可确保将所有子系列添加为此堆叠组的子项，并在必要时应用每系列自定义（例如，分配继承的数据提供程序或 clustering 属性）。
      <p>此方法还会在系列发生更改时向图表发出通知，这就必须重新分配隐式系列样式。必要时，堆叠组自动调用此方法。您应该考虑调用 <codeph>invalidateSeries()</codeph> 方法，而非直接调用上述方法。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:StackedSeries:protected:customizeSeries"><apiName>customizeSeries</apiName><shortdesc> 
      构建堆叠行为时对子系列应用任何自定义。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>g</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IChartElement</apiOperationClassifier><apiDesc>要自定义的图表元素。
      
      </apiDesc></apiParam><apiParam><apiItemName>i</apiItemName><apiType value="uint"/><apiDesc>子系列在系列数组中的位置。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      构建堆叠行为时对子系列应用任何自定义。默认情况下，此方法将为子系列分配继承的数据提供程序。派生的类可以覆盖此方法，以便进一步应用自定义。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:StackedSeries:protected:formatDataTip"><apiName>formatDataTip</apiName><shortdesc>
      提供 DataTip 对象的自定义文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>DataTip 的自定义文本。默认值为空字符串。必须覆盖此方法才能提供自定义 DataTip。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>hitData</apiItemName><apiOperationClassifier>mx.charts:HitData</apiOperationClassifier><apiDesc>堆栈中的 hitData 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      提供 DataTip 对象的自定义文本。堆叠组会覆盖其包含的子系列的 DataTip 文本，以显示与堆叠行为有关的其他信息。派生的类必须覆盖此方法才能定义自定义 DataTip 文本。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:StackedSeries:protected:invalidateSeries"><apiName>invalidateSeries</apiName><shortdesc>
      调用此方法可在下次调用 commitProperties() 方法时触发对 buildSubSeries() 方法的调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      调用此方法可在下次调用 <codeph>commitProperties()</codeph> 方法时触发对 <codeph>buildSubSeries()</codeph> 方法的调用。  
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:StackedSeries:invalidateStacking"><apiName>invalidateStacking</apiName><shortdesc>
      调用此方法可在下次调用 commitProperties() 方法时触发堆叠值的重新生成。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      调用此方法可在下次调用 <codeph>commitProperties()</codeph> 方法时触发堆叠值的重新生成。  
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:StackedSeries:stack"><apiName>stack</apiName><shortdesc>
      更新系列数据，并使用作为堆叠基础的系列数据值，以确保正确堆叠。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      更新系列数据，并使用作为堆叠基础的系列数据值，以确保正确堆叠。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:StackedSeries:protected:updateStacking"><apiName>updateStacking</apiName><shortdesc>
      遍历各个子系列，以构建堆叠的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      遍历各个子系列，以构建堆叠的值。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:StackedSeries:protected:negTotalsByPrimaryAxis"><apiName>negTotalsByPrimaryAxis</apiName><shortdesc>
      堆叠的负值总和。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      堆叠的负值总和。此属性包含一个 Dictionary，其项是由沿主轴分布的子系列表示的值（例如，x 轴值表示 ColumnSeries，y 轴值表示 BarSeries）；其值为该项处所有负子系列值的总和。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:protected:posTotalsByPrimaryAxis"><apiName>posTotalsByPrimaryAxis</apiName><shortdesc>
      堆叠的正值的总和。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      堆叠的正值的总和。此属性包含一个 Dictionary，其项是由沿主轴分布的子系列表示的值（例如，x 轴值表示 ColumnSeries，y 轴值表示 BarSeries）；其值为该项处所有正子系列值的总和。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:protected:stackedMaximum"><apiName>stackedMaximum</apiName><shortdesc>
      此堆叠系列表示的最大总和。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      此堆叠系列表示的最大总和。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:protected:stackedMinimum"><apiName>stackedMinimum</apiName><shortdesc>
      此堆叠系列表示的最小总和。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      此堆叠系列表示的最小总和。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:allowNegativeForStacked:get"><apiName>allowNegativeForStacked</apiName><shortdesc>
      将此属性设置为 true 会分别堆栈正值和负值
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      将此属性设置为 true 会分别堆栈正值和负值
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      为 x 轴上的项定义标签、刻度线和数据位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      为 x 轴上的项定义标签、刻度线和数据位置。使用 LinearAxis 类或 CategoryAxis 类可以设置 horizontalAxis 的属性，将其作为 MXML 中的子标签，或者在 ActionScript 中创建一个 LinearAxis 或 CategoryAxis 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:series:get"><apiName>series</apiName><shortdesc>
      一个由该堆栈组管理的子系列数组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      一个由该堆栈组管理的子系列数组。这些系列将按照此堆叠组的堆叠行为来显示，堆叠行为由 <codeph>type</codeph> 属性值定义。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:type:get"><apiName>type</apiName><shortdesc>
      此系列的分组行为。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      此系列的分组行为。所有堆叠系列都支持 <codeph>"overlaid"</codeph>、<codeph>"stacked"</codeph> 和 <codeph>"100%"</codeph>。当 <codeph>type</codeph> 属性为 <codeph>"overlaid"</codeph> 时，所有子系列将正常显示，不会应用特殊行为。当 <codeph>type</codeph> 属性为 <codeph>"stacked"</codeph> 时，每个子系列都将显示为其数据与先前所有系列的值之和。当 <codeph>type</codeph> 属性为 <codeph>"100%"</codeph> 时，每个子系列都将显示各自在所有系列的总和中所占的部分。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:StackedSeries:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      为 y 轴上的项目定义标签、刻度线和数据位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      为 y 轴上的项目定义标签、刻度线和数据位置。使用 LinearAxis 类或 CategoryAxis 类可以设置 horizontalAxis 的属性，将其作为 MXML 中的子标签，或者在 ActionScript 中创建一个 LinearAxis 或 CategoryAxis 对象。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:BoundedValue"><apiName>BoundedValue</apiName><shortdesc>
  一个绑定值，用于代表图表元素要在屏幕上显示的数据点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  一个绑定值，用于代表图表元素要在屏幕上显示的数据点。ChartElement 将描述其数据的 BoundedValue 报告给 Axis 对象。axis 将计算自动生成的范围。BoundedValue 封装特定范围内的数据点值和以像素为单位的边距，ChartElement 需要高于或低于该值才能显示它。例如，平面图上的绘图将报告数据以及边距以适应绘图的大小。柱形图可能报告 Ｙ 轴上的边距以适应显示在图表上方的标签。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:BoundedValue:BoundedValue"><apiName>BoundedValue</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>要显示的值。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>lowerMargin</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>下边距。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>upperMargin</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>上边距。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts.chartClasses:BoundedValue:lowerMargin"><apiName>lowerMargin</apiName><shortdesc>
	  边距（以像素为单位）需要低于此值才能正确显示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  边距（以像素为单位）需要低于此值才能正确显示。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:BoundedValue:upperMargin"><apiName>upperMargin</apiName><shortdesc> 
	  边距（以像素为单位）需要高于此值才能正确显示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc> 
	  边距（以像素为单位）需要高于此值才能正确显示。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:BoundedValue:value"><apiName>value</apiName><shortdesc>
	  要显示的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  要显示的值。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:ChartLabel"><apiName>ChartLabel</apiName><shortdesc>
  在图表控件上绘制数据标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  在图表控件上绘制数据标签。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:ChartLabel:ChartLabel"><apiName>ChartLabel</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  构造函数。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:ChartLabel:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:ChartLabel:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:ChartLabel:protected:measure"><apiName>measure</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:ChartLabel:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
	  </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="mx.charts.chartClasses:ChartLabel:data:get"><apiName>data</apiName><shortdesc>
	  定义标签内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
	  定义标签内容。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:PolarDataCanvas"><apiName>PolarDataCanvas</apiName><shortdesc>
 通过 PolarDataCanvas 类，用户可以相对于数据坐标而不是屏幕坐标来使用图形 API。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IDataCanvas</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:ChartElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 通过 PolarDataCanvas 类，用户可以相对于数据坐标而不是屏幕坐标来使用图形 API。
 
 <p>画布的绘图区域由 <codeph>radialAxis</codeph> 和 <codeph>angularAxis</codeph> 确定（如果已指定）。否则，将考虑使用图表的默认轴来计算画布绘图区域。</p>
 
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:PolarDataCanvas:PolarDataCanvas"><apiName>PolarDataCanvas</apiName><shortdesc>
     构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
     构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:addChildAt"><apiName>addChildAt</apiName><shortdesc>
     
     将一个 DisplayObject 子实例添加到该 DisplayObjectContainer 实例中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>在 <codeph>child</codeph> 参数中传递的 DisplayObject 实例。
     
     </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>要作为该 DisplayObjectContainer 实例的子项添加的 DisplayObject 实例。
     
     </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>添加该子项的索引位置。如果指定当前占用的索引位置，则该位置以及所有更高位置上的子对象会在子级列表中上移一个位置。 
         
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
     将一个 DisplayObject 子实例添加到该 DisplayObjectContainer 实例中。该子项将被添加到指定的索引位置。索引为 0 表示该 DisplayObjectContainer 对象的显示列表的后（底）部。
     
     <p>如果添加一个已将其它显示对象容器作为父项的子对象，则会从其它显示对象容器的子列表中删除该对象。 </p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:addChild"><apiName>addChild</apiName><shortdesc>
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:addDataChild"><apiName>addDataChild</apiName><shortdesc>
     这将向当前画布添加任一 DisplayObject 作为子项
     
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>        要作为子项添加到当前画布的 DisplayObject 实例。
     </apiDesc></apiParam><apiParam><apiItemName>angleLeft</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>    子项的左角坐标（在数据坐标中）。
     </apiDesc></apiParam><apiParam><apiItemName>radialTop</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>    子项的顶部径向坐标（在数据坐标中）。
     </apiDesc></apiParam><apiParam><apiItemName>angleRight</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>   子项的右角坐标（在数据坐标中）。
     </apiDesc></apiParam><apiParam><apiItemName>radialBottom</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc> 子项的底部径向坐标（在数据坐标中）。
     </apiDesc></apiParam><apiParam><apiItemName>angleCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>  子项的中角坐标（在数据坐标中）。
     </apiDesc></apiParam><apiParam><apiItemName>radialCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc> 子项的中径向坐标（在数据坐标中）。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     这将向当前画布添加任一 <codeph>DisplayObject</codeph> 作为子项
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:beginBitmapFill"><apiName>beginBitmapFill</apiName><shortdesc>
     用位图图像填充绘图区。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bitmap</apiItemName><apiType value="flash.display:BitmapData"/><apiDesc>包含要显示的位的透明或不透明位图图像。 
     
     </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>用于指定填充位置的角度。
     
     </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>从图表中心到填充的距离（以像素为单位）。
     
     </apiDesc></apiParam><apiParam><apiItemName>matrix</apiItemName><apiType value="flash.geom:Matrix"/><apiData>null</apiData><apiDesc>一个 matrix 对象（属于 flash.geom.Matrix 类），可用于在位图上定义转换。
     
     </apiDesc></apiParam><apiParam><apiItemName>repeat</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果为 <codeph>true</codeph>，则位图图像按平铺模式重复。如果为 <codeph>false</codeph>，位图图像不会重复，并且位图边缘将用于所有扩展出位图的填充区域。
     
     </apiDesc></apiParam><apiParam><apiItemName>smooth</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果为 <codeph>false</codeph>，则使用最近邻点算法来呈现放大的位图图像，而且该图像看起来是像素化的。如果为 <codeph>true</codeph>，则使用双线性算法来呈示放大的位图图像。使用最近邻点算法呈现较快。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     用位图图像填充绘图区。坐标取决于画布的 <codeph>angularAxis</codeph> 或 <codeph>radialAxis</codeph> 属性。
     
     <p>此方法的用法和参数与 flash.display.Graphics 类的 <codeph>beginBitmapFill()</codeph> 方法相同。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/beginBitmapFill()"><linktext>flash.display.Graphics.beginBitmapFill()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:beginFill"><apiName>beginFill</apiName><shortdesc conref="flash.display.Graphics#beginFill()">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>color</apiItemName><apiType value="uint"/></apiParam><apiParam><apiItemName>alpha</apiItemName><apiType value="Number"/><apiData>1</apiData></apiParam></apiOperationDef><apiDesc conref="flash.display.Graphics#beginFill()">
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Graphics.xml"><linktext>flash.display.Graphics</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:clear"><apiName>clear</apiName><shortdesc>
     清除画布。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     清除画布。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:curveTo"><apiName>curveTo</apiName><shortdesc>
     使用当前线条样式和由 (controlX, controlY) 指定的控制点绘制一条从当前绘画位置开始到 (anchorX, anchorY) 结束的曲线。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controlAngle</apiItemName><apiType value="any"/><apiDesc>用于指定控制点位置的角度。 
     
     </apiDesc></apiParam><apiParam><apiItemName>controlRadial</apiItemName><apiType value="any"/><apiDesc>从图表中心到控制点的距离（以像素为单位）。 
     
     </apiDesc></apiParam><apiParam><apiItemName>anchorAngle</apiItemName><apiType value="any"/><apiDesc>用于指定锚点位置的角度。  
     
     </apiDesc></apiParam><apiParam><apiItemName>anchorRadial</apiItemName><apiType value="any"/><apiDesc>从图表中心到锚点的距离（以像素为单位）。  
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     使用当前线条样式和由 (controlX, controlY) 指定的控制点绘制一条从当前绘图位置开始到 (anchorX, anchorY) 结束的曲线。传递到此方法的坐标以图表数据形式表示，而不是以屏幕坐标表示。
     
     <p>此方法的用法和参数与 flash.display.Graphics 类的 <codeph>curveTo()</codeph> 方法相同。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/curveTo()"><linktext>flash.display.Graphics.curveTo()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:describeData"><apiName>describeData</apiName><shortdesc>
     
      
      由具有控制地位的 DataTransform 调用，以获得由此 IChartElement 表示的数据描述。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个 Array，其中包含用于描述显示数据的 DataDescription 实例。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>确定从中获取数据描述的轴。
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>一个位域，指示特定轴需要关注 DataDescription 对象的哪些值。实现器通过仅计算必要字段即可实现优化。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      
      由具有控制地位的 DataTransform 调用，以获得由此 IChartElement 表示的数据描述。实现器填充并返回 mx.charts.chartClasses.DataDescription 对象 Array，以保证它们的数据能够按任一条轴进行正确显示，而这里的轴是根据所显示的数据（如最小值、最大值、间隔和单位大小）自动生成值的。多数元素类型都会返回包含一个 DataDescription 的 Array。聚合元素（如 BarSet 和 ColumnSet）可能会返回多个 DataDescription 实例，用于描述由其子元素显示的数据。调用此方法时，实现器会沿 <codeph>dimension</codeph> 参数说明的轴显示数据。对于所包含的图表支持的每条轴，都有可能调用此函数。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:drawCircle"><apiName>drawCircle</apiName><shortdesc>
     绘制一个圆。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>angle</apiItemName><apiType value="any"/><apiDesc>用于指定圆心位置的角度。 
     
     </apiDesc></apiParam><apiParam><apiItemName>radial</apiItemName><apiType value="any"/><apiDesc>从图表中心到圆心的距离（以像素为单位）。 
     
     </apiDesc></apiParam><apiParam><apiItemName>radius</apiItemName><apiType value="Number"/><apiDesc>圆的半径（以像素为单位）。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     绘制一个圆。在调用 <codeph>drawCircle()</codeph> 方法之前，通过调用 <codeph>linestyle()</codeph>、<codeph>lineGradientStyle()</codeph>、<codeph>beginFill()</codeph>、<codeph>beginGradientFill()</codeph> 或 <codeph>beginBitmapFill()</codeph> 方法来设置线条样式或/和填充。坐标以数据形式表示，而不是以屏幕坐标表示。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/drawCircle()"><linktext>flash.display.Graphics.drawCircle()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:drawEllipse"><apiName>drawEllipse</apiName><shortdesc>
     绘制一个椭圆。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>angleLeft</apiItemName><apiType value="any"/><apiDesc>用于指定椭圆边框左上角位置的角度。
     
     </apiDesc></apiParam><apiParam><apiItemName>radialTop</apiItemName><apiType value="any"/><apiDesc>从图表中心到椭圆边框左上角位置的距离（以像素为单位）。
     
     </apiDesc></apiParam><apiParam><apiItemName>angleRight</apiItemName><apiType value="any"/><apiDesc>用于指定椭圆边框右下角位置的角度。
     
     </apiDesc></apiParam><apiParam><apiItemName>radialBottom</apiItemName><apiType value="any"/><apiDesc>从图表中心到椭圆边框右下角位置的距离（以像素为单位）。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     绘制一个椭圆。在调用 <codeph>drawEllipse()</codeph> 方法之前，通过调用 <codeph>linestyle()</codeph>、<codeph>lineGradientStyle()</codeph>、<codeph>beginFill()</codeph>、<codeph>beginGradientFill()</codeph> 或 <codeph>beginBitmapFill()</codeph> 方法来设置线条样式或/和填充。坐标以数据形式表示，而不是以屏幕坐标表示。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/drawEllipse()"><linktext>flash.display.Graphics.drawEllipse()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:drawRect"><apiName>drawRect</apiName><shortdesc>
     绘制一个矩形。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>angleLeft</apiItemName><apiType value="any"/><apiDesc>用于指定矩形左上角位置的角度。
     
     </apiDesc></apiParam><apiParam><apiItemName>radialTop</apiItemName><apiType value="any"/><apiDesc>从图表中心到矩形左上角位置的距离（以像素为单位）。
     
     </apiDesc></apiParam><apiParam><apiItemName>angleRight</apiItemName><apiType value="any"/><apiDesc>用于指定矩形右下角位置的角度。
     
     </apiDesc></apiParam><apiParam><apiItemName>radialBottom</apiItemName><apiType value="any"/><apiDesc>从图表中心到矩形右下角位置的距离（以像素为单位）。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     绘制一个矩形。在调用 <codeph>drawRect()</codeph> 方法之前，通过调用 <codeph>linestyle()</codeph>、<codeph>lineGradientStyle()</codeph>、<codeph>beginFill()</codeph>、<codeph>beginGradientFill()</codeph> 或 <codeph>beginBitmapFill()</codeph> 方法来设置线条样式或/和填充。坐标以数据形式表示，而不是以屏幕坐标表示。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/drawRect()"><linktext>flash.display.Graphics.drawRect()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:drawRoundedRect"><apiName>drawRoundedRect</apiName><shortdesc>
     绘制一个圆角矩形。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>angleLeft</apiItemName><apiType value="any"/><apiDesc>用于指定矩形左上角位置的角度。
     
     </apiDesc></apiParam><apiParam><apiItemName>radialTop</apiItemName><apiType value="any"/><apiDesc>从图表中心到矩形左上角位置的距离（以像素为单位）。
     
     </apiDesc></apiParam><apiParam><apiItemName>angleRight</apiItemName><apiType value="any"/><apiDesc>用于指定矩形右下角位置的角度。
     
     </apiDesc></apiParam><apiParam><apiItemName>radialBottom</apiItemName><apiType value="any"/><apiDesc>从图表中心到矩形右下角位置的距离（以像素为单位）。
     
     </apiDesc></apiParam><apiParam><apiItemName>cornerRadius</apiItemName><apiType value="Number"/><apiDesc>角的半径（以像素为单位）。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     绘制一个圆角矩形。在调用 <codeph>drawRoundRect()</codeph> 方法之前，通过调用 <codeph>linestyle()</codeph>、<codeph>lineGradientStyle()</codeph>、<codeph>beginFill()</codeph>、<codeph>beginGradientFill()</codeph> 或 <codeph>beginBitmapFill()</codeph> 方法来设置线条样式或/和填充。坐标以数据形式表示，而不是以屏幕坐标表示。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/drawRoundedRect()"><linktext>flash.display.Graphics.drawRoundedRect()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:endFill"><apiName>endFill</apiName><shortdesc conref="flash.display.Graphics#endFill()"> 
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="flash.display.Graphics#endFill()"> 
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Graphics.xml"><linktext>flash.display.Graphics</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      当 dataProvider 中的基础数据发生更改时通知画布。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果数据已发生更改，则为 <codeph>true</codeph>。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当 dataProvider 中的基础数据发生更改时通知画布。此函数触发器将在下次调用 <codeph>commitProperties()</codeph> 方法时调用 <codeph>updateMapping()</codeph> 和 <codeph>updateTransform()</codeph> 方法。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:lineStyle"><apiName>lineStyle</apiName><shortdesc>
     指定一种线条样式，Flash 可将该样式用于随后调用对象的其它 Graphics 方法（如 lineTo() 或 drawCircle()）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>thickness</apiItemName><apiType value="Number"/><apiDesc>一个整数，以点为单位表示线条的粗细；有效值为 0 到 255。如果未指定数字，或者未定义该参数，则不绘制线条。如果传递的值小于 0，则默认值为 0。值 0 表示极细的粗细；最大粗细为 255。如果传递的值大于 255，则默认值为 255。 
     
     </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>线条的十六进制颜色值（例如，红色为 0xFF0000，蓝色为 0x0000FF 等）。如果未指明值，则默认值为 0x000000（黑色）。
     
     </apiDesc></apiParam><apiParam><apiItemName>alpha</apiItemName><apiType value="Number"/><apiData>1.0</apiData><apiDesc>表示线条颜色的 Alpha 值的数字；有效值为 0 到 1。如果未指明值，则默认值为 1（纯色）。如果值小于 0，则默认值为 0。如果值大于 1，则默认值为 1。
     
     </apiDesc></apiParam><apiParam><apiItemName>pixelHinting</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>用于指定是否提示笔触采用完整像素的布尔值。它同时影响曲线锚点的位置以及线条笔触大小本身。<codeph>pixelHinting</codeph> 设置为 true 时，线宽将调整为完整像素宽度。<codeph>pixelHinting</codeph> 设置为 false 时，曲线和直线将出现不连续的情况。
     
     </apiDesc></apiParam><apiParam><apiItemName>scaleMode</apiItemName><apiType value="String"/><apiData>normal</apiData><apiDesc>用于指定要使用哪种缩放模式的 flash.display.LineScaleMode 类的值：
     
     <ul>
       <li><codeph>LineScaleMode.NORMAL</codeph>：缩放对象始终缩放线条粗细（默认设置）。</li>
       <li><codeph>LineScaleMode.NONE</codeph>：从不缩放线条粗细。</li>
       <li><codeph>LineScaleMode.VERTICAL</codeph>：如果仅垂直缩放对象，则不缩放线条粗细。 </li>
       <li><codeph>LineScaleMode.HORIZONTAL</codeph>：如果仅水平缩放对象，则不缩放线条粗细。 </li>
     </ul>
     
     </apiDesc></apiParam><apiParam><apiItemName>caps</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>用于指定线条末端处端点类型的 flash.display.CapsStyle 类的值。有效值为：<codeph>CapsStyle.NONE</codeph>、<codeph>CapsStyle.ROUND</codeph> 和 <codeph>CapsStyle.SQUARE</codeph>。如果未指明值，则使用圆头端点。 
     
     </apiDesc></apiParam><apiParam><apiItemName>joints</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>用于指定在拐角处使用的连接外观的类型的 flash.display.JointStyle 类的值。有效值为：<codeph>JointStyle.BEVEL</codeph>、<codeph>JointStyle.MITER</codeph> 和 <codeph>JointStyle.ROUND</codeph>。如果未指明值，请使用圆角连接。 
     
     </apiDesc></apiParam><apiParam><apiItemName>miterLimit</apiItemName><apiType value="Number"/><apiData>3</apiData><apiDesc>一个表示将在哪个限制位置切断尖角的数字。有效值的范围是 1 到 255（超出该范围的值将舍入为 1 或 255）。此值只可用于 jointStyle 设置为 "miter" 的情况下。<codeph>miterLimit</codeph> 值表示向外延伸的尖角可以超出角边相交所形成的结合点的长度。该值表示线条粗细的因子。例如，<codeph>miterLimit</codeph> 因子为 2.5 且粗细为 10 像素时，尖角将在 25 像素处切断。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     指定一种线条样式，Flash 可将该样式用于随后调用对象的其他 Graphics 方法（如 <codeph>lineTo()</codeph> 或 <codeph>drawCircle()</codeph>）。
     
     <p>此方法的用法和参数与 flash.display.Graphics 类的 <codeph>lineStyle()</codeph> 方法相同。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/lineStyle()"><linktext>flash.display.Graphics.lineStyle()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:lineTo"><apiName>lineTo</apiName><shortdesc>
     使用当前线条样式绘制一条从当前绘图位置开始到 (angle, radial) 结束的直线；当前绘图位置随后会设置为 (angle, radial)。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>angle</apiItemName><apiType value="any"/><apiDesc>绘图位置的角度。
     
     </apiDesc></apiParam><apiParam><apiItemName>radial</apiItemName><apiType value="any"/><apiDesc>从图表中心到绘图位置的距离（以像素为单位）。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     使用当前线条样式绘制一条从当前绘图位置开始到 (angle, radial) 结束的直线；当前绘图位置随后会设置为 (angle, radial)。如果正在其中绘制的显示对象包含用 Flash 绘图工具创建的内容，则调用 <codeph>lineTo()</codeph> 方法将在该内容下面进行绘制。如果在对 moveTo() 方法进行任何调用之前调用了 <codeph>lineTo()</codeph>，则当前绘图的默认位置为 (0, 0)。如果缺少任何一个参数，则此方法将失败，并且当前绘图位置不改变。坐标以数据形式表示，而不是以屏幕坐标表示。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/lineTo()"><linktext>flash.display.Graphics.lineTo()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:mappingChanged"><apiName>mappingChanged</apiName><shortdesc>
     
      在一个或多个关联轴的映射发生更改时调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     
      在一个或多个关联轴的映射发生更改时调用此方法。如果由分配给此 ChartElement 的 DataTransform 表示的轴进行了某种形式的修改，则它将调用此方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:moveTo"><apiName>moveTo</apiName><shortdesc>
     将当前绘图位置移动到 (angle, radial)。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>angle</apiItemName><apiType value="any"/><apiDesc>绘图位置的角度。
     
     </apiDesc></apiParam><apiParam><apiItemName>radial</apiItemName><apiType value="any"/><apiDesc>从图表中心到绘图位置的距离（以像素为单位）。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     将当前绘图位置移动到 (angle, radial)。如果缺少任何一个参数，则此方法将失败，并且当前绘图位置不改变。坐标以数据形式表示，而不是以屏幕坐标表示。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/moveTo()"><linktext>flash.display.Graphics.moveTo()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:removeAllChildren"><apiName>removeAllChildren</apiName><shortdesc>
     删除画布的所有子数据项（DisplayObject 实例）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     删除画布的所有子数据项（DisplayObject 实例）。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:removeChildAt"><apiName>removeChildAt</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:removeChild"><apiName>removeChild</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:protected:stripNaNs"><apiName>stripNaNs</apiName><shortdesc>
      从提供的缓存中删除字段属性为 NaN 的所有项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>PolarDataCanvas 对象的数据缓存。
      
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>项目的 <codeph>field</codeph> 属性的值。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      从提供的缓存中删除 <codeph>field</codeph> 属性为 <codeph>NaN</codeph> 的所有项目。派生的类可以通过其 <codeph>updateFilter()</codeph> 实现来调用此方法，以便删除按轴筛选出来的所有 ChartItem 对象。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:updateDataChild"><apiName>updateDataChild</apiName><shortdesc>
     更新当前画布的所有子项的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>        要作为子项添加到当前画布的 DisplayObject 实例。
     </apiDesc></apiParam><apiParam><apiItemName>angleLeft</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>    子项的左角坐标（在数据坐标中）。
     </apiDesc></apiParam><apiParam><apiItemName>radialTop</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>    子项的顶部径向坐标（在数据坐标中）。
     </apiDesc></apiParam><apiParam><apiItemName>angleRight</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>   子项的右角坐标（在数据坐标中）。
     </apiDesc></apiParam><apiParam><apiItemName>radialBottom</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc> 子项的底部径向坐标（在数据坐标中）。
     </apiDesc></apiParam><apiParam><apiItemName>angleCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>  子项的中角坐标（在数据坐标中）。
     </apiDesc></apiParam><apiParam><apiItemName>radialCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc> 子项的中径向坐标（在数据坐标中）。
     
     <p>例如：
     <pre>
          var lbl:Label = new Label();
          lbl.text = "Last Month";
          canvas.addChild(lbl);
          canvas.updateDataChild(lbl,200,20);
     </pre>
     </p>
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     更新当前画布的所有子项的位置。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:protected:updateFilter"><apiName>updateFilter</apiName><shortdesc>
      当由画布表示的基础数据需要针对相关数据的转换轴表示的范围进行筛选时，调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      当由画布表示的基础数据需要针对相关数据的转换轴表示的范围进行筛选时，调用此方法。这适用于以下情况：基础数据发生更改；关联轴的范围发生更改。
      
      <p>如果实现自定义画布类型，则应覆盖此方法，并使用由自身相关数据转换管理的轴的 <codeph>filterCache()</codeph> 方法筛选出所有无关数据。<codeph>filterCache()</codeph> 方法将所有超出范围的值转换为 <codeph>NaN</codeph>。您必须确保在子类中调用了 <codeph>super.updateFilter()</codeph> 方法。</p>
      
      <p>通常不直接调用此方法，但是，如果需要确保您的数据已在给定点进行了筛选，请调用 PolarDataCanvas 类的 <codeph>validateTransform()</codeph> 方法。</p>
      
      <p>通常情况下，您可以假定调用此方法之前已经调用了 <codeph>updateData()</codeph> 和 <codeph>updateMapping()</codeph> 方法（如有必要）。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:protected:validateData"><apiName>validateData</apiName><shortdesc>
      调用画布的 updateMapping() 和 updateFilter() 方法（如有必要）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      调用画布的 <codeph>updateMapping()</codeph> 和 <codeph>updateFilter()</codeph> 方法（如有必要）。画布会在 <codeph>commitProperties()</codeph> 方法期间根据需要自动调用此方法，但如果在显式时间内需要此方法的生成值，派生画布可能会显式调用此方法。
      
      <p>按轴加载和映射数据旨在使轴可以随时接受数据。可以随时安全地显式调用此方法。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarDataCanvas:protected:validateTransform"><apiName>validateTransform</apiName><shortdesc>
      调用画布的 updateTransform() 方法（如有必要）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>如果数据提供者的基础数据已更改，则为 <codeph>true</codeph>，否则为 <codeph>false</codeph>。
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      调用画布的 <codeph>updateTransform()</codeph> 方法（如有必要）。画布会在 <codeph>commitProperties()</codeph> 方法期间根据需要自动调用此方法，但如果在显式时间内需要此方法的生成值，派生的画布可能会显式调用此方法。数据的筛选和转换取决于按轴计算的特定值，而这些值又取决于图表中显示的数据。如果这些值已经更新，则在错误的时间调用此函数可能导致额外的工作量。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:PolarDataCanvas:angularAxis:get"><apiName>angularAxis</apiName><shortdesc>
      为 x 轴上的项定义标签、刻度线和数据位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      为 x 轴上的项定义标签、刻度线和数据位置。使用 LinearAxis 类或 CategoryAxis 类可将 angularAxis 的属性设置为 MXML 中的子标签，也可以在 ActionScript 中创建 LinearAxis 或 CategoryAxis 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarDataCanvas:includeInRanges:get"><apiName>includeInRanges</apiName><shortdesc>
     如果为 true，则图表的计算范围将受此画布影响。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     如果为 <codeph>true</codeph>，则图表的计算范围将受此画布影响。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarDataCanvas:radialAxis:get"><apiName>radialAxis</apiName><shortdesc>
      为 y 轴上的项目定义标签、刻度线和数据位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      为 y 轴上的项目定义标签、刻度线和数据位置。使用 LinearAxis 类或 CategoryAxis 类可将角轴的属性设置为 MXML 中的子标签，也可以在 ActionScript 中创建 LinearAxis 或 CategoryAxis 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarDataCanvas:dataTransform:set"><apiName>dataTransform</apiName><shortdesc>
      
      与元素关联的 DataTransform 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:DataTransform</apiValueClassifier></apiValueDef><apiDesc>
      
      与元素关联的 DataTransform 对象。DataTransform 对象给出一组元素与一组轴对象之间的关系，用于将这些元素从数据空间转换到屏幕坐标，然后返回。图表元素使用其关联的 DataTransform 对象，来设计显示其数据的方法。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:IDataCanvas"><apiName>IDataCanvas</apiName><shortdesc>
  此接口仅供内部使用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  此接口仅供内部使用。 
  
  </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="mx.charts.chartClasses:AxisBase"><apiName>AxisBase</apiName><shortdesc>
  AxisBase 类可作为 Flex 支持的各种轴类型的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>Flex components inherit the following properties
  from the AxisBase class:</p>
 
  <pre>
  &lt;mx:<i>tagname</i>
    displayName="<i>No default</i>"
    title="<i>No default</i>"
  &gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  AxisBase 类可作为 Flex 支持的各种轴类型的基类。 
 
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:AxisBase:AxisBase"><apiName>AxisBase</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:AxisBase:dataChanged"><apiName>dataChanged</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#dataChanged()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#dataChanged()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:AxisBase:protected:describeData"><apiName>describeData</apiName><shortdesc>
      由具有控制地位的 DataTransform 调用，以获得由此 IChartElement 表示的数据描述。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>一个 BoundedValue 对象数组，其中包含用于描述显示数据的 DataDescription 实例。
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>一个位域，指示特定轴需要关注 DataDescription 对象的哪些值。实现器通过仅计算必要字段即可实现优化。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      由具有控制地位的 DataTransform 调用，以获得由此 IChartElement 表示的数据描述。实现器填充并返回 mx.charts.chartClasses.DataDescription 对象 Array，以保证它们的数据能够按任一条轴进行正确显示，而这里的轴是根据所显示的数据（如最小值、最大值、间隔和单位大小）自动生成值的。多数元素类型都会返回包含一个 DataDescription 的 Array。聚合元素（如 BarSet 和 ColumnSet）可能会返回多个 DataDescription 实例，用于描述由其子元素显示的数据。调用此方法时，实现器会沿 <codeph>dimension</codeph> 参数说明的轴显示数据。对于所包含的图表支持的每条轴，都有可能调用此函数。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.charts.chartClasses.xml#BoundedValue"><linktext>mx.charts.chartClasses.BoundedValue</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:AxisBase:registerDataTransform"><apiName>registerDataTransform</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#registerDataTransform()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transform</apiItemName><apiOperationClassifier>mx.charts.chartClasses:DataTransform</apiOperationClassifier><apiDesc>要注册的 DataTransform。
     
      </apiDesc></apiParam><apiParam><apiItemName>dimensionName</apiItemName><apiType value="String"/><apiDesc>维度的名称。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#registerDataTransform()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:AxisBase:unregisterDataTransform"><apiName>unregisterDataTransform</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#unregisterDataTransform()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transform</apiItemName><apiOperationClassifier>mx.charts.chartClasses:DataTransform</apiOperationClassifier><apiDesc>要取消注册的 DataTransform。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#unregisterDataTransform()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:AxisBase:displayName:get"><apiName>displayName</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#displayName">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.charts.chartClasses.IAxis#displayName">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:AxisBase:title:get"><apiName>title</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#title">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.charts.chartClasses.IAxis#title">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:AxisBase:unitSize:get"><apiName>unitSize</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#unitSize">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.charts.chartClasses.IAxis#unitSize">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:AxisBase:chartDataProvider:set"><apiName>chartDataProvider</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#chartDataProvider">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.charts.chartClasses.IAxis#chartDataProvider">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:RenderData"><apiName>RenderData</apiName><shortdesc>
  RenderData 结构，供图表元素用于存储完全呈示图表所需的所有相关的值和数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  RenderData 结构，供图表元素用于存储完全呈示图表所需的所有相关的值和数据。将这些值存储在另外的结构中，需要时可以将图表元素与指定给它们的属性和数据分开显示。此功能适用于图表效果。例如，SeriesInterpolate 将替换根据以前和以后的 renderData 结构计算得出的临时值。此外，SeriesSlide 和 SeriesZoom 可使用计算出的值替换临时的 RenderData 结构以准确呈示效果。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:RenderData:RenderData"><apiName>RenderData</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>ChartItems 列表，给出的系列的 <codeph>dataProvider</codeph> 中的项目。
     
      </apiDesc></apiParam><apiParam><apiItemName>filteredCache</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>ChartItems 列表，给出系列经过筛选后仍存在的 <codeph>dataProvider</codeph> 中的项目。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:RenderData:clone"><apiName>clone</apiName><shortdesc>
      创建呈示数据的副本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>RenderData 对象的新副本。
      
      </apiDesc><apiOperationClassifier>mx.charts.chartClasses:RenderData</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      创建呈示数据的副本。在新副本中，指向其他对象的属性将继续指向最初所指向的同一对象。
      
      <p>如果将此类子类化，则必须覆盖此方法。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:RenderData:bounds"><apiName>bounds</apiName><shortdesc>
      系列在屏幕上显示的所有项目的范围，随系列的坐标系而变化。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      系列在屏幕上显示的所有项目的范围，随系列的坐标系而变化。此值在呈示期间适用于各种效果。当效果调用 <codeph>getElementBounds()</codeph> 方法时，系列将填充此值。除非受到特殊请求，否则系列无需填充此字段。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:RenderData:cache"><apiName>cache</apiName><shortdesc>
      ChartItems 列表，给出的系列的 dataProvider 中的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      ChartItems 列表，给出的系列的 <codeph>dataProvider</codeph> 中的项目。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:RenderData:elementBounds"><apiName>elementBounds</apiName><shortdesc>
      用于描述系列的 ChartItems 范围的所有矩形的 Array，与系列的坐标系有关。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      用于描述系列的 ChartItems 范围的所有矩形的 Array，与系列的坐标系有关。效果使用此 Array 来生成效果呈示。效果将调用 <codeph>getElementBounds()</codeph> 方法，这会使系列填充此值。除非受到特殊请求，否则系列无需填充此字段。Effects 将修改此 Array，从而在呈示效果期间反映项目的当前位置。如果在系列的 <codeph>renderData</codeph> 上填充了此值，则系列将基于这些矩形（而非自身的数据）呈示自身。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:RenderData:filteredCache"><apiName>filteredCache</apiName><shortdesc>
      ChartItems 列表，给出系列经过筛选后仍存在的 dataProvider 中的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      ChartItems 列表，给出系列经过筛选后仍存在的 <codeph>dataProvider</codeph> 中的项目。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:RenderData:visibleRegion"><apiName>visibleRegion</apiName><shortdesc>
      用于描述坐标可达范围的矩形。在此范围内，系列可以显示在屏幕上。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      用于描述坐标可达范围的矩形。在此范围内，系列可以显示在屏幕上。此值在呈示期间适用于各种效果。效果将调用 <codeph>getElementBounds()</codeph> 方法填充此值。除非受到特殊请求，否则系列无需填充此字段。如果保留为 <codeph>null</codeph>，则效果将假设此元素的可视范围是元素自身的边框，相对于元素表示为（0, 0, 宽度, 高度）。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:RenderData:length:get"><apiName>length</apiName><shortdesc>
      此呈示数据中表示的项目数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
      此呈示数据中表示的项目数。 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:NumericAxis"><apiName>NumericAxis</apiName><shortdesc>
  NumericAxis 类作为轴类型的通用基类，此轴类型表示定义的最小值和最大值之间的连续范围。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IAxis</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:AxisBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  NumericAxis 类作为轴类型的通用基类，此轴类型表示定义的最小值和最大值之间的连续范围。内置的 LinearAxis、LogAxis 和 DateTimeAxis 类都可以扩展此基类。
  
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#DateTimeAxis"><linktext>mx.charts.DateTimeAxis</linktext></link><link href="mx.charts.xml#LinearAxis"><linktext>mx.charts.LinearAxis</linktext></link><link href="mx.charts.xml#LogAxis"><linktext>mx.charts.LogAxis</linktext></link></related-links><apiConstructor id="mx.charts.chartClasses:NumericAxis:NumericAxis"><apiName>NumericAxis</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:NumericAxis:protected:adjustMinMax"><apiName>adjustMinMax</apiName><shortdesc>
      调整轴标签的生成范围或分配范围。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>minValue</apiItemName><apiType value="Number"/><apiDesc>计算的最小值。
      </apiDesc></apiParam><apiParam><apiItemName>maxValue</apiItemName><apiType value="Number"/><apiDesc>计算的最大值。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      调整轴标签的生成范围或分配范围。在轴的更新周期中调用此方法。子类可以覆盖此方法以对值进行特殊处理。默认情况下，不会对此范围进行任何调整。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:protected:buildLabelCache"><apiName>buildLabelCache</apiName><shortdesc>
      使用表示轴当前值的标签填充 labelCache 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>如果重新生成标签，则为 true。
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      使用表示轴当前值的标签填充 <codeph>labelCache</codeph> 属性。子类必须实现此函数。此函数将被多次调用，因此应始终在执行计算前检查 <codeph>labelCache</codeph> 属性是否为 <codeph>null</codeph>。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:protected:buildMinorTickCache"><apiName>buildMinorTickCache</apiName><shortdesc>
      为此轴生成的次要刻度线数组构建位置 Array。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>0 和 1 之间的位置 Array 表示在轴最小值和最大值之间呈示次要刻度线的点。
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      为此轴生成的次要刻度线数组构建位置 Array。子类必须实现此函数。NumericAxis 自动调用此函数。应该访问 <codeph>minorTicks</codeph> 属性，而不是直接调用此函数。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:filterCache"><apiName>filterCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#filterCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>可从中读取和存储转换后的值的对象数组。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>包含过滤之前的值的缓存 Array 中所含的对象域。
     
      </apiDesc></apiParam><apiParam><apiItemName>filteredField</apiItemName><apiType value="String"/><apiDesc>存储过滤后的值的缓存 Array 中所含的对象域。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#filterCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:formatForScreen"><apiName>formatForScreen</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#formatForScreen()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>DataTip 的文本。
      
      </apiDesc></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>转换为 String 类型的值。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#formatForScreen()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:getLabelEstimate"><apiName>getLabelEstimate</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#getLabelEstimate()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier><apiDesc>AxisLabel 对象的数组。
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#getLabelEstimate()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:getLabels"><apiName>getLabels</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#getLabels()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier><apiDesc>AxisLabel 对象的数组。
      
      </apiDesc></apiReturn><apiParam><apiItemName>minimumAxisLength</apiItemName><apiType value="Number"/><apiDesc>轴的最小长度（以像素为单位）。轴长可以大于此值，但不可以小于此值。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#getLabels()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:protected:guardMinMax"><apiName>guardMinMax</apiName><shortdesc>
      保护此范围，以防使用对此轴类型无效的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>如果不需要进行调整则为 null，或者包含 <codeph>[min,max]</codeph> 格式的调整值的 Array。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>min</apiItemName><apiType value="Number"/><apiDesc>计算的最小值。
      </apiDesc></apiParam><apiParam><apiItemName>max</apiItemName><apiType value="Number"/><apiDesc>计算的最大值。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      保护此范围，以防使用对此轴类型无效的值。在轴的更新周期中调用此函数以保证不会生成无效的范围。子类可以覆盖此类并定义适合其轴类型的逻辑。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:protected:invalidateCache"><apiName>invalidateCache</apiName><shortdesc>
      使表示此轴值的缓存标签和刻度线失效。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      使表示此轴值的缓存标签和刻度线失效。每当标签和刻度线计算中使用的值发生更改时，派生类都应调用此函数。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:invertTransform"><apiName>invertTransform</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#invertTransform()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>包含转换后的值的对象。
      
      </apiDesc></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>轴的范围。此参数应介于 0 和 1 之间，0 表示轴的下限，1 表示轴的上限。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#invertTransform()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:mapCache"><apiName>mapCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#mapCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>可从中读取和存储转换后的值的对象数组。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>包含转换之前的值的缓存 Array 中所含的对象域。
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>存储转换后的值的缓存 Array 中所含的对象域。
     
      </apiDesc></apiParam><apiParam><apiItemName>indexValues</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果要映射的值是索引值，则此参数为 <codeph>true</codeph>；如果这些值是自然数据值，则此参数为 <codeph>false</codeph>。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#mapCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:preferDropLabels"><apiName>preferDropLabels</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#preferDropLabels()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>如果可以在不丢失数据的情况下删除标签，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。 
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#preferDropLabels()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:reduceLabels"><apiName>reduceLabels</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#reduceLabels()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier><apiDesc>通过减少标签的数目来解决重叠问题的新标签组。
      
      </apiDesc></apiReturn><apiParam><apiItemName>intervalStart</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>标签重叠处间隔的开始位置。
     
      </apiDesc></apiParam><apiParam><apiItemName>intervalEnd</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>标签重叠处间隔的结束位置。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#reduceLabels()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:transformCache"><apiName>transformCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#transformCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>可从中读取和存储映射后的值的对象 Array。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>包含映射之前的值的缓存 Array 中所含的对象域。
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>存储映射后的值的缓存 Array 中所含的对象域。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#transformCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:NumericAxis:update"><apiName>update</apiName><shortdesc>
      
      更新图表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      更新图表。可在每个帧中多次调用此方法。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:NumericAxis:protected:assignedMaximum"><apiName>assignedMaximum</apiName><shortdesc>
      显式指定的最大值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      显式指定的最大值。如果未指定任何值，则为 <codeph>NaN</codeph>。通常，应使用 <codeph>computedMaximum</codeph> 字段执行计算。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:assignedMinimum"><apiName>assignedMinimum</apiName><shortdesc>
      显式指定的最小值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      显式指定的最小值。如果未指定任何值，则为 <codeph>NaN</codeph>。通常，应使用 <codeph>computedMinimum</codeph> 字段执行计算。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:computedInterval"><apiName>computedInterval</apiName><shortdesc>
      此轴表示的计算间隔。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      此轴表示的计算间隔。AxisRenderer 和 Gridlines 类使用 <codeph>computedInterval</codeph> 来确定呈示刻度线和网格线的位置。NumericAxis 基类查看此字段的更改以确定是否需要重新呈示此图表。派生类负责计算此字段的值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:computedMaximum"><apiName>computedMaximum</apiName><shortdesc>
      此轴表示的最大计算值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      此轴表示的最大计算值。如果用户已显式指定最大值，则通常 <codeph>computedMaximum</codeph> 和 <codeph>assignedMaximum</codeph> 属性相同。否则，由在图表中表示的值生成 <codeph>computedMaximum</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:computedMinimum"><apiName>computedMinimum</apiName><shortdesc>
      此轴表示的最小计算值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      此轴表示的最小计算值。如果用户已显式指定最小值，则通常 <codeph>computedMinimum</codeph> 和 <codeph>assignedMinimum</codeph> 属性相同。否则，由在图表中表示的值生成 <codeph>computedMinimum</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:labelCache"><apiName>labelCache</apiName><shortdesc>
      用于表示此轴的最新生成的 AxisLabel 对象组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      用于表示此轴的最新生成的 AxisLabel 对象组。如果轴已修改并且需要新的标签，则属性为 <codeph>null</codeph>。要保证 <codeph>labelCache</codeph> 属性的值正确，请在访问 <codeph>labelCache</codeph> 属性前调用 <codeph>buildLabelCache()</codeph> 方法。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:labelMaximum"><apiName>labelMaximum</apiName><shortdesc>
      标签所放位置的最大值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      标签所放位置的最大值。计算出调整的最小值后，许多轴类型会进一步扩展轴范围以容纳图表中显示的其他项目（如标签和边框）。在针对这些项目进行调整<i>之前</i>，此值表示图表中的最大值。通常轴会生成标签以确保标记了此值，而不是调整轴的最大值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:labelMinimum"><apiName>labelMinimum</apiName><shortdesc>
      标签所放位置的最小值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      标签所放位置的最小值。计算出调整的最小值后，许多轴类型会进一步扩展轴范围以容纳图表中显示的其他项目（如标签和边框）。在针对这些项目进行调整<i>之前</i>，此值表示图表中的最小值。通常轴会生成标签以确保标记了此值，而不是调整轴的最小值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:minorTickCache"><apiName>minorTickCache</apiName><shortdesc>
      用于表示此轴的最新生成的刻度线组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      用于表示此轴的最新生成的刻度线组。如果轴已修改并且需要新的标签和刻度线，则属性为 <codeph>null</codeph>。使用公共存取器 <codeph>minorTicks</codeph> 来构建所需的次要刻度线。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:autoAdjust:get"><apiName>autoAdjust</apiName><shortdesc>
      指定 Flex 是否舍入值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定 Flex 是否舍入值。如果为 <codeph>false</codeph>，则 Flex 不会舍入由 <codeph>minimum</codeph> 和 <codeph>maximum</codeph> 属性设置的值，也不会修改默认的 <codeph>minimum</codeph> 和 <codeph>maximum</codeph> 值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:baseAtZero:get"><apiName>baseAtZero</apiName><shortdesc>
      指定 Flex 是否尝试保持最小值和最大值基于零。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定 Flex 是否尝试保持 <codeph>minimum</codeph> 和 <codeph>maximum</codeph> 基于零。如果所有轴值都是正值，则轴的最小值为零。如果所有轴值都是负值，则轴的最大值为零。  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:baseline:get"><apiName>baseline</apiName><shortdesc>
      只要此值大于 0，则为此轴的最小计算值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      只要此值大于 0，则为此轴的最小计算值。如果最大值小于等于 0，则 <codeph>baseline</codeph> 属性为最大计算值。如果两个值都不小于 0，则 <codeph>baseline</codeph> 属性为 0。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:dataDescriptions:get"><apiName>dataDescriptions</apiName><shortdesc>
      描述图表要显示的数据的 DataDescription 结构 Array。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      描述图表要显示的数据的 DataDescription 结构 Array。轴可以使用此属性为属性生成值，如属性范围。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:direction:get"><apiName>direction</apiName><shortdesc>
 	  确定呈示轴的方向。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"normal"
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
 	  确定呈示轴的方向。可能的值为 <codeph>normal</codeph> 和 <codeph>inverted</codeph>。所有派生类都应考虑根据 <codeph>direction</codeph> 设置 min 和 max 的方式。所有系列都应考虑根据其基础轴的 <codeph>direction</codeph> 呈示它的方式。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      调用以设置轴值的格式，使其显示为标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      调用以设置轴值的格式，使其显示为标签。<codeph>labelFunction</codeph> 包含以下签名：
      <pre>
      function <i>function_name</i>(<i>labelValue</i>:Object, <i>previousValue</i>:Object, <i>axis</i>:IAxis):String { ... }
      </pre>
      
      <p>如果知道函数要设置其格式的数据类型，则可以指定 <codeph>labelValue</codeph> 和 <codeph>previousValue</codeph> 参数的显式类型。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:minorTicks:get"><apiName>minorTicks</apiName><shortdesc>
      用于表示此轴的生成的次要刻度线 Array。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      用于表示此轴的生成的次要刻度线 Array。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:padding:get"><apiName>padding</apiName><shortdesc>
      在屏幕上显示值时，指定 Flex 添加到轴的最小计算值和最大计算值的填充。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      在屏幕上显示值时，指定 Flex 添加到轴的最小计算值和最大计算值的填充。  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:parseFunction:get"><apiName>parseFunction</apiName><shortdesc> 
      指定 parseFunction 以自定义如何将图表中呈示的值转换成数值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> 
      指定 <codeph>parseFunction</codeph> 以自定义如何将图表中呈示的值转换成数值。自定义 <codeph>parseFunction</codeph> 传递数据值，应返回表示相同值的相应数字。默认情况下，此轴使用 ECMA 函数 <codeph>parseFloat()</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:requiredDescribedFields:get"><apiName>requiredDescribedFields</apiName><shortdesc>
      此轴涉及的 DescribeData 结构字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
      此轴涉及的 DescribeData 结构字段。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:NumericAxis:protected:ticks:get"><apiName>ticks</apiName><shortdesc>
      此轴的刻度线 Array。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      此轴的刻度线 Array。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:IStackable"><apiName>IStackable</apiName><shortdesc>
  可以进行堆叠的任何系列都可以实现 IStackable 接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  可以进行堆叠的任何系列都可以实现 IStackable 接口。堆栈组（ColumnSet、BarSet、AreaSet）要求在堆叠时为其分配的每个子系列都要实现此接口。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.charts.chartClasses:IStackable:mx.charts.chartClasses:IStackable:stack"><apiName>stack</apiName><shortdesc>
	  堆叠系列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>新堆叠的系列中的最大值。	 
	  
	  </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>stackedXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>包含系列应在其上堆叠的基础值。dictionary 中的键是 y 值，值是 x 值。
	  
	  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable</apiOperationClassifier><apiDesc>堆栈中的上一元素。例如，如果元素类型相同，您就可以访问此属性，以避免在呈示时执行重复工作。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  堆叠系列。通常，系列通过实现 <codeph>updateData()</codeph> 方法，加载来自数据提供程序的数据。但是，堆叠的系列需要执行特殊操作，因为此类系列的值不一定存储在数据提供程序中。此类系列的值为存储在其数据提供程序中的任何值，与它堆叠在其上的对象加载的值之和。
	  <p>自定义堆叠系列应加载来自数据提供程序的数据，并将其与存储在 dictionary 中的基值相加以获取应该呈示的实际值，最后使用新的和值替换 dictionary 中的值，从而实现 <codeph>stack()</codeph> 方法。</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:IStackable:mx.charts.chartClasses:IStackable:stacker:get"><apiName>stacker</apiName><shortdesc>
	  与此系列相关的 StackedSeries。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:StackedSeries</apiValueClassifier></apiValueDef><apiDesc>
	  与此系列相关的 StackedSeries。栈式存储器管理系列的堆叠行为。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IStackable:mx.charts.chartClasses:IStackable:stackTotals:set"><apiName>stackTotals</apiName><shortdesc>
	  系列的堆栈总数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
	  系列的堆栈总数。
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:IBar"><apiName>IBar</apiName><shortdesc>
  任何可以垂直构建群集的系列都可以实现 IBar 接口，如 BarSeries。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  任何可以垂直构建群集的系列都可以实现 IBar 接口，如 BarSeries。BarSet 系列类型要求为其分配的所有子系列都实现此接口。
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.charts.chartClasses:IBar:mx.charts.chartClasses:IBar:barWidthRatio:set"><apiName>barWidthRatio</apiName><shortdesc>
	  指定项目相对于类别的呈示宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
	  指定项目相对于类别的呈示宽度。值 <codeph>1</codeph> 表示使用整个空间，值 <codeph>0.6</codeph> 表示使用该类别可用空间的 60%。通常不直接设置此属性。处于控制地位的 BarSet 或 BarChart 会隐式分配此值。所采用的实际大小为 <codeph>barWidthRatio</codeph> 和 <codeph>maxbarWidth</codeph> 属性之中的较小者
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IBar:mx.charts.chartClasses:IBar:maxBarWidth:set"><apiName>maxBarWidth</apiName><shortdesc>
	  指定项目的绘制宽度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
	  指定项目的绘制宽度（以像素为单位）。实际使用的项目宽度是此样式和 <codeph>barWidthRatio</codeph> 属性中的较小者。通常不直接设置此属性。BarSet 或 BarChart 对象分配此值。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IBar:mx.charts.chartClasses:IBar:offset:set"><apiName>offset</apiName><shortdesc>
	  指定项目中心偏离可用空间中心的距离（相对于类别大小）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/><apiDefaultValue>0
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  指定项目中心偏离可用空间中心的距离（相对于类别大小）。值的范围是介于 <codeph>-100</codeph> 和 <codeph>100</codeph> 之间的一个百分比。设置为 <codeph>0</codeph> 可使项目位于空间的中心位置。设置为 <codeph>-50</codeph> 可使项目的中心位于可用空间的开始处。通常不直接设置此属性。BarSet 或 BarChart 对象分配此值。
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:AxisLabelSet"><apiName>AxisLabelSet</apiName><shortdesc>
  AxisLabelSet 给出实现 IAxis 而生成的标签和刻度数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  AxisLabelSet 给出实现 IAxis 而生成的标签和刻度数据。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:AxisLabelSet:AxisLabelSet"><apiName>AxisLabelSet</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts.chartClasses:AxisLabelSet:accurate"><apiName>accurate</apiName><shortdesc>
      从 getLabelEstimate() 方法返回后，如果评估能够准确提供要显示的最终标签，则设置为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
      从 <codeph>getLabelEstimate()</codeph> 方法返回后，如果评估能够准确提供要显示的最终标签，则设置为 <codeph>true</codeph>。此属性与其他上下文无关。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:AxisLabelSet:labels"><apiName>labels</apiName><shortdesc>
      一个 AxisLabel 对象数组，提供生成的轴的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      一个 AxisLabel 对象数组，提供生成的轴的值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:AxisLabelSet:minorTicks"><apiName>minorTicks</apiName><shortdesc>
      一个从 0 到 1 的值数组，提供沿此轴放置的次刻度标记的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      一个从 0 到 1 的值数组，提供沿此轴放置的次刻度标记的位置。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:AxisLabelSet:ticks"><apiName>ticks</apiName><shortdesc>
      一个从 0 到 1 的值数组，提供沿此轴放置的刻度标记的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      一个从 0 到 1 的值数组，提供沿此轴放置的刻度标记的位置。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:CartesianDataCanvas"><apiName>CartesianDataCanvas</apiName><shortdesc>
 此类允许您使用图形 API 添加图形元素，如线条、椭圆和其他形状。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataChildren"/></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:CartesianDataCanvas&gt;</code> tag inherits all the
  properties of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:CartesianDataCanvas
    <strong>Properties</strong>
    dataChildren="<i>No default</i>"
    horizontalAxis="<i>No default</i>"
    includeInRanges="<i>false</i>"
    verticalAxis="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IDataCanvas</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:ChartElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 此类允许您使用图形 API 添加图形元素，如线条、椭圆和其他形状。传递给图形 API 的值为数据坐标形式，而非屏幕坐标形式。您还可以像在容器中添加子项一样向画布中添加任何 DisplaObject。
 
 <p>画布的绘图区域由 <codeph>verticalAxis</codeph> 和 <codeph>horizontalAxis</codeph> 确定（如果已指定）。否则，画布将使用图表的默认轴计算绘图区域。</p>
 
 <p>以参数形式传递给绘图 API 的数据坐标可能是数据坐标的实际值，也可能是 <codeph>CartesianCanvasValue</codeph> 类型的对象，该对象能够以像素为单位存储数据坐标值和偏移量。</p>
 
 </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:CartesianDataCanvas:CartesianDataCanvas"><apiName>CartesianDataCanvas</apiName><shortdesc>
     构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
     构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:addChildAt"><apiName>addChildAt</apiName><shortdesc>
     
     将一个 DisplayObject 子实例添加到该 DisplayObjectContainer 实例中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>在 <codeph>child</codeph> 参数中传递的 DisplayObject 实例。
     
     </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>要作为该 DisplayObjectContainer 实例的子项添加的 DisplayObject 实例。
     
     </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>添加该子项的索引位置。如果指定当前占用的索引位置，则该位置以及所有更高位置上的子对象会在子级列表中上移一个位置。 
         
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
     将一个 DisplayObject 子实例添加到该 DisplayObjectContainer 实例中。该子项将被添加到指定的索引位置。索引为 0 表示该 DisplayObjectContainer 对象的显示列表的后（底）部。
     
     <p>如果添加一个已将其它显示对象容器作为父项的子对象，则会从其它显示对象容器的子列表中删除该对象。 </p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:addChild"><apiName>addChild</apiName><shortdesc>
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:addDataChild"><apiName>addDataChild</apiName><shortdesc>
     将指定的显示对象作为子项添加到当前画布中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>    要作为子项添加到当前画布的显示对象。
     </apiDesc></apiParam><apiParam><apiItemName>left</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>     <codeph>child</codeph> 的左 x 坐标（数据坐标中）。
     </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>      <codeph>child</codeph> 的上 y 坐标（数据坐标中）。
     </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>    <codeph>child</codeph> 的右 x 坐标（数据坐标中）。
     </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>   <codeph>child</codeph> 的下 y 坐标（数据坐标中）。
     </apiDesc></apiParam><apiParam><apiItemName>hCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>  <codeph>child</codeph> 的中 x 坐标（数据坐标中）。
     </apiDesc></apiParam><apiParam><apiItemName>vCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>  <codeph>child</codeph> 的中 y 坐标（数据坐标中）。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     将指定的显示对象作为子项添加到当前画布中。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:beginBitmapFill"><apiName>beginBitmapFill</apiName><shortdesc>
     用位图图像填充绘图区。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bitmap</apiItemName><apiType value="flash.display:BitmapData"/><apiDesc>包含要显示的位的透明或不透明位图图像。 
     
     </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>填充的 x 坐标。
     
     </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>填充的 y 坐标。
     
     </apiDesc></apiParam><apiParam><apiItemName>matrix</apiItemName><apiType value="flash.geom:Matrix"/><apiData>null</apiData><apiDesc>一个 matrix 对象（属于 flash.geom.Matrix 类），可用于在位图上定义转换。
     
     </apiDesc></apiParam><apiParam><apiItemName>repeat</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果为 <codeph>true</codeph>，则位图图像按平铺模式重复。如果为 <codeph>false</codeph>，位图图像不会重复，并且位图边缘将用于所有扩展出位图的填充区域。
     
     </apiDesc></apiParam><apiParam><apiItemName>smooth</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果为 <codeph>false</codeph>，则使用最近邻点算法来呈现放大的位图图像，而且该图像看起来是像素化的。如果为 <codeph>true</codeph>，则使用双线性算法来呈示放大的位图图像。使用最近邻点算法呈现较快。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     用位图图像填充绘图区。传递给此方法的坐标是相对于画布的水平轴和垂直轴的相对坐标。
     
     <p>此方法的用法和参数与 flash.display.Graphics 类的 <codeph>beginBitmapFill()</codeph> 方法相同。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/beginBitmapFill()"><linktext>flash.display.Graphics.beginBitmapFill()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:beginFill"><apiName>beginFill</apiName><shortdesc conref="flash.display.Graphics#beginFill()">
     注意：除了 beginGradientFill() 和 beginShaderFill() 方法之外，来自 flash.display.Graphics 类的 beginFill() 方法的下列信息都适用于此方法：
      
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>color</apiItemName><apiType value="uint"/></apiParam><apiParam><apiItemName>alpha</apiItemName><apiType value="Number"/><apiData>1</apiData></apiParam></apiOperationDef><apiDesc conref="flash.display.Graphics#beginFill()">
     <i>注意：除了 <codeph>beginGradientFill()</codeph> 和 <codeph>beginShaderFill()</codeph> 方法之外，来自 <codeph>flash.display.Graphics</codeph> 类的 <codeph>beginFill()</codeph> 方法的下列信息都适用于此方法：</i>
      
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Graphics.xml"><linktext>flash.display.Graphics</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:clear"><apiName>clear</apiName><shortdesc conref="flash.display.Graphics#clear()">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="flash.display.Graphics#clear()">
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Graphics.xml"><linktext>flash.display.Graphics</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:curveTo"><apiName>curveTo</apiName><shortdesc>
     使用当前线条样式和由 (controlX, controlY) 指定的控制点绘制一条从当前绘画位置开始到 (anchorX, anchorY) 结束的曲线。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controlX</apiItemName><apiType value="any"/><apiDesc>控制点的 x 坐标。 
     
     </apiDesc></apiParam><apiParam><apiItemName>controlY</apiItemName><apiType value="any"/><apiDesc>控制点的 y 坐标。
     
     </apiDesc></apiParam><apiParam><apiItemName>anchorX</apiItemName><apiType value="any"/><apiDesc>锚点的 x 坐标。 
     
     </apiDesc></apiParam><apiParam><apiItemName>anchorY</apiItemName><apiType value="any"/><apiDesc>锚点的 y 坐标。  
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     使用当前线条样式和由 (controlX, controlY) 指定的控制点绘制一条从当前绘图位置开始到 (anchorX, anchorY) 结束的曲线。传递到此方法的坐标以图表数据形式表示，而不是以屏幕坐标表示。
     
     <p>此方法的用法和参数与 flash.display.Graphics 类的 <codeph>curveTo()</codeph> 方法相同。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/curveTo()"><linktext>flash.display.Graphics.curveTo()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:dataToLocal"><apiName>dataToLocal</apiName><shortdesc>
      
      
      将数据值元组转换为屏幕上的 x-y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>相对于图表的坐标。
      
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>dataValues</apiItemName><apiType value="restParam"/><apiDesc>要转换为坐标的数据值。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      将数据值元组转换为屏幕上的 x-y 坐标。调用此函数可借助单个元素使用的转换将数据转换到屏幕上。例如，要为图表的数据区域创建自定义加亮效果，则可以使用此函数来确定相关区域的屏幕上坐标。
      
      <p>对于笛卡尔图表元素，通常需要传递两个值。第一个值映射到水平轴，第二个值映到垂直轴。</p>
      
      <p>对于极性图表，第一个值映射到角度轴，第二个值映射到半径轴。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:describeData"><apiName>describeData</apiName><shortdesc>
     
      
      由具有控制地位的 DataTransform 调用，以获得由此 IChartElement 表示的数据描述。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>一个 Array，其中包含用于描述显示数据的 DataDescription 实例。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>确定从中获取数据描述的轴。
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>一个位域，指示特定轴需要关注 DataDescription 对象的哪些值。实现器通过仅计算必要字段即可实现优化。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      
      由具有控制地位的 DataTransform 调用，以获得由此 IChartElement 表示的数据描述。实现器填充并返回 mx.charts.chartClasses.DataDescription 对象 Array，以保证它们的数据能够按任一条轴进行正确显示，而这里的轴是根据所显示的数据（如最小值、最大值、间隔和单位大小）自动生成值的。多数元素类型都会返回包含一个 DataDescription 的 Array。聚合元素（如 BarSet 和 ColumnSet）可能会返回多个 DataDescription 实例，用于描述由其子元素显示的数据。调用此方法时，实现器会沿 <codeph>dimension</codeph> 参数说明的轴显示数据。对于所包含的图表支持的每条轴，都有可能调用此函数。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:drawCircle"><apiName>drawCircle</apiName><shortdesc>
     绘制一个圆。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="any"/><apiDesc>圆心的 x 位置（以像素为单位）。 
     
     </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="any"/><apiDesc>圆心的 y 位置（以像素为单位）。 
     
     </apiDesc></apiParam><apiParam><apiItemName>radius</apiItemName><apiType value="Number"/><apiDesc>圆的半径（以像素为单位）。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     绘制一个圆。在调用 <codeph>drawCircle()</codeph> 方法之前，通过调用 <codeph>linestyle()</codeph>、<codeph>lineGradientStyle()</codeph>、<codeph>beginFill()</codeph>、<codeph>beginGradientFill()</codeph> 或 <codeph>beginBitmapFill()</codeph> 方法来设置线条样式或/和填充。传递到此方法的坐标以图表数据形式表示，而不是以屏幕坐标表示。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Graphics.xml"><linktext>flash.display.Graphics</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:drawEllipse"><apiName>drawEllipse</apiName><shortdesc>
     绘制一个椭圆。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>left</apiItemName><apiType value="any"/><apiDesc>椭圆边框左上角的 x 位置。
     
     </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="any"/><apiDesc>椭圆边框左上角的 y 位置。
     
     </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="any"/><apiDesc>椭圆边框右下角的 x 位置。
     
     </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="any"/><apiDesc>椭圆边框右下角的 y 位置。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     绘制一个椭圆。在调用 <codeph>drawEllipse()</codeph> 方法之前，通过调用 <codeph>linestyle()</codeph>、<codeph>lineGradientStyle()</codeph>、<codeph>beginFill()</codeph>、<codeph>beginGradientFill()</codeph> 或 <codeph>beginBitmapFill()</codeph> 方法来设置线条样式或/和填充。传递到此方法的坐标以图表数据形式表示，而不是以屏幕坐标表示。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/drawEllipse()"><linktext>flash.display.Graphics.drawEllipse()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:drawRect"><apiName>drawRect</apiName><shortdesc>
     绘制一个矩形。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>left</apiItemName><apiType value="any"/><apiDesc>矩形左上角的 x 位置。
     
     </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="any"/><apiDesc>矩形左上角的 y 位置。
     
     </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="any"/><apiDesc>矩形右下角的 x 位置。
     
     </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="any"/><apiDesc>矩形右下角的 y 位置。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     绘制一个矩形。在调用 <codeph>drawRect()</codeph> 方法之前，通过调用 <codeph>linestyle()</codeph>、<codeph>lineGradientStyle()</codeph>、<codeph>beginFill()</codeph>、<codeph>beginGradientFill()</codeph> 或 <codeph>beginBitmapFill()</codeph> 方法来设置线条样式或/和填充。传递到此方法的坐标以图表数据形式表示，而不是以屏幕坐标表示。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/drawRect()"><linktext>flash.display.Graphics.drawRect()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:drawRoundedRect"><apiName>drawRoundedRect</apiName><shortdesc>
     绘制一个圆角矩形。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>left</apiItemName><apiType value="any"/><apiDesc>矩形左上角的 x 位置。
     
     </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="any"/><apiDesc>矩形左上角的 y 位置。
     
     </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="any"/><apiDesc>矩形右下角的 x 位置。
     
     </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="any"/><apiDesc>矩形右下角的 y 位置。
     
     </apiDesc></apiParam><apiParam><apiItemName>cornerRadius</apiItemName><apiType value="Number"/><apiDesc>角的半径（以像素为单位）。
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     绘制一个圆角矩形。在调用 <codeph>drawRoundRect()</codeph> 方法之前，通过调用 <codeph>linestyle()</codeph>、<codeph>lineGradientStyle()</codeph>、<codeph>beginFill()</codeph>、<codeph>beginGradientFill()</codeph> 或 <codeph>beginBitmapFill()</codeph> 方法来设置线条样式或/和填充。传递到此方法的坐标以图表数据形式表示，而不是以屏幕坐标表示。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/drawRoundRect()"><linktext>flash.display.Graphics.drawRoundRect()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:endFill"><apiName>endFill</apiName><shortdesc conref="flash.display.Graphics#endFill()"> 
     注意：除了 beginGradientFill() 方法之外，来自 flash.display.Graphics 类的 endFill() 的下列信息都适用于此方法：
     
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="flash.display.Graphics#endFill()"> 
     <i>注意：除了 <codeph>beginGradientFill()</codeph> 方法之外，来自 <codeph>flash.display.Graphics</codeph> 类的 <codeph>endFill()</codeph> 的下列信息都适用于此方法：</i>
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Graphics.xml"><linktext>flash.display.Graphics</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      当数据提供程序中的基础数据发生更改时通知画布。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果数据提供者的数据已更改，则为 <codeph>true</codeph>。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当数据提供程序中的基础数据发生更改时通知画布。此方法触发器将在下次调用 <codeph>commitProperties()</codeph> 方法时调用 <codeph>updateMapping()</codeph> 和 <codeph>updateTransform()</codeph> 方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:lineStyle"><apiName>lineStyle</apiName><shortdesc>
     指定一种线条样式，Flash 可将该样式用于随后调用对象的其它 Graphics 方法（如 lineTo() 或 drawCircle()）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>thickness</apiItemName><apiType value="Number"/><apiDesc>一个整数，以点为单位表示线条的粗细；有效值为 0 到 255。如果未指定数字，或者未定义该参数，则不绘制线条。如果传递的值小于 0，则默认值为 0。值 0 表示极细的粗细；最大粗细为 255。如果传递的值大于 255，则默认值为 255。 
     
     </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>线条的十六进制颜色值（例如，红色为 0xFF0000，蓝色为 0x0000FF 等）。如果未指明值，则默认值为 0x000000（黑色）。
     
     </apiDesc></apiParam><apiParam><apiItemName>alpha</apiItemName><apiType value="Number"/><apiData>1.0</apiData><apiDesc>表示线条颜色的 Alpha 值的数字；有效值为 0 到 1。如果未指明值，则默认值为 1（纯色）。如果值小于 0，则默认值为 0。如果值大于 1，则默认值为 1。
     
     </apiDesc></apiParam><apiParam><apiItemName>pixelHinting</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>用于指定是否提示笔触采用完整像素的布尔值。它同时影响曲线锚点的位置以及线条笔触大小本身。<codeph>pixelHinting</codeph> 设置为 true 时，线宽将调整为完整像素宽度。<codeph>pixelHinting</codeph> 设置为 false 时，曲线和直线将出现不连续的情况。
     
     </apiDesc></apiParam><apiParam><apiItemName>scaleMode</apiItemName><apiType value="String"/><apiData>normal</apiData><apiDesc>用于指定要使用哪种缩放模式的 flash.display.LineScaleMode 类的值：
     
     <ul>
       <li><codeph>LineScaleMode.NORMAL</codeph>：缩放对象始终缩放线条粗细（默认设置）。</li>
       <li><codeph>LineScaleMode.NONE</codeph>：从不缩放线条粗细。</li>
       <li><codeph>LineScaleMode.VERTICAL</codeph>：如果仅垂直缩放对象，则不缩放线条粗细。 </li>
       <li><codeph>LineScaleMode.HORIZONTAL</codeph>：如果仅水平缩放对象，则不缩放线条粗细。 </li>
     </ul>
     
     </apiDesc></apiParam><apiParam><apiItemName>caps</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>用于指定线条末端处端点类型的 flash.display.CapsStyle 类的值。有效值为：<codeph>CapsStyle.NONE</codeph>、<codeph>CapsStyle.ROUND</codeph> 和 <codeph>CapsStyle.SQUARE</codeph>。如果未指明值，则使用圆头端点。 
     
     </apiDesc></apiParam><apiParam><apiItemName>joints</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>用于指定在拐角处使用的连接外观的类型的 flash.display.JointStyle 类的值。有效值为：<codeph>JointStyle.BEVEL</codeph>、<codeph>JointStyle.MITER</codeph> 和 <codeph>JointStyle.ROUND</codeph>。如果未指明值，请使用圆角连接。 
     
     </apiDesc></apiParam><apiParam><apiItemName>miterLimit</apiItemName><apiType value="Number"/><apiData>3</apiData><apiDesc>一个表示将在哪个限制位置切断尖角的数字。有效值的范围是 1 到 255（超出该范围的值将舍入为 1 或 255）。此值只可用于 jointStyle 设置为 "miter" 的情况下。<codeph>miterLimit</codeph> 值表示向外延伸的尖角可以超出角边相交所形成的结合点的长度。该值表示线条粗细的因子。例如，<codeph>miterLimit</codeph> 因子为 2.5 且粗细为 10 像素时，尖角将在 25 像素处切断。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     指定一种线条样式，Flash 可将该样式用于随后调用对象的其他 Graphics 方法（如 <codeph>lineTo()</codeph> 或 <codeph>drawCircle()</codeph>）。
     
     <p>此方法的用法和参数与 flash.display.Graphics 类的 <codeph>lineStyle()</codeph> 方法相同。</p>
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/lineStyle()"><linktext>flash.display.Graphics.lineStyle()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:lineTo"><apiName>lineTo</apiName><shortdesc>
     使用当前线条样式绘制一条从当前绘图位置开始到 (x, y) 结束的直线；当前绘图位置随后会设置为 (x, y)。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="any"/><apiDesc>绘图位置的 x 坐标。
     
     </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="any"/><apiDesc>绘图位置的 y 坐标。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     使用当前线条样式绘制一条从当前绘图位置开始到 (x, y) 结束的直线；当前绘图位置随后会设置为 (x, y)。如果正在其中绘制的显示对象包含用 Flash 绘图工具创建的内容，则调用 <codeph>lineTo()</codeph> 方法将在该内容下面进行绘制。如果在对 moveTo() 方法进行任何调用之前调用了 <codeph>lineTo()</codeph>，则当前绘图的默认位置为 (0, 0)。如果缺少任何一个参数，则此方法将失败，并且当前绘图位置不改变。坐标以数据形式表示，而不是以屏幕坐标表示。传递到此方法的坐标以图表数据形式表示，而不是以屏幕坐标表示。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/lineTo()"><linktext>flash.display.Graphics.lineTo()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:localToData"><apiName>localToData</apiName><shortdesc>
      
      
      将屏幕上的坐标转换成数据值元组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>数据值的元组。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>v</apiItemName><apiType value="flash.geom:Point"/><apiDesc>要转换的点。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      
      将屏幕上的坐标转换成数据值元组。调用此函数可确定屏幕上的特定点代表哪些数据值。
      <p>各个图表类型可确定发生此转换的方式。该点应随图表的坐标空间而转移。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:mappingChanged"><apiName>mappingChanged</apiName><shortdesc>
     
      在一个或多个关联轴的映射发生更改时调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     
      在一个或多个关联轴的映射发生更改时调用此方法。如果由分配给此 ChartElement 的 DataTransform 表示的轴进行了某种形式的修改，则它将调用此方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:moveTo"><apiName>moveTo</apiName><shortdesc>
     将当前绘图位置移动到 (x, y)。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="any"/><apiDesc>绘图位置的 x 坐标。
     
     </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="any"/><apiDesc>绘图位置的 y 坐标。 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     将当前绘图位置移动到 (x, y)。如果缺少任何一个参数，则此方法将失败，并且当前绘图位置不改变。传递到此方法的坐标以图表数据形式表示，而不是以屏幕坐标表示。
     
     </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/moveTo()"><linktext>flash.display.Graphics.moveTo()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:removeAllChildren"><apiName>removeAllChildren</apiName><shortdesc>
     删除画布的所有子数据项（DisplayObject 实例）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     删除画布的所有子数据项（DisplayObject 实例）。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:removeChildAt"><apiName>removeChildAt</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:removeChild"><apiName>removeChild</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:protected:stripNaNs"><apiName>stripNaNs</apiName><shortdesc>
      从提供的缓存中删除字段属性为 NaN 的所有项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>对象的数组。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>要测试的 <codeph>field</codeph> 属性。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      从提供的缓存中删除 <codeph>field</codeph> 属性为 <codeph>NaN</codeph> 的所有项目。派生的类可以通过实现 updateFilter() 来调用此方法，以删除根据轴筛选出的所有 ChartItem。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:updateDataChild"><apiName>updateDataChild</apiName><shortdesc>
     更新当前画布中所有子项的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>    要更新的显示对象。
     </apiDesc></apiParam><apiParam><apiItemName>left</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>     子项的左 x 坐标（数据坐标中）。
     </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>      子项的上 y 坐标（数据坐标中）。
     </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>    子项的右 x 坐标（数据坐标中）。
     </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>   子项的下 y 坐标（数据坐标中）。
     </apiDesc></apiParam><apiParam><apiItemName>hCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>  子项的中 x 坐标（数据坐标中）。
     </apiDesc></apiParam><apiParam><apiItemName>vCenter</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>  子项的中 y 坐标（数据坐标中）。
     
     <p>例如：
     <pre>
          var lbl:Label = new Label();
          lbl.text = "Last Month";
          canvas.addChild(lbl);
          canvas.updateDataChild(lbl,"Feb",200);
     </pre>
     </p>
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     更新当前画布中所有子项的位置。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
     </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:protected:updateFilter"><apiName>updateFilter</apiName><shortdesc>
      当由画布表示的基础数据需要针对相关数据的转换轴表示的范围进行筛选时，调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      当由画布表示的基础数据需要针对相关数据的转换轴表示的范围进行筛选时，调用此方法。这适用于以下情况：基础数据发生更改；关联轴的范围发生更改。如果实现自定义画布类型，则应覆盖此方法，并使用由自身相关数据转换管理的轴的 <codeph>filterCache()</codeph> 方法筛选出所有无关数据。<codeph>filterCache()</codeph> 方法将所有超出范围的值转换为 <codeph>NaN</codeph>。您必须确保在子类中调用了 <codeph>super.updateFilter()</codeph> 方法。通常不直接调用此方法，如果需要确保您的数据已在给定点进行了筛选，请调用 CartesianDataCanvas 类的 <codeph>validateTransform()</codeph> 方法。通常情况下，您可以假定调用此方法之前已经调用了 <codeph>updateData()</codeph> 和 <codeph>updateMapping()</codeph> 方法（如有必要）。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:protected:validateData"><apiName>validateData</apiName><shortdesc>
      调用画布的 updateMapping() 和 updateFilter() 方法（如有必要）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      调用画布的 <codeph>updateMapping()</codeph> 和 <codeph>updateFilter()</codeph> 方法（如有必要）。画布会在 <codeph>commitProperties()</codeph> 方法期间根据需要自动调用此方法，但如果在显式时间内需要此方法的生成值，画布可能会显式调用此方法。按轴加载和映射数据旨在使轴可以随时接受数据。可以随时安全地显式调用此方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianDataCanvas:protected:validateTransform"><apiName>validateTransform</apiName><shortdesc>
      调用画布的 updateTransform() 方法（如有必要）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>如果调用了 <codeph>updateTransform()</codeph>，则返回 <codeph>true</codeph>。否则为 <codeph>false</codeph>。
     
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      调用画布的 <codeph>updateTransform()</codeph> 方法（如有必要）。画布会在 <codeph>commitProperties()</codeph> 方法期间根据需要自动调用此方法，但如果在显式时间内需要此方法的生成值，派生的画布可能会显式调用此方法。数据的筛选和转换取决于按轴计算的特定值，而这些值又取决于图表中显示的数据。如果这些值已经更新，则在错误的时间调用此函数可能导致额外的工作量。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:CartesianDataCanvas:dataChildren:get"><apiName>dataChildren</apiName><shortdesc>
     一个子对象数组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
     一个子对象数组。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianDataCanvas:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      为 x 轴上的项定义标签、刻度线和数据位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      为 x 轴上的项定义标签、刻度线和数据位置。使用 LinearAxis 类或 CategoryAxis 类可将水平轴的属性设置为 MXML 中的子标签，也可以在 ActionScript 中创建 LinearAxis 或 CategoryAxis 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianDataCanvas:includeInRanges:get"><apiName>includeInRanges</apiName><shortdesc>
     如果为 true，则图表的计算范围将受此画布影响。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     如果为 <codeph>true</codeph>，则图表的计算范围将受此画布影响。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianDataCanvas:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      为 y 轴上的项目定义标签、刻度线和数据位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      为 y 轴上的项目定义标签、刻度线和数据位置。使用 LinearAxis 类或 CategoryAxis 类可将垂直轴的属性设置为 MXML 中的子标签，也可以在 ActionScript 中创建 LinearAxis 或 CategoryAxis 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianDataCanvas:dataTransform:set"><apiName>dataTransform</apiName><shortdesc>
      
      与元素关联的 DataTransform 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:DataTransform</apiValueClassifier></apiValueDef><apiDesc>
      
      与元素关联的 DataTransform 对象。DataTransform 对象给出一组元素与一组轴对象之间的关系，用于将这些元素从数据空间转换到屏幕坐标，然后返回。图表元素使用其关联的 DataTransform 对象，来设计显示其数据的方法。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:IAxis"><apiName>IAxis</apiName><shortdesc>
  IAxis 类是用于定义图表轴的标签、刻度线和数据定位属性的抽象接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IAxis 类是用于定义图表轴的标签、刻度线和数据定位属性的抽象接口。
 
  <p>类实现此接口以提供范围定义功能。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#CategoryAxis"><linktext>mx.charts.CategoryAxis</linktext></link><link href="mx.charts.xml#LinearAxis"><linktext>mx.charts.LinearAxis</linktext></link></related-links><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:dataChanged"><apiName>dataChanged</apiName><shortdesc> 
      在图表数据更改时触发通知范围对象的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
      在图表数据更改时触发通知范围对象的事件。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:filterCache"><apiName>filterCache</apiName><shortdesc>
      将任意类型的一组值过滤为可以映射的一组数字。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>可从中读取和存储转换后的值的对象数组。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>包含过滤之前的值的缓存 Array 中所含的对象域。
     
      </apiDesc></apiParam><apiParam><apiItemName>filteredString</apiItemName><apiType value="String"/><apiDesc>存储过滤后的值的缓存 Array 中所含的对象域。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将任意类型的一组值过滤为可以映射的一组数字。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:formatForScreen"><apiName>formatForScreen</apiName><shortdesc>
      格式化值以便在 DataTip 中显示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>DataTip 的文本。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>转换为 String 类型的值。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      格式化值以便在 DataTip 中显示。返回用户可读的字符串。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:getLabelEstimate"><apiName>getLabelEstimate</apiName><shortdesc>
      确定范围以估计轴标签的内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>AxisLabel 对象的数组。
      
      </apiDesc><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      确定范围以估计轴标签的内容。轴几乎立即调用 <codeph>getLabels()</codeph> 方法以获取真实值。轴使用估计的值调整图表边距，因此只要估计的标签和实际标签（由 <codeph>getLabels()</codeph> 方法返回）间存在差别，就会调整标签以满足要求。
     
      <p>当返回估计值时，轴只需返回最小和最大标签。如果标签组完全是静态的，不会根据轴大小在屏幕上显示，则轴可通过此函数返回整个标签组，并将估计值标记为准确值。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:getLabels"><apiName>getLabels</apiName><shortdesc>
      获取显示的标签文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>AxisLabel 对象的数组。
      
      </apiDesc><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier></apiReturn><apiParam><apiItemName>minimumAxisLength</apiItemName><apiType value="Number"/><apiDesc>轴的最小长度（以像素为单位）。轴长可以大于此值，但不可以小于此值。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      获取显示的标签文本。当 Flex 调用此方法时，轴已确定标签的最小长度。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:invertTransform"><apiName>invertTransform</apiName><shortdesc>
      沿轴将一个位置映射回数字数据值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>包含转换后的值的对象。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>轴的范围。此参数应介于 0 和 1 之间，0 表示轴的下限，1 表示轴的上限。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      沿轴将一个位置映射回数字数据值。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:mapCache"><apiName>mapCache</apiName><shortdesc>
      将任意类型的一组值转换为一组可以转换为屏幕坐标的数字。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>可从中读取和存储转换后的值的对象数组。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>包含转换之前的值的缓存 Array 中所含的对象域。
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>存储转换后的值的缓存 Array 中所含的对象域。
     
      </apiDesc></apiParam><apiParam><apiItemName>indexValues</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果要映射的值是索引值，则此参数为 <codeph>true</codeph>；如果这些值是自然数据值，则此参数为 <codeph>false</codeph>。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将任意类型的一组值转换为一组可以转换为屏幕坐标的数字。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:preferDropLabels"><apiName>preferDropLabels</apiName><shortdesc> 
      确定轴处理重叠标签的方式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果可以在不丢失数据的情况下删除标签，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。 
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> 
      确定轴处理重叠标签的方式。通常，数字范围返回 <codeph>true</codeph>，而基于离散值的范围不返回此值。您可以通过直接在轴上设置此属性来覆盖此属性。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:reduceLabels"><apiName>reduceLabels</apiName><shortdesc>
      当在不发生重叠的情况下 AxisRenderer 无法清楚地显示标签时调用，像 Axis 对象减少标签组中标签的数目一样。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>通过减少标签的数目来解决重叠问题的新标签组。
      
      </apiDesc><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier></apiReturn><apiParam><apiItemName>intervalStart</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>标签重叠处间隔的开始位置。
     
      </apiDesc></apiParam><apiParam><apiItemName>intervalEnd</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>标签重叠处间隔的结束位置。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当在不发生重叠的情况下 AxisRenderer 无法清楚地显示标签时调用，像 Axis 对象减少标签组中标签的数目一样。此方法传递重叠的两个标签。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:registerDataTransform"><apiName>registerDataTransform</apiName><shortdesc>
      使用轴的每个 DataTransform 都将自身注册到该轴。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transform</apiItemName><apiOperationClassifier>mx.charts.chartClasses:DataTransform</apiOperationClassifier><apiDesc>要注册的 DataTransform。
     
      </apiDesc></apiParam><apiParam><apiItemName>dimensionName</apiItemName><apiType value="String"/><apiDesc>维度的名称。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      使用轴的每个 DataTransform 都将自身注册到该轴。该轴负责在其相关值更改时通知转换。当它要自动生成最小值和最大值时，它还应从转换请求值。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:transformCache"><apiName>transformCache</apiName><shortdesc>
      将一组来自数据空间的值映射到屏幕空间。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>可从中读取和存储映射后的值的对象 Array。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>包含映射之前的值的缓存 Array 中所含的对象域。
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>存储映射后的值的缓存 Array 中所含的对象域。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将一组来自数据空间的值映射到屏幕空间。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:unregisterDataTransform"><apiName>unregisterDataTransform</apiName><shortdesc>
      使用轴的每个 DataTransform 都将自身注册到该轴。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transform</apiItemName><apiOperationClassifier>mx.charts.chartClasses:DataTransform</apiOperationClassifier><apiDesc>要取消注册的 DataTransform。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      使用轴的每个 DataTransform 都将自身注册到该轴。该轴负责在其相关值更改时通知转换。当它要自动生成最小值和最大值时，它还应从转换请求值。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:update"><apiName>update</apiName><shortdesc>
      更新图表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      更新图表。可在每个帧中多次调用此方法。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:baseline:get"><apiName>baseline</apiName><shortdesc>
      轴的基线位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      轴的基线位置。当未指定最小值时，一些系列（如 ColumnSeries 或 AreaSeries）将使用此值确定填充区域的基础。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:displayName:get"><apiName>displayName</apiName><shortdesc> 
      轴的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc> 
      轴的名称。如果设置了此属性，Flex 将使用此名称来设置 DataTip 控件格式。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:title:get"><apiName>title</apiName><shortdesc>
      沿该轴显示的标题文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      沿该轴显示的标题文本。  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:unitSize:get"><apiName>unitSize</apiName><shortdesc>
      由该轴表示的一个数据单位大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      由该轴表示的一个数据单位大小。此值适用于帮助各种系列类型进行显示。例如，ColumnSeries 类使用此值确定列应显示的宽度。轴类型不同，返回的值也不同（有时取决于表示的数据）。例如，DateTimeAxis 类可能返回一天或一年中的毫秒数，具体取决于图表中显示的数据。此值依赖于收集表示的数据，因此自定义系列无法假定此值在其 <codeph>updateData()</codeph> 方法或 <codeph>updateMapping()</codeph> 方法中是准确的。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:IAxis:mx.charts.chartClasses:IAxis:chartDataProvider:set"><apiName>chartDataProvider</apiName><shortdesc>
      分配给封闭图表的数据提供程序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Object"/></apiValueDef><apiDesc>
      分配给封闭图表的数据提供程序。基于数据提供程序的轴类型可以继承与封闭图表相关联的数据提供程序。如果在多个图表之间共享一个轴，则此属性的值为 <codeph>undefined</codeph>（它很可能是分配到其中一个关联图表的最后一个数据提供程序）。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:PolarChart"><apiName>PolarChart</apiName><shortdesc>
  PolarChart 控件可用作基于极坐标的 circular 图表的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:ChartBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  PolarChart 控件可用作基于极坐标的 circular 图表的基类。
  
  <p>图表的最小大小是 20,20 像素。 </p>
  <p>图表的最大大小没有限制。 </p>
  <p>图表的首选大小是 400,400 像素。 </p>
  
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#CategoryAxis"><linktext>mx.charts.CategoryAxis</linktext></link><link href="mx.charts.xml#LinearAxis"><linktext>mx.charts.LinearAxis</linktext></link><link href="mx.charts.chartClasses.xml#ChartBase"><linktext>mx.charts.chartClasses.ChartBase</linktext></link></related-links><apiConstructor id="mx.charts.chartClasses:PolarChart:PolarChart"><apiName>PolarChart</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:PolarChart:getFirstItem"><apiName>getFirstItem</apiName><shortdesc>
      
      获取图表中的第一个（相对于轴）项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>对应的 ChartItem 对象。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>第一个项目应返回的方向。可能的值有 <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> 和 <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      获取图表中的第一个（相对于轴）项目。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarChart:getLastItem"><apiName>getLastItem</apiName><shortdesc>
      
      获取此图表中的最后一个（相对于轴）项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>对应的 ChartItem 对象。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>最后一项应该返回的方向。可能的值有 <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> 和 <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      获取此图表中的最后一个（相对于轴）项目。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarChart:getNextItem"><apiName>getNextItem</apiName><shortdesc>
      
      获取图表中当前焦点项目旁边（相对于轴）的图表项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>对应的 ChartItem 对象。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>下一项目应该返回的方向。可能的值有 <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> 和 <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      获取图表中当前焦点项目旁边（相对于轴）的图表项目。如果当前未选中任何图表项目，则此方法将返回第一个系列中的第一个项目。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarChart:getPreviousItem"><apiName>getPreviousItem</apiName><shortdesc>
      
      获取图表中当前焦点项之前（相对于轴）的图表项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>对应的 ChartItem 对象。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>上一项目应返回的方向。可能的值有 <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> 和 <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      获取图表中当前焦点项之前（相对于轴）的图表项目。如果当前未选中任何图表项目，则此方法将返回第一个系列中的第一个项目。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:PolarChart:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="mx.charts.chartClasses:PolarChart:angularAxis:get"><apiName>angularAxis</apiName><shortdesc>
      用于将数据值映射到 0 与 2 PI 之间的某个角度的轴对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      用于将数据值映射到 0 与 2 PI 之间的某个角度的轴对象。默认情况下，该对象是一个线性轴，其 <codeph>autoAdjust</codeph> 属性设置为 <codeph>false</codeph>。因此，数据值会在图表周围均匀映射。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarChart:protected:dataRegion:get"><apiName>dataRegion</apiName><shortdesc>
      
      用于显示数据的图表区域。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      
      用于显示数据的图表区域。此矩形不包括用于装订线、轴线和标签及填充的区域。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarChart:radialAxis:get"><apiName>radialAxis</apiName><shortdesc>
      用于将数据值映射到图表中心与外部边缘之间的径向距离的轴对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      用于将数据值映射到图表中心与外部边缘之间的径向距离的轴对象。默认情况下，该对象是一个线性轴，其 <codeph>autoAdjust</codeph> 属性设置为 <codeph>false</codeph>。因此，数据值将在图表中从内向外统一映射。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:PolarChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:CartesianChart"><apiName>CartesianChart</apiName><shortdesc>
  CartesianChart 类是公用图表类型的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style arrayType="String" inherit="no" name="verticalAxisStyleNames" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Array">
<description>
  用于定义垂直轴样式属性的类选择器数组。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="String" inherit="no" name="horizontalAxisStyleNames" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Array">
<description>
  用于定义水平轴样式属性的类选择器数组。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="gutterTop" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  图表数据区域顶部与图表控件顶部之间的区域大小（以像素为单位）。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="gutterRight" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  图表数据区域右侧与图表控件外部之间的区域大小（以像素为单位）。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="gutterLeft" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  图表数据区域左侧与图表控件左侧之间的区域大小（以像素为单位）。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="gutterBottom" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  图表数据区域底部与图表控件底部之间的区域大小（以像素为单位）。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="gridLinesStyleName" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  用于定义默认网格线的样式属性的类选择器。如果您在图表上显式设置 <codeph>backgroundElements</codeph> 属性，此值将被忽略。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="axisTitleStyleName" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  设置轴标题格式时使用的 CSS 类选择器的名称。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  容器内文本的对齐方式。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数控件的默认值都为 <codeph>left</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>。对于这些组件，只有将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Boolean">
<description>
  一个布尔值，表示是启用 (<codeph>true</codeph>) 还是禁用 (<codeph>false</codeph>) 字距调整。字距调整会调整某些字符对之间的间隔以提高可读性，并应只在必要时（例如使用大字体标题时）使用。仅嵌入的 FlashType 字体支持字距调整。某些字体（如宋体）和等宽字体（如 Courier New）不支持字距调整。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"bold"</codeph>。对于 LegendItem，默认为 <codeph>"bold"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>thickness</codeph> 属性。此属性指定字型边缘的粗细。可能值为从 -200 到 200 之间的数字。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  文本的高度，以像素为单位。除 ColorPicker 控件之外，所有控件的默认值都为 10。ColorPicker 控件的默认值为 11。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>sharpness</codeph> 属性。此属性指定字型边缘的清晰度。可能值为从 -400 到 400 之间的数字。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>gridFitType</codeph> 属性。可能值为 <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>)、<codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) 和<codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>)。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="String">
<description>
  设置内部 TextField 的 <codeph>antiAliasType</codeph> 属性。可能值为 <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) 和 <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>)。 
  
  <p>默认值为 <codeph>"advanced"</codeph>。如果您使用的是嵌入的 FlashType 字体，此设置将启用 FlashType 呈示器。设置为 <codeph>"normal"</codeph> 可禁用 FlashType 呈示器。</p>
  
  <p>此样式对系统字体不起作用。</p>
  
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="uint">
<description>
  禁用时组件中文本的颜色。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts.chartClasses:CartesianChart" playerVersion="Flash9" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:CartesianChart&gt;</code> tag inherits all the
  properties of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:CartesianChart
    <strong>Properties</strong>
    computedGutters="<i>No default</i>"
    dataRegion="<i>Rectangle; no default</i>"
    horizontalAxis="<i>Axis; no default</i>"
    horizontalAxisRatio=".33"
    horizontalAxisRenderers="<i>Array; no default</i>"
    selectedChartItems="<i>Array; no default</i>"
    verticalAxis="<i>Axis; no default</i>"
    verticalAxisRatio=".33"
    verticalAxisRenderers="<i>Array; no default</i>"
   
    <strong>Styles</strong>  
    axisTitleStyleName="<i>Style; no default</i>"
    gridLinesStyleName="<i>Style; no default</i>"
    gutterBottom="<i>No default</i>"
    gutterLeft="<i>No default</i>"
    gutterRight="<i>No default</i>"
    gutterTop="<i>No default</i>"
    horizontalAxisStyleNames=<i>Array; no default</i>"
    verticalAxisStyleNames = <i>Array; no default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:ChartBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  CartesianChart 类是公用图表类型的基类。CartesianChart 定义标准矩形（二维图表）的基本布局行为。
   </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#CategoryAxis"><linktext>mx.charts.CategoryAxis</linktext></link><link href="mx.charts.xml#LinearAxis"><linktext>mx.charts.LinearAxis</linktext></link><link href="mx.charts.chartClasses.xml#ChartBase"><linktext>mx.charts.chartClasses.ChartBase</linktext></link></related-links><apiConstructor id="mx.charts.chartClasses:CartesianChart:CartesianChart"><apiName>CartesianChart</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:CartesianChart:getFirstItem"><apiName>getFirstItem</apiName><shortdesc>
      
      获取图表中的第一个（相对于轴）项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>对应的 ChartItem 对象。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>第一个项目应返回的方向。可能的值有 <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> 和 <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      获取图表中的第一个（相对于轴）项目。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianChart:getLastItem"><apiName>getLastItem</apiName><shortdesc>
      
      获取此图表中的最后一个（相对于轴）项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>对应的 ChartItem 对象。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>最后一项应该返回的方向。可能的值有 <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> 和 <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      获取此图表中的最后一个（相对于轴）项目。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianChart:getNextItem"><apiName>getNextItem</apiName><shortdesc>
      
      获取图表中当前焦点项目旁边（相对于轴）的图表项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>对应的 ChartItem 对象。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>下一项目应该返回的方向。可能的值有 <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> 和 <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      获取图表中当前焦点项目旁边（相对于轴）的图表项目。如果当前未选中任何图表项目，则此方法将返回第一个系列中的第一个项目。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianChart:getPreviousItem"><apiName>getPreviousItem</apiName><shortdesc>
      
      获取图表中当前焦点项之前（相对于轴）的图表项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>对应的 ChartItem 对象。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiDesc>上一项目应返回的方向。可能的值有 <codeph>ChartBase.NAVIGATE_HORIZONTAL</codeph> 和 <codeph>ChartBase.NAVIGATE_VERTICAL</codeph>。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      获取图表中当前焦点项之前（相对于轴）的图表项目。如果当前未选中任何图表项目，则此方法将返回第一个系列中的第一个项目。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianChart:styleChanged"><apiName>styleChanged</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:CartesianChart:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="mx.charts.chartClasses:CartesianChart:horizontalAxisRatio"><apiName>horizontalAxisRatio</apiName><shortdesc>
      确定水平轴的高度限制。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0.33</apiData><apiType value="Number"/><apiDefaultValue>0.33.
      
      </apiDefaultValue></apiValueDef><apiDesc>
      确定水平轴的高度限制。此限制是轴的宽度乘以此比率所得的值。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:verticalAxisRatio"><apiName>verticalAxisRatio</apiName><shortdesc>
      确定垂直轴的宽度限制。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0.33</apiData><apiType value="Number"/><apiDefaultValue>0.33.
      
      </apiDefaultValue></apiValueDef><apiDesc>
      确定垂直轴的宽度限制。此限制是轴的宽度乘以此比率所得的值。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:computedGutters:get"><apiName>computedGutters</apiName><shortdesc>
      当前计算出的 CartesianChart 装订线大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      当前计算出的 CartesianChart 装订线大小。装订线表示填充与图表数据区域之间用于呈示标题和轴的区域。默认情况下，将动态计算装订线。您可以通过装订线样式设置显式值。对装订线进行计算以便在使用 LayoutManager 验证图表时适应对图表所做的任何更改。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:protected:dataRegion:get"><apiName>dataRegion</apiName><shortdesc>
      
      用于显示数据的图表区域。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      
      用于显示数据的图表区域。此矩形不包括用于装订线、轴线和标签及填充的区域。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:horizontalAxisRenderers:get"><apiName>horizontalAxisRenderers</apiName><shortdesc>
      指定数据如何沿图表的 x 轴显示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      指定数据如何沿图表的 x 轴显示。使用 AxisRenderer 类可将 horizontalAxisRenderer 的属性设置为 MXML 中的子标签，也可以在 ActionScript 中创建 AxisRenderer 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:horizontalAxis:get"><apiName>horizontalAxis</apiName><shortdesc>
      为 x 轴上的项定义标签、刻度线和数据位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      为 x 轴上的项定义标签、刻度线和数据位置。使用 LinearAxis 类或 CategoryAxis 类可以设置 horizontalAxis 的属性，将其作为 MXML 中的子标签，或者在 ActionScript 中创建一个 LinearAxis 或 CategoryAxis 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:selectedChartItems:get"><apiName>selectedChartItems</apiName><shortdesc>
      图表中所选 ChartItem 对象的 Array。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      图表中所选 ChartItem 对象的 Array。其中包括所有图表系列中的所选 ChartItem 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:verticalAxisRenderers:get"><apiName>verticalAxisRenderers</apiName><shortdesc>
      指定数据如何沿图表的 y 轴显示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      指定数据如何沿图表的 y 轴显示。使用 AxisRenderer 类可将 verticalAxisRenderer 的属性设置为 MXML 中的子标签，也可以在 ActionScript 中创建 AxisRenderer 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:verticalAxis:get"><apiName>verticalAxis</apiName><shortdesc>
      为 y 轴上的项目定义标签、刻度线和数据位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      为 y 轴上的项目定义标签、刻度线和数据位置。使用 LinearAxis 类或 CategoryAxis 类可将水平轴的属性设置为 MXML 中的子标签，也可以在 ActionScript 中创建 LinearAxis 或 CategoryAxis 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:CartesianChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:Series"><apiName>Series</apiName><shortdesc>
  Series 类是允许为图表控件指定数据系列的类的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><effects><effect event="showData" name="showDataEffect" owner="mx.charts.chartClasses:Series">
<description>
  定义 Flex 将当前数据移动到屏幕上的最终位置时产生的效果。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="hideData" name="hideDataEffect" owner="mx.charts.chartClasses:Series">
<description>
  定义 Flex 隐藏视图中当前数据时产生的效果。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect></effects></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:ChartElement</apiBaseClassifier></apiClassifierDef><apiDesc>
  Series 类是允许为图表控件指定数据系列的类的基类。使用包含关联图表控件的 Series 类的子类。您可以使用 Series 类为与数据系列相关的图表元素指定填充模式和笔触特征。 
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:Series:Series"><apiName>Series</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:Series:beginInterpolation"><apiName>beginInterpolation</apiName><shortdesc>
      此方法由 SeriesInterpolate 效果调用，用以启动 interpolation 效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>系列执行 interpolation 所需的数据。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>sourceRenderData</apiItemName><apiType value="Object"/><apiDesc>系列要进行插补的源数据。
     
      </apiDesc></apiParam><apiParam><apiItemName>destRenderData</apiItemName><apiType value="Object"/><apiDesc>系列要进行插补的目标数据。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      此方法由 SeriesInterpolate 效果调用，用以启动 interpolation 效果。此效果传入源数据和目标数据，以便系列在二者之间进行插补。此效果将该方法的返回值重复传递给系列的 <codeph>interpolate()</codeph> 方法，以改进呈示此效果期间的动画效果。此系列计算执行 interpolation 所需的数据，并在此方法中将其返回。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:cacheDefaultValues"><apiName>cacheDefaultValues</apiName><shortdesc>
      根据图表项目 fieldName 属性的原始 dataProvider 项目缓存 measureName 属性中存储的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>如果 <codeph>measureName</codeph> 属性的值为空字符串或 null，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>measureName</apiItemName><apiType value="String"/><apiDesc>其值应由 dataProvider 中的某个值根据 <codeph>fieldName</codeph> 属性进行设置的图表项目的属性名称。例如，<codeph>measureName</codeph> 可以是 xValue、yValue、xNumber、yNumber 等，只要这些名称是图表项目的属性即可。
      
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>图表项目的数组。
      
      </apiDesc></apiParam><apiParam><apiItemName>fieldName</apiItemName><apiType value="String"/><apiDesc>其值应该用于设置图表项目的 <codeph>measureName</codeph> 属性的标签（在数据提供者的项目中）。例如，如果数据提供者有类似于 <codeph>{Country:"US", medals:10}</codeph> 的项目，则 <codeph>fieldName</codeph> 的值可以是“Country”或“medals”。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将存储在原始 dataProvider 项目的 <codeph>measureName</codeph> 属性中的值缓存到图表项目的 <codeph>fieldName</codeph> 属性中。如果 <codeph>measureName</codeph> 属性的值为 <codeph>null</codeph> 或空字符串，则此方法假设原始数据提供者项目是原始值，并改为对其进行缓存。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:cacheIndexValues"><apiName>cacheIndexValues</apiName><shortdesc>
      根据图表项目 fieldName 属性的原始 dataProvider 项目缓存 measureName 属性中存储的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>如果 <codeph>measureName</codeph> 属性的值为空字符串或 null，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>measureName</apiItemName><apiType value="String"/><apiDesc>其值应由 dataProvider 中的某个值根据 <codeph>fieldName</codeph> 属性进行设置的图表项目的属性名称。例如，<codeph>measureName</codeph> 可以是 xValue、yValue、xNumber、yNumber 等，只要这些名称是图表项目的属性即可。
      
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>图表项目的数组。
      
      </apiDesc></apiParam><apiParam><apiItemName>fieldName</apiItemName><apiType value="String"/><apiDesc>其值应该用于设置图表项目的 <codeph>measureName</codeph> 属性的标签（在数据提供者的项目中）。例如，如果数据提供者有类似于 <codeph>{Country:"US", medals:10}</codeph> 的项目，则 <codeph>fieldName</codeph> 的值可以是“Country”或“medals”。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将存储在原始 dataProvider 项目的 <codeph>measureName</codeph> 属性中的值缓存到图表项目的 <codeph>fieldName</codeph> 属性中。如果 <codeph>measureName</codeph> 属性为 <codeph>null</codeph> 或空字符串，则此方法将存储 <codeph>fieldName</codeph> 属性中的项目索引。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:cacheNamedValues"><apiName>cacheNamedValues</apiName><shortdesc>
      根据图表项目 fieldName 属性的原始 dataProvider 项目缓存 measureName 属性中存储的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>如果 <codeph>measureName</codeph> 属性的值为空字符串或 null，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。     
     
     </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>measureName</apiItemName><apiType value="String"/><apiDesc>其值应由 dataProvider 中的某个值根据 <codeph>fieldName</codeph> 属性进行设置的图表项目的属性名称。例如，<codeph>measureName</codeph> 可以是 xValue、yValue、xNumber、yNumber 等，只要这些名称是图表项目的属性即可。
      
      </apiDesc></apiParam><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>图表项目的数组。
      
      </apiDesc></apiParam><apiParam><apiItemName>fieldName</apiItemName><apiType value="String"/><apiDesc>其值应该用于设置图表项目的 <codeph>measureName</codeph> 属性的标签（在数据提供者的项目中）。例如，如果数据提供者有类似于 <codeph>{Country:"US", medals:10}</codeph> 的项目，则 <codeph>fieldName</codeph> 的值可以是“Country”或“medals”。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将存储在原始 dataProvider 项目的 <codeph>measureName</codeph> 属性中的值缓存到图表项目的 <codeph>fieldName</codeph> 属性中。  
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:claimStyles"><apiName>claimStyles</apiName><shortdesc conref="mx.charts.chartClasses.IChartElement#claimStyles()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="uint"/><apiDesc>声明任何样式（例如 <codeph>firstAvailable</codeph> + <codeph>N</codeph>）之后 <i>firstAvailable</i> 的新值。
      
      </apiDesc></apiReturn><apiParam><apiItemName>styles</apiItemName><apiType value="Array"/><apiDesc>要声明的样式 Array。
     
      </apiDesc></apiParam><apiParam><apiItemName>firstAvailable</apiItemName><apiType value="uint"/><apiDesc>要声明的样式 Array 中的第一个样式选择器。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IChartElement#claimStyles()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:defaultFilterFunction"><apiName>defaultFilterFunction</apiName><shortdesc>
      如果您没有将自定义函数设置为这些系列的 filterFunction，则会使用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>对象的数组。
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>对象的数组。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果您没有将自定义函数设置为这些系列的 filterFunction，则会使用此方法。单独的系列应该覆盖此方法。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:dragStartHandler"><apiName>dragStartHandler</apiName><shortdesc>
      dragStart 事件的默认处理函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="mx.events:DragEvent"/><apiDesc>DragEvent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>dragStart</codeph> 事件的默认处理函数。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:endInterpolation"><apiName>endInterpolation</apiName><shortdesc>
      此方法由 SeriesInterpolate 效果调用，用以结束 interpolation 效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>interpolationData</apiItemName><apiType value="Object"/><apiDesc>一个对象，它定义代表系列的“前”状态的源数据（用于 <codeph>show</codeph> 效果）以及代表系列的“后”状态的目标数据（用于 <codeph>hide</codeph> 效果）。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      此方法由 SeriesInterpolate 效果调用，用以结束 interpolation 效果。这种效果使用此方法来完成 interpolation，并清除与此效果关联的所有临时状态。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:extractMinInterval"><apiName>extractMinInterval</apiName><shortdesc>
      提取最小值和最大值，还可以提取与 ChartItem 对象 Array 的最小间隔。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>图表项目的数组。
      
      </apiDesc></apiParam><apiParam><apiItemName>measureName</apiItemName><apiType value="String"/><apiDesc>其值应由 dataProvider 中的某个值根据 <codeph>fieldName</codeph> 属性进行设置的图表项目的属性名称。例如，<codeph>measureName</codeph> 可以是 xValue、yValue、xNumber、yNumber 等，只要这些名称是图表项目的属性即可。
      
      </apiDesc></apiParam><apiParam><apiItemName>desc</apiItemName><apiOperationClassifier>mx.charts.chartClasses:DataDescription</apiOperationClassifier><apiDesc>系列的 DataDescription 对象。此属性包含系列的 <codeph>min</codeph>、<codeph>max</codeph> 和 <codeph>minInterval</codeph> 等有界限的值。    
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      提取最小值和最大值，还可以提取与 ChartItem 对象 Array 的最小间隔。派生的类可以通过实现 <codeph>describeData()</codeph> 方法来调用此方法，以填充 DataDescription 结构的详细信息。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:extractMinMax"><apiName>extractMinMax</apiName><shortdesc>
      提取最小值和最大值，还可以提取与 ChartItem 对象 Array 的最小间隔。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>图表项目的数组。
      
      </apiDesc></apiParam><apiParam><apiItemName>measureName</apiItemName><apiType value="String"/><apiDesc>其值应由 dataProvider 中的某个值根据 <codeph>fieldName</codeph> 属性进行设置的图表项目的属性名称。例如，<codeph>measureName</codeph> 可以是 xValue、yValue、xNumber、yNumber 等，只要这些名称是图表项目的属性即可。
      
      </apiDesc></apiParam><apiParam><apiItemName>desc</apiItemName><apiOperationClassifier>mx.charts.chartClasses:DataDescription</apiOperationClassifier><apiDesc>系列的 DataDescription 对象。此属性包含系列的 <codeph>min</codeph>、<codeph>max</codeph> 和 <codeph>minInterval</codeph> 等有界限的值。
      
      </apiDesc></apiParam><apiParam><apiItemName>calculateInterval</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>通过使用 <codeph>cache</codeph> 属性中的 ChartItem 对象，确定是否提取 DataDescription <codeph>desc</codeph> 的 <codeph>minInterval</codeph>。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      提取最小值和最大值，还可以提取与 ChartItem 对象 Array 的最小间隔。派生的类可以通过实现 <codeph>describeData()</codeph> 方法来调用此方法，以填充 DataDescription 结构的详细信息。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:getAxis"><apiName>getAxis</apiName><shortdesc>
      通常应通过已命名属性来直接检索 Axis 实例（如基于笛卡尔的系列 horizontalAxis、verticalAxis 或 radiusAxis）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>图表特定维度的 Axis 实例。
      
      </apiDesc><apiOperationClassifier>mx.charts.chartClasses:IAxis</apiOperationClassifier></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>需要其轴的维度。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      通常应通过已命名属性来直接检索 Axis 实例（如基于笛卡尔的系列 <codeph>horizontalAxis</codeph>、<codeph>verticalAxis</codeph> 或 <codeph>radiusAxis</codeph>）。
      
      <p>这是一个低级存取器。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:getElementBounds"><apiName>getElementBounds</apiName><shortdesc>
      填充由该系列生成 renderData 结构的 elementBounds、bounds 和 visibleBounds 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderData</apiItemName><apiType value="Object"/><apiDesc>此系列生成的结构。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      填充由该系列生成的 renderData 结构的 <codeph>elementBounds</codeph>、<codeph>bounds</codeph> 和 <codeph>visibleBounds</codeph> 属性。效果类调用此方法来填充这些字段，用于实现各种效果类型。仅当被请求时，派生的类才应该实现此方法，以生成系列项目的绑定。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:getItemsInRegion"><apiName>getItemsInRegion</apiName><shortdesc>
      获取此系列矩形区域中的所有项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>位于指定矩形区域的 ChartItem 对象数组。
     
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>r</apiItemName><apiType value="flash.geom:Rectangle"/><apiDesc>定义区域的 Rectangle 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      获取此系列矩形区域中的所有项目。调用此函数以确定该系列特定矩形区域中包含的项目。
      <p>各系列都可确定其图表项目是否在其区域中。点应位于全局坐标空间内。</p>
      
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.geom.Rectangle.xml"><linktext>flash.geom.Rectangle</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:getMissingInterpolationValues"><apiName>getMissingInterpolationValues</apiName><shortdesc>
      在 interpolation 结构中填充缺失值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>sourceProps</apiItemName><apiType value="Object"/><apiDesc>包含为特定项目插补的源值的对象。此方法退出时，该对象中的所有属性都应该具有 <codeph>NaN</codeph> 以外的值。
     
      </apiDesc></apiParam><apiParam><apiItemName>srcCache</apiItemName><apiType value="Array"/><apiDesc>要进行插补的源图表项目 Array。
     
      </apiDesc></apiParam><apiParam><apiItemName>destProps</apiItemName><apiType value="Object"/><apiDesc>包含为特定项目插补的目标值的对象。此方法退出时，该 Object 中的所有属性都应该具有 <codeph>NaN</codeph> 以外的值。
     
      </apiDesc></apiParam><apiParam><apiItemName>destCache</apiItemName><apiType value="Array"/><apiDesc>要进行插补的目标图表项目 Array。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="Number"/><apiDesc>缓存中正在进行填充操作的项目的索引。  
     
      </apiDesc></apiParam><apiParam><apiItemName>customData</apiItemName><apiType value="Object"/><apiDesc>由系列传递到 <codeph>initializeInterpolationData()</codeph> 方法中的数据。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      在 interpolation 结构中填充缺失值。当系列调用 <codeph>initializeInterpolationData()</codeph> 方法时，会为 interpolation 传递源值和目标值数组。如果其中一个数组不完整，则此系列必须为 interpolation 提供“适当的”占位符值。这些占位符值是特定于系列类型确定的。系列扩展者应覆盖此方法，以提供上述占位符值。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:getRenderDataForTransition"><apiName>getRenderDataForTransition</apiName><shortdesc>
      捕捉系列的前后状态以形成动画。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>代表系列的数据所需的数据副本。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>指定这种效果是请求对隐藏数据的描述，还是请求显示的新数据的描述。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      捕捉系列的前后状态以形成动画。此方法通常由效果类调用。
     
      <p>若要实现一个自定义系列类型，则通常不会覆盖此方法，而应覆盖 <codeph>renderData()</codeph> 存取器。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:initializeInterpolationData"><apiName>initializeInterpolationData</apiName><shortdesc>
      实现 interpolation 效果的 Helper 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>可传递给 <codeph>applyInterpolation()</codeph> 方法的数据结构。
     
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>srcCache</apiItemName><apiType value="Array"/><apiDesc>一个对象 Array，这些对象的字段中包含 interpolation 的起始值。
     
      </apiDesc></apiParam><apiParam><apiItemName>dstCache</apiItemName><apiType value="Array"/><apiDesc>一个对象 Array，这些对象的字段中包含 interpolation 的结束值。
     
      </apiDesc></apiParam><apiParam><apiItemName>iProps</apiItemName><apiType value="Object"/><apiDesc>一个哈希表，其中的键标识要进行插补的缓存中的属性名称。
     
      </apiDesc></apiParam><apiParam><apiItemName>cacheType</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>要实例化的类，其中存储了为 interpolation 计算的 delta 值。通常，此值为 <codeph>null</codeph>，在这种情况下采用通用 Object。
     
      </apiDesc></apiParam><apiParam><apiItemName>customData</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>包含系列特定的数据的对象。当初始化过程中缺失值时，它将调用系列的 <codeph>getMissingInterpolationValues()</codeph> 方法来填充缺失值。此自定义数据将传递到上述方法，并且可用于传递任意参数。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      实现 interpolation 效果的 Helper 方法。自定义系列可从其 <codeph>beginInterpolation()</codeph> 方法中调用此方法来初始化数据结构，从而在效果期间插补任意一组数值属性。您可以将该数据结构传递给 <codeph>applyInterpolation()</codeph> 实用程序方法，以便在调用 <codeph>interpolate()</codeph> 方法时对值进行实际修改。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:interpolate"><apiName>interpolate</apiName><shortdesc>
      此方法由 SeriesInterpolate 效果调用，用于改进 interpolation。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>interpolationValues</apiItemName><apiType value="Array"/><apiDesc>一个从 0 到 1 的数值 Array，其中的第 <i>n</i> 个数值表示数据系列中第 <i>n</i> 个值在起始值与结束值之间的插入位置的百分比。
     
      </apiDesc></apiParam><apiParam><apiItemName>interpolationData</apiItemName><apiType value="Object"/><apiDesc>从 <codeph>beginInterpolation()</codeph> 方法返回的数据。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      此方法由 SeriesInterpolate 效果调用，用于改进 interpolation。在 interpolation 完成之前，该效果每帧对其调用一次。此系列负责使用参数来呈示插入的值。默认情况下，系列假定 <codeph>interpolationData</codeph> 是由 <codeph>initializeInterpolationData()</codeph> 方法返回的数据结构，并将其传递给 <codeph>applyInterpolation()</codeph> 方法。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:invalidateData"><apiName>invalidateData</apiName><shortdesc>
      通知系列数据提供程序中的基础数据已更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果为 <codeph>true</codeph>，则此方法将触发对更新方法的调用。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      通知系列数据提供程序中的基础数据已更改。此函数将在下次调用 <codeph>commitProperties()</codeph> 方法时触发对 <codeph>updateData()</codeph>、<codeph>updateMapping()</codeph>、<codeph>updateFilter()</codeph> 和 <codeph>updateTransform()</codeph> 方法的调用。如果为图表的任何元素分配了数据效果，则此方法还可触发显示和隐藏效果。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:invalidateFilter"><apiName>invalidateFilter</apiName><shortdesc>
      通知系列针对轴进行的数据筛选已发生更改，必须重新计算。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果为 <codeph>true</codeph>，则此方法将触发对更新方法的调用。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      通知系列针对轴进行的数据筛选已发生更改，必须重新计算。调用此方法将在下次调用 <codeph>commitProperties()</codeph> 方法时调用 <codeph>updateFilter()</codeph> 和 <codeph>updateTransform()</codeph> 方法。如果为图表的任何元素分配了数据效果，则此方法还可触发显示和隐藏效果。
           
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:invalidateMapping"><apiName>invalidateMapping</apiName><shortdesc>
      通知系列从数据到数值的映射已发生更改，并且必须重新计算。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果为 <codeph>true</codeph>，则此方法将触发对更新方法的调用。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      通知系列从数据到数值的映射已发生更改，并且必须重新计算。调用此函数将在下次调用 <codeph>commitProperties()</codeph> 方法时调用 <codeph>updateMapping()</codeph>、<codeph>updateFilter()</codeph> 和 <codeph>updateTransform()</codeph> 方法。如果为图表的任何元素分配了数据效果，则此方法还可触发显示和隐藏效果。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:invalidateTransform"><apiName>invalidateTransform</apiName><shortdesc>
      通知系列从数据到屏幕坐标的转换已经发生更改，必须重新计算。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invalid</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果为 <codeph>true</codeph>，则此方法将触发对更新方法的调用。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      通知系列从数据到屏幕坐标的转换已经发生更改，必须重新计算。调用此函数将在下次调用 <codeph>commitProperties()</codeph> 方法时调用 <codeph>updateTransform()</codeph> 方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:invalidateTransitions"><apiName>invalidateTransitions</apiName><shortdesc>
      通知系列数据显示已发生显著变化。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      通知系列数据显示已发生显著变化。这将触发所有 ShowData 和 HideData 效果。  
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:legendDataChanged"><apiName>legendDataChanged</apiName><shortdesc>
      通过分派新的 LegendDataChanged 事件在系列的显示名称发生更改时更新图例项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      通过分派新的 LegendDataChanged 事件在系列的显示名称发生更改时更新图例项目。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:Series:setAxis"><apiName>setAxis</apiName><shortdesc>
      为图表的特定维度分配 Axis 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>图表中要向其分配 Axis 的维度。
      
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IAxis</apiOperationClassifier><apiDesc>分配给图表的维度的 Axis。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      为图表的特定维度分配 Axis 实例。通常应通过已命名属性来直接设置 Axis 实例（如一个基于笛卡尔的系列 <codeph>horizontalAxis</codeph>、<codeph>verticalAxis</codeph> 或 <codeph>radiusAxis</codeph>）。
      
      <p>这是一个低级存取器。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:stripNaNs"><apiName>stripNaNs</apiName><shortdesc>
      从提供的缓存中删除字段属性为 NaN 的所有项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>图表项目的数组。
      
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>要从中删除项目的 field 属性。
      
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      从提供的缓存中删除 <codeph>field</codeph> 属性为 <codeph>NaN</codeph> 的所有项目。派生的类可以通过实现 <codeph>updateFilter()</codeph> 方法来调用此方法，以删除按轴筛选出来的所有 ChartItem 对象。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:stylesInitialized"><apiName>stylesInitialized</apiName><shortdesc>
      调用 legendDataChanged() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      调用 <codeph>legendDataChanged()</codeph> 方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:updateData"><apiName>updateData</apiName><shortdesc>
      当系列表示的基础数据发生更改，并且需要重新从数据提供程序加载时调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      当系列表示的基础数据发生更改，并且需要重新从数据提供程序加载时调用此方法。若要实现一个自定义系列类型，则应覆盖此方法，并加载从备用数据提供程序中呈示系列的必要数据。您还必须确保在子类中调用 <codeph>super.updateData()</codeph> 方法。通常不直接调用此方法，而是调用 Series 类的 <codeph>validateData()</codeph> 方法，从而保证您的数据已在给定点进行了更新。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:updateFilter"><apiName>updateFilter</apiName><shortdesc>
      当系列表示的基础数据需要根据由相关的数据转换轴表示的范围进行过滤时，调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      当系列表示的基础数据需要根据由相关的数据转换轴表示的范围进行过滤时，调用此方法。这适用于以下情况：基础数据发生更改；关联轴的范围发生更改。若要实现一个自定义系列类型，则应覆盖此方法，并使用由自身的关联数据转换管理的轴的 <codeph>filterCache()</codeph> 方法筛选出超出范围的数据。<codeph>filterCache()</codeph> 方法将所有超出范围的值转换为 <codeph>NaN</codeph>。您必须确保在子类中调用了 <codeph>super.updateFilter()</codeph> 方法。通常不直接调用此方法，如果需要保证您的数据已在给定点进行了筛选，则调用 Series 类的 <codeph>validateTransform()</codeph> 方法。通常情况下，您可以假定调用此方法之前已经调用了 <codeph>updateData()</codeph> 和 <codeph>updateMapping()</codeph> 方法（如有必要）。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:updateMapping"><apiName>updateMapping</apiName><shortdesc>
      当需要将此系列表示的基础数据映射到数字表示形式时调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      当需要将此系列表示的基础数据映射到数字表示形式时调用此方法。这适用于以下情况：基础数据发生更改；用于呈示系列的轴发生了某种相关更改。若要实现一个自定义系列，则应覆盖此方法，并使用由自身的关联数据转换管理的轴的 <codeph>mapCache()</codeph> 方法，将表示的数据转换为数值。您还必须确保在子类中调用了 <codeph>super.updateMapping()</codeph> 方法。通常不直接调用此方法，而是调用 Series 类的 <codeph>validateData()</codeph> 方法，从而保证您的数据已在给定点进行了映射。通常情况下，您可以假定调用此方法之前已经调用了 <codeph>updateData()</codeph> 方法（如有必要）。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:updateTransform"><apiName>updateTransform</apiName><shortdesc>
      当需要按关联数据转换的轴将由系列表示的基础数据转换为屏幕值时，调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      当需要按关联数据转换的轴将由系列表示的基础数据转换为屏幕值时，调用此方法。这适用于以下情况：基础数据发生更改；关联轴的范围发生更改；屏幕上的区域大小发生更改。若要实现一个自定义系列类型，则应覆盖此方法，并使用关联数据转换的 <codeph>transformCache()</codeph> 方法转换数据。您必须确保在子类中调用 <codeph>super.updateTransform()</codeph> 方法。通常不直接调用此方法，如果需要保证您的数据已在给定点进行了筛选，则调用 Series 类的 <codeph>valiateTransform()</codeph> 方法。通常情况下，您可以假定调用此方法之前，已经调用了 <codeph>updateData()</codeph>、<codeph>updateMapping()</codeph> 和 <codeph>updateFilter()</codeph> 方法（如有必要）。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:validateData"><apiName>validateData</apiName><shortdesc>
      如有必要，调用系列的 updateData() 和 updateMapping() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      如有必要，调用系列的 <codeph>updateData()</codeph> 和 <codeph>updateMapping()</codeph> 方法。系列会从 <codeph>commitProperties()</codeph> 方法中自动调用此方法（如有必要）；但是，如果在显式时间里需要生成的值，则派生的系列可以显式调用此方法。按轴加载和映射数据旨在使轴可以随时接受数据。可以随时安全地显式调用此方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:Series:protected:validateTransform"><apiName>validateTransform</apiName><shortdesc>
      如有必要，调用系列的 updateFilter() 和 updateTransform() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      如有必要，调用系列的 <codeph>updateFilter()</codeph> 和 <codeph>updateTransform()</codeph> 方法。系列将在调用 <codeph>commitProperties()</codeph> 方法期间自动调用此方法（如有必要）；但是，如果在显式时间里需要生成的值，则派生的系列可以显式调用此方法。数据的筛选和转换取决于按轴计算的特定值，而这些值又取决于图表中显示的数据。如果这些值已经更新，则在错误的时间调用此函数可能导致额外的工作量。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:Series:dataFunction:get"><apiName>dataFunction</apiName><shortdesc>
     指定一个返回数值的方法，该数值用于在系列中放置当前图表项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     指定一个返回数值的方法，该数值用于在系列中放置当前图表项目。如果已经设置了此属性，则对于 AreaSeries、BarSeries、BubbleSeries、ColumnSeries、LineSeries 和 PlotSeries 来说，自定义数据函数的返回值将优先于其他相关属性，如 <codeph>xField</codeph> 和 <codeph>yField</codeph>。对于 BubbleSeries 来说，该返回值优先于 <codeph>radiusField</codeph> 属性。对于 PieSeries 来说，该返回值优先于 <codeph>field</codeph> 属性。     
     
     <p>系列的自定义 <codeph>dataFunction</codeph> 包含以下签名：
      
     <pre>
     <i>function_name</i> (series:Series, item:Object, fieldName:String):Object { ... }
     </pre>
     
     <codeph>series</codeph> 是当前使用此 <codeph>dataFunction</codeph> 的系列。<codeph>item</codeph> 是数据提供程序中的项目。<codeph>fieldName</codeph> 是当前图表项目中要填充的字段。此函数返回一个对象。
     </p>
     
     <p>通常可以使用 <codeph>dataFunction</codeph> 属性来访问数据提供程序中嵌套的字段（非标量值）。例如，下列数据需要使用数据函数才能访问图表的数据提供程序中的字段：</p>
      
      <pre>
      {month: "Aug", close: {High:45.87,Low:12.2}, open:25.19}
      </pre>
      
     <p>以下示例返回来自此数据提供程序的值：</p>
       
     <pre>
     public function myDataFunction(series:Series, item:Object, fieldName:String):Object {
          if (fieldName == 'yValue')
              return(item.close.High);
          else if (fieldName == "xValue")
              return(item.month);
          else
              return null;
     }     
     </pre>
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:dataTipItems:get"><apiName>dataTipItems</apiName><shortdesc>
      一个图表项目数组，将在图表上以非交互方式为这些项目显示数据提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      一个图表项目数组，将在图表上以非交互方式为这些项目显示数据提示。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:displayName:get"><apiName>displayName</apiName><shortdesc>
      显示给用户的系列名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      显示给用户的系列名称。此属性用于表示用户可见的标签中的系列，如数据提示。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:filterDataValues:get"><apiName>filterDataValues</apiName><shortdesc>
      如果设置了 filterFuction，则会忽略 filterDataValues 和 filterData。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      如果设置了 <codeph>filterFuction</codeph>，则会忽略 <codeph>filterDataValues</codeph> 和 <codeph>filterData</codeph>。如果将 <codeph>filterDataValues</codeph> 属性设置为 <codeph>none</codeph>，则系列将在显示之前不过滤其数据。如果将 <codeph>filterDataValues</codeph> 设置为 <codeph>null</codeph>，则系列会在显示之前过滤诸如 <codeph>null</codeph>、<codeph>undefined</codeph> 或 <codeph>NaN</codeph> 等数据。如果将此属性设置为 <codeph>outsideRange</codeph>，则系列会过滤诸如 <codeph>null</codeph>、<codeph>undefined</codeph> 或 <codeph>NaN</codeph> 等数据以及图表轴范围之外的值。如果您获知系列中的所有数据都有效，则可以将此属性设置为 <codeph>none</codeph> 以提高性能。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:filterData:get"><apiName>filterData</apiName><shortdesc>
      如果设置了 filterFuction 或 filterDataValues，则会忽略 filterData。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果设置了 <codeph>filterFuction</codeph> 或 <codeph>filterDataValues</codeph>，则会忽略 <codeph>filterData</codeph>。如果在显示系列之前对数据进行筛选，则为 <codeph>true</codeph>。如果系列呈示的数据中包含缺失值（如 <codeph>null</codeph>、<codeph>undefined</codeph> 或 <codeph>NaN</codeph>），或者呈示的值超出了图表轴范围，则应将此属性设置为 <codeph>true</codeph>（默认设置）。如果您获知系列中的所有数据都有效，则可以将此属性设置为 <codeph>false</codeph> 以提高性能。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:filterFunction:get"><apiName>filterFunction</apiName><shortdesc>
     指定一种方法，用于返回系列中要显示的图表项的数组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     指定一种方法，用于返回系列中要显示的图表项的数组。如果已设置此属性，则自定义过滤函数的返回值将优先于 <codeph>filterDataValues</codeph> 和 <codeph>filterData</codeph> 属性。但是，如果返回 null，则按该顺序将优先选择 <codeph>filterDataValues</codeph> 和 <codeph>filterData</codeph>。  
     
     <p>自定义 <codeph>filterFunction</codeph> 包含以下签名：
      
     <pre>
     <i>function_name</i> (cache:Array):Array { ... }
     </pre>
     
     <codeph>cache</codeph> 是对要过滤的图表项目数组的引用。此函数返回要显示的图表项目数组。 
     </p>
      
     </apiDesc><example>
     <pre>
     public function myFilterFunction(cache:Array):Array {
          var filteredCache:Array=[];
          var n:int = cache.length;  
          for(var i:int = 0; i &lt; n; i++)
          {
              var item:ColumnSeriesItem = ColumnSeriesItem(cache[i]);
              if(item.yNumber > 0 &amp;&amp; item.yNumber &lt; 700)
              {
                  filteredCache.push(item);
              }
          }
          return filteredCache;
     }
     </pre>
     
     <p>
      如果为图表系列指定自定义过滤函数，且希望过滤 null 值或轴范围之外的值，则必须使用自定义过滤函数手动进行过滤。无法使用 <codeph>filterDataValues</codeph> 或 <codeph> filterData</codeph>。
      </p>
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:interactive:get"><apiName>interactive</apiName><shortdesc>
      确定当用户与屏幕上的图表数据进行交互时是否显示数据提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      确定当用户与屏幕上的图表数据进行交互时是否显示数据提示。设置为 <codeph>false</codeph> 可阻止系列显示数据提示或生成点击数据。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:items:get"><apiName>items</apiName><shortdesc>
      获取系列中筛选之后所得的所有项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      获取系列中筛选之后所得的所有项目。
      <p>单个系列确定要返回的项目列表。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:legendData:get"><apiName>legendData</apiName><shortdesc>
      一个 LegendData 实例 Array，描述应在表示此系列的图例中显示的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      一个 LegendData 实例 Array，描述应在表示此系列的图例中显示的项目。派生的系列类会覆盖此 getter 函数并返回特定于其样式和数据表示方法的图例数据。虽然大多数系列类型仅返回一个 LegendData 实例，但仍有部分系列类型（如 PieSeries 和 StackedSeries）会返回多个实例，表示 Array 中的各个项目或多种数据呈示方式。   
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:protected:renderData:get"><apiName>renderData</apiName><shortdesc>
      存储必要信息以呈示此系列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      存储必要信息以呈示此系列。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:selectable:get"><apiName>selectable</apiName><shortdesc>
      指示系列是否可选。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指示系列是否可选。
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      系列的数据提供程序中所选项目的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      系列的数据提供程序中所选项目的索引。如果选择了多个项目，则此属性指示最近选择的项目。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:selectedIndices:get"><apiName>selectedIndices</apiName><shortdesc>
      系列的数据提供程序中所选项目的索引 Array。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      系列的数据提供程序中所选项目的索引 Array。
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:selectedItem:get"><apiName>selectedItem</apiName><shortdesc>
      系列中选定的图表项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts:ChartItem</apiValueClassifier></apiValueDef><apiDesc>
      系列中选定的图表项目。如果选择了多个项目，则此属性指示最近选择的项目。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:selectedItems:get"><apiName>selectedItems</apiName><shortdesc>
      系列中选定的图表项目 Array。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      系列中选定的图表项目 Array。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:transitionRenderData:get"><apiName>transitionRenderData</apiName><shortdesc>
      通过运行过渡传入的呈示数据结构。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      通过运行过渡传入的呈示数据结构。如果系列效果设置为对某一系列起作用，它将首先通过请求其呈示数据来捕获系列的当前状态。此过渡修改呈示数据以创建所需的效果，并将结构传回系列以供显示。如果 <codeph>transitionRenderData</codeph> 属性的值并非 <codeph>null</codeph>，则系列将使用其内容更新其显示。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:Series:dataTransform:set"><apiName>dataTransform</apiName><shortdesc>
      
      与元素关联的 DataTransform 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:DataTransform</apiValueClassifier></apiValueDef><apiDesc>
      
      与元素关联的 DataTransform 对象。DataTransform 对象给出一组元素与一组轴对象之间的关系，用于将这些元素从数据空间转换到屏幕坐标，然后返回。图表元素使用其关联的 DataTransform 对象，来设计显示其数据的方法。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:GraphicsUtilities"><apiName>GraphicsUtilities</apiName><shortdesc>
  各种图表类使用的一组内部图形呈示实用工具。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  各种图表类使用的一组内部图形呈示实用工具。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.charts.chartClasses:GraphicsUtilities:colorFromFill"><apiName>colorFromFill</apiName><shortdesc>
	  将填充值转换为纯色。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>表示 Fill 的颜色值。
	  
	  </apiDesc><apiType value="uint"/></apiReturn><apiParam><apiItemName>f</apiItemName><apiType value="Object"/><apiDesc>要从中提取颜色的 Fill 对象。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	  将填充值转换为纯色。此简便方法将与屏幕上 Fill 最近似的颜色值从 Fill 中提取出来。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:GraphicsUtilities:drawArc"><apiName>drawArc</apiName><shortdesc>
	  在目标 Graphics 对象中绘制弧。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>g</apiItemName><apiType value="flash.display:Graphics"/><apiDesc>要在其中进行绘制的 Graphics 对象。
	 </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>弧的水平起点。
	 </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>弧的垂直起点。
	 </apiDesc></apiParam><apiParam><apiItemName>startAngle</apiItemName><apiType value="Number"/><apiDesc>弧的起始角（以弧度为单位）。
	 </apiDesc></apiParam><apiParam><apiItemName>arc</apiItemName><apiType value="Number"/><apiDesc>弧的扫描角度（以弧度为单位）。
	 </apiDesc></apiParam><apiParam><apiItemName>radius</apiItemName><apiType value="Number"/><apiDesc> 弧的水平半径（以像素为单位）
	 </apiDesc></apiParam><apiParam><apiItemName>yRadius</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>弧的垂直半径（以像素为单位）。如果未指定，则认为与 radius 相同
	 </apiDesc></apiParam><apiParam><apiItemName>continueFlag</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指示例程是否应该先将图形笔移动到弧的起点，再进行绘制。设置为 <codeph>true</codeph> 可以继续绘制正在绘制的线。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  在目标 Graphics 对象中绘制弧。  
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:GraphicsUtilities:drawPolyLine"><apiName>drawPolyLine</apiName><shortdesc>
	  使用一种形式绘制连接数据点的线。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>g</apiItemName><apiType value="flash.display:Graphics"/><apiDesc>    要在其中进行绘制的 Graphics 对象。
	 </apiDesc></apiParam><apiParam><apiItemName>pts</apiItemName><apiType value="Array"/><apiDesc>  定义线的数据点数组。
	 </apiDesc></apiParam><apiParam><apiItemName>start</apiItemName><apiType value="int"/><apiDesc>绘制线时要使用的 <codeph>pts</codeph> 数组中第一个点的索引。
	 </apiDesc></apiParam><apiParam><apiItemName>end</apiItemName><apiType value="int"/><apiDesc>  绘制线时要使用的最后一个点（唯一）的索引。
	 </apiDesc></apiParam><apiParam><apiItemName>hProp</apiItemName><apiType value="String"/><apiDesc><codeph>pts </codeph> 数组中所含对象的用于定义线中点的水平位置的属性名称。
	 </apiDesc></apiParam><apiParam><apiItemName>vProp</apiItemName><apiType value="String"/><apiDesc><codeph>pts </codeph> 数组中所含对象的用于定义线中点的垂直位置的属性名称。
	 </apiDesc></apiParam><apiParam><apiItemName>stroke</apiItemName><apiType value="mx.graphics:IStroke"/><apiDesc>用于呈示线的 Stroke。
	 </apiDesc></apiParam><apiParam><apiItemName>form</apiItemName><apiType value="Object"/><apiDesc> 用于呈示线的形式。有效值为“segment”、“horizontal”、“vertical”、“step”、“reverseStep”或“curve”。这些形式类似于 LineSeries 类的 <codeph>form</codeph> 属性。
	 </apiDesc></apiParam><apiParam><apiItemName>moveToStart</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>指示是否首先将笔移动到线的起点，再进行绘制。传递 <codeph>false</codeph> 可以使用此函数继续绘制正在绘制的线。
 	  
 	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  使用一种形式绘制连接数据点的线。  
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:GraphicsUtilities:fillFromStyle"><apiName>fillFromStyle</apiName><shortdesc>
	  将样式值转换为 Fill 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>对应的 IFill 对象。
	  
	  </apiDesc><apiType value="mx.graphics:IFill"/></apiReturn><apiParam><apiItemName>v</apiItemName><apiType value="Object"/><apiDesc>要转换为 Fill 的值。
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	  将样式值转换为 Fill 对象。此简便方法将通过样式指定的值转换为用于填充屏幕某个区域的 Fill 对象。如果该值是数字，则此函数将其转换为对应的 SolidColor。
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:GraphicsUtilities:fillRect"><apiName>fillRect</apiName><shortdesc>
	  使用提供的 IFill 和 IStroke 对象填充矩形。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>g</apiItemName><apiType value="flash.display:Graphics"/><apiDesc>要在其中进行绘制的 Graphics 对象。
	 </apiDesc></apiParam><apiParam><apiItemName>left</apiItemName><apiType value="Number"/><apiDesc>要填充的矩形的左侧。
	 </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="Number"/><apiDesc>要填充的矩形的顶部。
	 </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="Number"/><apiDesc>要填充的矩形的右侧。
	 </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="Number"/><apiDesc>要填充的矩形的底部。
	 </apiDesc></apiParam><apiParam><apiItemName>fill</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>用于填充矩形的 IFill 对象。将此参数设置为 null 可以绘制没有 Fill 的矩形。
	 </apiDesc></apiParam><apiParam><apiItemName>ls</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>用于绘制矩形的笔触对象。将此参数设置为 null 可以绘制没有 Stroke 的矩形。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  使用提供的 IFill 和 IStroke 对象填充矩形。此实用程序函数使用提供的 Fill 和 Stroke 填充 Graphics 对象提供的矩形。如果没有提供 Stroke，则填充的矩形没有边框。如果没有提供 Fill，则绘制的矩形没有填充。
	 
	 	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:GraphicsUtilities:setLineStyle"><apiName>setLineStyle</apiName><shortdesc>
	  将 Stroke 中的值应用到提供的 Graphics 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>g</apiItemName><apiType value="flash.display:Graphics"/><apiDesc>要修改的 Graphics 对象。
	 </apiDesc></apiParam><apiParam><apiItemName>ls</apiItemName><apiType value="mx.graphics:IStroke"/><apiDesc>要应用的 IStroke 实例；设置为 <codeph>null</codeph> 可以在不使用 Stroke 的情况下呈示。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  将 Stroke 中的值应用到提供的 Graphics 对象。此实用程序函数将应用传入的 Stroke；如果 <codeph>ls</codeph> 参数设置为 <codeph>null</codeph>，则清除提供的 Graphics 对象的线条样式。
	 
	 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.charts.chartClasses:DateRangeUtilities"><apiName>DateRangeUtilities</apiName><shortdesc>
 由 DateTimeAxis 使用的一组已禁用的日期范围实用程序
  
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 由 DateTimeAxis 使用的一组已禁用的日期范围实用程序
  
  </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="mx.charts.chartClasses:IStackable2"><apiName>IStackable2</apiName><shortdesc>
  IStackable2 接口由可以堆栈的任意系列实现。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IStackable</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IStackable2 接口由可以堆栈的任意系列实现。如果堆栈组应在堆栈的同时显示负值，则通过堆栈实现此接口时，堆栈组（ColumnSet、BarSet、AreaSet）需要为其分配所有子系列。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.charts.chartClasses:IStackable2:mx.charts.chartClasses:IStackable2:stackAll"><apiName>stackAll</apiName><shortdesc>
  堆叠系列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>表示新堆栈的系列中最大值和最小值的对象。	 
  
  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>stackedPosXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>包含系列应在其上堆叠的基础值。dictionary 中的键都是 x 值，值都是正的 x 值。
 
  </apiDesc></apiParam><apiParam><apiItemName>stackedNegXValueDictionary</apiItemName><apiType value="flash.utils:Dictionary"/><apiDesc>包含系列应在其上堆叠的基础值。dictionary 中的键都是 x 值，值都是负的 y 值。
  
  </apiDesc></apiParam><apiParam><apiItemName>previousElement</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IStackable2</apiOperationClassifier><apiDesc>堆栈中的上一元素。例如，如果元素类型相同，您就可以访问此属性，以避免在呈示时执行重复工作。
  
  </apiDesc></apiParam></apiOperationDef><apiDesc>
  堆叠系列。通常，系列通过实现 <codeph>updateData()</codeph> 方法，加载来自数据提供程序的数据。但是，堆叠的系列需要执行特殊操作，因为此类系列的值不一定存储在数据提供程序中。此类系列的值为存储在其数据提供程序中的任何值，与它堆叠在其上的对象加载的值之和。
  <p>自定义堆叠系列应加载来自数据提供程序的数据，并将其与存储在 dictionary 中的基值相加以获取应该呈示的实际值，最后使用新的和值替换 dictionary 中的值，从而实现 <codeph>stack()</codeph> 方法。</p>
  
  </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.charts.chartClasses:ChartElement"><apiName>ChartElement</apiName><shortdesc>
  ChartElement 类是可见图表元素的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IChartElement2</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:DualStyleObject</apiBaseClassifier></apiClassifierDef><apiDesc>
  ChartElement 类是可见图表元素的基类。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:ChartElement:ChartElement"><apiName>ChartElement</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:ChartElement:addChildAt"><apiName>addChildAt</apiName><shortdesc>
     将一个 DisplayObject 子实例添加到该 DisplayObjectContainer 实例中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>在 <codeph>child</codeph> 参数中传递的 DisplayObject 实例。
     
     </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>要作为该 DisplayObjectContainer 实例的子项添加的 DisplayObject 实例。
     
     </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>添加该子项的索引位置。如果指定当前占用的索引位置，则该位置以及所有更高位置上的子对象会在子级列表中上移一个位置。 
         
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     将一个 DisplayObject 子实例添加到该 DisplayObjectContainer 实例中。该子项将被添加到指定的索引位置。索引为 0 表示该 DisplayObjectContainer 对象的显示列表的后（底）部。
     
     <p>如果添加一个已将其它显示对象容器作为父项的子对象，则会从其它显示对象容器的子列表中删除该对象。 </p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:addChild"><apiName>addChild</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:chartStateChanged"><apiName>chartStateChanged</apiName><shortdesc>
      
      封闭图表调用此方法来指示该图表的当前状态已更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>oldState</apiItemName><apiType value="uint"/><apiDesc>一个表示上一状态的整数。
     
      </apiDesc></apiParam><apiParam><apiItemName>v</apiItemName><apiType value="uint"/><apiDesc>一个表示新状态的整数。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      封闭图表调用此方法来指示该图表的当前状态已更改。实现元素应该响应此方法，以同步对由元素显示的数据所做的更改。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:claimStyles"><apiName>claimStyles</apiName><shortdesc>
      
      图表调用此方法来允许相关元素声明其 chartSeriesStyles Array 中的样式选择器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>声明任何样式（例如 <codeph>firstAvailable</codeph> + <codeph>N</codeph>）之后 <i>firstAvailable</i> 的新值。
      
      </apiDesc><apiType value="uint"/></apiReturn><apiParam><apiItemName>styles</apiItemName><apiType value="Array"/><apiDesc>要声明的样式 Array。
     
      </apiDesc></apiParam><apiParam><apiItemName>firstAvailable</apiItemName><apiType value="uint"/><apiDesc>要声明的样式 Array 中的第一个样式选择器。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      图表调用此方法来允许相关元素声明其 chartSeriesStyles Array 中的样式选择器。每个图表都有一组相关的选择器，这些选择器被隐式分配给图表中包含的需要它们的元素中。实现此函数可以使元素根据需要“声明”该组中的元素。需要 <i>N</i> 个样式选择器的元素声明值介于 <codeph>styles[firstAvailable]</codeph> 和 <codeph>styles[firstAvailable + <i>N</i> - 1]</codeph> 之间。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:collectTransitions"><apiName>collectTransitions</apiName><shortdesc>
      
      封闭图表调用此方法来收集特定元素在图表状态发生更改时可能执行的任何过渡。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>chartState</apiItemName><apiType value="Number"/><apiDesc>图表执行新过渡时的状态。
     
      </apiDesc></apiParam><apiParam><apiItemName>transitions</apiItemName><apiType value="Array"/><apiDesc>要添加到图表要执行的过渡列表中的过渡 Array。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      封闭图表调用此方法来收集特定元素在图表状态发生更改时可能执行的任何过渡。图表将收集所有元素的过渡，并确保这些过渡并行执行。此图表等待所有过渡完成之后，才会进入另一个状态。实现器应将所有的必要过渡追加到过渡 Array 参数。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:protected:createDataID"><apiName>createDataID</apiName><shortdesc>
      创建一个唯一 ID，以代表进行比较的 dataPoint。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>dataPoint 在整个应用程序中独一无二的 ID。
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>dataPointID</apiItemName><apiType value="Number"/><apiDesc>dataPoint 的当前 ID。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      创建一个唯一 ID，以代表进行比较的 dataPoint。派生的类可以使用本地唯一数据点 ID 调用此函数，以生成整个应用程序范围内唯一的 ID。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:protected:dataChanged"><apiName>dataChanged</apiName><shortdesc>
      表明由该元素表示的基础数据已经发生更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      表明由该元素表示的基础数据已经发生更改。您应该在系列或元素显示的数据发生更改时调用此方法。它允许所有关联轴更新其范围（如果需要）。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:dataToLocal"><apiName>dataToLocal</apiName><shortdesc>
      
      将数据值元组转换为屏幕上的 x-y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>相对于图表的坐标。
      
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>dataValues</apiItemName><apiType value="restParam"/><apiDesc>要转换为坐标的数据值。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      将数据值元组转换为屏幕上的 x-y 坐标。调用此函数可借助单个元素使用的转换将数据转换到屏幕上。例如，要为图表的数据区域创建自定义加亮效果，则可以使用此函数来确定相关区域的屏幕上坐标。
      
      <p>对于笛卡尔图表元素，通常需要传递两个值。第一个值映射到水平轴，第二个值映到垂直轴。</p>
      
      <p>对于极性图表，第一个值映射到角度轴，第二个值映射到半径轴。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:describeData"><apiName>describeData</apiName><shortdesc>
      
      由具有控制地位的 DataTransform 调用，以获得由此 IChartElement 表示的数据描述。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>一个 Array，其中包含用于描述显示数据的 DataDescription 实例。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>确定从中获取数据描述的轴。
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>一个位域，指示特定轴需要关注 DataDescription 对象的哪些值。实现器通过仅计算必要字段即可实现优化。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      由具有控制地位的 DataTransform 调用，以获得由此 IChartElement 表示的数据描述。实现器填充并返回 mx.charts.chartClasses.DataDescription 对象 Array，以保证它们的数据能够按任一条轴进行正确显示，而这里的轴是根据所显示的数据（如最小值、最大值、间隔和单位大小）自动生成值的。多数元素类型都会返回包含一个 DataDescription 的 Array。聚合元素（如 BarSet 和 ColumnSet）可能会返回多个 DataDescription 实例，用于描述由其子元素显示的数据。调用此方法时，实现器会沿 <codeph>dimension</codeph> 参数说明的轴显示数据。对于所包含的图表支持的每条轴，都有可能调用此函数。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:findDataPoints"><apiName>findDataPoints</apiName><shortdesc> 
      在给定坐标“下方”查找由该元素表示的最近数据点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>HitData 的数组。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>X 坐标。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Y 坐标。
     
      </apiDesc></apiParam><apiParam><apiItemName>sensitivity2</apiItemName><apiType value="Number"/><apiDesc>将指针视为位于精确坐标“下方”时二者的接近程度，以像素为单位。此属性类似于图表控件的 mouseSensitivity 属性值。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      在给定坐标“下方”查找由该元素表示的最近数据点。
     
      <p>此方法将返回描述范围内数据点的 HitData 结构的数组。如果能够保证 dataPoint 不重叠，则各个 ChartElement 可以选择仅返回一个 dataPoint。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:getAllDataPoints"><apiName>getAllDataPoints</apiName><shortdesc>
      返回所有基础 ChartElement 的项目的 HitData 数组，在 showAllDataTips 设置为 true 时将在图表上显示此 ChartElement 的 dataTip。
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>描述数据点的 HitData 对象。
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      返回所有基础 ChartElement 的项目的 HitData 数组，在 <codeph>showAllDataTips</codeph> 设置为 <codeph>true</codeph> 时将在图表上显示此 ChartElement 的 dataTip。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:localToData"><apiName>localToData</apiName><shortdesc>
      
      将屏幕上的坐标转换成数据值元组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>数据值的元组。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>pt</apiItemName><apiType value="flash.geom:Point"/><apiDesc>要转换的点。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      将屏幕上的坐标转换成数据值元组。调用此函数可确定屏幕上的特定点代表哪些数据值。
      <p>各个图表类型可确定发生此转换的方式。该点应随图表的坐标空间而转移。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:mappingChanged"><apiName>mappingChanged</apiName><shortdesc>
      在一个或多个关联轴的映射发生更改时调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      在一个或多个关联轴的映射发生更改时调用此方法。如果由分配给此 ChartElement 的 DataTransform 表示的轴进行了某种形式的修改，则它将调用此方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:ChartElement:protected:processNewDataProvider"><apiName>processNewDataProvider</apiName><shortdesc> 
      为元素分配新 dataProvider 时调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>数据提供者。这一般为 Array、ArrayCollection、XMLList、XMLListCollection 或类似的类。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      为元素分配新 dataProvider 时调用此方法。在分配新 dataProvider 时，子类可以覆盖和定义自定义行为。在设置了 <codeph>dataProvider</codeph> 属性，或在未直接分配特定 dataProvider 的情况下设置了 <codeph>chartDataProvider</codeph> 属性时，将调用此方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:ChartElement:protected:cursor"><apiName>cursor</apiName><shortdesc>
      每个 ChartElement 都有一个与其 dataProvider 关联的光标，供内部使用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="mx.collections:IViewCursor"/></apiValueDef><apiDesc>
      每个 ChartElement 都有一个与其 dataProvider 关联的光标，供内部使用。ChartElement 拥有此光标的唯一所有权；它们会假定其他任何代码都无法修改其位置。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartElement:protected:chart:get"><apiName>chart</apiName><shortdesc>
      指的是包含此元素的图表组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.charts.chartClasses:ChartBase</apiValueClassifier></apiValueDef><apiDesc>
      指的是包含此元素的图表组件。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartElement:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      分配给此特定元素的数据提供程序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      分配给此特定元素的数据提供程序。通常，这些元素从封闭图表中继承 dataProvider。但是，各个元素可以使用自己的特定 dataProvider 进行覆盖。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartElement:dataTransform:get"><apiName>dataTransform</apiName><shortdesc>
      与元素关联的 DataTransform 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:DataTransform</apiValueClassifier></apiValueDef><apiDesc>
      与元素关联的 DataTransform 对象。DataTransform 对象给出一组元素与一组轴对象之间的关系，用于将这些元素从数据空间转换到屏幕坐标，然后返回。图表元素使用其关联的 DataTransform 对象，来设计显示其数据的方法。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartElement:labelContainer:get"><apiName>labelContainer</apiName><shortdesc>
      
      用于显示由此元素显示的标签的 DisplayObject。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      
      用于显示由此元素显示的标签的 DisplayObject。在多数情况下，在图表的数据区域中显示的标签显示在所有元素上方，而不是插入到数据中。如果正在实现的元素存在要显示的标签，则可以将其放置在 Sprite 对象中，并将其作为 <codeph>labelContainer</codeph> 属性的值返回。封闭图表将从所有封闭的元素中呈示 labelContainer，并将其放在数据区域中所有其他元素的上方。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:ChartElement:chartDataProvider:set"><apiName>chartDataProvider</apiName><shortdesc>
      分配给封闭图表的数据提供程序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Object"/></apiValueDef><apiDesc>
      分配给封闭图表的数据提供程序。必要时，元素类型可以选择从封闭图表中继承数据提供程序，或者允许开发人员专门为此元素指定数据提供程序。并非所有元素都必须由数据提供程序驱动。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:DataTransform"><apiName>DataTransform</apiName><shortdesc>
  DataTransform 对象表示包含字型的图表的部分，可以实现值与屏幕坐标之间的相互转换。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  DataTransform 对象表示包含字型的图表的部分，可以实现值与屏幕坐标之间的相互转换。每个 DataTransform 对象都要显示一个水平轴、一个垂直轴和一组字型（背景、数据和重叠）。  
  
  <p>理论上，图表可以包含多个重叠的 DataTransform 对象。这使您可以显示这样一种图表：在同一区域显示多个数据集，但却具有不同范围。例如，您可能希望显示月收入与销量的比较。如果收入通常以百万计，而销量通常以千计，则很难在同一范围内将二者有效地显示出来。通过将其叠加在不同的 DataTransform 对象中，最终用户即可比较使用不同范围显示的数值的趋势。</p>
 
  <p>图表中只能包含一组 DataTransform。</p>
  
  <p>多数情况下，您将使用 ChartBase 对象，该对象将在图表及其包含的字型和轴对象之间隐藏 DataTransform 对象。如果您要创建自己的 ChartElement 对象，则必须了解 DataTransform 类的方法才能正确地实现其元素。</p>
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.charts.chartClasses:DataTransform_mx.events.FlexEvent.TRANSFORM_CHANGE_transformChange"><apiName>transformChange</apiName><shortdesc>
  在从数据空间到屏幕空间的转换发生更改时分派。发生此类更改的原因通常是进行此转换的轴发生了某种形式的更改，或者数据转换本身具有大小限制。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.TRANSFORM_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在从数据空间到屏幕空间的转换发生更改时分派。发生此类更改的原因通常是进行此转换的轴发生了某种形式的更改，或者数据转换本身具有大小限制。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.charts.chartClasses:DataTransform:DataTransform"><apiName>DataTransform</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts.chartClasses:DataTransform:dataChanged"><apiName>dataChanged</apiName><shortdesc>
      通知 DataTransform 此图表中显示的部分基础数据已经发生更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      通知 DataTransform 此图表中显示的部分基础数据已经发生更改。一般情况下，DataTransform 对图表中显示的基础数据源没有任何了解，因此，当其数据发生更改时字型应调用此方法，以便 DataTransform 根据其数据重新计算范围尺度。这<b>不会</b>使 DataTransform 失效，因为没有数据发生更改的保证。轴对象（或范围对象）必须触发一个无效事件。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:DataTransform:describeData"><apiName>describeData</apiName><shortdesc>
      收集与此数据转换相关的所有元素的重要显示值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>一个 BoundedValue 对象 Array。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>收集值的范围。
     
      </apiDesc></apiParam><apiParam><apiItemName>requiredFields</apiItemName><apiType value="uint"/><apiDesc>定义此转换需要的数据。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      收集与此数据转换相关的所有元素的重要显示值。轴实例调用此方法来收集在自动生成适当范围时需要考虑的值。此方法会返回一个 BoundedValue 对象 Array。
      
      <p>要为 CartesianTransform 的水平轴收集重要值，请传递 0。要为垂直轴收集值，请传递 1。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:DataTransform:getAxis"><apiName>getAxis</apiName><shortdesc>
      检索负责转换由维度参数指定的数据维度的轴实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>轴实例。
      
      </apiDesc><apiOperationClassifier>mx.charts.chartClasses:IAxis</apiOperationClassifier></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>其轴负责转换数据的维度。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      检索负责转换由 <codeph>dimension</codeph> 参数指定的数据维度的轴实例。如果没有预先分配轴，则会创建一个默认轴。所有维度的默认轴都是 LinearAxis，其 <codeph>autoAdjust</codeph> 属性设置为 <codeph>false</codeph>。 
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.charts.xml#LinearAxis"><linktext>mx.charts.LinearAxis</linktext></link></related-links></apiOperation><apiOperation id="mx.charts.chartClasses:DataTransform:invertTransform"><apiName>invertTransform</apiName><shortdesc>
      相对于 DataTransform 坐标系将 x 坐标和 y 坐标转换为数据空间中的二维值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>一个包含转换后的值的 Array。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiType value="restParam"/><apiDesc>x 和 y 位置（按该顺序）。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      相对于 DataTransform 坐标系将 x 坐标和 y 坐标转换为数据空间中的二维值。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:DataTransform:setAxis"><apiName>setAxis</apiName><shortdesc>
      将轴实例分配给转换的特定维度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dimension</apiItemName><apiType value="String"/><apiDesc>转换的维度。
      </apiDesc></apiParam><apiParam><apiItemName>v</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IAxis</apiOperationClassifier><apiDesc>目标轴实例。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将轴实例分配给转换的特定维度。轴对象由封闭图表对象分配。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts.chartClasses:DataTransform:transformCache"><apiName>transformCache</apiName><shortdesc>
      将一组表示数据的数值映射到屏幕坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>字段中包含数据值的对象数组。此函数还使用此数组来存储转换后的数值。
     
      </apiDesc></apiParam><apiParam><apiItemName>xField</apiItemName><apiType value="String"/><apiDesc>用于存储 x 轴的数据值的字段。
     
      </apiDesc></apiParam><apiParam><apiItemName>xConvertedField</apiItemName><apiType value="String"/><apiDesc>用于存储映射的 x 屏幕坐标的字段。
     
      </apiDesc></apiParam><apiParam><apiItemName>yField</apiItemName><apiType value="String"/><apiDesc>用于存储 y 轴的数据值的字段。
     
      </apiDesc></apiParam><apiParam><apiItemName>yConvertedField</apiItemName><apiType value="String"/><apiDesc>用于存储映射的 y 屏幕坐标的字段。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将一组表示数据的数值映射到屏幕坐标。此方法假设值都为数字，因此，必须使用 <codeph>mapCache()</codeph> 方法预先转换所有非数字的值。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts.chartClasses:DataTransform:axes:get"><apiName>axes</apiName><shortdesc>
      与此转换相关的一组轴。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      与此转换相关的一组轴。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts.chartClasses:DataTransform:elements:get"><apiName>elements</apiName><shortdesc>
      与此转换相关的元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      与此转换相关的元素。此 Array 包括与转换相关的背景、系列和重叠元素。此值由封闭图表对象分配。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts.chartClasses:DualStyleObject"><apiName>DualStyleObject</apiName><shortdesc>
  对于需要在客户端开发人员控制之外分配类选择器的组件，DualStyleObject 类可以充当这些组件的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  <p><b>Common MXML Syntax Inherited from DualStyleObject</b></p>
  
  <p>Flex components inherit the following properties
  from the DualStyleObject class:</p>
 
  <pre>
  &lt;mx:<i>tagname</i>
    internalStyleName="<i>Style; No default</i>"
  &gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  对于需要在客户端开发人员控制之外分配类选择器的组件，DualStyleObject 类可以充当这些组件的基类。DualStyleObject 实例包含两个 styleName 属性：标准的 styleName 和附加的 internalStyleName。组件可以根据需要分配 internalStyleName 属性，而 styleName 属性则留待客户端开发人员分配。
 
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts.chartClasses:DualStyleObject:DualStyleObject"><apiName>DualStyleObject</apiName><shortdesc> 
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts.chartClasses:DualStyleObject:internalStyleName:get"><apiName>internalStyleName</apiName><shortdesc>
      此实例从中继承值的类选择器的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      此实例从中继承值的类选择器的名称。<codeph>internalStyleName</codeph> 属性的优先级低于 <codeph>styleName</codeph> 选择器。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>