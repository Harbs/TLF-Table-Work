<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.charts"><apiName>mx.charts</apiName><apiDetail/><apiClassifier id="mx.charts:ColumnChart"><apiName>ColumnChart</apiName><shortdesc>
  ColumnChart 控件将数据表示为一组垂直列，其高度由数据中的值确定。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="labelClass" owner="mx.charts:ColumnChart" playerVersion="Flash10.2" type="Class">
<description>
  由此组件用来呈示标签的类。
   <p>可以将此类设置为 mx.controls.Label 类或 spark.components.Label 类。</p>
   </description>
<default>spark.components.Label
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="maxColumnWidth" owner="mx.charts:ColumnChart" playerVersion="Flash9" type="Number">
<description>
  指定列的绘制宽度，以像素为单位。实际使用的列宽是此属性与 <codeph>columnWidthRatio</codeph> 属性中的较小者。群集化的列在每个群集的列之间按比例分配空间。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnWidthRatio" owner="mx.charts:ColumnChart" playerVersion="Flash9" type="Number">
<description>
  指定所绘列宽相对于类别宽度的比例，此值是介于 0 和 1 之间的百分比值。值 1 表示占用整个空间，而值 .6 表示占用列可用空间的 60%。实际使用的列宽是 <codeph>columnWidthRatio</codeph> 属性与 <codeph>maxColumnWidth</codeph> 属性中的较小者。群集化的列在每个群集的列之间按比例分配空间。默认值为 .65。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:ColumnChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:ColumnChart
    <strong>Properties</strong>
    extendLabelToEnd="false|true"
    maxLabelWidth="<i>50</i>"
    showLabelVertically="false|true"
    type="<i>clustered|overlaid|stacked|100%</i>"
 
    <strong>Styles</strong>
    columnWidthRatio=".65"
    maxColumnWidth="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  ColumnChart 控件将数据表示为一组垂直列，其高度由数据中的值确定。可使用 ColumnChart 表示包含简单列、群集列、堆栈、100% 堆栈和高/低的各种不同图表。 
  
  <p>ColumnChart 控件要求其 <codeph>series</codeph> 属性包含 ColumnSeries 对象数组。</p>
   <p>堆栈和 100% 列图表会覆盖其 ColumnSeries 对象的 <codeph>minField</codeph> 属性。</p>
   </apiDesc><example conref="Column_BarChartExample.mxml"><swfblock conref="examples/Column_BarChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#ColumnSeries"><linktext>mx.charts.series.ColumnSeries</linktext></link></related-links><apiConstructor id="mx.charts:ColumnChart:ColumnChart"><apiName>ColumnChart</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:ColumnChart:extendLabelToEnd:get"><apiName>extendLabelToEnd</apiName><shortdesc>
     确定数据标签是否可以扩展到图表的末端。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
     确定数据标签是否可以扩展到图表的末端。如果将此属性设置为 true，则可以使用该项目与图表边界之间的全部空间来显示标签。否则，数据标签将限制在由其图表项目定义的区域范围内。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ColumnChart:maxLabelWidth:get"><apiName>maxLabelWidth</apiName><shortdesc>
     确定项目标签的最大宽度，以像素为单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>50
      
      </apiDefaultValue></apiValueDef><apiDesc>
     确定项目标签的最大宽度，以像素为单位。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ColumnChart:showLabelVertically:get"><apiName>showLabelVertically</apiName><shortdesc>
     确定是否可以垂直显示数据标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
     确定是否可以垂直显示数据标签。如果此属性设置为 true 并且使用嵌入字体，则当标签无法水平适应列宽时，将垂直显示。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ColumnChart:type:get"><apiName>type</apiName><shortdesc>
      列图表的类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      列图表的类型。
           <p>可能的值包括：</p>
      <ul>
        <li><codeph>"clustered"</codeph>：按类别分组来自不同系列的值。这是默认类型。</li>
        <li><codeph>"overlaid"</codeph>：多个值以逐个叠加的方式按类别呈示，最后的系列位于最顶部。 </li>
        <li><codeph>"stacked"</codeph>：列以堆栈的方式逐层堆叠，并按类别进行组织。各列都表示其下方列的累计值。 </li>
        <li><codeph>"100%"</codeph>：列以堆栈的方式逐层堆叠，一直累积至 100%。各列表示该列所占该类别的值之和的百分比。</li>
      </ul>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ColumnChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:LinearAxis"><apiName>LinearAxis</apiName><shortdesc>
  LinearAxis 在图表轴的最小值和最大值之间均匀映射数值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:LinearAxis&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:LinearAxis
    <strong>Properties</strong>
    interval="null"
    maximum="null"
    maximumLabelPrecision="null"
    minimum="null"
    minorInterval="null"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:NumericAxis</apiBaseClassifier></apiClassifierDef><apiDesc>
  LinearAxis 在图表轴的最小值和最大值之间均匀映射数值。默认情况下，它会根据图表数据确定 <codeph>minimum</codeph>、<codeph>maximum</codeph> 和 <codeph>interval</codeph> 值，以适应屏幕上的所有图表元素。您还可以显式为这些属性设置特定值。
  
  <p>按如下方式自动确定范围值：
 
  <ol>
    <li> Flex 确定在图表上显示所有数据所需的最小和最大值。</li>
    <li> 如果将 <codeph>autoAdjust</codeph> 和 <codeph>baseAtZero</codeph> 属性设置为 <codeph>true</codeph>，则 Flex 将进行如下调整：
      <ul>
        <li>如果所有值均为正，则 Flex 会将 <codeph>minimum</codeph> 属性设置为零。</li>
  	  <li>如果所有值均为负，则 Flex 会将 <codeph>maximum</codeph> 属性设置为零。</li>
  	</ul>
    </li>
    <li> 如果将 <codeph>autoAdjust</codeph> 属性设置为 <codeph>true</codeph>，则 Flex 会通过上下舍入来调整 <codeph>minimum</codeph> 和 <codeph>maximum</codeph> 属性值。</li>
    <li> Flex 检查图表中所显示的任何元素是否需要额外填充才能正常显示（例如标签）。它会对 <codeph>minimum</codeph> 和 <codeph>maximum</codeph> 属性的值进行相应调整。</li>
    <li> Flex 确定您是否就 <codeph>minimum</codeph> 和 <codeph>maximum</codeph> 值显式指定了填充，并对其值进行相应调整。</li>
  </ol>
  </p>
  
  </apiDesc><example conref="HLOCChartExample.mxml"><swfblock conref="examples/HLOCChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.chartClasses.xml#IAxis"><linktext>mx.charts.chartClasses.IAxis</linktext></link></related-links><apiConstructor id="mx.charts:LinearAxis:LinearAxis"><apiName>LinearAxis</apiName><shortdesc>
	 构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	 构造函数。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:LinearAxis:interval:get"><apiName>interval</apiName><shortdesc>
	  指定轴上各标签值之间的数值差值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  指定轴上各标签值之间的数值差值。如果将此属性设置为 <codeph>NaN</codeph>，则 Flex 将计算间隔。默认值为 <codeph>NaN</codeph>。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LinearAxis:maximum:get"><apiName>maximum</apiName><shortdesc>
	  指定轴标签的最大值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  指定轴标签的最大值。如果将 <codeph>autoAdjust</codeph> 属性设置为 <codeph>true</codeph>，则 Flex 将计算此值。如果为 <codeph>NaN</codeph>，则 Flex 将根据图表中的数据确定最大值。默认值为 <codeph>NaN</codeph>。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LinearAxis:minimum:get"><apiName>minimum</apiName><shortdesc>
	  指定轴标签的最小值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  指定轴标签的最小值。如果此属性为 <codeph>NaN</codeph>，则 Flex 将指定图表中的数据的最小值。默认值为 <codeph>NaN</codeph>。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LinearAxis:minorInterval:get"><apiName>minorInterval</apiName><shortdesc>
	  指定轴上次刻度线之间的数字差值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  指定轴上次刻度线之间的数字差值。如果此属性设置为 <codeph>NaN</codeph>，则 Flex 将计算此差值。  
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LinearAxis:maximumLabelPrecision:set"><apiName>maximumLabelPrecision</apiName><shortdesc>
	  指定在由此轴生成的标签上表示小数值时所用的最大小数位数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  指定在由此轴生成的标签上表示小数值时所用的最大小数位数。默认情况下，轴会从标签自身自动生成此值。值 0 表示将舍入到最近的整数值，值 2 表示将舍入到与值最接近的百分位值。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:AreaChart"><apiName>AreaChart</apiName><shortdesc>
  AreaChart 控件将数据表示为一个区域，该区域由用于连接数据中各值的线条来界定。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:AreaChart&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:</p>
  
  <pre>
  &lt;mx:AreaChart
    <strong>Properties</strong>
    type="<i>overlaid|stacked|100%</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  AreaChart 控件将数据表示为一个区域，该区域由用于连接数据中各值的线条来界定。AreaChart 控件可用于表示不同的变种，包括简单区域、堆叠、100% 堆叠以及高/低。
  
  <p>AreaChart 控件要求其 <codeph>series</codeph> 属性包含 AreaSeries 对象 Array。</p>
  
  <p>堆叠区域图和 100% 堆叠区域图将覆盖其 AreaSeries 对象的 <codeph>minField</codeph> 属性。</p>
   </apiDesc><example conref="Line_AreaChartExample.mxml"><swfblock conref="examples/Line_AreaChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#AreaSeries"><linktext>mx.charts.series.AreaSeries</linktext></link></related-links><apiConstructor id="mx.charts:AreaChart:AreaChart"><apiName>AreaChart</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:AreaChart:type:get"><apiName>type</apiName><shortdesc>
      要呈示的区域图类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      要呈示的区域图类型。
           <p>可能的值包括：</p>
      <ul>
        <li><codeph>"overlaid"</codeph>：多个区域以相互重叠的方式呈示，并指定最后一个系列位于最顶部。这是默认值。</li>
        <li><codeph>"stacked"</codeph>：区域相互逐层堆叠，并按类别进行分组。各区域都表示其下方区域的累计值。</li>
        <li><codeph>"100%"</codeph>：区域相互逐层堆叠，一直累积至 100%。各区域都表示该系列在总和中所占的百分比。</li>
      </ul>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AreaChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:PieChart"><apiName>PieChart</apiName><shortdesc>
  PieChart 控件使用标准的饼图来表示数据系列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="innerRadius" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  确定饼图中心孔的大小。此属性是中心圆的半径相对于整个饼图半径的百分比值。默认值为 0%。可使用此属性创建环形图表。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  容器内文本的对齐方式。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数控件的默认值都为 <codeph>left</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>。对于这些组件，只有将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts:PieChart" playerVersion="Flash9" type="Boolean">
<description>
  一个布尔值，表示是启用 (<codeph>true</codeph>) 还是禁用 (<codeph>false</codeph>) 字距调整。字距调整会调整某些字符对之间的间隔以提高可读性，并应只在必要时（例如使用大字体标题时）使用。仅嵌入的 FlashType 字体支持字距调整。某些字体（如宋体）和等宽字体（如 Courier New）不支持字距调整。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"bold"</codeph>。对于 LegendItem，默认为 <codeph>"bold"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>thickness</codeph> 属性。此属性指定字型边缘的粗细。可能值为从 -200 到 200 之间的数字。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  文本的高度，以像素为单位。除 ColorPicker 控件之外，所有控件的默认值都为 10。ColorPicker 控件的默认值为 11。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts:PieChart" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>sharpness</codeph> 属性。此属性指定字型边缘的清晰度。可能值为从 -400 到 400 之间的数字。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>gridFitType</codeph> 属性。可能值为 <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>)、<codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) 和<codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>)。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts:PieChart" playerVersion="Flash9" type="String">
<description>
  设置内部 TextField 的 <codeph>antiAliasType</codeph> 属性。可能值为 <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) 和 <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>)。 
  
  <p>默认值为 <codeph>"advanced"</codeph>。如果您使用的是嵌入的 FlashType 字体，此设置将启用 FlashType 呈示器。设置为 <codeph>"normal"</codeph> 可禁用 FlashType 呈示器。</p>
  
  <p>此样式对系统字体不起作用。</p>
  
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts:PieChart" playerVersion="Flash9" type="uint">
<description>
  禁用时组件中文本的颜色。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts:PieChart" playerVersion="Flash9" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:PieChart&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:
  
  <pre>
  &lt;mx:PieChart
    <strong>Styles</strong>
    innerRadius="0"
    textAlign="left"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:PolarChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  PieChart 控件使用标准的饼图来表示数据系列。数据提供程序的数据确定饼图中每个楔子相对于其他楔子的大小。可使用 PieSeries 类创建标准的饼图、环形图或堆叠的饼图。
  
  <p>PieChart 控件要求其 <codeph>series</codeph> 属性包含 PieSeries 对象 Array。</p>
   </apiDesc><example conref="PieChartExample.mxml"><swfblock conref="examples/PieChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#PieSeries"><linktext>mx.charts.series.PieSeries</linktext></link></related-links><apiConstructor id="mx.charts:PieChart:PieChart"><apiName>PieChart</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:PieChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:GridLines"><apiName>GridLines</apiName><shortdesc> 
  GridLines 类可在图表的数据区域内绘制网格线。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="verticalTickAligned" owner="mx.charts:GridLines" playerVersion="Flash9" type="Boolean">
<description>
  确定是否将垂直网格线与刻度线对齐。如果设置为 <codeph>true</codeph>，则 Flex 将绘制与刻度线对齐的垂直网格线。如果为 <codeph>false</codeph>，则 Flex 将在刻度线之间绘制垂直网格线。默认值为 <codeph>true</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalStroke" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  指定垂直网格线的线条样式。使用 Stroke 类可将此属性定义为 MXML 中的子标签，或在 ActionScript 中创建 Stroke 对象。  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalShowOrigin" owner="mx.charts:GridLines" playerVersion="Flash9" type="Boolean">
<description>
  确定是否绘制垂直原点。如果设置为 <codeph>true</codeph>，并且原点落在图表边界上，则 Flex 将使用 <codeph>verticalOriginStroke</codeph> 样式绘制此原点。对于 ColumnChart、LineChart 和 AreaChart 控件，默认值为 <codeph>false</codeph>。对于 PlotChart、BubbleChart 和 BarChart 控件，默认值为 <codeph>true</codeph>。此属性不适用于 PieChart 控件。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalOriginStroke" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  指定垂直原点的线条样式。使用 Stroke 类可将此属性定义为 MXML 中的子标签，或在 ActionScript 中创建 Stroke 对象。  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalFill" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  指定由网格线创建的垂直交替带的填充模式。使用 IFill 类可将填充的属性定义为 MXML 中的子标签，或在 ActionScript 中创建 IFill 对象。设置为 <codeph>null</codeph> 不会填充交替带。默认值为 <codeph>null</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalChangeCount" owner="mx.charts:GridLines" playerVersion="Flash9" type="int">
<description>
  指定垂直网格线之间的刻度线数目。将 <codeph>verticalChangeCount</codeph> 设置为 <codeph>3</codeph> 沿轴每隔两个刻度线绘制一条网格线。填充样式将在每条网格线处交替，因此如果增大 <codeph>verticalChangeCount</codeph>，交替带将显著增大。默认值为 <codeph>1</codeph>。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalAlternateFill" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  指定垂直交替带的填充模式不由填充属性定义。使用 IFill 类可将填充属性定义为 MXML 中的子标签，或在 ActionScript 中创建 IFill 对象。设置为 <codeph>null</codeph> 不会填充交替带。默认值为 <codeph>null</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalTickAligned" owner="mx.charts:GridLines" playerVersion="Flash9" type="Boolean">
<description>
  确定是否将水平网格线与刻度线对齐。如果为 <codeph>true</codeph>，则将水平网格线绘制为与刻度线对齐。如果为 <codeph>false</codeph>，则 Flex 将在刻度线之间绘制垂直网格线。默认值为 <codeph>true</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalStroke" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  指定水平网格线的线条样式。使用 Stroke 类可将此属性定义为 MXML 中的子标签，或在 ActionScript 中创建 Stroke 对象。  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalShowOrigin" owner="mx.charts:GridLines" playerVersion="Flash9" type="Boolean">
<description>
  确定是否绘制水平原点。如果为 <codeph>true</codeph>，并且原点落在图表边界上，则网格线将使用 <codeph>horizontalOriginStroke</codeph> 样式绘制此原点。对于 ColumnChart、LineChart、PlotChart、BubbleChart 和 AreaChart 控件，默认值为 <codeph>true</codeph>。对于 BarChart 控件，默认值为 <codeph>false</codeph>。此属性不适用于 PieChart 控件。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalOriginStroke" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  指定水平原点的线条样式。使用 Stroke 类可将此属性定义为 MXML 中的子标签，或在 ActionScript 中创建 Stroke 对象。  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalFill" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  在由网格线创建的水平带中，指定每隔一个水平带应用一次的填充模式。使用 IFill 类可将填充的属性定义为 MXML 中的子标签，或在 ActionScript 中创建 IFill 对象。设置为 <codeph>null</codeph> 不会填充交替带。默认值为 <codeph>null</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalChangeCount" owner="mx.charts:GridLines" playerVersion="Flash9" type="int">
<description>
  指定水平网格线之间的刻度线数量。将 <codeph>horizontalChangeCount</codeph> 属性设置为 3 沿轴每隔两个刻度线绘制一个网格线。填充样式每隔一个网格线应用一次，因此如果增大 <codeph>horizontalChangeCount</codeph>，将显著增大交替带。默认值为 <codeph>1</codeph>。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalAlternateFill" owner="mx.charts:GridLines" playerVersion="Flash9" type="mx.graphics.IFill">
<description>
  指定水平交替带的填充模式，<codeph>fill</codeph> 属性并未进行定义。使用 IFill 类可将填充属性定义为 MXML 中的子标签，或在 ActionScript 中创建 IFill 对象。设置为 <codeph>null</codeph> 不会填充交替带。默认值为 <codeph>null</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="horizontal,vertical,both" inherit="no" name="gridDirection" owner="mx.charts:GridLines" playerVersion="Flash9" type="String">
<description>
  指定网格线的方向。允许值为 <codeph>horizontal</codeph>、<codeph>vertical</codeph> 或 <codeph>both</codeph>。默认值为 <codeph>horizontal</codeph>。  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:GridLines&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:GridLines
    <strong>Styles</strong>
     gridDirection="horizontal|vertical|both"
     horizontalAlternateFill="null"
     horizontalChangeCount="1"
     horizontalFill="null"
     horizontalOriginStroke="<i>IStroke; No default</i>"
     horizontalShowOrigin="<i>Default depends on type of chart</i>"
     horizontalStroke="<i>IStroke; No default</i>"
     horizontalTickAligned="true|false"
     verticalAlternateFill="null"
     verticalChangeCount="1"
     verticalFill="null"
     verticalOriginStroke="<i>IStroke; No default</i>"
     verticalShowOrigin="<i>Default depends on type of chart</i>"
     verticalStroke="<i>IStroke; No default</i>"
     verticalTickAligned="true|false"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:ChartElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
  GridLines 类可在图表的数据区域内绘制网格线。Flex 可水平和（或）垂直绘制线条。 
  
  <p>Flex 可绘制与父级图表的刻度线对齐的网格线。默认情况下，Flex 会沿相应的轴在每个刻度线上绘制一条线。</p>
  
  <p>通常可将 GridLines 类用作图表控件的 <codeph>backgroundElements</codeph> 属性或 <codeph>annotationElements</codeph> 属性的子标签。</p>
  
  </apiDesc><example conref="GridLinesExample.mxml"><swfblock conref="examples/GridLinesExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.charts:GridLines:GridLines"><apiName>GridLines</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  构造函数。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:GridLines:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts:HLOCChart"><apiName>HLOCChart</apiName><shortdesc>
  HLOCChart (High Low Open Close) 控件将财务数据表示为一系列表示数据系列高、低、收盘和开盘（可选）值的元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="maxColumnWidth" owner="mx.charts:HLOCChart" playerVersion="Flash9" type="Number">
<description>
  指定要绘制的 HLOC 线条的宽度，以像素为单位。实际使用的宽度是此属性与 <codeph>columnWidthRatio</codeph> 属性中的较小者。多个 HLOC 系列将按比例划分此空间。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnWidthRatio" owner="mx.charts:HLOCChart" playerVersion="Flash9" type="Number">
<description>
  指定要绘制的 HLOC 线条的宽度相对于水平轴类别宽度的比例，该值为介于 0 和 1 之间的百分比值。值 1 表示使用整个空间，值 0.6 表示使用该类别可用空间的 60%。实际使用的元素宽度是 <codeph>columnWidthRatio</codeph> 属性与 <codeph>maxColumnWidth</codeph> 属性中的较小者。多个元素系列将按比例划分此空间。默认值为 .65。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  The <code>&lt;mx:HLOCChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:HLOCChart
    <strong>Styles</strong>
    columnWidthRatio=".65"
    maxColumnWidth="<i>No default</i>"
  /&gt;
  </pre> 
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  HLOCChart (High Low Open Close) 控件将财务数据表示为一系列表示数据系列高、低、收盘和开盘（可选）值的元素。每个元素中垂直线的顶部和底部分别代表数据点的最高值和最低值。右侧的刻度线表示收盘值，左侧的刻度线表示开盘值（如果已指定）。 
   
  <p>HLOCChart 控件要求其 <codeph>series</codeph> 属性包含 HLOCSeries 对象 Array。</p>
 
  </apiDesc><example conref="HLOCChartExample.mxml"><swfblock conref="examples/HLOCChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#HLOCSeries"><linktext>mx.charts.series.HLOCSeries</linktext></link></related-links><apiConstructor id="mx.charts:HLOCChart:HLOCChart"><apiName>HLOCChart</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:HLOCChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:BarChart"><apiName>BarChart</apiName><shortdesc>
  BarChart 控件将数据表示为一系列水平条，其长度由相应数据中的值确定。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="labelClass" owner="mx.charts:BarChart" playerVersion="Flash10.2" type="Class">
<description>
  由此组件用来呈示标签的类。
   <p>可以将此类设置为 mx.controls.Label 类或 spark.components.Label 类。</p>
   </description>
<default>spark.components.Label
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="maxBarWidth" owner="mx.charts:BarChart" playerVersion="Flash9" type="Number">
<description>
  指定要绘制的条形图的宽度（以像素为单位）。实际使用的条宽度是此属性与 <codeph>barWidthRatio</codeph> 属性中的较小者。群集化的条形图在每个群集的条形图之间按比例分配空间。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="barWidthRatio" owner="mx.charts:BarChart" playerVersion="Flash9" type="Number">
<description>
  指定所绘的条相对于类别宽度的宽度值，采用介于 0 和 1 之间的百分比值。值 1 表示占用整个空间，而值 .6 表示占用条形图可用空间的 60%。实际使用的条宽度是 <codeph>barWidthRatio</codeph> 属性与 <codeph>maxbarWidth</codeph> 属性中的较小者。群集化的条在每个群集中按比例为条划分此空间。默认值为 .65。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:BarChart&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:</p>
  
  <pre>
  &lt;mx:BarChart
    <strong>Properties</strong>
    type="clustered|overlaid|stacked|100%"
    
    <strong>Styles</strong>
    barWidthRatio=".65"
    maxBarWidth="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  BarChart 控件将数据表示为一系列水平条，其长度由相应数据中的值确定。BarChart 控件可以表示不同的图表变种，包括简单条形图、群集化条形图、堆栈、100% 堆栈和高/低。
  
  <p>BarChart 控件要求其 <codeph>series</codeph> 属性包含 BarSeries 对象数组。</p>
  
  <p>堆栈图和 100% 条形图会覆盖其 BarSeries 对象的 <codeph>minField</codeph> 属性。</p>
   </apiDesc><example conref="Column_BarChartExample.mxml"><swfblock conref="examples/Column_BarChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#BarSeries"><linktext>mx.charts.series.BarSeries</linktext></link></related-links><apiConstructor id="mx.charts:BarChart:BarChart"><apiName>BarChart</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:BarChart:type:get"><apiName>type</apiName><shortdesc>
      要呈示的条形图类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      要呈示的条形图类型。可能的值包括：    
      <ul>
        <li><codeph>"clustered"</codeph>：按类别分组条。这是默认值。</li>
      
        <li><codeph>"overlaid"</codeph>：多个条以逐个叠加的方式按类别呈示，最后一个系列位于最顶部。</li>
      
        <li><codeph>"stacked"</codeph>：条以堆栈的方式首尾相接，并按类别进行组织。各条都表示其下方值的累计值。</li>
      
        <li><codeph>"100%"</codeph>：条以堆栈的方式首尾相接，一直累积至 100%。各条表示该条所占该类别的值之和的百分比。</li>
      </ul>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:BarChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:LegendItem"><apiName>LegendItem</apiName><shortdesc>
  控制图表图例中的各图例元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="stroke" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Object">
<description>
  指定图例元素的线条笔触。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="markerWidth" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  指定图例元素的宽度。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="markerHeight" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description> 
  指定图例元素的高度。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="legendMarkerRenderer" owner="mx.charts:LegendItem" playerVersion="Flash9" type="mx.core.IFactory">
<description>
  指定呈示图例项目标记部分的类。此标记通常由生成图例项目的图表元素提供。但是，如果您手动创建图例，则此样式将指定用于呈示此标记的类。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="top,bottom,right,left" inherit="yes" name="labelPlacement" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  指定图例元素的标签位置。可识别的值为 <codeph>"top"</codeph>、<codeph>"bottom"</codeph>、<codeph>"left"</codeph> 和 <codeph>"right"</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="fill" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Object">
<description>
  指定用于定义图例元素填充的 IFill 对象。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  容器内文本的对齐方式。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数控件的默认值都为 <codeph>left</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>。对于这些组件，只有将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Boolean">
<description>
  一个布尔值，表示是启用 (<codeph>true</codeph>) 还是禁用 (<codeph>false</codeph>) 字距调整。字距调整会调整某些字符对之间的间隔以提高可读性，并应只在必要时（例如使用大字体标题时）使用。仅嵌入的 FlashType 字体支持字距调整。某些字体（如宋体）和等宽字体（如 Courier New）不支持字距调整。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"bold"</codeph>。对于 LegendItem，默认为 <codeph>"bold"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>thickness</codeph> 属性。此属性指定字型边缘的粗细。可能值为从 -200 到 200 之间的数字。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  文本的高度，以像素为单位。除 ColorPicker 控件之外，所有控件的默认值都为 10。ColorPicker 控件的默认值为 11。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>sharpness</codeph> 属性。此属性指定字型边缘的清晰度。可能值为从 -400 到 400 之间的数字。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>gridFitType</codeph> 属性。可能值为 <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>)、<codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) 和<codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>)。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts:LegendItem" playerVersion="Flash9" type="String">
<description>
  设置内部 TextField 的 <codeph>antiAliasType</codeph> 属性。可能值为 <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) 和 <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>)。 
  
  <p>默认值为 <codeph>"advanced"</codeph>。如果您使用的是嵌入的 FlashType 字体，此设置将启用 FlashType 呈示器。设置为 <codeph>"normal"</codeph> 可禁用 FlashType 呈示器。</p>
  
  <p>此样式对系统字体不起作用。</p>
  
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts:LegendItem" playerVersion="Flash9" type="uint">
<description>
  禁用时组件中文本的颜色。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts:LegendItem" playerVersion="Flash9" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  控件右边框与内容区域右边缘之间的像素数目。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  控件左边框与内容区域左边缘之间的像素数目。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  垂直方向上各子项间的像素数目。默认值取决于组件类；如果未覆盖类的默认值，则默认值为 6。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.charts:LegendItem" playerVersion="Flash9" type="Number">
<description>
  水平方向上各子代之间的像素数。默认值取决于组件类；如果未覆盖类的默认值，则默认值为 8。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:LegendItem&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:LegendItem
    <strong>Properties</strong>
    element="<i>No default</i>"    
    label="<i>No default</i>"
    source="<i>No default</i>"
    legendData="<i>No default</i>"
    marker="<i>No default</i>"
    markerAspectRatio="<i>No default</i>"
 
    <strong>Styles</strong>
    fill="<i>IFill; no default.</i>"
    fontWeight="normal|bold"
    fontSize="10"
    horizontalGap="8"
    labelPlacement="right|left|top|bottom"
    legendMarkerRenderer="<i>Defaults to series's itemRenderer</i>"
    markerHeight="15"
    markerWidth="10"
    paddingLeft="0"
    paddingRight="0"
    stroke="<i>IStroke; no default</i>"
 	  textDecoration="underline|none"
    verticalGap="6"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  控制图表图例中的各图例元素。
  
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#Legend"><linktext>mx.charts.Legend</linktext></link><link href="mx.charts.chartClasses.xml#LegendData"><linktext>mx.charts.chartClasses.LegendData</linktext></link></related-links><apiConstructor id="mx.charts:LegendItem:LegendItem"><apiName>LegendItem</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  构造函数。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:LegendItem:element"><apiName>element</apiName><shortdesc>
	  负责生成此图例项目的图表元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.charts.chartClasses:IChartElement</apiValueClassifier></apiValueDef><apiDesc>
	  负责生成此图例项目的图表元素。如果 Legend 控件的内容由图表自动生成，则此字段将引用此项目表示的元素（通常为一个系列）。在某些情况下，会出现多个项目引用同一元素的情形。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:markerAspectRatio"><apiName>markerAspectRatio</apiName><shortdesc>
	  标记的高宽比与此图例项目关联。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  标记的高宽比与此图例项目关联。图表系列提供的一些标记需采用特定的高宽比显示。如果设置了此属性，则图例项目将确保标记的高宽比在布局期间保持不变。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:label:get"><apiName>label</apiName><shortdesc>
	  指定 Flex 沿图例元素显示的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  指定 Flex 沿图例元素显示的文本。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:marker:get"><apiName>marker</apiName><shortdesc>
	  此图例项目所显示的标记。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexDisplayObject"/></apiValueDef><apiDesc>
	  此图例项目所显示的标记。这些标记通常由生成与此项目关联的 LegendData 的图表元素分配。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:source:get"><apiName>source</apiName><shortdesc>
	  如果将父级 Legend 控件的 dataProvider 属性绑定到某个图表控件，则此属性包含对生成 LegendItem 的数据系列的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
	  如果将父级 Legend 控件的 <codeph>dataProvider</codeph> 属性绑定到某个图表控件，则此属性包含对生成 LegendItem 的数据系列的引用。否则，此属性将包含对与 LegendItem 关联的对象的引用。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:legendData:set"><apiName>legendData</apiName><shortdesc>
	  此 LegendItem 对象所表示的 LegendData 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Object"/></apiValueDef><apiDesc>
	  此 LegendItem 对象所表示的 LegendData 实例。当图表生成 Legend 控件的内容时，该图表的元素将生成一个或多个 LegendData 结构供在 Legend 中显示。每个 LegendData 结构均生成一个 LegendItem 对象。  
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LegendItem:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="mx.charts:HitData"><apiName>HitData</apiName><shortdesc>
  HitData 类表示屏幕上特定位置处的数据项目的相关信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  HitData 类表示屏幕上特定位置处的数据项目的相关信息。Flex 返回图表数据点上鼠标事件的 HitData 结构。此结构用于描述当前鼠标位置下方的数据点。 
 
  <p>您还可以使用图表控件的 <codeph>findDataPoints()</codeph> 方法得到一个 HitData 结构，此结构用于描述图表中特定位置处的数据点。</p>
  
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#ChartItem"><linktext>mx.charts.ChartItem</linktext></link></related-links><apiConstructor id="mx.charts:HitData:HitData"><apiName>HitData</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>id</apiItemName><apiType value="Number"/><apiDesc>指定表示数据点的唯一标识符。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>distance</apiItemName><apiType value="Number"/><apiDesc>指定屏幕上的数据项目与鼠标指针位置之间的距离，以像素为单位。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>指定屏幕上数据项目的 x 坐标。
	 
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>指定屏幕上数据项目的 y 坐标。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>chartItem</apiItemName><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier><apiDesc>由点击数据描述的图表项目。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:HitData:chartItem"><apiName>chartItem</apiName><shortdesc>
	  由点击数据描述的图表项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.charts:ChartItem</apiValueClassifier></apiValueDef><apiDesc>
	  由点击数据描述的图表项目。图表项目提供系列描述 <codeph>dataProvider</codeph> 中的单个项目时所用的数据。 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:contextColor"><apiName>contextColor</apiName><shortdesc>
	  一个 RGB 值，可用于将相关 chartItem 的屏幕表示形式关联到一起。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	  一个 RGB 值，可用于将相关 <codeph>chartItem</codeph> 的屏幕表示形式关联到一起。DataTip 使用此字段来帮助呈示其数据。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:dataTipFunction"><apiName>dataTipFunction</apiName><shortdesc>
	  由 HitData 创建者提供的一个函数，可生成在屏幕上显示的适合用户的 String，用于描述所引用的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
	  由 HitData 创建者提供的一个函数，可生成在屏幕上显示的适合用户的 String，用于描述所引用的项目。 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:distance"><apiName>distance</apiName><shortdesc>
	  指定屏幕上的数据项目与鼠标指针位置之间的距离，以像素为单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  指定屏幕上的数据项目与鼠标指针位置之间的距离，以像素为单位。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:id"><apiName>id</apiName><shortdesc>
	  指定表示数据点的唯一标识符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  指定表示数据点的唯一标识符。您可以使用此标识符测试两个 HitData 对象是否全等。如果两个不同的图表元素表示同一个 <codeph>dataProvider</codeph> 条目，则将为二者分配不同的标识符。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:item"><apiName>item</apiName><shortdesc>
	  指定 HitData 结构描述的数据项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
	  指定 HitData 结构描述的数据项目。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:x"><apiName>x</apiName><shortdesc>
	  指定屏幕上数据项目的 X 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  指定屏幕上数据项目的 X 坐标。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:y"><apiName>y</apiName><shortdesc>
	  指定屏幕上数据项目的 Y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  指定屏幕上数据项目的 Y 坐标。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:displayText:get"><apiName>displayText</apiName><shortdesc>
	  用于在屏幕上显示的关联项目的描述。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
	  用于在屏幕上显示的关联项目的描述。 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:HitData:element:get"><apiName>element</apiName><shortdesc>
	  指定用于呈示此生成 HitData 结构的数据项目的图表元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.charts.chartClasses:IChartElement</apiValueClassifier></apiValueDef><apiDesc>
	  指定用于呈示此生成 HitData 结构的数据项目的图表元素。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:BubbleChart"><apiName>BubbleChart</apiName><shortdesc>
  对于每个数据点，BubbleChart 控件使用三个值来表示数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="minRadius" owner="mx.charts:BubbleChart" playerVersion="Flash9" type="Number">
<description>
  最小的图表元素的最小半径，以像素为单位。Flex 将此半径分配给具有最小值的数据点；其余所有数据点都将根据各自与最小和最大值的相对值分配较大的半径。默认值为 0 像素。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="maxRadius" owner="mx.charts:BubbleChart" playerVersion="Flash9" type="Number">
<description>
  最大的图表元素的最大半径，以像素为单位。Flex 将此半径分配给具有最大值的数据点；其余所有数据点都将根据各自与最小和最大值的相对值分配较小的半径。默认值为 50 像素。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  The <code>&lt;mx:BubbleChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:BubbleChart
    <strong>Properties</strong>
    radiusAxis="<i>LinearAxis</i>"
 
    <strong>Styles</strong>
    maxRadius="50"
    minRadius="0"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  对于每个数据点，BubbleChart 控件使用三个值来表示数据。每个数据点都由以下三个值确定各自与图表中其他数据点的相对位置：用于确定其水平轴位置的值，用于确定其垂直轴位置的值，以及用于确定图表元素大小的值。
  
  <p>BubbleChart 控件要求其 <codeph>series</codeph> 属性包含 BubbleSeries 对象数组。</p>
  
  </apiDesc><example conref="BubbleChartExample.mxml"><swfblock conref="examples/BubbleChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#BubbleSeries"><linktext>mx.charts.series.BubbleSeries</linktext></link></related-links><apiConstructor id="mx.charts:BubbleChart:BubbleChart"><apiName>BubbleChart</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:BubbleChart:radiusAxis:get"><apiName>radiusAxis</apiName><shortdesc>
      针对冒泡图表映射冒泡半径的轴将各冒泡的尺寸视为数据的第三个尺寸，其转换方式与 x 和 y 位置的转换方式相同。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      针对冒泡图表映射冒泡半径的轴将各冒泡的尺寸视为数据的第三个尺寸，其转换方式与 x 和 y 位置的转换方式相同。默认情况下，<codeph>radiusAxis</codeph> 为 LinearAxis，其中 <codeph>autoAdjust</codeph> 属性设置为 <codeph>false</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:BubbleChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:Legend"><apiName>Legend</apiName><shortdesc>
      Legend 控件可向图表中添加图例，此图例可为图表中的每个数据系列显示一个标签，以及一个用于显示系列的图表元素的键。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="effect" name="focusOutEffect"/><Exclude kind="effect" name="focusInEffect"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="event" name="focusOut"/><Exclude kind="event" name="focusIn"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="tileWidth"/><Exclude kind="property" name="tileHeight"/><Exclude kind="property" name="label"/><Exclude kind="property" name="icon"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="defaultButton"/><styles><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
      垂直对齐平铺单元格中的各子项。可能值包括 <codeph>"top"</codeph>、<codeph>"middle"</codeph> 和 <codeph>"bottom"</codeph>。如果将此值设为 <codeph>"top"</codeph>，则各子项的顶部边缘位于其单元格的顶边处。如果将此值设为 <codeph>"middle"</codeph>，则各子项在其单元格中垂直居中。如果将此值设为 <codeph>"bottom"</codeph>，则各子项的底部边缘位于其单元格的底边处。
           </description>
<default>"top"
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style inherit="no" name="stroke" owner="mx.charts:Legend" playerVersion="Flash9" type="Object">
<description>
      指定图例元素的线条笔触。
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="uint">
<description>
      组件的任何元件的颜色。示例包括 CheckBox 的复选标记或 ScrollBar 按钮的箭头。
       
      </description>
<default>0x000000
     
      </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
      图例上边框与其内容区域顶部之间的像素数目。
           </description>
<default>0
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
      图例下边框与其内容区域底部之间的像素数目。
           </description>
<default>0
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="markerWidth" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
      指定图例元素的宽度。
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="markerHeight" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
      指定图例元素的高度。
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style enumeration="top,bottom,right,left" inherit="yes" name="labelPlacement" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
      指定图例元素的标签位置。有效值为 <codeph>"top"</codeph>、<codeph>"bottom"</codeph>、<codeph>"right"</codeph> 和 <codeph>"left"</codeph>。
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
      水平对齐平铺单元格中的各子项。可能值包括 <codeph>"left"</codeph>、<codeph>"center"</codeph> 和 <codeph>"right"</codeph>。如果将此值设为 <codeph>"left"</codeph>，则各子项的左边缘位于其单元格的左边处。如果将此值设为 <codeph>"center"</codeph>，则各子项在其单元格中水平居中。如果将此值设为 <codeph>"right"</codeph>，则各子项的右边缘位于其单元格的右边处。
           </description>
<default>"left"
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="uint">
<description>
      组件对焦时，对焦环的颜色。
       
      </description>
<default>0x70B2EE
      
      </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style inherit="no" name="disabledOverlayAlpha" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
      禁用容器时放置在容器上的叠加层的 alpha 值。
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
      组件角的半径。默认值取决于组件类；如果没有覆盖该类的默认值，则默认值为 0。对于 ApplicationControlBar，默认值为 5。
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="uint">
<description>
      组件的内容区域的颜色。
       
      </description>
<default>0xFFFFFF
      
      </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="Number">
<description>
      组件内容背景的 Alpha。
     
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="barColor" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="uint">
<description>
      确定 ProgressBar 的颜色。将使用此颜色与较明亮的颜色（基于此颜色计算得出）之间的垂直渐变填充 ProgressBar。此样式对其他组件不起作用，但可对某个容器设置此样式，以控制其中所有进度栏的外观。默认值为 <codeph>undefined</codeph>，即不进行设置。此时，将使用 <codeph>themeColor</codeph> 样式属性。
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
      组件的背景色。您可以同时设置 <codeph>backgroundColor</codeph> 和 <codeph>backgroundImage</codeph>。一些组件没有背景。DataGrid 控件会忽略此样式。默认值为 <codeph>undefined</codeph>，即不进行设置。如果此样式和 <codeph>backgroundImage</codeph> 样式都为 <codeph>undefined</codeph>，则控件将采用透明背景。
           <p>对于 Application 容器，此样式指定应用程序加载时的背景色以及运行该应用程序时的背景渐变。Flex 计算比指定颜色略深的颜色和比指定颜色略浅的颜色之间的渐变。</p>
     
      <p>大多数 Flex 控件的默认外观为半透明。因此，容器的背景颜色将在某种程度上“渗入”该容器中的控件。通过将控件的 <codeph>fillAlphas</codeph> 属性的 alpha 值设置为 1 可以避免此情况，如以下示例所示：
      <pre>
      &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
          &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
      &lt;/mx:<i>Container</i>></pre>
      </p>
      
      </description>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
      <codeph>backgroundColor</codeph> 属性定义的颜色和 <codeph>backgroundImage</codeph> 样式定义的图像或 SWF 文件的 Alpha 级别。有效值范围为从 0.0 到 1.0。对于大多数控件，默认值为 1.0，但 ToolTip 控件的默认值为 0.95，而 Alert 控件的默认值为 0.9。
      
      </description>
<default>1.0
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAttachment" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
      如果指定了背景图像，则此样式指定它是相对于视域保持固定状态 (<codeph>"fixed"</codeph>) 还是随着内容一起滚动 (<codeph>"scroll"</codeph>)。
           </description>
<default>"scroll"
      
      </default>

<playerversion>AIR 1.1
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 3
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="uint">
<description>
      组件外观使用的强调文字颜色。默认按钮外观使用此颜色对背景进行着色。使用此颜色加亮滑块轨道。 
     
      </description>
<default>#0099FF
     
      </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  垂直方向上各子项间的像素数目。默认值取决于组件类；如果未覆盖类的默认值，则默认值为 6。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  水平方向上各子代之间的像素数。默认值取决于组件类；如果未覆盖类的默认值，则默认值为 8。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.charts:Legend" playerVersion="Flash10" type="Class">
<description>
  实现此组件用来呈示文本的 IUITextField 的类。
 
  <p>它可以设置为 mx.core.UITextField 类（以使用 Flash Player 内置经典 TextField 类）或 mx.core.UIFTETextField 类（以使用 Text Layout Framework 改进文本呈示，包括双向布局）。</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  容器内文本的对齐方式。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数控件的默认值都为 <codeph>left</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>。对于这些组件，只有将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.charts:Legend" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的区域设置。
 
  <p>FTE 和 TLF 使用此区域设置将 Unicode 字符映射到字体字型并查找后备字体。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts:Legend" playerVersion="Flash9" type="Boolean">
<description>
  一个布尔值，表示是启用 (<codeph>true</codeph>) 还是禁用 (<codeph>false</codeph>) 字距调整。字距调整会调整某些字符对之间的间隔以提高可读性，并应只在必要时（例如使用大字体标题时）使用。仅嵌入的高级消除锯齿字体支持字距调整。某些字体（如宋体）和等宽字体（如 Courier New）不支持字距调整。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"bold"</codeph>。对于 Button 控件，默认值为 <codeph>"bold"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>thickness</codeph> 属性。此属性指定字型边缘的粗细。可能值为从 -200 到 200 之间的数字。 
  
  <p>仅当使用嵌入的高级消除锯齿字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，此属性才适用。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  文本的高度，以像素为单位。除 ColorPicker 控件之外，所有控件的默认值都为 10。ColorPicker 控件的默认值为 11。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>sharpness</codeph> 属性。此属性指定字型边缘的清晰度。可能值为从 -400 到 400 之间的数字。 
  
  <p>仅当使用嵌入的高级消除锯齿字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，此属性才适用。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>gridFitType</codeph> 属性。可能值为 <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>)、<codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) 和<codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>)。 
  
  <p>仅当使用嵌入的高级消除锯齿字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，此属性才适用。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  设置内部 TextField 的 <codeph>antiAliasType</codeph> 属性。可能值为 <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) 和 <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>)。 
  
  <p>默认值为 <codeph>"advanced"</codeph>。如果您使用的是嵌入的高级消除锯齿字体，此设置将启用高级消除锯齿功能。设置为 <codeph>"normal"</codeph> 可禁用高级消除锯齿功能。</p>
  
  <p>此样式对系统字体不起作用。</p>
  
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts:Legend" playerVersion="Flash9" type="uint">
<description>
  禁用时组件中文本的颜色。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts:Legend" playerVersion="Flash9" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  控件右边框与内容区域右边缘之间的像素数目。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.charts:Legend" playerVersion="Flash9" type="Number">
<description>
  控件左边框与内容区域左边缘之间的像素数目。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="Number">
<description>
  投影距离。如果将此属性设置为负值，此阴影将出现在组件的上方。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="String">
<description>
  投影方向。可能值包括 <codeph>"left"</codeph>、<codeph>"center"</codeph> 和 <codeph>"right"</codeph>。
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropShadowColor" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="uint">
<description>
  投影颜色。
 
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  指定组件是否具有可见投影的布尔值属性。默认值为 <codeph>false</codeph>。
 
  <p><b>注意：</b>对于显示在容器上的投影，需设置 <codeph>contentBackgroundColor</codeph> 属性。否则，由于容器的背景默认为透明，阴影将显示在容器后。</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  指定组件是否具有可见投影的布尔值属性。此样式与 <codeph>borderStyle="solid"</codeph> 一起使用。默认值为 <codeph>false</codeph>。
 
  <p><b>注意：</b>对于显示在容器上的投影，需设置 <codeph>backgroundColor</codeph> 或 <codeph>backgroundImage</codeph> 属性。否则，由于容器的背景默认为透明，阴影将显示在容器后。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  边框可视性。
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="Number">
<description>
  边框厚度。仅在将 <codeph>borderStyle</codeph> 设置为 <codeph>"solid"</codeph> 时使用。
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.charts:Legend" playerVersion="Flash9" type="String">
<description>
  边框样式。可能值为 <codeph>"none"</codeph>、<codeph>"solid"</codeph>、<codeph>"inset"</codeph> 和 <codeph>"outset"</codeph>。默认值取决于组件类；如果没有覆盖该类的默认值，则默认值为 <codeph>"inset"</codeph>。大多数容器的默认值为 <codeph>"none"</codeph>。<codeph>"inset"</codeph> 和 <codeph>"outset"</codeph> 值只在 halo 主题中有效。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSkin" owner="mx.charts:Legend" playerVersion="Flash9" type="Class">
<description>
  组件的边框外观类。在未显式设置其自身默认值的所有组件中，Halo 主题的默认值为 <codeph>mx.skins.halo.HaloBorder</codeph>，Spark 主题的默认值为 <codeph>mx.skins.spark.BorderSkin</codeph>。Panel 容器的 Halo 主题默认值为 <codeph>mx.skins.halo.PanelSkin</codeph>，Spark 主题默认值为 <codeph>mx.skins.spark.BorderSkin</codeph>。要确定组件的默认值，请参阅 default.css 文件。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSides" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="String">
<description>
  边框边。指定要显示的边框边的以空格分隔的 String。此 String 可以任意顺序包含 <codeph>"left"</codeph>、<codeph>"top"</codeph>、<codeph>"right"</codeph> 和 <codeph>"bottom"</codeph>。默认值为 <codeph>"left top right bottom"</codeph>，此值会显示所有四条边。仅当 borderStyle 为 <codeph>"solid"</codeph> 时才使用此样式。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  边框颜色。默认值取决于组件类；如果没有覆盖该类的默认值，则 Halo 主题的默认值为 <codeph>0xB7BABC</codeph>，Spark 主题的默认值为 <codeph>0x696969</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.charts:Legend" playerVersion="Flash10" theme="spark" type="Number">
<description>
  边框 Alpha（透明度）。
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSize" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="String">
<description>
  将 <codeph>backgroundImage</codeph> 指定的图像缩放到不同的百分比大小。<codeph>"100%"</codeph> 值将拉抻该图像以适应整个组件。要指定百分比值，您必须输入百分号 (%)。Application 容器的默认值为 <codeph>100%</codeph>。所有其他容器的默认值为 <codeph>auto</codeph>，此值将保持图像的原始大小。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="Object">
<description>
  组件的背景图像。此样式可以是绝对或相对 URL 或类。您既可以设置 <codeph>backgroundColor</codeph>，也可以设置 <codeph>backgroundImage</codeph>。背景图像显示在背景色上面。默认值为 <codeph>undefined</codeph>，表示“未设置”。如果此样式和 <codeph>backgroundColor</codeph> 样式都未定义，则控件将采用透明背景。
 
  <p>大多数 Flex 控件的默认外观为半透明。因此，容器的背景图像将在某种程度上“渗入”该容器中的控件。通过将控件的 <codeph>fillAlphas</codeph> 属性的 alpha 值设置为 1 可以避免此情况，如以下示例所示：
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="backgroundDisabledColor" owner="mx.charts:Legend" playerVersion="Flash9" theme="halo" type="uint">
<description>
  禁用组件时组件的背景色。全局默认值为 <codeph>undefined</codeph>。List 控件的默认值为 <codeph>0xDDDDDD</codeph>（浅灰）。如果禁用了容器，背景将变暗，而暗淡程度由 <codeph>disabledOverlayAlpha</codeph> 样式控制。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
      <p>The <code>&lt;mx:Legend&gt;</code> tag inherits all the properties
      of its parent classes and adds the following properties:</p>
      
      <pre>
      &lt;mx:Legend
        <strong>Properties</strong>
        autoLayout="true|false"
        clipContent="true|false"
        creationIndex="undefined"
        creationPolicy="auto|all|queued|none"
        dataProvider="<i>No default</i>"
        direction="horizontal|vertical"
        horizontalScrollPosition="0"
        legendItemClass="<i>No default</i>"
        verticalScrollPosition="0"   
     
        <strong>Styles</strong>
        backgroundAlpha="1.0"
        backgroundAttachment="scroll"
        backgroundColor="undefined"
        backgroundDisabledColor="undefined"
        backgroundImage="undefined"
        backgroundSize="auto" 
        barColor="undefined"
        borderColor="0xAAB3B3"
        borderSides="left top right bottom"
        borderSkin="mx.skins.halo.HaloBorder"
        borderStyle="inset|none|solid|outset"
        borderThickness="1"
        color="0x0B333C"
        cornerRadius="0"
        disabledColor="0xAAB3B3"
        disbledOverlayAlpha="undefined"
        dropShadowColor="0x000000"
        dropShadowEnabled="false"
        fontAntiAliasType="advanced"
        fontfamily="Verdana"
        fontGridFitType="pixel"
        fontSharpness="0""
        fontSize="10"
        fontStyle="normal"
        fontThickness="0"
        fontWeight="normal"
        horizontalAlign="left|center|right"
        horizontalGap="<i>8</i>"
        labelPlacement="right|left|top|bottom"
        markerHeight="15"
        markerWidth="10"
        paddingBottom="0"
        paddingLeft="0"
        paddingRight="0"
        paddingTop="0"
        shadowDirection="center"
        shadowDistance="2"
        stroke="<i>IStroke; no default</i>"
        textAlign="left"
        textDecoration="none|underline"
        textIndent="0"
        verticalAlign="top|middle|bottom"
        verticalGap="<i>6</i>"
        
        <strong>Events</strong>
        childAdd="<i>No default</i>"
        childIndexChange="<i>No default</i>"
        childRemove="<i>No default</i>"
        dataChange="<i>No default</i>"
        itemClick="<i>Event; no default</i>"
        itemMouseDown="<i>Event; no default</i>"
        itemMouseOut="<i>Event; no default</i>"
        itemMouseOver="<i>Event; no default</i>"
        itemMouseUp="<i>Event; no default</i>"
      /&gt;
      </pre>
           ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IContainer</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
      Legend 控件可向图表中添加图例，此图例可为图表中的每个数据系列显示一个标签，以及一个用于显示系列的图表元素的键。
      
      <p>您可以将图表控件标识符绑定到 Legend 控件的 <codeph>dataProvider</codeph> 属性，或者定义一个 LegendItem 对象 Array，进而初始化 Legend 控件。</p>
           </apiDesc><example conref="PlotChartExample.mxml"><swfblock conref="examples/PlotChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.xml#LegendItem"><linktext>mx.charts.LegendItem</linktext></link></related-links><adobeApiEvent id="mx.charts:Legend_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
      当 data 属性更改时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      当 <codeph>data</codeph> 属性更改时进行分派。
           <p>当图例在 List 组件或其它组件中用作呈示器时，将使用 <codeph>data</codeph> 属性将要显示的数据传递给该图例。</p>
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.events.ChildExistenceChangedEvent.CHILD_REMOVE_childRemove"><apiName>childRemove</apiName><shortdesc>
      删除图例的子项之前分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ChildExistenceChangedEvent.CHILD_REMOVE</apiEventType><adobeApiEventClassifier>mx.events.ChildExistenceChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      删除图例的子项之前分派。
           <p>当调用下列任一方法时传送此事件：<codeph>removeChild()</codeph>、<codeph>removeChildAt()</codeph> 或 <codeph>removeAllChildren()</codeph>。</p>
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.events.IndexChangedEvent.CHILD_INDEX_CHANGE_childIndexChange"><apiName>childIndexChange</apiName><shortdesc>
      图例子项的索引（在图例子项中）发生更改后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.IndexChangedEvent.CHILD_INDEX_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.IndexChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      图例子项的索引（在图例子项中）发生更改后分派。仅对指定作为 <codeph>setChildIndex()</codeph> 方法参数的子项分派此事件；而对伴随调用 <codeph>setChildIndex()</codeph> 方法而发生索引更改的其他子项不会分派此事件。
           <p>调用 <codeph>setChildIndex()</codeph> 方法时，子项的索引将发生更改。</p>
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.events.ChildExistenceChangedEvent.CHILD_ADD_childAdd"><apiName>childAdd</apiName><shortdesc>
      将子项添加到图例后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ChildExistenceChangedEvent.CHILD_ADD</apiEventType><adobeApiEventClassifier>mx.events.ChildExistenceChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      将子项添加到图例后分派。
           <p>调用 <codeph>addChild()</codeph> 或 <codeph>addChildAt()</codeph> 方法时分派 childAdd 事件。首次创建容器后，会对在 MXML 文件中声明的每个子组件自动调用 <codeph>addChild()</codeph> 方法。每次 Repeater 对象添加或删除子对象时，都会自动调用 <codeph>addChildAt()</codeph> 方法。应用程序开发人员也可以手动调用这些方法来添加新的子项。</p>
           <p>发送此事件时，即已初始化子对象，但尚未计算其宽度和高度，并且尚未在屏幕上绘制子对象。如果希望在完全初始化并呈示子对象时通知您，则注册为子对象的 <codeph>creationComplete</codeph> 事件的侦听器。</p>
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.charts.events.LegendMouseEvent.ITEM_MOUSE_UP_itemMouseUp"><apiName>itemMouseUp</apiName><shortdesc>
      当用户在 Legend 中的 LegendItem 上释放鼠标按键时分派此事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.LegendMouseEvent.ITEM_MOUSE_UP</apiEventType><adobeApiEventClassifier>mx.charts.events.LegendMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      当用户在 Legend 中的 LegendItem 上释放鼠标按键时分派此事件。
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.charts.events.LegendMouseEvent.ITEM_MOUSE_OVER_itemMouseOver"><apiName>itemMouseOver</apiName><shortdesc>
      当用户将鼠标移至 Legend 控件中的 LegendItem 上时分派此事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.LegendMouseEvent.ITEM_MOUSE_OVER</apiEventType><adobeApiEventClassifier>mx.charts.events.LegendMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      当用户将鼠标移至 Legend 控件中的 LegendItem 上时分派此事件。
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.charts.events.LegendMouseEvent.ITEM_MOUSE_OUT_itemMouseOut"><apiName>itemMouseOut</apiName><shortdesc>
      当用户将鼠标从 Legend 中的 LegendItem 上移走时分派此事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.LegendMouseEvent.ITEM_MOUSE_OUT</apiEventType><adobeApiEventClassifier>mx.charts.events.LegendMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      当用户将鼠标从 Legend 中的 LegendItem 上移走时分派此事件。
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.charts.events.LegendMouseEvent.ITEM_MOUSE_DOWN_itemMouseDown"><apiName>itemMouseDown</apiName><shortdesc>
      当用户在 Legend 控件中的 LegendItem 上按下鼠标按键时分派此事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.LegendMouseEvent.ITEM_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>mx.charts.events.LegendMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      当用户在 Legend 控件中的 LegendItem 上按下鼠标按键时分派此事件。
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.charts:Legend_mx.charts.events.LegendMouseEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
      当用户在 Legend 控件中的 LegendItem 上单击时分派此事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.charts.events.LegendMouseEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.charts.events.LegendMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      当用户在 Legend 控件中的 LegendItem 上单击时分派此事件。
           </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.charts:Legend:Legend"><apiName>Legend</apiName><shortdesc>
          构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
          构造函数。
          
          </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts:Legend:addChildAt"><apiName>addChildAt</apiName><shortdesc>
          向此容器添加一个子 DisplayObject 子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>添加的子项将作为 DisplayObject 类型的对象。您通常将返回值转换为 UIComponent 或所添加组件的类型。
                   </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>要添加为此容器的子项的 DisplayObject。它必须实现 IUIComponent 接口。
                   </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>要在其中添加子项的索引。
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          向此容器添加一个子 DisplayObject 子项。该子项将被添加到指定的索引位置。
                   <p><b>注意：</b>尽管已将方法的 <codeph>child</codeph> 参数指定为 DisplayObject 类型，但此参数必须实现 IUIComponent 接口才能添加为容器的子项。所有 Flex 组件都要实现此接口。</p>
                   <p>子项从后向前分层。也就是说，如果子项重叠，则索引为 0 的子项位于最后方，而索引为 <codeph>numChildren - 1</codeph> 的子项位于最前方。这就意味着，新添加的子项的层次将位于现有子项之前。</p>
                   <p>如果要在其中添加新子项的索引已被旧子项占用，则新子项不会替换旧子项；此旧子项及其后的子项将“滑过”此位置，且各子项的索引值将增加 1。例如，假设 Container 包含子项（A、B、C），而您在索引为 1 处添加了 D。此时容器将包含（A、D、B、C）。如果希望替换旧子项，则必须先将其删除，再添加新子项。</p>
                   </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.IUIComponent.xml"><linktext>mx.core.IUIComponent</linktext></link></related-links></apiOperation><apiOperation id="mx.charts:Legend:addChild"><apiName>addChild</apiName><shortdesc>
          向此容器添加一个子 DisplayObject 子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>添加的子项将作为 DisplayObject 类型的对象。您通常将返回值转换为 UIComponent 或所添加组件的类型。
                   </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>要添加为此容器的子项的 DisplayObject。它必须实现 IUIComponent 接口。
                   </apiDesc></apiParam><apiTipTexts><apiTipText>向此容器添加一个子项。
          
          </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
          向此容器添加一个子 DisplayObject 子项。一个子项添加到其他现有子项的后面，以便添加的第一个子项使用索引 0，下一个子项使用索引 1，依此类推。
                   <p><b>注意：</b>尽管已将方法的 <codeph>child</codeph> 参数指定为 DisplayObject 类型，但此参数必须实现 IUIComponent 接口才能添加为容器的子项。所有 Flex 组件都要实现此接口。</p>
                   <p>子项从后向前分层。也就是说，如果子项重叠，则索引为 0 的子项位于最后方，而索引为 <codeph>numChildren - 1</codeph> 的子项位于最前方。这就意味着，新添加的子项的层次将位于现有子项之前。</p>
                   </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.IUIComponent.xml"><linktext>mx.core.IUIComponent</linktext></link></related-links></apiOperation><apiOperation id="mx.charts:Legend:addElementAt"><apiName>addElementAt</apiName><shortdesc conref="mx.core.IVisualElementContainer#addElementAt()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#addElementAt()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:addElement"><apiName>addElement</apiName><shortdesc conref="mx.core.IVisualElementContainer#addElement()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#addElement()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:protected:attachOverlay"><apiName>attachOverlay</apiName><shortdesc>
          供溶解效果在内部用来添加叠加层到容器的镶边。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          供溶解效果在内部用来添加叠加层到容器的镶边。 
          
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:contentToGlobal"><apiName>contentToGlobal</apiName><shortdesc conref="mx.core.UIComponent#contentToGlobal()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#contentToGlobal()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:contentToLocal"><apiName>contentToLocal</apiName><shortdesc conref="mx.core.UIComponent#contentToLocal()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#contentToLocal()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:protected:createBorder"><apiName>createBorder</apiName><shortdesc>
          如果需要容器的边框外观，但却不存在，则创建容器的边框外观。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          如果需要容器的边框外观，但却不存在，则创建容器的边框外观。
          
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:createComponentFromDescriptor"><apiName>createComponentFromDescriptor</apiName><shortdesc>
          提供一个 UIComponentDescriptor，创建相应的组件并将该组件添加为此容器的子代。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>创建的组件。
         
          </apiDesc><apiType value="mx.core:IFlexDisplayObject"/></apiReturn><apiParam><apiItemName>descriptor</apiItemName><apiType value="mx.core:ComponentDescriptor"/><apiDesc>要创建的组件的 UIComponentDescriptor。此参数可以是 UIComponentDescriptor 对象，也可以是容器某个子项的索引（介于 0 和 n-1 之间的一个整数，其中 n 是此容器的子项总数）。
                   </apiDesc></apiParam><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc>如果为 <codeph>false</codeph>，则创建此组件但不创建其子项。如果为 <codeph>true</codeph>，在创建组件后，Flex 将调用 <codeph>createComponentsFromDescriptors()</codeph> 方法创建该组件的所有子项或部分子项，这取决于该组件的 <codeph>creationPolicy</codeph> 属性值。
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          提供一个 UIComponentDescriptor，创建相应的组件并将该组件添加为此容器的子代。
          
          <p>此方法将实例化新对象，但不将其添加到显示列表，因此默认情况下，屏幕上不显示该对象。要向显示列表添加新对象，请在调用 <codeph>createComponentFromDescriptor()</codeph> 方法后对该容器调用 <codeph>validateNow()</codeph> 方法，如以下示例所示：
          <pre>
          myVBox.createComponentFromDescriptor(myVBox.childDescriptors[0],false);
          myVBox.validateNow();
          </pre>
          </p>
          
          <p>或者，可以对该容器调用 <codeph>createComponentsFromDescriptors()</codeph> 方法，以一次性创建所有组件。不需要在调用 <codeph>createComponentsFromDescriptors()</codeph> 方法之后调用 <codeph>validateNow()</codeph> 方法。</p>
                   </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.UIComponentDescriptor.xml"><linktext>mx.core.UIComponentDescriptor</linktext></link></related-links></apiOperation><apiOperation id="mx.charts:Legend:createComponentsFromDescriptors"><apiName>createComponentsFromDescriptors</apiName><shortdesc>
          循环访问 childDescriptor Array，并对每个元素调用 createComponentFromDescriptor() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果为 <codeph>true</codeph>，将递归创建组件。
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          循环访问 <codeph>childDescriptors</codeph> Array，并对每个元素调用 <codeph>createComponentFromDescriptor()</codeph> 方法。
          
          <p>如果容器的 <codeph>creationPolicy</codeph> 属性的值为 <codeph>ContainerCreationPolicy.ALL</codeph>，则将在初始化序列期间自动调用此方法。</p>
          
          <p>如果容器的 <codeph>creationPolicy</codeph> 值为 <codeph>ContainerCreationPolicy.AUTO</codeph>，则在容器的子项将变为可见时自动调用此方法。</p>
          
          <p>如果容器的 <codeph>creationPolicy</codeph> 属性的值为 <codeph>ContainerCreationPolicy.NONE</codeph>，则当您希望创建此容器的子项时应调用此函数。</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:createDeferredContent"><apiName>createDeferredContent</apiName><shortdesc>
          为实现 IDeferredContentOwner 接口以支持延迟实例化的容器，执行调用 createComponentsFromDescriptors(true) 方法的等效操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          为实现 IDeferredContentOwner 接口以支持延迟实例化的容器，执行调用 <codeph>createComponentsFromDescriptors(true)</codeph> 方法的等效操作。
                   </apiDesc></apiOperationDetail><related-links><link href="mx.charts.xml#Legend/createComponentsFromDescriptors()"><linktext>createComponentsFromDescriptors()</linktext></link></related-links></apiOperation><apiOperation id="mx.charts:Legend:executeBindings"><apiName>executeBindings</apiName><shortdesc>
          执行此 Container 上的所有数据绑定。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果为 <codeph>false</codeph>，则仅对此 Container 执行绑定。如果为 <codeph>true</codeph>，则还对此容器的子级、孙级、曾孙级等执行绑定。
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          执行此 Container 上的所有数据绑定。创建某个 Container 后，Flex 将自动调用此方法以执行其中包含目标的所有数据绑定。MXML 容器/绑定问题 (177074) 的解决方案：覆盖 Container.executeBindings()，以便在调用 BindingManager.executeBindings() 时首选 descriptor.document 而不是 parentDocument。这样，就应始终为使用描述符创建的实例提供正确行为，并将为使用程序创建的实例提供初始行为。（在后一种情况中，可能会出现错误，也可能不出现错误。）可能会针对更新程序 1 提供更完整的修补程序，以保证非 DI 方案和重设父级组件方案中的行为均正确。
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:executeChildBindings"><apiName>executeChildBindings</apiName><shortdesc>
          执行到此 Container 的子 UIComponent 对象的绑定。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc>如果为 <codeph>false</codeph>，则仅对此 Container 的直接子项执行绑定。如果为 <codeph>true</codeph>，则还对此容器的孙项、曾孙项等执行绑定。
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          执行到此 Container 的子 UIComponent 对象的绑定。创建 Container 后，Flex 将立刻自动调用此方法。
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:getChildAt"><apiName>getChildAt</apiName><shortdesc>
          获取第 n 个子组件对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>引用该子项作为 DisplayObject 类型的对象。您通常将返回值转换为 UIComponent 或特定 Flex 控件（如 ComboBox 或 TextArea）的类型。
          
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>从 0 到 (numChildren - 1) 的数字。
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          获取第 <i>n</i> 个子组件对象。
                   <p>此方法返回的子项包括在 MXML 中声明的子项，以及使用 <codeph>addChild()</codeph> 或 <codeph>addChildAt()</codeph> 方法添加的子项。</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:getChildByName"><apiName>getChildByName</apiName><shortdesc>
          返回 name 属性为指定 String 的子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject，用于将子项表示为 DisplayObject 类型的对象。您通常将返回值转换为 UIComponent 或特定 Flex 控件（如 ComboBox 或 TextArea）的类型。如果指定名称的子项不存在，则会引发运行时错误。
          
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>子项的标识符。
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          返回 <codeph>name</codeph> 属性为指定 String 的子项。
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:getChildIndex"><apiName>getChildIndex</apiName><shortdesc>
          获取特定子项的从零开始的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>从 0 到 (numChildren - 1) 的数字。
          
          </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>对要获得其索引的子项的引用。
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          获取特定子项的从零开始的索引。
                   <p>容器的第一个子项（即：出现在 MXML 声明中的第一个子标签）使用索引 0，第二个子项使用索引 1，依此类推。容器子项的索引确定了其布置次序。例如，在 VBox 中，索引为 0 的子项位于最上方，索引为 1 的子项位于其下，等等。</p>
                   <p>如果通过调用 <codeph>addChild()</codeph> 方法添加子项，则新子项的索引等于现有子项中的最大索引加 1。您可以使用 <codeph>addChildAt()</codeph> 方法在指定的索引位置插入子项；此时，先前位于该索引位置的子项的索引，以及高于此位置的子项的索引，都将增加 1，以使所有索引都落在 0 到 <codeph>(numChildren - 1)</codeph> 这一范围内。</p>
                   <p>如果通过调用 <codeph>removeChild()</codeph> 或 <codeph>removeChildAt()</codeph> 方法删除子项，将调整剩余子项的索引，以使所有索引都落在 0 到 <codeph>(numChildren - 1)</codeph> 这一范围内。</p>
                   <p>如果 <codeph>myView.getChildIndex(myChild)</codeph> 返回 5，则 <codeph>myView.getChildAt(5)</codeph> 返回 myChild。</p>
                   <p>通过调用 <codeph>setChildIndex()</codeph> 方法可以更改子项的索引。</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:getChildren"><apiName>getChildren</apiName><shortdesc>
          返回由容器的内容子项组成的 DisplayObject 对象的 Array。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>由容器的内容子项组成的 DisplayObject 对象的 Array。
         
          </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
          返回由容器的内容子项组成的 DisplayObject 对象的 Array。此数组<b>不</b>包括用于实现容器的显示元素（如其边框和背景图像）的 DisplayObject。
                   </apiDesc></apiOperationDetail><related-links><link href="mx.charts.xml#Legend/rawChildren"><linktext>rawChildren</linktext></link></related-links></apiOperation><apiOperation id="mx.charts:Legend:getElementAt"><apiName>getElementAt</apiName><shortdesc conref="mx.core.IVisualElementContainer#getElementAt()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#getElementAt()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:getElementIndex"><apiName>getElementIndex</apiName><shortdesc conref="mx.core.IVisualElementContainer#getElementIndex()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#getElementIndex()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:globalToContent"><apiName>globalToContent</apiName><shortdesc conref="mx.core.UIComponent#globalToContent()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#globalToContent()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:protected:layoutChrome"><apiName>layoutChrome</apiName><shortdesc>
          通过设置此容器边框的位置和大小响应大小更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>指定组件在组件坐标中的宽度（以像素为单位），而不考虑该组件的 <codeph>scaleX</codeph> 属性值。
                   </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>指定组件在组件坐标中的高度（以像素为单位），而不考虑该组件的 <codeph>scaleY</codeph> 属性值。
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          通过设置此容器边框的位置和大小响应大小更改。此方法是一种高级方法，可在创建 Container 的子类时覆盖。
                   <p>使用 <codeph>addChild()</codeph> 方法将容器添加到父容器时，以及调用容器的 <codeph>invalidateDisplayList()</codeph> 方法时，Flex 将调用 <codeph>layoutChrome()</codeph> 方法。</p>
                   <p>无论 <codeph>autoLayout</codeph> 属性的值是什么，都将调用 <codeph>Container.layoutChrome()</codeph> 方法。</p>
                   <p><codeph>Container.layoutChrome()</codeph> 方法可设置 Container 容器边框的位置和大小。在 Container 的每个子类中，子类的 <codeph>layoutChrome()</codeph> 方法应调用 <codeph>super.layoutChrome()</codeph> 方法，以便适当定位边框。</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:localToContent"><apiName>localToContent</apiName><shortdesc conref="mx.core.UIComponent#localToContent()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#localToContent()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeAllChildren"><apiName>removeAllChildren</apiName><shortdesc>
          在此容器的子项列表中删除所有子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          在此容器的子项列表中删除所有子项。
          
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeAllElements"><apiName>removeAllElements</apiName><shortdesc conref="mx.core.IVisualElementContainer#removeAllElements()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#removeAllElements()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeChildAt"><apiName>removeChildAt</apiName><shortdesc>
          从此容器的子项列表中删除指定索引位置的子 DisplayObject。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>删除的子对象是 DisplayObject 类型的对象。您通常将返回值转换为 UIComponent 或所删除组件的类型。
          
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>要删除的 DisplayObject 的子索引。
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          从此容器的子项列表中删除指定索引位置的子 DisplayObject。所删除子项的 <codeph>parent</codeph> 属性将设置为 null。除非受到显式破坏，否则，子项将一直存在。如果将其添加到另一容器，将保留其上次的已知状态。
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeChild"><apiName>removeChild</apiName><shortdesc>
          从此容器的子项列表中删除子 DisplayObject。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>删除的子对象是 DisplayObject 类型的对象。您通常将返回值转换为 UIComponent 或所删除组件的类型。
          
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>要删除的 DisplayObject。
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          从此容器的子项列表中删除子 DisplayObject。所删除子项的 <codeph>parent</codeph> 属性将设置为 null。除非受到显式破坏，否则，子项将一直存在。如果将其添加到另一容器，将保留其上次的已知状态。
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeElementAt"><apiName>removeElementAt</apiName><shortdesc conref="mx.core.IVisualElementContainer#removeElementAt()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#removeElementAt()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:removeElement"><apiName>removeElement</apiName><shortdesc conref="mx.core.IVisualElementContainer#removeElement()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#removeElement()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:protected:scrollChildren"><apiName>scrollChildren</apiName><shortdesc>
          基于 horizontalScrollPosition 和 verticalScrollPosition 属性，确定容器的内容区域相对于可查看区域的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          基于 horizontalScrollPosition 和 verticalScrollPosition 属性，确定容器的内容区域相对于可查看区域的位置。可查看区域中未显示出的内容将被剪掉。此方法应由内容区域中包含滚动镶边的子类覆盖。
          
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:setChildIndex"><apiName>setChildIndex</apiName><shortdesc>
          设置特定子项的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>对要设置其索引的子项的引用。
                   </apiDesc></apiParam><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiDesc>指示新索引的数字。必须是介于 0 和 (numChildren - 1) 之间的整数。
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          设置特定子项的索引。请参阅 <codeph>getChildIndex()</codeph> 方法了解子项索引的说明。
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:setElementIndex"><apiName>setElementIndex</apiName><shortdesc conref="mx.core.IVisualElementContainer#setElementIndex()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#setElementIndex()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc conref="mx.core.IVisualElementContainer#swapElementsAt()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#swapElementsAt()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:swapElements"><apiName>swapElements</apiName><shortdesc conref="mx.core.IVisualElementContainer#swapElements()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#swapElements()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:Legend:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
          通过设置此容器子项的位置和大小来响应大小更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>指定组件在组件坐标中的宽度（以像素为单位），而不考虑该组件的 <codeph>scaleX</codeph> 属性值。
                   </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>指定组件在组件坐标中的高度（以像素为单位），而不考虑该组件的 <codeph>scaleY</codeph> 属性值。
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          通过设置此容器子项的位置和大小来响应大小更改。
                   <p>有关 <codeph>updateDisplayList()</codeph> 方法的更多信息，请参阅 <codeph>UIComponent.updateDisplayList()</codeph> 方法。</p>
                   <p><codeph>Container.updateDisplayList()</codeph> 方法可设置 Container 容器边框的位置和大小。在 Container 的每个子类中，子类的 <codeph>updateDisplayList()</codeph> 方法应调用 <codeph>super.updateDisplayList()</codeph> 方法，以便适当定位边框。</p>
                   </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.UIComponent.xml"><linktext>mx.core.UIComponent</linktext></link></related-links></apiOperation><apiValue id="mx.charts:Legend:protected:actualCreationPolicy"><apiName>actualCreationPolicy</apiName><shortdesc>
          此容器的创建策略。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
          此容器的创建策略。 
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:legendItemClass"><apiName>legendItemClass</apiName><shortdesc>
          用于实例化 LegendItem 对象的类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
          用于实例化 LegendItem 对象的类。如果图例内容是从图表或数据派生的，它将为 <codeph>dataProvider</codeph> 描述的每个项目实例化一个 <codeph>legendItemClass</codeph> 实例。如果希望自定义图例项目中的行为，您可以将 LegendItem 的一个子类分配给此属性，以使 Legend 改为创建其派生类型的实例。  
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:autoLayout:get"><apiName>autoLayout</apiName><shortdesc>
          如果为 true，则在更改子项的位置或大小时完成度量和布局。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
          
          </apiDefaultValue></apiValueDef><apiDesc>
          如果为 <codeph>true</codeph>，则在更改子项的位置或大小时完成度量和布局。如果为 <codeph>false</codeph>，则仅当在容器中添加或删除子项时才能执行度量和布局。
                   <p>使用 Move 效果时，正在移动的组件周围的布局不会为了适合 Move 效果动画而进行重新调整。将容器的 <codeph>autoLayout</codeph> 属性设置为 <codeph>true</codeph> 对此行为没有任何影响。</p>
                   <p>将 <codeph>autoLayout</codeph> 属性设置为 <codeph>false</codeph> 时，Zoom 效果不起作用。</p>
                   <p><codeph>autoLayout</codeph> 属性不适用于 Accordion 或 ViewStack 容器。</p>
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
          返回 EdgeMetrics 对象，它具有四个属性：left、top、right 和 bottom。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
          返回 EdgeMetrics 对象，它具有四个属性：<codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph> 和 <codeph>bottom</codeph>。各属性值等于边框某一侧的粗细（以像素为单位）。
                   <p>与 <codeph>viewMetrics</codeph> 不同，此属性不会被 Container 的子类覆盖。</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:childDescriptors:get"><apiName>childDescriptors</apiName><shortdesc>
          由 MXML 编译器生成的 UIComponentDescriptor 对象的 Array。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
          由 MXML 编译器生成的 UIComponentDescriptor 对象的 Array。
                   <p>每个 UIComponentDescriptor 对象都包含在容器的 MXML 标签的某个子 MXML 标签中指定的信息。Array 中 UIComponentDescriptor 对象的顺序与子标签的顺序相同。在初始化期间，子描述符用于创建容器的子 UIComponent 对象及其 Repeater 对象，并赋予它们在 MXML 中指定的初始属性值、事件处理程序、效果等。</p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.UIComponentDescriptor.xml"><linktext>mx.core.UIComponentDescriptor</linktext></link></related-links></apiValue><apiValue id="mx.charts:Legend:clipContent:get"><apiName>clipContent</apiName><shortdesc>
          如果此容器的子项的位置和/或大小扩展到此容器的边框之外，是否应用剪裁遮罩。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
          
          </apiDefaultValue></apiValueDef><apiDesc>
          如果此容器的子项的位置和/或大小扩展到此容器的边框之外，是否应用剪裁遮罩。如果为 <codeph>false</codeph>，则在将此容器的子项移动或调整到此容器的边框之外时，这些子项仍然可见。如果为 <codeph>true</codeph>，将剪掉此容器的子项。
                   <p>如果 <codeph>clipContent</codeph> 为 <codeph>false</codeph>，则将对此容器禁用滚动并且不显示滚动条。如果 <codeph>clipContent</codeph> 为 true，则当容器的子项扩展到容器边框之外时通常会显示滚动条。有关控制滚动条外观的其他信息，请参阅 <codeph>horizontalScrollPolicy</codeph> 和 <codeph>verticalScrollPolicy</codeph>。</p>
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:contentMouseX:get"><apiName>contentMouseX</apiName><shortdesc conref="mx.core.UIComponent#contentMouseX">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#contentMouseX">
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:contentMouseY:get"><apiName>contentMouseY</apiName><shortdesc conref="mx.core.UIComponent#contentMouseY">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#contentMouseY">
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:creatingContentPane:get"><apiName>creatingContentPane</apiName><shortdesc>
          容器使用内部内容窗格控制滚动。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          容器使用内部内容窗格控制滚动。容器创建内容窗格时，<codeph>creatingContentPane</codeph> 为 <codeph>true</codeph>，以便忽略或阻止某些事件。
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:creationIndex:get"><apiName>creationIndex</apiName><shortdesc>
          指定实例化和绘制容器子项的顺序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
          
          </apiDefaultValue><apiDeprecated><apiDesc>不推荐使用</apiDesc></apiDeprecated></apiValueDef><apiDesc>
          指定实例化和绘制容器子项的顺序。
                   <p>仅当 <codeph>creationPolicy</codeph> 属性设置为 <codeph>ContainerCreationPolicy.QUEUED</codeph> 时，此属性才可用。否则，将忽略此属性。</p>
                   </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:creationPolicy:get"><apiName>creationPolicy</apiName><shortdesc>
          此 MX Container 的子代创建策略。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ContainerCreationPolicy.AUTO
          
          </apiDefaultValue></apiValueDef><apiDesc>
          此 MX Container 的子代创建策略。ActionScript 值可以是 <codeph>ContainerCreationPolicy.AUTO</codeph>、<codeph>ContainerCreationPolicy.ALL</codeph> 或 <codeph>ContainerCreationPolicy.NONE</codeph>。MXML 值可以是 <codeph>auto</codeph>、<codeph>all</codeph> 或 <codeph>none</codeph>。
                   <p>如果没有为容器指定 <codeph>creationPolicy</codeph>，则该容器将继承其父项的 <codeph>creationPolicy</codeph>。如果没有为 Application 指定 <codeph>creationPolicy</codeph>，则默认为 <codeph>ContainerCreationPolicy.AUTO</codeph>。</p>
                   <p><codeph>ContainerCreationPolicy.AUTO</codeph> 的 <codeph>creationPolicy</codeph> 意味着容器将延迟创建部分或全部后代，直到需要它们时为止。此进程称为<i>延迟实例化</i>。此策略能使启动时间达到最佳，因为最初只创建很少的 UIComponent。但是，当用户首次导航到应用程序的其他部分时，这将引入导航延迟。导航器容器（如 Accordion、TabNavigator 和 ViewStack）通过立即创建其所有子项实现 <codeph>ContainerCreationPolicy.AUTO</codeph> 策略，但要等到子项成为导航器容器的所选子项时才创建该子项的更深层的后代。</p>
                   <p><codeph>ContainerCreationPolicy.ALL</codeph> 的 <codeph>creationPolicy</codeph> 意味着导航器容器会立即创建每个子项的更深层的后代，而不必等待选择该子项。对于单一视图容器（如 VBox 容器），<codeph>ContainerCreationPolicy.AUTO</codeph> 和 <codeph>ContainerCreationPolicy.ALL</codeph> 策略没有区别。</p>
                   <p><codeph>ContainerCreationPolicy.NONE</codeph> 的 <codeph>creationPolicy</codeph> 意味着容器不创建其子项。在这种情况下，由 MXML 作者负责通过调用 <codeph>createComponentsFromDescriptors()</codeph> 方法来创建子项。</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
          Legend 中将使用的数据设置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="collectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
          Legend 中将使用的数据设置。
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:data:get"><apiName>data</apiName><shortdesc>
          当您在项呈示器或项目编辑器中使用某个组件时，可借助 data 属性向该组件传递值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
          </apiDefaultValue></apiValueDef><apiDesc>
          当您在项呈示器或项目编辑器中使用某个组件时，可借助 <codeph>data</codeph> 属性向该组件传递值。您通常使用数据绑定将 <codeph>data</codeph> 属性的字段绑定到此组件的某个属性。
                   <p>不要以 MXML 方式设置此属性。</p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.charts:Legend:deferredContentCreated:get"><apiName>deferredContentCreated</apiName><shortdesc>
          IDeferredContentOwner 等效于 processedDescriptors
         
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          IDeferredContentOwner 等效于 processedDescriptors
         
          </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.charts.xml#UIComponent/processedDescriptors"><linktext>UIComponent.processedDescriptors</linktext></link></related-links></apiValue><apiValue id="mx.charts:Legend:direction:get"><apiName>direction</apiName><shortdesc>
          确定子项在容器中的放置方式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="directionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"horizontal"
         
          </apiDefaultValue></apiValueDef><apiDesc>
          确定子项在容器中的放置方式。可能的 MXML 值包括 <codeph>"horizontal"</codeph> 和 <codeph>"vertical"</codeph>。在 ActionScript 中，您可以使用 TileDirection.HORIZONTAL 或 TileDirection.VERTICAL 值设置方向。默认值是 <codeph>"horizontal"</codeph>。（如果容器是作为 Tile 子类的 Legend 容器，则默认值是 <codeph>"vertical"</codeph>。）
                   <p>第一个子项总是放置在 Tile 容器的左上角。如果将 <codeph>direction</codeph> 设置为 <codeph>"horizontal"</codeph>，则在最顶行中从左到右放置子项，在第二行中则从左到右进行放置，依此类推。如果将该值设置为 <codeph>"vertical"</codeph>，则在最左列中从上到下放置子项，在第二列中则从上到下进行放置，依此类推。</p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.charts.TileDirection.xml"><linktext>TileDirection</linktext></link></related-links></apiValue><apiValue id="mx.charts:Legend:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
          水平滚动条的当前位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="viewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
          
          </apiDefaultValue></apiValueDef><apiDesc>
          水平滚动条的当前位置。此值等于可滚动表面的左边缘和当前可见表面最左侧的片段之间的距离（以像素为单位）。
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:maxHorizontalScrollPosition:get"><apiName>maxHorizontalScrollPosition</apiName><shortdesc>
          horizontalScrollPosition 属性的最大可能值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
          <codeph>horizontalScrollPosition</codeph> 属性的最大可能值。如果水平 scrollbar 不存在，则默认值为 0。
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:maxVerticalScrollPosition:get"><apiName>maxVerticalScrollPosition</apiName><shortdesc>
          verticalScrollPosition 属性的最大可能值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
          <codeph>verticalScrollPosition</codeph> 属性的最大可能值。如果垂直 scrollbar 不存在，则默认值为 0。
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:numChildren:get"><apiName>numChildren</apiName><shortdesc>
          此容器中的子组件数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
          此容器中的子组件数。
                   <p>子组件数最初等于在 MXML 中声明的子项数。在运行时，可以通过调用 <codeph>addChild()</codeph> 或 <codeph>addChildAt()</codeph> 添加新项，也可以通过调用 <codeph>removeChild()</codeph>、<codeph>removeChildAt()</codeph> 或 <codeph>removeAllChildren()</codeph> 删除现有子项。</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:numElements:get"><apiName>numElements</apiName><shortdesc conref="mx.core.IVisualElementContainer#numElements">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.IVisualElementContainer#numElements">
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:rawChildren:get"><apiName>rawChildren</apiName><shortdesc>
          容器中通常包含子组件，可以使用 Container.getChildAt() 方法和 Container.numChildren 属性枚举这些子组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:IChildList"/></apiValueDef><apiDesc>
          容器中通常包含子组件，可以使用 <codeph>Container.getChildAt()</codeph> 方法和 <codeph>Container.numChildren</codeph> 属性枚举这些子组件。此外，容器可以包含样式元素和外观，如边框和背景。Flash Player 和 AIR 创建的子组件和外观之间没有任何差异。二者均可以使用播放器的 <codeph>getChildAt()</codeph> 方法和 <codeph>numChildren</codeph> 属性进行访问。但是，Container 类通过覆盖 <codeph>getChildAt()</codeph> 方法和 <codeph>numChildren</codeph> 属性（以及其他多个方法）可造成容器的子项是唯一的子组件的错觉。
                   <p>如果您需要访问容器的所有子项（内容子项和外观），则需使用 <codeph>rawChildren</codeph> 属性上的方法和属性，而不是常规 Container 方法。例如，可使用 <codeph>Container.rawChildren.getChildAt())</codeph> 方法。但是，如果容器为其子项创建了 ContentPane Sprite 对象，则 <codeph>rawChildren</codeph> 属性值将只计算 ContentPane，而不计算容器的子项。并非总能够确定容器何时包含 ContentPane。</p>
         
          <p><b>注意：</b>如果您调用 <codeph>rawChildren</codeph> 对象的 <codeph>addChild</codeph> 或 <codeph>addChildAt</codeph> 方法，则需在添加的组件上设置 <codeph>tabFocusEnabled = false</codeph>。这可以防止用户跳位到所添加的仅可视组件。</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc>
          垂直滚动条的当前位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="viewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
          
          </apiDefaultValue></apiValueDef><apiDesc>
          垂直滚动条的当前位置。此值等于可滚动表面的顶部边缘与当前可见表面的最顶部片段之间的距离（以像素为单位）。
                   </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:viewMetricsAndPadding:get"><apiName>viewMetricsAndPadding</apiName><shortdesc>
          返回一个对象，该对象具有四个属性：left、top、right 和 bottom。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
          返回一个对象，该对象具有四个属性：<codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph> 和 <codeph>bottom</codeph>。每个属性的值分别等于容器边缘四周镶边（可视元素）的粗细与对象边距的粗细之和。
                   <p>镶边包括边框粗细。如果 <codeph>horizontalScrollPolicy</codeph> 或 <codeph>verticalScrollPolicy</codeph> 属性值为 <codeph>ScrollPolicy.ON</codeph>，则镶边还包括相应滚动条的粗细。如果滚动策略为 <codeph>ScrollPolicy.AUTO</codeph>，则即使显示滚动条，镶边度量也不包括滚动条粗细。</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:Legend:viewMetrics:get"><apiName>viewMetrics</apiName><shortdesc>
          返回一个对象，该对象具有四个属性：left、top、right 和 bottom。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:EdgeMetrics"/></apiValueDef><apiDesc>
          返回一个对象，该对象具有四个属性：<codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph> 和 <codeph>bottom</codeph>。每个属性的值分别等于容器边缘四周镶边（可视元素）的粗细。 
                   <p>镶边包括边框粗细。如果 <codeph>horizontalScrollPolicy</codeph> 或 <codeph>verticalScrollPolicy</codeph> 属性值为 <codeph>ScrollPolicy.ON</codeph>，则镶边还包括相应滚动条的粗细。如果滚动策略为 <codeph>ScrollPolicy.AUTO</codeph>，则即使显示滚动条，镶边度量也不包括滚动条粗细。</p>
                   <p>Container 的子类应覆盖此方法，以便在定位 Container 的子项时考虑其他镶边。例如，Panel 类的 <codeph>viewMetrics</codeph> 属性应返回一个对象，该对象的 <codeph>top</codeph> 属性包括 Panel 容器的标题栏的粗细。</p>
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:ChartItem"><apiName>ChartItem</apiName><shortdesc>
  ChartItem 表示 ChartSeries 中的单个项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  ChartItem 表示 ChartSeries 中的单个项目。在大多数标准系列中，会为系列的 dataProvider 集合中的每个项目创建一个 ChartItem。ChartItems 将被传递给系列的 itemRenderer 实例以供呈示。大多数系列类型都将扩展 ChartItem，以包含特定于图表类型的附加信息。  
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.charts:ChartItem:ChartItem"><apiName>ChartItem</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.charts.chartClasses:IChartElement</apiOperationClassifier><apiData>null</apiData><apiDesc>ChartItem 所属的系列或元素。
     
      </apiDesc></apiParam><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>由 ChartItem 表示的来自系列的数据提供程序的项目。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>由 ChartItem 表示的来自系列的数据提供程序的数据的索引。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts:ChartItem:clone"><apiName>clone</apiName><shortdesc>
      返回此 ChartItem 的副本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>此 ChartItem 的副本。
      
      </apiDesc><apiOperationClassifier>mx.charts:ChartItem</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      返回此 ChartItem 的副本。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts:ChartItem:DISABLED"><apiName>DISABLED</apiName><shortdesc>
      指示 ChartItem 显示为处于禁用状态且无法选中时的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>disabled</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指示 ChartItem 显示为处于禁用状态且无法选中时的值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:FOCUSEDSELECTED"><apiName>FOCUSEDSELECTED</apiName><shortdesc>
      指示 ChartItem 显示为具有焦点并处于选中状态的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>focusedSelected</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指示 ChartItem 显示为具有焦点并处于选中状态的值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:FOCUSED"><apiName>FOCUSED</apiName><shortdesc>
      指示 ChartItem 具有焦点但并未显示为处于选中状态的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>focused</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指示 ChartItem 具有焦点但并未显示为处于选中状态的值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:NONE"><apiName>NONE</apiName><shortdesc>
      指示 ChartItem 显示为未选中、没有焦点并且鼠标未滑过时的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指示 ChartItem 显示为未选中、没有焦点并且鼠标未滑过时的值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:ROLLOVER"><apiName>ROLLOVER</apiName><shortdesc>
      指示 ChartItem 显示为鼠标滑过时的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOver</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指示 ChartItem 显示为鼠标滑过时的值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:SELECTED"><apiName>SELECTED</apiName><shortdesc>
      指示 ChartItem 显示为处于选中状态但没有焦点的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selected</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指示 ChartItem 显示为处于选中状态但没有焦点的值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:element"><apiName>element</apiName><shortdesc>
      拥有 ChartItem 的系列或元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.charts.chartClasses:IChartElement</apiValueClassifier></apiValueDef><apiDesc>
      拥有 ChartItem 的系列或元素。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:index"><apiName>index</apiName><shortdesc>
      由 ChartItem 表示的来自系列的数据提供程序的数据的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      由 ChartItem 表示的来自系列的数据提供程序的数据的索引。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:itemRenderer"><apiName>itemRenderer</apiName><shortdesc>
      图表的 itemRenderer 实例，用于表示此 ChartItem。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:IFlexDisplayObject"/></apiValueDef><apiDesc>
      图表的 itemRenderer 实例，用于表示此 ChartItem。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:item"><apiName>item</apiName><shortdesc>
      由 ChartItem 表示的来自系列的数据提供程序的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      由 ChartItem 表示的来自系列的数据提供程序的项目。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:ChartItem:currentState:get"><apiName>currentState</apiName><shortdesc>
      定义 ChartItem 的外观。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      定义 ChartItem 的外观。可将 <codeph>currentState</codeph> 属性设置为 <codeph>none</codeph>、<codeph>rollOver</codeph>、<codeph>selected</codeph>、<codeph>disabled</codeph>、<codeph>focusSelected</codeph> 和 <codeph>focused</codeph>。
     
      <P>设置项目的状态不会将其添加到 selectedItems Array。它只改变图表项目的外观。设置此属性的值也不会触发 <codeph>change</codeph> 事件。</P>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:LineChart"><apiName>LineChart</apiName><shortdesc>
  LineChart 控件将数据系列表示为使用连续线条连接的多个点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  The <code>&lt;mx:LineChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:LineChart
  /&gt;
  </pre> 
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  LineChart 控件将数据系列表示为使用连续线条连接的多个点。您可以使用图标或元件来表示该线条上的每个数据点，或者显示一条不带图标的线条。 
  
  <p>LineChart 控件要求其 <codeph>series</codeph> 属性包含 LineSeries 对象 Array。</p>
 
  </apiDesc><example conref="Line_AreaChartExample.mxml"><swfblock conref="examples/Line_AreaChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#LineSeries"><linktext>mx.charts.series.LineSeries</linktext></link></related-links><apiConstructor id="mx.charts:LineChart:LineChart"><apiName>LineChart</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:LineChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:AxisLabel"><apiName>AxisLabel</apiName><shortdesc>
  AxisLabel 对象表示图表轴上的单个标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  AxisLabel 对象表示图表轴上的单个标签。AxisLabel 对象由 IAxis 对象生成。AxisLabel 对象也会作为数据传递到实现 IDataRenderer 接口的自定义 AxisLabel 对象。
  	
  </apiDesc></apiClassifierDetail><related-links><link href="mx.charts.xml#AxisRenderer"><linktext>mx.charts.AxisRenderer</linktext></link><link href="mx.charts.chartClasses.xml#IAxis"><linktext>mx.charts.chartClasses.IAxis</linktext></link></related-links><apiConstructor id="mx.charts:AxisLabel:AxisLabel"><apiName>AxisLabel</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>position</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>标签在该轴上的位置，用介于 0 和 1 之间的值指定。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>标签表示的值。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>实际呈示在轴上的文本标签。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:AxisLabel:position"><apiName>position</apiName><shortdesc>
	  标签在该轴上的位置，用介于 0 和 1 之间的值指定。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  标签在该轴上的位置，用介于 0 和 1 之间的值指定。位置为 0 的 AxisLabel 被放置在轴的最小值处，而位置为 1 的 AxisLabel 被放置在轴的最大值处。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisLabel:text"><apiName>text</apiName><shortdesc>
	  实际呈示在轴上的文本标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  实际呈示在轴上的文本标签。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisLabel:value"><apiName>value</apiName><shortdesc>
	  标签表示的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
	  标签表示的值。特定类型的值属性特定于生成标签的轴。例如，LinearAxis 可能生成数字值，而 DateTimeAxis 可能生成日期实例值。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:LogAxis"><apiName>LogAxis</apiName><shortdesc>
  LogAxis 类以对数方式将数值映射到图表轴的最小值和最大值之间。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:LogAxis&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:LogAxis
    <strong>Properties</strong>
    interval="10"
    maximum="null"
    maximumLabelPrecision="null"
    minimum="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:NumericAxis</apiBaseClassifier></apiClassifierDef><apiDesc>
  LogAxis 类以对数方式将数值映射到图表轴的最小值和最大值之间。默认情况下，它会根据图表数据确定 <codeph>minimum</codeph>、<codeph>maximum</codeph> 和 <codeph>interval</codeph> 值，以适应屏幕上的所有图表元素。您还可以显式为这些属性设置特定值。LogAxis 对象无法正确地呈示负值，因为负数的 Log10() 值 <codeph>undefined</codeph>。
 
  </apiDesc><example conref="LogAxisExample.mxml"><swfblock conref="examples/LogAxisExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.chartClasses.xml#IAxis"><linktext>mx.charts.chartClasses.IAxis</linktext></link></related-links><apiConstructor id="mx.charts:LogAxis:LogAxis"><apiName>LogAxis</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  构造函数。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:LogAxis:interval:get"><apiName>interval</apiName><shortdesc>
	  沿轴指定乘数标签值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  沿轴指定乘数标签值。值 10 将在 1、10、100、1000 等位置生成标签，值 100 将在 1、100、10000 等位置生成标签。如果将此属性设置为 <codeph>NaN</codeph>，则 Flex 将计算间隔。间隔必须恰好是 10 的偶次方，并必须大于或等于 10。必要时，LogAxis 会将间隔向下舍入到 10 的某个偶次方。
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LogAxis:maximum:get"><apiName>maximum</apiName><shortdesc>
	  指定轴标签的最大值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  指定轴标签的最大值。如果为 <codeph>NaN</codeph>，则 Flex 将根据图表中的数据确定最大值。最大值必须是 10 的偶次方。必要时，LogAxis 会将明确的最大值向上舍入到 10 的偶次方。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LogAxis:minimum:get"><apiName>minimum</apiName><shortdesc>
	  指定轴标签的最小值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  指定轴标签的最小值。如果此属性为 <codeph>NaN</codeph>，则 Flex 将指定图表中的数据的最小值。最小值必须是 10 的偶次方。必要时，LogAxis 会将明确的最小值向下舍入到 10 的偶次方。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:LogAxis:maximumLabelPrecision:set"><apiName>maximumLabelPrecision</apiName><shortdesc>
	  指定在由此轴生成的标签上表示小数值时所用的最大小数位数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
	  指定在由此轴生成的标签上表示小数值时所用的最大小数位数。默认情况下，轴会从标签自身自动生成此值。值 0 将舍入到最接近的整数值，值 2 将自动舍入到最近的百分位。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:AxisRenderer"><apiName>AxisRenderer</apiName><shortdesc>
  您可以使用 AxisRenderer 类描述图表的水平和垂直轴。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style enumeration="flippedVertical,vertical" inherit="no" name="verticalAxisTitleAlignment" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  指定垂直轴标题的呈示方式。<codeph>flippedVertical</codeph> 从上到下呈示标题，<codeph>vertical</codeph> 从下到上呈示标题
 
  </description>
<default>flippedVertical
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="tickStroke" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  指定轴上的刻度线的特性。此样式必须是一个 Stroke 类实例。  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inside,outside,cross,none" inherit="no" name="tickPlacement" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  指定绘制刻度线的位置。选项包括：
  <ul>
    <li><codeph>"inside"</codeph> - 在数据区域内部绘制刻度线。</li>
     <li><codeph>"outside"</codeph> - 在标签区域中绘制刻度线。</li>
     <li><codeph>"cross"</codeph> - 跨轴绘制刻度线。</li>
     <li><codeph>"none"</codeph> - 不绘制刻度线。</li>
  </ul>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="tickLength" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  指定轴上刻度线的长度，以像素为单位。 
  
  </description>
<default>3  
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="showLine" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Boolean">
<description>
  指定是否显示轴。 
  
  </description>
<default>true 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="showLabels" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Boolean">
<description>
  指定是否应沿轴显示标签。 
  
  </description>
<default>true 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="minorTickStroke" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  指定轴上次刻度线的特性。此样式必须是一个 Stroke 类实例。  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inside,outside,cross,none" inherit="no" name="minorTickPlacement" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  指定绘制次刻度线的位置。选项包括：
  <ul>
    <li><codeph>"inside"</codeph> - 在数据区域内部绘制次刻度线。</li>
     <li><codeph>"outside"</codeph> - 在标签区域中绘制次刻度线。</li>
     <li><codeph>"cross"</codeph> - 跨轴绘制次刻度线。</li>
     <li><codeph>"none"</codeph> - 不绘制次刻度线。</li>
  </ul>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="minorTickLength" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  指定轴上次刻度线的长度，以像素为单位。 
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="labelRotation" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description> 
  指定标签旋转。如果使用设备字体呈示标签，则将始终沿水平方向绘制标签。如果此样式为负值，则 AxisRenderer 将确定一个最佳角度以在最小的区域中呈示标签，而不会重叠。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="labelGap" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description> 
  指定刻度线末端与标签顶部之间的间距，以像素为单位。 
  
  </description>
<default>3 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="labelClass" owner="mx.charts:AxisRenderer" playerVersion="Flash10.2" type="Class">
<description>
  由此组件用来呈示标签的类。
   <p>可以将此类设置为 mx.controls.Label 类或 spark.components.Label 类。</p>
   </description>
<default>spark.components.Label
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="left,top,right,bottom,center" inherit="no" name="labelAlign" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  指定标签相对于所指向值的位置的对齐方式。
 
  </description>
<default>center
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="canStagger" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Boolean">
<description> 
  指定是否在两个标签行上交错排列标签。使用此设置可将最大限度地减小标签所需的空间。默认值为 <codeph>true</codeph>（交错排列标签）。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="canDropLabels" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Boolean">
<description>
  指定 AxisRenderer 是否应根据需要放置标签，以实现正确布局。
   <p>如果设置为 <codeph>true</codeph>，则 AxisRenderer 将在呈示时重叠放置标签。标签始终以固定间隔呈示。如有必要，AxisRenderer 将每隔一个或两个标签呈示一个标签，但不会连续放置两个或更多标签。</p>
   <p>如果设置为 <codeph>false</codeph>，则 AxisRenderer 将使用其他方案（旋转、缩放）来放置标签。</p>
   <p>如果未显式设置此样式，则 AxisRenderer 将根据要呈示的轴类型默认采用一个适当的值。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="axisTitleStyleName" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  设置轴标题格式时要使用的 CSS 类选择器的名称。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="axisStroke" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="mx.graphics.IStroke">
<description>
  指定轴的线条特性。此样式必须是一个 Stroke 类实例。  
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  容器内文本的对齐方式。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数控件的默认值都为 <codeph>left</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>。对于这些组件，只有将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Boolean">
<description>
  一个布尔值，表示是启用 (<codeph>true</codeph>) 还是禁用 (<codeph>false</codeph>) 字距调整。字距调整会调整某些字符对之间的间隔以提高可读性，并应只在必要时（例如使用大字体标题时）使用。仅嵌入的 FlashType 字体支持字距调整。某些字体（如宋体）和等宽字体（如 Courier New）不支持字距调整。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"bold"</codeph>。对于 LegendItem，默认为 <codeph>"bold"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>thickness</codeph> 属性。此属性指定字型边缘的粗细。可能值为从 -200 到 200 之间的数字。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  文本的高度，以像素为单位。除 ColorPicker 控件之外，所有控件的默认值都为 10。ColorPicker 控件的默认值为 11。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>sharpness</codeph> 属性。此属性指定字型边缘的清晰度。可能值为从 -400 到 400 之间的数字。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>gridFitType</codeph> 属性。可能值为 <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>)、<codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) 和<codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>)。 
  
  <p>仅当使用嵌入的 FlashType 字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="String">
<description>
  设置内部 TextField 的 <codeph>antiAliasType</codeph> 属性。可能值为 <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) 和 <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>)。 
  
  <p>默认值为 <codeph>"advanced"</codeph>。如果您使用的是嵌入的 FlashType 字体，此设置将启用 FlashType 呈示器。设置为 <codeph>"normal"</codeph> 可禁用 FlashType 呈示器。</p>
  
  <p>此样式对系统字体不起作用。</p>
  
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="uint">
<description>
  禁用时组件中文本的颜色。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.charts:AxisRenderer" playerVersion="Flash9" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;mx:AxisRenderer&gt;</code> tag inherits all the properties
  of its parent classes, and adds the following properties:</p>
  
  <pre>
  &lt;mx:AxisRenderer
    <strong>Properties</strong>
    axis="<i>IAxis</i>"
    chart="<i>ChartBase</i>"
    gutters="<i>Rectangle</i>"
    heightLimit="<i>Number</i>"
    labelRenderer="<i>IFactory</i>"
    labelFunction="<i>Function</i>"
    length="<i>Number</i>"
    otherAxes="<i>Array</i>"
    placement="right|left|bottom|top"
    ticks="<i>Array</i>"
    titleRenderer="<i>IFactory</i>"
     
    <strong>Styles</strong>
    axisStroke="<i>No default</i>"
    axisTitleStyleName="<i>No default</i>"
    canDropLabels="true|false"
    canStagger="true|false"
    labelAlign="center|left|right" (horizontal axes) or "center|top|bottom" (vertical axes)
    labelGap="3"
    labelRotation="<i>No default</i>"
    minorTickLength="<i>Default depends on axis</i>"
    minorTickPlacement="none|inside|outside|cross"
    minorTickStroke="<i>No default</i>"
    showLabels="true|false"
    showLine="true|false"
    tickLength="<i>Default depends on axis</i>"
    tickPlacement="inside|outside|cross|none"
    tickStroke="<i>No default</i>"
    verticalAxisTitleAlignment="flippedVertical|vertical"
  /&gt;
  </pre>
    
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IAxisRenderer</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:DualStyleObject</apiBaseClassifier></apiClassifierDef><apiDesc>
  您可以使用 AxisRenderer 类描述图表的水平和垂直轴。该轴负责沿其长度方向呈示标签、刻度线和标题。 
   
  <p>AxisRenderer 对象从闭合图表对象中继承了一些可视属性。标签和标题的文本格式默认采用呈示器的 CSS 文本属性。您可以通过在 AxisRenderer 或闭合图表中指定 <codeph>axisTitleStyleName</codeph> 来单独控制轴标题的格式设置。</p> 
  
  <p>在定位标签和调整标签大小时，AxisRenderer 仅占用极少的图表可用空间。如果标签占用的空间过大，AxisRenderer 会进行相应缩放。但是，AxisRenderer 不会过度缩小这些标签，以致使其显示为一个点。为了提高可读性，AxisRenderer 会根据需要最少缩放量的标签选用下列布局方法之一：</p>
   <ul>
    <li>以首尾相接的方式水平呈示标签。</li> 
    <li>以交错排列的方式分两行水平呈示标签。</li> 
    <li>旋转标签使其适应提供的空间。AxisRenderer 会根据需要将这些标签旋转一个最小角度，以避免标签重叠。最大旋转角度为 90 度。</li>
  </ul>
  
  <p>AxisRenderer 将调整图表的数据区域边界，以确保所绘制的标签不会超出此边界。</p>
  
  </apiDesc><example conref="HLOCChartExample.mxml"><swfblock conref="examples/HLOCChartExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.charts:AxisRenderer:AxisRenderer"><apiName>AxisRenderer</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts:AxisRenderer:adjustGutters"><apiName>adjustGutters</apiName><shortdesc>
      
      调整其布局以适应传入的装订线。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>定义装订线尺寸（包括调整）的矩形。
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>workingGutters</apiItemName><apiType value="flash.geom:Rectangle"/><apiDesc>定义要调整的装订线。
     
      </apiDesc></apiParam><apiParam><apiItemName>adjustable</apiItemName><apiType value="Object"/><apiDesc>包含四个布尔值（left=true/false、top=true/false、right=true/false 和 bottom=true/false），指示轴呈示器是否可以进一步调整各条装订线。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      调整其布局以适应传入的装订线。此方法可由闭合图表调用，用以确定装订线的大小以及对应的数据区域。此方法使得 AxisRenderer 能够基于新装订线计算布局，并根据需要进行调整。如果给定装订线是可调整的，则轴呈示器对装订线可以向内（使装订线变大）调整，但不能向外（使装订线变小）调整。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:AxisRenderer:chartStateChanged"><apiName>chartStateChanged</apiName><shortdesc>
      图表可调用此方法来指示其当前过渡状态的更改时间。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>oldState</apiItemName><apiType value="uint"/><apiDesc>表示旧状态的数字。
           </apiDesc></apiParam><apiParam><apiItemName>newState</apiItemName><apiType value="uint"/><apiDesc>表示新状态的数字。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      图表可调用此方法来指示其当前过渡状态的更改时间。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:AxisRenderer:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts:AxisRenderer:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts:AxisRenderer:protected:measure"><apiName>measure</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts:AxisRenderer:move"><apiName>move</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts:AxisRenderer:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="mx.charts:AxisRenderer:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="mx.charts:AxisRenderer:axis:get"><apiName>axis</apiName><shortdesc>
      与此呈示器相关的轴对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.charts.chartClasses:IAxis</apiValueClassifier></apiValueDef><apiDesc>
      与此呈示器相关的轴对象。此属性由闭合图表管理，当使用多个轴呈示器时，可显式设置此属性。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:protected:chart:get"><apiName>chart</apiName><shortdesc>
      此 AxisRenderer 的基本图表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.charts.chartClasses:ChartBase</apiValueClassifier></apiValueDef><apiDesc>
      此 AxisRenderer 的基本图表。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:gutters:get"><apiName>gutters</apiName><shortdesc> 
    
      axisRenderer 与附近图表的边之间的距离。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc> 
    
      axisRenderer 与附近图表的边之间的距离。此属性由图表自动分配，不应直接分配。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:heightLimit:get"><apiName>heightLimit</apiName><shortdesc> 
    
      轴呈示器可在图表中占据的最大空间（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
    
      轴呈示器可在图表中占据的最大空间（以像素为单位）。默认情况下，轴呈示器将在图表中占据尽可能多的空间，以便用完整大小显示其中所有的标签。如果设置了 heightLimit，AxisRenderer 将会缩短标签大小以保证轴的总大小低于 heightLimit。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:highlightElements:get"><apiName>highlightElements</apiName><shortdesc>
      指定是否在鼠标滑过时加亮图表元素（像 Series 一样）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      指定是否在鼠标滑过时加亮图表元素（像 Series 一样）。
      
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:horizontal:get"><apiName>horizontal</apiName><shortdesc>
      
      如果将轴呈示器用作水平轴，则为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      如果将轴呈示器用作水平轴，则为 <codeph>true</codeph>。此属性由闭合 CartesianChart 管理，不应直接设置。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      调用此属性可设置轴呈示器值的格式，以将其显示为标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      调用此属性可设置轴呈示器值的格式，以将其显示为标签。<codeph>labelFunction</codeph> 包含以下签名：
      <pre>
      function labelFunction(<i>axisRenderer</i>:IAxisRenderer, <i>label</i>:String):String { ... }
      </pre>
      
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:labelRenderer:get"><apiName>labelRenderer</apiName><shortdesc> 
      对用于呈示轴标签的工厂的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/></apiValueDef><apiDesc> 
      对用于呈示轴标签的工厂的引用。此类型必须实现 IDataRenderer 和 IFlexDisplayObject 接口。
      <p>AxisRenderer 将为轴上的每个标签创建此类的一个实例。将为 labelRenderer 的 data 属性分配一个 AxisLabel 对象，其中包含要呈示的值和标签。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:length:get"><apiName>length</apiName><shortdesc> 
      指定轴的长度（在屏幕坐标中）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
      指定轴的长度（在屏幕坐标中）。默认长度取决于许多因素，包括图表大小、标签大小、AxisRenderer 选用的标签布局方式，以及由图表的其他部分强加的任何要求。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:minorTicks:get"><apiName>minorTicks</apiName><shortdesc>
      
      此属性包含一个数组，用于指定 Flex 沿轴绘制次刻度标记的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      此属性包含一个数组，用于指定 Flex 沿轴绘制次刻度标记的位置。每个数组元素都包含一个介于 0 和 1 之间的值。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:placement:get"><apiName>placement</apiName><shortdesc>
      
      用于显示 axisRenderer 的图表的边。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
      用于显示 axisRenderer 的图表的边。垂直轴呈示器的合法值为 <codeph>"left"</codeph> 和 <codeph>"right"</codeph>，水平轴呈示器的合法值为 <codeph>"top"</codeph> 和 <codeph>"bottom"</codeph>。默认情况下，主轴放在左侧和顶部，辅轴放在右侧和底部。CartesianCharts 可自动保证将辅轴与主轴反向放置；例如，如果您已显式将主垂直轴放在了右侧，则辅垂直轴将自动变换到左侧。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:ticks:get"><apiName>ticks</apiName><shortdesc>
      
      包含一个数组，用于指定 Flex 沿轴绘制刻度线的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      包含一个数组，用于指定 Flex 沿轴绘制刻度线的位置。每个数组元素都包含一个介于 0 和 1 之间的值。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:titleRenderer:get"><apiName>titleRenderer</apiName><shortdesc> 
      对用于呈示轴标题的工厂的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/></apiValueDef><apiDesc> 
      对用于呈示轴标题的工厂的引用。此类型必须扩展 UIComponent 并实现 IDataRenderer 和 IFlexDisplayObject 接口。
      <p>AxisRenderer 将为轴标题创建此类的一个实例。将为 titleRenderer 的 data 属性分配要呈示的标题。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:AxisRenderer:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.charts:AxisRenderer:otherAxes:set"><apiName>otherAxes</apiName><shortdesc>
      
      一个轴 Array。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      一个轴 Array。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:CategoryAxis"><apiName>CategoryAxis</apiName><shortdesc>
  CategoryAxis 类允许图表表示由轴上的一组离散值组成的数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:CategoryAxis&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:CategoryAxis
    <strong>Properties</strong>
    categoryField="null"
    dataFunction="<i>No default</i>"
    dataProvider="<i>No default</i>"
    labelFunction="<i>No default</i>"
    padding="<i>Default depends on chart type</i>"
    ticksBetweenLabels="<i>true</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.charts.chartClasses:IAxis</apiBaseInterface><apiBaseClassifier>mx.charts.chartClasses:AxisBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  CategoryAxis 类允许图表表示由轴上的一组离散值组成的数据。通常可以使用 CategoryAxis 类定义一组沿图表的轴显示的标签。例如，按城市、年份、业务部门等呈示数据的图表。
  
  <p>您无需显式设置 CategoryAxis 上的 <codeph>dataProvider</codeph> 属性。图表中使用的 CategoryAxis 从包含图表中继承其 <codeph>dataProvider </codeph> 属性。</p>
  
  <p>尽管可以使用同一数据提供程序向图表提供数据以及向 CategoryAxis 提供类别，但如果 CategoryAxis 的数据提供程序是相对静态的，则 CategoryAxis 可以优化呈示。如有可能，请确保类别是相对静态的，并且将不断变化的数据存储在单独的数据提供程序中。</p>
  
  <p><codeph>dataProvider</codeph> 属性可以接受具有指定类别名称的属性的字符串数组或记录（对象）数组。如果指定了 <codeph>categoryField</codeph> 属性，则 CategoryAxis 认为数据提供程序是一个对象数组。如果 <codeph>categoryField</codeph> 属性值为 <codeph>null</codeph>，则 CategoryAxis 认为该数据提供程序是一个字符串数组。</p>
  
  </apiDesc><example conref="HLOCChartExample.mxml"><swfblock conref="examples/HLOCChartExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.charts:CategoryAxis:CategoryAxis"><apiName>CategoryAxis</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts:CategoryAxis:filterCache"><apiName>filterCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#filterCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>可从中读取和存储转换后的值的对象数组。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>包含过滤之前的值的缓存 Array 中所含的对象域。
     
      </apiDesc></apiParam><apiParam><apiItemName>filteredField</apiItemName><apiType value="String"/><apiDesc>存储过滤后的值的缓存 Array 中所含的对象域。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#filterCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:formatForScreen"><apiName>formatForScreen</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#formatForScreen()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>DataTip 的文本。
      
      </apiDesc></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>转换为 String 类型的值。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#formatForScreen()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:getLabelEstimate"><apiName>getLabelEstimate</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#getLabelEstimate()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier><apiDesc>AxisLabel 对象的数组。
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#getLabelEstimate()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:getLabels"><apiName>getLabels</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#getLabels()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier><apiDesc>AxisLabel 对象的数组。
      
      </apiDesc></apiReturn><apiParam><apiItemName>minimumAxisLength</apiItemName><apiType value="Number"/><apiDesc>轴的最小长度（以像素为单位）。轴长可以大于此值，但不可以小于此值。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#getLabels()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:invertTransform"><apiName>invertTransform</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#invertTransform()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/><apiDesc>包含转换后的值的对象。
      
      </apiDesc></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>轴的范围。此参数应介于 0 和 1 之间，0 表示轴的下限，1 表示轴的上限。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#invertTransform()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:mapCache"><apiName>mapCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#mapCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>可从中读取和存储转换后的值的对象数组。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>包含转换之前的值的缓存 Array 中所含的对象域。
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>存储转换后的值的缓存 Array 中所含的对象域。
     
      </apiDesc></apiParam><apiParam><apiItemName>indexValues</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果要映射的值是索引值，则此参数为 <codeph>true</codeph>；如果这些值是自然数据值，则此参数为 <codeph>false</codeph>。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#mapCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:preferDropLabels"><apiName>preferDropLabels</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#preferDropLabels()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>如果可以在不丢失数据的情况下删除标签，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。 
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#preferDropLabels()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:reduceLabels"><apiName>reduceLabels</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#reduceLabels()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier><apiDesc>通过减少标签的数目来解决重叠问题的新标签组。
      
      </apiDesc></apiReturn><apiParam><apiItemName>intervalStart</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>标签重叠处间隔的开始位置。
     
      </apiDesc></apiParam><apiParam><apiItemName>intervalEnd</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>标签重叠处间隔的结束位置。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#reduceLabels()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:transformCache"><apiName>transformCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#transformCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>可从中读取和存储映射后的值的对象 Array。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>包含映射之前的值的缓存 Array 中所含的对象域。
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>存储映射后的值的缓存 Array 中所含的对象域。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#transformCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:CategoryAxis:update"><apiName>update</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#update()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#update()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts:CategoryAxis:baseline:get"><apiName>baseline</apiName><shortdesc>
      
      轴的基线位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      轴的基线位置。当未指定最小值时，一些系列（如 ColumnSeries 或 AreaSeries）将使用此值确定填充区域的基础。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:categoryField:get"><apiName>categoryField</apiName><shortdesc>
      指定包含标签文本的数据提供程序的字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定包含标签文本的数据提供程序的字段。如果此属性为 <codeph>null</codeph>，则 CategoryAxis 假定 dataProvider 包含字符串数组。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:dataFunction:get"><apiName>dataFunction</apiName><shortdesc>
     指定一个方法，其返回值应可用作当前项目的 categoryValue。如果设置了此属性，则自定义数据函数的返回值优先于 categoryField。自定义 dataFunction 使用以下签名：function_name (axis:CategoryAxis, item:Object):Object { ...</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
     指定一个方法，其返回值应可用作当前项目的 categoryValue。如果设置了此属性，则自定义数据函数的返回值优先于 <codeph>categoryField</codeph>
     
     <p>自定义 <codeph>dataFunction</codeph> 使用以下签名：
      
     <pre>
     <i>function_name</i> (axis:CategoryAxis, item:Object):Object { ... }
     </pre>
     
     <codeph>axis</codeph> 是使用此 <codeph>dataFunction</codeph> 的当前轴，<codeph>item</codeph> 是所考虑的 dataProvider 中的项目。此函数返回一个对象。
     </p>
      
     <p>例如，自定义 <codeph>dataFunction</codeph> 的一种用法是从包含带有嵌套字段的项目的 dataProvider 中返回值。</p>
       
     </apiDesc><example>
     <pre>
     public function myFunction(axis:CategoryAxis,item:Object):Object {
          return(item.Country.State);
     }     
     </pre>
     
      
      </example></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      指定包含标签名称的数据源。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      指定包含标签名称的数据源。<codeph>dataProvider</codeph> 可以是字符串 Array、对象 Array 或者任何实现了 IList 或 ICollectionView 接口的对象。如果 <codeph>dataProvider</codeph> 是字符串 Array，请确保将 <codeph>categoryField</codeph> 属性设置为 <codeph>null</codeph>。如果 dataProvider 是对象 Array，请将 <codeph>categoryField</codeph> 属性设置为包含标签文本的字段的名称。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      指定一个函数，用于定义为 CategoryAxis 的 dataProvider 中的各个项目生成的标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      指定一个函数，用于定义为 CategoryAxis 的 <codeph>dataProvider</codeph> 中的各个项目生成的标签。如果未提供 <codeph>labelFunction</codeph>，则轴标签将默认为类别自身的值。
     
      <p>CategoryAxis 的 <codeph>labelFunction</codeph> 方法使用以下签名：</p>
      <pre>
      function <i>function_name</i>(<i>categoryValue</i>:Object, <i>previousCategoryValue</i>:Object, <i>axis</i>:CategoryAxis, <i>categoryItem</i>:Object):String { ... }
      </pre>
      
      <p>其中：</p>
      <ul>
       <li><codeph><i>categoryValue</i></codeph> 是所表示的类别的值。</li>
       <li><codeph><i>previousCategoryValue</i></codeph> 是轴上前一个类别的值。</li>
       <li><codeph><i>axis</i></codeph> 是将要呈示的 CategoryAxis。</li>
       <li><codeph><i>categoryItem</i></codeph> 是将要呈示的 <codeph>dataProvider</codeph> 中的项目。</li>
      </ul>
      
      <p>Flex 将返回的 String 显示为轴标签。</p>
     
      <p>如果未设置 <codeph>categoryField</codeph> 属性，则该值与 <codeph>categoryValue</codeph> 属性相同。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:padding:get"><apiName>padding</apiName><shortdesc>
      指定在屏幕上呈示数据时添加到轴上任意一端的填充。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.5
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定在屏幕上呈示数据时添加到轴上任意一端的填充。如果设置为 0，则将第一个类别映射到轴的最前端，将最后一个类别映射到末端。如果设置为 0.5，则保留类别一半宽度的填充，该类别应位于轴的前端与第一个类别之间以及最后一个类别和轴的末端之间的轴上。
      
      <p>这对于呈示内容超出类别范围的图表类型（如列和栏）很有用。但是，当用作 LineChart 或 AreaChart 中的 horizontalAxis 时，将被重置为 0。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:CategoryAxis:ticksBetweenLabels:get"><apiName>ticksBetweenLabels</apiName><shortdesc>
      指定轴上主刻度线相对于类别标签的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      指定轴上主刻度线相对于类别标签的位置。如果为 <codeph>true</codeph>，则刻度线（以及所有相关网格线）将显示在各类别之间。如果为 <codeph>false</codeph>，则刻度线将显示在类别的中间部分，与标签对齐。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:PlotChart"><apiName>PlotChart</apiName><shortdesc>
  PlotChart 控件使用两个值来表示每个数据点的数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  The <code>&lt;mx:PlotChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:PlotChart
  /&gt;
  </pre> 
  
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  PlotChart 控件使用两个值来表示每个数据点的数据。一个值用于确定数据点沿水平轴的位置，另一个值用于确定该点沿垂直轴的位置。
  
  <p>PlotChart 控件要求其 <codeph>series</codeph> 属性包含 PlotSeries 对象 Array。</p>
 
  </apiDesc><example conref="PlotChartExample.mxml"><swfblock conref="examples/PlotChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#PlotSeries"><linktext>mx.charts.series.PlotSeries</linktext></link></related-links><apiConstructor id="mx.charts:PlotChart:PlotChart"><apiName>PlotChart</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:PlotChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:CandlestickChart"><apiName>CandlestickChart</apiName><shortdesc>
  CandlestickChart 控件使用表示数据系列的高、低、开放和闭合值的一系列烛台图表来表示财务数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="maxColumnWidth" owner="mx.charts:CandlestickChart" playerVersion="Flash9" type="Number">
<description>
  指定所绘烛台图表的宽度，以像素为单位。实际使用的列宽是此属性与 <codeph>columnWidthRatio</codeph> 属性中的较小者。多个烛台图表系列按比例划分此空间。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnWidthRatio" owner="mx.charts:CandlestickChart" playerVersion="Flash9" type="Number">
<description>
  指定所绘烛台图表的宽度与水平轴的类别宽度的比例，此值是介于 0 和 1 之间的百分比值。值 1 表示占用整个空间，而值 .6 表示占用列可用空间的 60%。实际使用的烛台图表宽度是 <codeph>columnWidthRatio</codeph> 属性与 <codeph>maxColumnWidth</codeph> 属性中的较小者。多个烛台图表系列按比例划分此空间。默认值为 .65。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[ 
  The <code>&lt;mx:CandlestickChart&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:CandlestickChart
    <strong>Styles</strong>
    columnWidthRatio=".65"
    maxColumnWidth="<i>No default</i>"
  /&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:CartesianChart</apiBaseClassifier></apiClassifierDef><apiDesc>
  CandlestickChart 控件使用表示数据系列的高、低、开放和闭合值的一系列烛台图表来表示财务数据。每个烛台图表中垂直线段的顶部和底部分别表示数据点的高值和低值，而填充框的顶部和底部分别表示开放值和闭合值。每个烛台图表的填充方式不同，具体取决于数据点的结束值是高于还是低于起始值。
   
  <p>CandlestickChart 控件要求其 <codeph>series</codeph> 属性包含 CandlestickSeries 对象数组。</p>
   </apiDesc><example conref="CandlestickChartExample.mxml"><swfblock conref="examples/CandlestickChartExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.series.xml#CandlestickSeries"><linktext>mx.charts.series.CandlestickSeries</linktext></link></related-links><apiConstructor id="mx.charts:CandlestickChart:CandlestickChart"><apiName>CandlestickChart</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.charts:CandlestickChart:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef><apiDesc>
       模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.charts:DateTimeAxis"><apiName>DateTimeAxis</apiName><shortdesc>
  DateTimeAxis 类沿图表轴在最大值和最小值之间均匀地映射时间值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:DateTimeAxis&gt;</code> tag inherits all the properties
  of its parent classes and adds the following properties:</p>
  
  <pre>
  &lt;mx:DateTimeAxis
    <strong>Properties</strong>
    alignLabelsToUnits="true|false"
    dataUnits="milliseconds|seconds|minutes|hours|days|weeks|months|years"
    disabledDays="<i>Array; No default</i>"
    disabledRanges="<i>Array; No default</i>"
    displayLocalTime="<i>false</i>"
    interval="<i>Number</i>"
    labelUnits="milliseconds|seconds|minutes|hours|days|weeks|months|years"
    maximum="<i>Date</i>"
    minimum="<i>Date</i>"
    minorTickInterval="<i>Number</i>"
    minorTickUnits="milliseconds|seconds|minutes|hours|days|weeks|months|years"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.charts.chartClasses:NumericAxis</apiBaseClassifier></apiClassifierDef><apiDesc>
  DateTimeAxis 类沿图表轴在最大值和最小值之间均匀地映射时间值。当您提供自定义分析功能时，它可以绘制采用以下形式表示的值：Date 类的实例、表示自时间原点（1970 年 1 月 1 日子时，格林威治标准时间）至今的毫秒数，或 String 值。  
 
  <p>DateTimeAxis 可检查轴的最小值和最大值之间的范围，以此选择最合理的单位用于标记轴。该轴将选择最大单位，用来为给定范围生成合理数目的标签。可通过设置 <codeph>labelUnits</codeph> 属性来限定图表所需的单位集合，或明确指定应使用的单位。</p>
 
  <p>可显式指定最小值和最大值，或者通过检查将要在图表中呈示的值让该轴自动确定这两个值。默认情况下，DateTimeAxis 将选择可能的最小范围，以包含图表中表示的所有值。另外，还可以通过将 <codeph>autoAdjust</codeph> 属性设置为 <codeph>true</codeph> 来请求将最小值和最大值舍入到所有单位（毫秒、秒钟、分钟、小时、天、星期、月、年）。</p>
  
  <p>您可以指定每周中禁用的天数以及禁用的日期范围，以仅在轴上显示工作日，而不是显示最小值与最大值之间的每一天。它还会筛选数据，仅显示与图表中工作日对应的数据</p>
  </apiDesc><example conref="DateTimeAxisExample.mxml"><swfblock conref="examples/DateTimeAxisExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.charts.chartClasses.xml#IAxis"><linktext>mx.charts.chartClasses.IAxis</linktext></link></related-links><apiConstructor id="mx.charts:DateTimeAxis:DateTimeAxis"><apiName>DateTimeAxis</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.charts:DateTimeAxis:protected:buildMinorTickCache"><apiName>buildMinorTickCache</apiName><shortdesc>
      
      为此轴生成的次要刻度线数组构建位置 Array。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>0 和 1 之间的位置 Array 表示在轴最小值和最大值之间呈示次要刻度线的点。
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      
      为此轴生成的次要刻度线数组构建位置 Array。子类必须实现此函数。NumericAxis 自动调用此函数。应该访问 <codeph>minorTicks</codeph> 属性，而不是直接调用此函数。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:filterCache"><apiName>filterCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#filterCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>可从中读取和存储转换后的值的对象数组。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>包含过滤之前的值的缓存 Array 中所含的对象域。
     
      </apiDesc></apiParam><apiParam><apiItemName>filteredField</apiItemName><apiType value="String"/><apiDesc>存储过滤后的值的缓存 Array 中所含的对象域。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#filterCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatDays"><apiName>formatDays</apiName><shortdesc>
      当轴采用以天为单位的 labelUnits 呈示时，所使用的默认格式设置函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>已设置格式的标签。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>包含要设置格式的单位的 Date 对象。
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>包含先于当前数据点发生的数据点的 Date 对象。
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>用于呈示标签的 DateTimeAxis。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当轴采用以天为单位的 <codeph>labelUnits</codeph> 呈示时，所使用的默认格式设置函数。如果编写了自定义的 DateTimeAxis 类，则可以覆盖此方法，以提供备用的默认格式。
      
      <p>您无需直接调用此方法。Flex 会在呈示标签前调用此方法，以显示适当的 String。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatMilliseconds"><apiName>formatMilliseconds</apiName><shortdesc>
      当轴采用以毫秒为单位的 labelUnits 呈示时，所使用的默认格式设置函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>已设置格式的标签。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>包含要设置格式的单位的 Date 对象。
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>包含先于当前数据点发生的数据点的 Date 对象。
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>用于呈示标签的 DateTimeAxis。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当轴采用以毫秒为单位的 <codeph>labelUnits</codeph> 呈示时，所使用的默认格式设置函数。如果编写了自定义的 DateTimeAxis 类，则可以覆盖此方法，以提供备用的默认格式。
      
      <p>您无需直接调用此方法。Flex 会在呈示标签前调用此方法，以显示适当的 String。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatMinutes"><apiName>formatMinutes</apiName><shortdesc>
      当轴采用以分钟为单位的 labelUnits 呈示时，所使用的默认格式设置函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>已设置格式的标签。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>包含要设置格式的单位的 Date 对象。
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>包含先于当前数据点发生的数据点的 Date 对象。
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>用于呈示标签的 DateTimeAxis。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当轴采用以分钟为单位的 <codeph>labelUnits</codeph> 呈示时，所使用的默认格式设置函数。如果编写了自定义的 DateTimeAxis 类，则可以覆盖此方法，以提供备用的默认格式。
      
      <p>您无需直接调用此方法。Flex 会在呈示标签前调用此方法，以显示适当的 String。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatMonths"><apiName>formatMonths</apiName><shortdesc>
      当轴采用以月为单位的 labelUnits 呈示时，所使用的默认格式设置函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>已设置格式的标签。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>包含要设置格式的单位的 Date 对象。
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>包含先于当前数据点发生的数据点的 Date 对象。
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>用于呈示标签的 DateTimeAxis。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当轴采用以月为单位的 <codeph>labelUnits</codeph> 呈示时，所使用的默认格式设置函数。如果编写了自定义的 DateTimeAxis 类，则可以覆盖此方法，以提供备用的默认格式。
      
      <p>您无需直接调用此方法。Flex 会在呈示标签前调用此方法，以显示适当的 String。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatSeconds"><apiName>formatSeconds</apiName><shortdesc>
      当轴采用以秒为单位的 labelUnits 呈示时，所使用的默认格式设置函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>已设置格式的标签。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>包含要设置格式的单位的 Date 对象。
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>包含先于当前数据点发生的数据点的 Date 对象。
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>用于呈示标签的 DateTimeAxis。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当轴采用以秒为单位的 <codeph>labelUnits</codeph> 呈示时，所使用的默认格式设置函数。如果编写了自定义的 DateTimeAxis 类，则可以覆盖此方法，以提供备用的默认格式。
      
      <p>您无需直接调用此方法。Flex 会在呈示标签前调用此方法，以显示适当的 String。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:protected:formatYears"><apiName>formatYears</apiName><shortdesc> 
      当轴采用以年为单位的 labelUnit 呈示时，所使用的默认格式设置函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>已设置格式的标签。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>d</apiItemName><apiType value="Date"/><apiDesc>包含要设置格式的单位的 Date 对象。
      
      </apiDesc></apiParam><apiParam><apiItemName>previousValue</apiItemName><apiType value="Date"/><apiDesc>包含先于当前数据点发生的数据点的 Date 对象。
      
      </apiDesc></apiParam><apiParam><apiItemName>axis</apiItemName><apiOperationClassifier>mx.charts:DateTimeAxis</apiOperationClassifier><apiDesc>用于呈示标签的 DateTimeAxis。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      当轴采用以年为单位的 <codeph>labelUnits</codeph> 呈示时，所使用的默认格式设置函数。如果编写了自定义的 DateTimeAxis 类，则可以覆盖此方法，以提供备用的默认格式。
      
      <p>您无需直接调用此方法。Flex 会在呈示标签前调用此方法，以显示适当的 String。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:reduceLabels"><apiName>reduceLabels</apiName><shortdesc> 
      当在不发生重叠的情况下 AxisRenderer 无法清楚地显示标签时调用，像 Axis 对象减少标签组中标签的数目一样。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>通过减少标签的数目来解决重叠问题的新标签组。
      
      </apiDesc><apiOperationClassifier>mx.charts.chartClasses:AxisLabelSet</apiOperationClassifier></apiReturn><apiParam><apiItemName>intervalStart</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>标签重叠处间隔的开始位置。
     
      </apiDesc></apiParam><apiParam><apiItemName>intervalEnd</apiItemName><apiOperationClassifier>mx.charts:AxisLabel</apiOperationClassifier><apiDesc>标签重叠处间隔的结束位置。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      当在不发生重叠的情况下 AxisRenderer 无法清楚地显示标签时调用，像 Axis 对象减少标签组中标签的数目一样。此方法传递重叠的两个标签。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.charts:DateTimeAxis:transformCache"><apiName>transformCache</apiName><shortdesc conref="mx.charts.chartClasses.IAxis#transformCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>cache</apiItemName><apiType value="Array"/><apiDesc>可从中读取和存储映射后的值的对象 Array。
     
      </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiDesc>包含映射之前的值的缓存 Array 中所含的对象域。
     
      </apiDesc></apiParam><apiParam><apiItemName>convertedField</apiItemName><apiType value="String"/><apiDesc>存储映射后的值的缓存 Array 中所含的对象域。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.charts.chartClasses.IAxis#transformCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.charts:DateTimeAxis:alignLabelsToUnits:get"><apiName>alignLabelsToUnits</apiName><shortdesc>
      确定标签在轴上的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      确定标签在轴上的位置。
      <p>如果设置为 <codeph>false</codeph>，图表会始终将标签放置在轴的前端。例如，如果您每月放置一次标签，并且第一个数据点为 7 月 14 日，则您的第一个标签将出现在 7 月 14 日。如果设置为 <codeph>true</codeph>，Flex 会首先计算标签单位，然后在这些单位的第一个完整间隔处设置标签。例如，如果您的第一个数据点为 7 月 14 日，并且您的标签单位为月（显式设置或动态计算），则第一个标签将出现在 8 月 1 日。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:dataUnits:get"><apiName>dataUnits</apiName><shortdesc>
      指定您期望用于表示图表中数据的单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定您期望用于表示图表中数据的单位。该值可以是下列值之一：
      <ul>
       <li><codeph>milliseconds</codeph></li>
       <li><codeph>seconds</codeph></li>
       <li><codeph>minutes</codeph></li>
       <li><codeph>hours</codeph></li>
       <li><codeph>days</codeph></li>
       <li><codeph>weeks</codeph></li>
       <li><codeph>months</codeph></li>
       <li><codeph>years</codeph></li>
      </ul>
     
      <p>此值有两种用途。第一种，当选择合适的标签单位时，DateTimeAxis 选择的单位不会比使用该数据表示的单位小。如果 <codeph>dataUnits</codeph> 属性的值为 <codeph>days</codeph>，则无论最小值或最大值的范围是多少，每到第四个小时处图表都不会呈示标签。</p>
     
      <p>第二种，部分系列使用 <codeph>dataUnits</codeph> 属性的值来影响其呈示。特别是，大多数柱形系列（例如，ColumnSeries、BarSeries、CandlestickSeries 和 HLOCSeries）都使用 <codeph>dataUnits</codeph> 属性的值来确定列的呈示宽度。</p>
     
      <p>例如，如果将 ColumnChart 控件水平轴的 <codeph>labelUnits</codeph> 属性设置为 <codeph>weeks</codeph>，并将其 <codeph>dataUnits</codeph> 属性设置为 <codeph>days</codeph>，则 ColumnChart 将使用标签间距离的 1/7 作为宽度来呈示每列。</p>
     
      <p>将 <codeph>dataUnits</codeph> 属性设置为 <codeph>null</codeph> 时，柱形系列将按天呈示列，但 DateTimeAxis 在生成标签时，会选择适当的单位。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:disabledDays:get"><apiName>disabledDays</apiName><shortdesc>
      每周中要禁用的日期。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      每周中要禁用的日期。每月中除指定日期外，所有日期都被禁用。此数组中的元素可使用介于 0（星期日）到 6（星期六）之间的值。例如，如果设置值 <codeph>[ 0, 6 ]</codeph>，将禁用星期日和星期六。
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:disabledRanges:get"><apiName>disabledRanges</apiName><shortdesc>
      禁用一天或多天。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
      
      
      </apiDefaultValue></apiValueDef><apiDesc>
      禁用一天或多天。
     
      <p>此属性接受对象 Array 作为参数。此数组中的所有对象都是 Date 对象，用于指定要禁用的各个日期；也可以是一个包含 <codeph>rangeStart</codeph> 和（或）<codeph>rangeEnd</codeph> 属性的对象。这些属性的值描述了日期范围的边界。如果忽略其中任一属性，则认为在该方向上无范围限制。如果仅指定 <codeph>rangeStart</codeph>，则将禁用指定日期之后的所有日期（包括 <codeph>rangeStart</codeph> 日期）。如果仅指定 <codeph>rangeEnd</codeph>，则将禁用指定日期之前的所有日期（包括 <codeph>rangeEnd</codeph> 日期）。要禁用单个日期，请使用一个 Date 对象指定 Array 中的某个日期。</p>
     
      <p>以下示例将禁用下列日期：2006 年 1 月 11 日，从 2006 年 1 月 23 至同年 2 月 10 日，以及 2006 年 3 月 1 日及后续所有日期。</p>
     
      <p><codeph>disabledRanges="{[ new Date(2006,0,11), {rangeStart: new Date(2006,0,23), rangeEnd: new Date(2006,1,10)}, {rangeStart: new Date(2006,2,1)} ]}"</codeph></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:displayLocalTime:get"><apiName>displayLocalTime</apiName><shortdesc> 
      如果设置为 true，则 DateTimeAxis 会将所有日期值视为运行该应用程序的客户端计算机所在的时区中的时间。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
      如果设置为 <codeph>true</codeph>，则 DateTimeAxis 会将所有日期值视为运行该应用程序的客户端计算机所在的时区中的时间。如果设置为 <codeph>false</codeph>，则所有值都为通用时间（格林威治标准时间）。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:interval:get"><apiName>interval</apiName><shortdesc>
      指定轴上标签值之间的 labelUnits 数目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定轴上标签值之间的 <codeph>labelUnits</codeph> 数目。如果将此属性设置为 <codeph>null</codeph>，则 Flex 将计算此间隔。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:labelUnits:get"><apiName>labelUnits</apiName><shortdesc>
      轴生成标签所使用的单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      轴生成标签所使用的单位。默认情况下，DateTimeAxis 会考虑所有有效单位（<codeph>milliseconds</codeph>、<codeph>seconds</codeph>、<codeph>minutes</codeph>、<codeph>hours</codeph>、<codeph>days</codeph>、<codeph>weeks</codeph>、<codeph>months</codeph> 或 <codeph>years</codeph>）。
      
      <p>如果未设置 <codeph>labelUnits</codeph> 属性，则图表呈示标签所用的单位不能小于 <codeph>dataUnits</codeph> 属性的值。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:maximum:get"><apiName>maximum</apiName><shortdesc>
      指定轴标签的最大值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定轴标签的最大值。如果设置为 <codeph>null</codeph>，Flex 将指定图表中数据的最小值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:minimum:get"><apiName>minimum</apiName><shortdesc>
      指定轴标签的最小值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定轴标签的最小值。如果设置为 <codeph>null</codeph>，Flex 将指定图表中数据的最小值。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:minorTickInterval:get"><apiName>minorTickInterval</apiName><shortdesc> 
      指定轴上次刻度线间的 minorTickUnits 数目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
      指定轴上次刻度线间的 <codeph>minorTickUnits</codeph> 数目。如果将其设置为 <codeph>NaN</codeph>，则 DateTimeAxis 会自动计算此值。
      
      <p>通常会将 <codeph>minorTickInterval</codeph> 属性自动设置为 1。但是，如果 <codeph>minorTickUnits</codeph> 属性的单位与 <codeph>dataUnits</codeph> 属性相同（显式设置或隐式计算），则 <codeph>minorTickInterval</codeph> 属性为最大值 1 或 <codeph>dataInterval</codeph>。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:minorTickUnits:get"><apiName>minorTickUnits</apiName><shortdesc>
      轴在生成次刻度线时考虑使用的单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      轴在生成次刻度线时考虑使用的单位。默认情况下，DateTimeAxis 会考虑所有有效单位（<codeph>milliseconds</codeph>、<codeph>seconds</codeph>、<codeph>minutes</codeph>、<codeph>hours</codeph>、<codeph>days</codeph>、<codeph>weeks</codeph>、<codeph>months</codeph> 或 <codeph>years</codeph>）。
      
      <p>如果未设置此属性，则图表将确定 <codeph>minorTickUnits</codeph> 属性的值。如果标签间隔大于 1，则会将 <codeph>minorTickUnits</codeph> 属性设置为 <codeph>labelUnits</codeph> 属性的值，并将 <codeph>minorTickInterval</codeph> 属性设置为 1。如果标签间隔等于 1，则会将 <codeph>minorTickUnits</codeph> 属性设置为 <codeph>labelUnits</codeph> 属性的下一级单位。如此设置之后，<codeph>minorTickUnits</codeph> 属性将永远不会小于 <codeph>dataUnits</codeph> 属性的值。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:protected:requiredDescribedFields:get"><apiName>requiredDescribedFields</apiName><shortdesc>
      此轴涉及的 DescribeData 结构字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
      此轴涉及的 DescribeData 结构字段。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:unitSize:get"><apiName>unitSize</apiName><shortdesc>
      单个数据单位的宽度，以像素为单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      单个数据单位的宽度，以像素为单位。数据单位的类型由 <codeph>dataUnits</codeph> 属性的值确定。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.charts:DateTimeAxis:dataInterval:set"><apiName>dataInterval</apiName><shortdesc>
      指定图表中数据间的间隔（在 dataUnits 中指定）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
      指定图表中数据间的间隔（在 <codeph>dataUnits</codeph> 中指定）。
      <p>例如，如果将 <codeph>dataUnits</codeph> 属性设置为 <codeph>"hours"</codeph>，并将 <codeph>dataInterval</codeph> 属性设置为 4，则图表将假定您的数据每隔三小时发生一次。这将影响到一些系列（例如 ColumnSeries 和 CandlestickSeries）呈示其数据的方式，还会影响标签的自动选择方式。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="mx.charts.xml#DateTimeAxis/dataUnits"><linktext>dataUnits</linktext></link></related-links></apiValue><apiValue id="mx.charts:DateTimeAxis:parseFunction:set"><apiName>parseFunction</apiName><shortdesc> 
      指定自定义数据点的值的方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> 
      指定自定义数据点的值的方法。借助此属性，您可以指定接受值并返回 Date 对象的方法。然后，Date 对象将用于图表的 DateTimeAxis 对象中。这使您能够提供可自定义的日期输入字符串，并将其转换为 Date 对象，Flex 接下来会解释该对象以将其用于 DateTimeAxis。
      
      <p>Flex 只向分析方法传递一个参数。此参数是您为系列指定的数据点的值。通常，它是表示某种日期形式的 String。您无法覆盖此参数，也无法添加其他参数。</p>
      
      <p>此 Date 对象会立即转换成数值，因此为优化性能，自定义 parseFunctions 可以重复使用同一 Date 对象。默认情况下，DateTimeAxis 使用 ECMA 标准 <codeph>Date.parse()</codeph> 方法中的字符串分析功能。</p>
      
      以下示例使用采用 { yyyy, mm, dd } 格式定义数据对象的数据提供程序。由 <codeph>parseFunction</codeph> 指定的方法将使用这些值来创建可供轴使用的 Date 对象。
      
      <pre>
      &lt;mx:Script>
          import mx.collections.ArrayCollection;
          [Bindable] 
          public var aapl:ArrayCollection = new ArrayCollection([ 
              {date: "2005, 8, 1", close: 42.71},
              {date: "2005, 8, 2", close: 42.99},
              {date: "2005, 8, 3", close: 44}
          ]);
          
          public function myParseFunction(s:String):Date { 
              // Get an array of Strings from the comma-separated String passed in.
              var a:Array = s.split(",");
      
              // Create the new Date object. Note that the month argument is 0-based (with 0 being January).
              var newDate:Date = new Date(a[0],a[1]-1,a[2]);
              return newDate;
          }
      &lt;/mx:Script>
      &lt;mx:LineChart id="mychart" dataProvider="{aapl}" showDataTips="true">
          &lt;mx:horizontalAxis>
              &lt;mx:DateTimeAxis dataUnits="days" parseFunction="myParseFunction"/>
          &lt;/mx:horizontalAxis>
          &lt;mx:series>
              &lt;mx:LineSeries yField="close" xField="date" displayName="AAPL"/>
          &lt;/mx:series>
      &lt;/mx:LineChart>
      </pre>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>