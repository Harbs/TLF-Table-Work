<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			 xmlns:s="library://ns.adobe.com/flex/spark" 
			 xmlns:mx="library://ns.adobe.com/flex/mx" 
			 
			 minWidth="955" minHeight="600" 
			 applicationComplete="importApplicationCompleteHandler(event)">
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		.header {
			backgroundColor: #D6D6D6;
		}
	</fx:Style>
	
	<fx:Declarations>
		<fx:XML id="simpleTextMarkup">
			<flow:TextFlow version="3.0.0" xmlns:flow='http://ns.adobe.com/textLayout/2008' fontSize='11' 
						   paddingTop='8' paddingLeft='8' paddingRight='8'>
				<flow:p > <flow:img paddingRight="8" source="http://static0.therichestimages.com/wp-content/uploads/2014/03/mario-kart-8-trailer.jpg" width="100" height="100" float="right"></flow:img>
					Bacon ipsum. Permanent link to this comic: http://xkcd.com/876/ Image URL (for hotlinking/embedding): http://imgs.xkcd.com/comics/trapped.png
					Something else Something else Something else Something else Something else Something else Something else 
					
				</flow:p>
			</flow:TextFlow>
		</fx:XML>
		
		<fx:XML id="testTextFlow">
			<flow:TextFlow xmlns:flow="http://ns.adobe.com/textLayout/2008"
						   fontSize="11" paddingLeft="8" paddingRight="8" paddingTop="8"
						   paragraphSpaceBefore="6" textIndent="10" version="3.0.0">
				<flow:p clearFloats="start" paragraphSpaceBefore="inherit">
					<flow:img width="600" height="300" float="right"
							  source="http://imgs.xkcd.com/comics/trapped.png"/>
					<flow:span>Bacon ipsum. Permanent link to this comic: http://xkcd.com/876/ Image URL (for hotlinking/embedding): http://imgs.xkcd.com/comics/trapped.png</flow:span>
					<flow:TextFlow xmlns:flow="http://ns.adobe.com/textLayout/2008"
								   fontSize="15" version="3.0.0">  
						<flow:p paragraphSpaceBefore="inherit">Here is an embedded text flow.</flow:p>
					</flow:TextFlow>
				</flow:p>
			</flow:TextFlow>
		</fx:XML>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flash.text.engine.TextLine;
			import flash.utils.ByteArray;
			
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			
			import spark.components.Alert;
			import spark.core.SpriteVisualElement;
			import spark.events.TextOperationEvent;
			
			import flashx.textLayout.tlf_internal;
			import flashx.textLayout.compose.ComposeState;
			import flashx.textLayout.compose.IFlowComposer;
			import flashx.textLayout.compose.ParcelList;
			import flashx.textLayout.compose.StandardFlowComposer;
			import flashx.textLayout.compose.TextFlowLine;
			import flashx.textLayout.container.ColumnState;
			import flashx.textLayout.container.ContainerController;
			import flashx.textLayout.conversion.ITextExporter;
			import flashx.textLayout.conversion.ITextImporter;
			import flashx.textLayout.conversion.TextConverter;
			import flashx.textLayout.edit.EditManager;
			import flashx.textLayout.edit.ISelectionManager;
			import flashx.textLayout.edit.SelectionFormat;
			import flashx.textLayout.edit.SelectionManager;
			import flashx.textLayout.elements.FlowLeafElement;
			import flashx.textLayout.elements.InlineGraphicElement;
			import flashx.textLayout.elements.ParagraphElement;
			import flashx.textLayout.elements.SpanElement;
			import flashx.textLayout.elements.TableCellElement;
			import flashx.textLayout.elements.TableColElement;
			import flashx.textLayout.elements.TableElement;
			import flashx.textLayout.elements.TableRowElement;
			import flashx.textLayout.elements.TextFlow;
			import flashx.textLayout.events.CompositionCompleteEvent;
			import flashx.textLayout.events.FlowElementMouseEvent;
			import flashx.textLayout.events.ModelChange;
			import flashx.textLayout.events.SelectionEvent;
			import flashx.textLayout.events.StatusChangeEvent;
			import flashx.textLayout.formats.WhiteSpaceCollapse;
			import flashx.undo.UndoManager;
			
			public var textFlow:TextFlow;
			public var container:SpriteVisualElement;
			public var controller:ContainerController;
			
			use namespace tlf_internal;
			
			// embed table test
			[Embed(source="data/tableExample.xml",mimeType="application/octet-stream")]
			private var TableExample:Class;

			
			protected function importApplicationCompleteHandler(event:FlexEvent):void {
				//var tableByte:ByteArray = new TableExample();
				//var tableData:String = tableByte.readMultiByte(tableByte.length,"utf-8");
				//textFlow = importer.importToFlow(tableData);
				importToFlow(simpleTextMarkup);
				
				
				clearTextFlow();
			}
			
			/******************************************************
			 * Table
			 *****************************************************/
			
			public function addTable(rows:int = 1, columns:int = 1, selectable:Boolean = false, editable:Boolean = false):TableElement {
				var table:TableElement = new TableElement();
				var cell:TableCellElement = new TableCellElement();
				
				cell.textFlow = getTextFlowContent(null, selectable, editable);
				cell.colIndex = 0;
				cell.rowIndex = 0;
				
				table.columnCount = columns;
				table.addRow();
				table.addChild(cell);
				textFlow.addChild(table);
				
				/*var p:ParagraphElement = getParagraph();
				
				if (!p) {
					p = new ParagraphElement();
					var span:SpanElement = new SpanElement();
					span.text = "Paragraph before table";
					textFlow.addChild(p);
				}*/
				
				/* this should work
				table.columnCount = columns;
				textFlow.addChild(table);
				
				for (var i:int = 0; i < rows; i++) {
					addRow();
				}*/
				
				updateAllControllers();
				//p.addChild(table);
				
				
				return table;
			}
			
			public function addRow():TableRowElement {
				var table:TableElement = getTable();
				
				if (!table) {
					table = addTable();
				}
				
				table.addRow();
				
				var rowIndex:int = table.numRows - 1;
				var columnCount:int = table.numColumns;
				var cell:TableCellElement;
				var cellTextFlow:TextFlow;
				var para:ParagraphElement;
				var span:SpanElement;
				var selectable:Boolean = textFlow.interactionManager is SelectionManager;
				var editable:Boolean = textFlow.interactionManager is EditManager;
				
				for(var i:int=0;i<columnCount;i++){
					cell = new TableCellElement();
					
					cell.colIndex = i;
					cell.rowIndex = rowIndex;
					cell.textFlow = getTextFlowContent("R " + rowIndex + " C " + cell.colIndex, selectable, editable);
					
					table.addChild(cell);
				}
				
				updateAllControllers();
				
				return table.getRowAt(rowIndex);
			}
			
			public function addColumn():TableColElement {
				var table:TableElement = getTable();
				
				if (!table) {
					table = addTable();
				}
				
				/*var rowIdx:int = table.numRows;
				var cell:TableCellElement = new TableCellElement();
				var cellFlow:TextFlow = new TextFlow();
				var para:ParagraphElement = new ParagraphElement();
				var span:SpanElement = new SpanElement();
				
				cell.colIndex = 0;
				cell.rowIndex = rowIdx;
				span.text = "Row " + rowIdx + "; Col " + cell.colIndex;
				para.addChild(span);
				cellFlow.interactionManager = new SelectionManager();
				cellFlow.addChild(para);
				cell.textFlow = cellFlow;
				
				table.addChild(cell);*/
				
				var columnIndex:int = table.numColumns;
				/*var cell:TableCellElement = new TableCellElement();
				var cellFlow:TextFlow = new TextFlow();
				var para:ParagraphElement = new ParagraphElement();
				var span:SpanElement = new SpanElement();
				
				cell.colIndex = 0;
				cell.rowIndex = rowIndex;
				span.text = "Row " + rowIndex + "; Col " + cell.colIndex;
				para.addChild(span);
				cellFlow.interactionManager = new SelectionManager();
				cellFlow.addChild(para);
				cell.textFlow = cellFlow;*/
				
				table.addColumn();
				//table.addChild(cell);
				
				updateAllControllers();
				
				return table.getColumnAt(columnIndex);
			}
			
			public function removeTable():TableElement {
				var table:TableElement = getTable();
				
				if (table) {
					return textFlow.removeChild(table) as TableElement;
				}
				
				updateAllControllers();
				return null;
			}
			
			public function removeRow():TableRowElement {
				var table:TableElement = getTable();
				var rowElement:TableRowElement;
				
				if (table) {
					rowElement = table.removeRowAt(table.numRows - 1);
				}
				
				updateAllControllers();
				
				return rowElement;
			}
			
			public function removeColumn():TableColElement {
				var table:TableElement = getTable();
				
				if (table) {
					return table.removeColumnAt(table.numColumns - 1) as TableColElement;
				}
				
				updateAllControllers();
				
				return null;
			}
			
			public function selectCell():TableElement {
				var table:TableElement = getTable();
				
				if (table) {
					
				}
				
				return null;
			}
			
			public function selectCells():TableElement {
				var table:TableElement = getTable();
				
				if (table) {
					
				}
				
				return null;
			}
			
			public function selectColumn():TableElement {
				var table:TableElement = getTable();
				
				if (table) {
					
				}
				
				return null;
			}
			
			public function selectRow():TableElement {
				var table:TableElement = getTable();
				
				if (table) {
					
				}
				
				return null;
			}
			
			public function joinCells():TableElement {
				var table:TableElement = getTable();
				
				if (table) {
					
				}
				
				return null;
			}
			
			
			/******************************************************
			 * Bounds
			 *****************************************************/
			
			public function showTextLineBounds():void
			{
				var i:int;
				var j:int;
				var b1:Rectangle;
				var b2:Rectangle;
				var fc:IFlowComposer = textFlow.flowComposer;
				var controller:ContainerController = textFlow.flowComposer.getControllerAt(0);
				var color:uint = 0x00dd00;
				var method:int = 0;
				var clearedOnce:Boolean;
				
				for (i = 0; i < fc.numLines; i++) {
					var _tfl:TextFlowLine = fc.getLineAt(i);
					var _tl:TextLine = _tfl.getTextLine();
					b1 = _tfl.getBounds();
					b2 = _tl.getBounds(_tfl.controller.container);
					
					if (method==1) {
						var g:Sprite = new Sprite;
						g.graphics.lineStyle(1, color, 0.6);
						g.graphics.drawRect(0, Math.max(-b1.height,-_tfl.height), b1.width, b1.height);
						removeAllChildren(_tl);
						_tl.addChild(g);
					}
					else {
						var graphics:Graphics = _tfl.controller.container.graphics;
						if (!clearedOnce && graphics.readGraphicsData().length!=0) {
							graphics.clear();
							clearedOnce = true;
						}
						graphics.beginFill(color);
						graphics.drawRect(b1.x, b1.y, b1.width, b1.height);
						graphics.endFill();
					}
				}
			}
			
			public function showAtomBounds():void
			{
				var i:int;
				var j:int;
				var b1:Rectangle;
				var fc:IFlowComposer = textFlow.flowComposer;
				var color:uint = 0x00dd00;
				
				for (i = 0; i < fc.numLines; i++)
				{
					var _tfl:TextFlowLine = fc.getLineAt(i);
					var _tl:TextLine = _tfl.getTextLine();
					
					for (j = 0; j < _tl.atomCount; j++)
					{
						var textBlockBeginIndex:int = _tl.getAtomTextBlockBeginIndex(j);
						var textFlowPosition:int = _tfl.paragraph.getAbsoluteStart()+_tl.getAtomTextBlockBeginIndex(j);
						b1 = _tl.getAtomBounds(j);
						var g:Sprite = new Sprite;
						g.graphics.lineStyle(1, color,0.6)
						g.graphics.drawRect(b1.x, b1.y , b1.width, b1.height);
						_tl.addChild(g);
						
						var leafElement:FlowLeafElement = textFlow.findLeaf(textFlowPosition);
						var leafRelativePosition:int = textFlowPosition-leafElement.getAbsoluteStart();
						var leafCharacter:String = leafElement.text.substr(leafRelativePosition,1);
						//trace(i,j,textBlockBeginIndex,textFlowPosition,b1);
					}
				}
			}
			
			public function showParagraphBounds():Rectangle {
				var bounds:Rectangle = new Rectangle();
				var paragraph:ParagraphElement = getParagraph();
				var container:ContainerController = paragraph.getEnclosingController(0);
				var sprite:Sprite = container.container;
				var pos:int = paragraph.getAbsoluteStart();
				var endPos:int = pos + paragraph.textLength;
				var color:int = 0x00FF00;
				
				while (pos < endPos) {
					var line:TextFlowLine = paragraph.getTextFlow().flowComposer.findLineAtPosition(pos);
					//bounds = bounds.union(line.getTextLine().getBounds(this));
					bounds = bounds.union(line.getTextLine().getBounds(sprite));
					pos += line.textLength;
				}
				
				sprite.graphics.clear();
				sprite.graphics.beginFill(color);
				sprite.graphics.drawRect(bounds.left, bounds.top, bounds.width, bounds.height);
				sprite.graphics.endFill();
				sprite.graphics.lineStyle(1, 0x0);
				sprite.graphics.moveTo(bounds.left - 1, bounds.top - 1);
				sprite.graphics.lineTo(bounds.right + 1, bounds.top - 1);
				sprite.graphics.lineTo(bounds.right + 1, bounds.bottom);
				sprite.graphics.lineTo(bounds.left - 1, bounds.bottom);
				sprite.graphics.lineTo(bounds.left - 1, bounds.top - 1);
				
				return bounds;
			}
			
			public function showTableBounds():Rectangle {
				var table:TableElement = getTable();
				
				if (!table) return null;
				
				var bounds:Rectangle = new Rectangle();
				var lineBounds:Rectangle = new Rectangle();
				var lineBounds2:Rectangle = new Rectangle();
				var container:ContainerController = table ? table.getEnclosingController(0) :null;
				var sprite:Sprite = container.container;
				var pos:int = table.getAbsoluteStart();
				var endPos:int = pos + table.textLength;
				var color:int = 0x00FF00;
				
				while (pos < endPos) {
					//var line:TextFlowTableBlock = table.getTextFlow().flowComposer.findLineAtPosition(pos) as TextFlowTableBlock;
					var line:TextFlowLine = table.getTextFlow().flowComposer.findLineAtPosition(pos);
					//bounds = bounds.union(line.getTextLine().getBounds(this));
					lineBounds = new Rectangle(line.x, line.y, line.targetWidth, line.height);
					lineBounds2 = line.getTextLine().getBounds(sprite);
					bounds = bounds.union(lineBounds2);
					pos += line.textLength;
				}
				
				bounds.y = table.totalRowDepth;
				bounds.width = table.tableWidth;
				bounds.height = table.height;
				
				sprite.graphics.clear();
				sprite.graphics.beginFill(color);
				sprite.graphics.drawRect(bounds.left, bounds.top, bounds.width, bounds.height);
				sprite.graphics.endFill();
				sprite.graphics.lineStyle(1, 0x0);
				sprite.graphics.moveTo(bounds.left - 1, bounds.top - 1);
				sprite.graphics.lineTo(bounds.right + 1, bounds.top - 1);
				sprite.graphics.lineTo(bounds.right + 1, bounds.bottom);
				sprite.graphics.lineTo(bounds.left - 1, bounds.bottom);
				sprite.graphics.lineTo(bounds.left - 1, bounds.top - 1);
				
				return bounds;
			}
			
			public function showParcelBounds():void {
				var flowComposer:StandardFlowComposer = textFlow.flowComposer as StandardFlowComposer;
				var container:ContainerController = flowComposer.getControllerAt(flowComposer.numControllers-1);
				var columnState:ColumnState = container.columnState;
				var composeState:ComposeState = flowComposer.getComposeState();
				var parcelList:ParcelList = composeState.parcelList;
				var backgroundManager:Object = textFlow.getBackgroundManager();
				var blocks:Array = textFlow.getBackgroundManager()?textFlow.backgroundManager.getShapeRectArray():[];
				var selectionSprite:Sprite = container.getSelectionSprite(true) as Sprite;
				var backgroundSprite:Shape = container.getBackgroundShape() as Shape;
				
				return;
				var bounds:Rectangle = container.getContentBounds();
				var g:Graphics = backgroundSprite.graphics;
				g.clear();
				g.beginFill(0x00ff00);
				g.drawRect(bounds.left, bounds.top, bounds.width, bounds.height);
				g.endFill();
				g.lineStyle(1, 0x0);
				g.moveTo(bounds.left - 1, bounds.top - 1);
				g.lineTo(bounds.right + 1, bounds.top - 1);
				g.lineTo(bounds.right + 1, bounds.bottom);
				g.lineTo(bounds.left - 1, bounds.bottom);
				g.lineTo(bounds.left - 1, bounds.top - 1);
				
			}
			
			/******************************************************
			 * Selection
			 *****************************************************/
			
			public function highlightOneCharacter():void {
				var selObj:Shape = new Shape();
				
				var flowComposer:IFlowComposer = textFlow.flowComposer;
				var line:TextFlowLine = flowComposer.getLineAt(1);
				var selFormat:SelectionFormat = textFlow.interactionManager ? textFlow.interactionManager.currentSelectionFormat : null;
				//if (!selFormat) {
				selFormat = new SelectionFormat(0xFF0000, 1, "difference", 0xFF0000, 1, "difference");
				//}
				var selectionAbsoluteStart:int = 0;
				var selectionAbsoluteEnd:int = 1;
				var controller:ContainerController = flowComposer.getControllerAt(0);
				var container:Sprite = controller.container;
				
				controller.addSelectionShapes(selFormat, 0, 10);
				//line.hiliteBlockSelection(selObj, selFormat, textFlow.flowComposer.getControllerAt(0).container as DisplayObject, selectionAbsoluteStart, selectionAbsoluteEnd, null, null);
				
			}
			
			public function selectRange():void {
				var flowComposer:IFlowComposer = textFlow.flowComposer;
				textFlow.interactionManager = new SelectionManager;
				var interactionManager:ISelectionManager = textFlow.interactionManager;
				interactionManager.selectRange(10, 22); // this is not working? 
			}
			
			/******************************************************
			 * Misc
			 *****************************************************/
			
			public function updateAllControllers():void {
				textFlow.flowComposer.updateAllControllers();
				
				if (updatingTextFlow) return;
				exportTextFlow(textFlow);
			}
			
			public function graphicStatusChanged(event:StatusChangeEvent):void {
				var img:InlineGraphicElement = event.element as InlineGraphicElement;
				updateAllControllers();
				
				if (event.status == "ready" || event.status == "sizePending") {
					
					var mirror:IEventDispatcher = event.element.getEventMirror();
					mirror.addEventListener(FlowElementMouseEvent.MOUSE_DOWN,traceEvent);
					mirror.addEventListener(FlowElementMouseEvent.MOUSE_UP,traceEvent);
					mirror.addEventListener(FlowElementMouseEvent.MOUSE_MOVE,traceEvent);
					mirror.addEventListener(FlowElementMouseEvent.ROLL_OVER,traceEvent);
					mirror.addEventListener(FlowElementMouseEvent.ROLL_OUT,traceEvent);
					mirror.addEventListener(FlowElementMouseEvent.CLICK,traceEvent);
					
					textFlow.flowComposer.updateAllControllers();
				}
			}
			
			public function elementModified(event:Event):void
			{
				//trace("event: " + event.type);
			}
			
			public function traceEvent(event:FlowElementMouseEvent):void
			{
				//trace(event.flowElement.defaultTypeName+ " " + getTimer() + " " + event.toString() + event.originalEvent.toString());
				
				// attempt to add a cursor over an image / table
				if (event.type==FlowElementMouseEvent.ROLL_OVER || 
					event.type==FlowElementMouseEvent.MOUSE_MOVE) {
					Mouse.cursor = MouseCursor.HAND;
				}
				else if (event.type==FlowElementMouseEvent.ROLL_OUT) {
					Mouse.cursor = MouseCursor.AUTO;
				}
			}
			
			public function addParagraph(text:String = null):void {
				var paragraph:ParagraphElement = new ParagraphElement();
				var span:SpanElement = new SpanElement();
				
				if (text) {
					span.text = text;
				}
				else {
					span.text = "This is a paragraph\nSecond line.";
				}
				
				paragraph.backgroundAlpha = 0.2;
				paragraph.backgroundColor = 0x0000FF;
				
				paragraph.addChild(span);
				
				textFlow.addChild(paragraph);
				
				updateAllControllers();
			}
			public function getTextFlowContent(text:String = null, selectable:Boolean = false, editable:Boolean = false):TextFlow {
				var textFlowContent:TextFlow = new TextFlow();
				var paragraph:ParagraphElement = new ParagraphElement();
				var span:SpanElement = new SpanElement();
				
				if (text) {
					span.text = text;
				}
				else {
					span.text = "This is cell";
				}
				
				paragraph.backgroundAlpha = 0.2;
				paragraph.backgroundColor = 0xFF0000;
				paragraph.addChild(span);
				
				if (editable) {
					textFlowContent.interactionManager = new EditManager(new UndoManager);
				}
				else if (selectable) {
					textFlowContent.interactionManager = new SelectionManager();
				}
				
				textFlowContent.addChild(paragraph);
				
				return textFlowContent;
			}
			
			public function getParagraph():ParagraphElement {
				var paragraph:ParagraphElement;
				
				if (textFlow.interactionManager) {
					var cursor:int = Math.max(0, textFlow.interactionManager.anchorPosition);
					paragraph = textFlow.findAbsoluteParagraph(cursor);
				}
				
				if (!paragraph) {
					var items:Array = textFlow.getElementsByTypeName("p");
					paragraph = items.length ? items[0] : null;
				}
				
				return paragraph;
			}
			
			public function getTable():TableElement {
				var table:TableElement;
				
				if (textFlow.interactionManager) {
					var cursor:int = Math.max(0, textFlow.interactionManager.anchorPosition);
					//table = textFlow.findAbsoluteParagraph(cursor);
				}
				
				if (!table) {
					var items:Array = textFlow.getElementsByTypeName("table");
					table = items.length ? items[0] : null;
				}
				
				return table;
			}
			
			public function removeAllChildren(sprite:DisplayObjectContainer):void {
				
				sprite.removeChildren();
				if (sprite.numChildren) {
				}
			}
			
			public function removeShapes():void {
				var paragraph:ParagraphElement = getParagraph();
				if (!paragraph) return;
				var bounds:Rectangle = new Rectangle();
				var container:ContainerController = paragraph.getEnclosingController(0);
				var sprite:Sprite = container.container;
				
				var i:int;
				var j:int;
				var b1:Rectangle;
				var fc:IFlowComposer = textFlow.flowComposer;
				var color:uint = 0x00dd00;
				
				for (i = 0; i < fc.numLines; i++)
				{
					var _tfl:TextFlowLine = fc.getLineAt(i);
					var _tl:TextLine = _tfl.getTextLine();
					removeAllChildren(_tl);
				}
				
				if (sprite && sprite.graphics.readGraphicsData().length!=0) {
					sprite.graphics.clear();
				}
			}
			
			public function clearTextFlow():void {
				//textFlow.setTextLength(0);
				//textFlow.deleteContainerText(0, textFlow.textLength);
				
				if (textFlow.numChildren) {
					textFlow.replaceChildren(0, textFlow.numChildren);
				}
				
				removeShapes();
				
				updateAllControllers();
				
				if (textFlow.interactionManager) {
					textFlow.interactionManager.selectAll();
					textFlow.interactionManager.setFocus();
				}
			}
			
			public var updatingTextFlow:Boolean;
			
			protected function textFlowMarkup_changeHandler(event:TextOperationEvent):void {
				
				updatingTextFlow = true;
				importToFlow(textFlowMarkup.text);
				updatingTextFlow = false;
			}
			
			public function importToFlow(value:String):TextFlow {
				var errors:Vector.<String>;
				var importer:ITextImporter;
				var newTextFlow:TextFlow;
				
				importer = TextConverter.getImporter(TextConverter.TEXT_LAYOUT_FORMAT);
				importer.throwOnError = false;
				
				
				newTextFlow = importer.importToFlow(value);
				errors = importer.errors;
				
				if (!errors && newTextFlow) {
					setupTextFlow(newTextFlow);
				}
				if (errors && errors.length) {
					textFlowMarkupErrors.text = errors.join("\n");
				}
				else {
					textFlowMarkupErrors.text = "";
				}
				
				return newTextFlow;
			}
			
			/**
			 * Adds listeners to the text flow and adds it to the stage
			 **/
			public function setupTextFlow(newTextFlow:TextFlow):void {
				if (!newTextFlow) return;
				
				if (textFlow) {
					textFlow.removeEventListener(CompositionCompleteEvent.COMPOSITION_COMPLETE, compositionComplete);
					textFlow.removeEventListener(ModelChange.ELEMENT_MODIFIED, graphicStatusChanged);
					textFlow.removeEventListener(StatusChangeEvent.INLINE_GRAPHIC_STATUS_CHANGE, graphicStatusChanged);
					textFlow.removeEventListener(SelectionEvent.SELECTION_CHANGE, selectionChange);
				}
				
				textFlow = newTextFlow;
				
				textFlow.addEventListener(CompositionCompleteEvent.COMPOSITION_COMPLETE, compositionComplete, false, 0, true);
				textFlow.addEventListener(ModelChange.ELEMENT_MODIFIED, elementModified, false, 0, true);
				textFlow.addEventListener(StatusChangeEvent.INLINE_GRAPHIC_STATUS_CHANGE, graphicStatusChanged, false, 0, true);
				textFlow.addEventListener(SelectionEvent.SELECTION_CHANGE, selectionChange, false, 0, true);
				
				if (!container) {
					container = new SpriteVisualElement();
				}
				
				if (!controller) {
					controller = new ContainerController(container, group.width, group.height);
				}
				
				// Add controller to text flow; add container to stage and display text
				textFlow.flowComposer.addController(controller);
				
				//textFlow.interactionManager = new SelectionManager();
				textFlow.interactionManager = new EditManager(new UndoManager);
				
				group.addElement(container as IVisualElement);
				
				updateAllControllers();
			}
			
			/**
			 * Composition complete
			 **/
			protected function compositionComplete(event:CompositionCompleteEvent):void
			{
				if (updatingTextFlow) return;
				exportTextFlow(textFlow);
			}
			
			/**
			 * Selection change
			 **/
			protected function selectionChange(event:SelectionEvent):void
			{
				
			}
			
			public function notImplemented():void
			{
				Alert.show("Not implemented", "Message");
			}
			
			public function exportTextFlow(textFlow:TextFlow):void
			{
				var exporter:ITextExporter = TextConverter.getExporter(TextConverter.TEXT_LAYOUT_FORMAT);
				exporter.throwOnError = false;
				textFlow.whiteSpaceCollapse = WhiteSpaceCollapse.COLLAPSE;
				textFlow.setStyle("whiteSpaceCollapse", WhiteSpaceCollapse.COLLAPSE);
				
				var object:Object = exporter.export(textFlow, TextConverter.TEXT_LAYOUT_FORMAT);
				textFlowMarkup.text = object is XML ? XML(object).toXMLString() : null;
				textFlowMarkupErrors.text = exporter.errors ? exporter.errors.join("\n") : null;				
				
			}
			
		]]>
	</fx:Script>
	
	<!--<s:VGroup height="100%" width="100%">-->
		<s:HGroup width="100%" minHeight="400" top="50" left="10" right="10">
			<s:VGroup width="100%" height="100%">
				<s:HGroup width="100%" gap="1" >
					<s:Label text="TextFlow" width="100%" styleName="header"/>
					<s:Label text="clear" click="clearTextFlow()" styleName="header"/>					
				</s:HGroup>  
				<s:BorderContainer id="group" width="100%" height="100%" minHeight="250"/>
				<s:Label text="TextFlow Markup" width="100%" styleName="header"/>
				<s:TextArea id="textFlowMarkup" width="100%" height="100%" 
							focusThickness="0" change="textFlowMarkup_changeHandler(event)"/>
				<s:Label text="TextFlow Markup Errors" width="100%" styleName="header"
							/>
				<s:TextArea id="textFlowMarkupErrors" width="100%" height="30%" color="red"
							/>
			</s:VGroup>
			<s:VGroup width="100%" height="100%">
				<s:Label text="Add Elements" width="100%" styleName="header"/>
				<s:HGroup>
					<mx:LinkButton label="Table" click="addTable(3, 3)"/>
					<mx:LinkButton label="Selectable Table" click="addTable(3, 3, true)"/>
					<mx:LinkButton label="Editable Table" click="addTable(3, 3, false, true)"/>
					<mx:LinkButton label="Row" click="addRow()"/>
					<mx:LinkButton label="Column" click="addColumn()"/>
					<mx:LinkButton label="Paragraph" click="addParagraph()"/>
					<mx:LinkButton label="Span" click="notImplemented()"/>
				</s:HGroup>
				<s:Label text="Remove Elements" width="100%" styleName="header"/>
				<s:HGroup>
					<mx:LinkButton label="Table" click="removeTable()"/>
					<mx:LinkButton label="Row" click="removeRow()"/>
					<mx:LinkButton label="Column" click="removeColumn()"/>
					<mx:LinkButton label="Paragraph" />
					<mx:LinkButton label="Span" />
					<mx:LinkButton label="Shapes" click="removeShapes()"/>
					<mx:LinkButton label="All" click="clearTextFlow()"/>
				</s:HGroup>
				<s:Label text="Select Elements" width="100%" styleName="header"/>
				<s:HGroup>
					<mx:LinkButton label="Table" click="selectRange()"/>
					<mx:LinkButton label="Row" click="selectRow()"/>
					<mx:LinkButton label="Column" click="selectColumn()"/>
					<mx:LinkButton label="Cell" click="selectCell()"/>
					<mx:LinkButton label="Cells" click="selectCells()"/>
				</s:HGroup>
				<s:Label text="Show Boundaries" width="100%" styleName="header"/>
				<s:HGroup>
					<mx:LinkButton label="Paragraph" click="showParagraphBounds()"/>
					<mx:LinkButton label="Table" click="showTableBounds()"/>
					<mx:LinkButton label="Parcels" click="showParcelBounds()"/>
					<mx:LinkButton label="TextLines" click="showTextLineBounds()"/>
					<mx:LinkButton label="Atoms" click="showAtomBounds()"/>
				</s:HGroup>
				<s:Label text="Misc" width="100%" styleName="header"/>
				<s:HGroup>
					<mx:LinkButton label="Join Cells" click="joinCells()"/>
					<mx:LinkButton label="Select Range" click="selectRange()"/>
					<mx:LinkButton label="Update all controllers" click="updateAllControllers()"/>
				</s:HGroup>
			</s:VGroup>
		</s:HGroup>
	<!--</s:VGroup>-->
	
	<!--
	<s:Label text="Hello There"/>-->
	
</s:Application>
